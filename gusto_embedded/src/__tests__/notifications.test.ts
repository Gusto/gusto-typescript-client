/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Notifications Get Notifications Notification Uuid Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-notifications-notification_uuid-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.notifications.get({
    notificationUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "7b1d0df1-6403-4a06-8768-c1dd7d24d27a",
    companyUuid: "88f7cca1-dcad-4d20-84db-7fb80303d69f",
    title: "Action required: Additional information needed to process payroll",
    message:
      "If we do not receive this information as soon as possible, your payroll may not be processed on time.",
    category: "information_request",
    actionable: true,
    publishedAt: "2022-01-01T00:00:00.000Z",
    dueAt: "2022-02-01T00:00:00.000Z",
    resources: [
      {
        entityType: "Employee",
        entityUuid: "21b6f9ce-0ac4-4745-8d8a-127f8c0f00f2",
      },
    ],
  });
});

test("Notifications Get Notifications Notification Uuid Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-notifications-notification_uuid-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.notifications.get({
    notificationUuid: "<id>",
  });
  expect(result).toBeDefined();
});

test("Notifications Get Notifications Notification Uuid Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-notifications-notification_uuid-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.notifications.get({
    notificationUuid: "<id>",
  });
  expect(result).toBeDefined();
});

test("Notifications Get Notifications Notification Uuid Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-notifications-notification_uuid-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.notifications.get({
    notificationUuid: "<id>",
  });
  expect(result).toBeDefined();
});
