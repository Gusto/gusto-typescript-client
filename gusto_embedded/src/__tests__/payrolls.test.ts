/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Payrolls Post V1 Companies Company Id Payrolls Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-payrolls-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.create({
    companyId: "<id>",
    requestBody: {
      offCycle: true,
      offCycleReason: "Dismissed employee",
      startDate: "<value>",
      endDate: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payrollDeadline: new Date("2022-02-18T22:00:00Z"),
    checkDate: "2021-02-22",
    processed: false,
    processedDate: "<value>",
    calculatedAt: "<value>",
    uuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    payrollUuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    companyUuid: "6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb",
    offCycle: true,
    offCycleReason: "Bonus",
    autoPilot: false,
    external: false,
    finalTerminationPayroll: false,
    withholdingPayPeriod: "Every other week",
    skipRegularDeductions: true,
    fixedWithholdingRate: true,
    payPeriod: {
      startDate: "2021-02-01",
      endDate: "2021-02-15",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
    },
    payrollStatusMeta: {
      cancellable: false,
      expectedCheckDate: "2022-02-22",
      initialCheckDate: "2022-02-22",
      expectedDebitTime: "2022-02-18T22:00:00Z",
      payrollLate: false,
      initialDebitCutoffTime: "2022-02-18T22:00:00Z",
    },
    employeeCompensations: [
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7067",
        excluded: false,
        paymentMethod: "Direct Deposit",
        memo: null,
        fixedCompensations: [],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "0.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "0.000",
            jobUuid: "9d3760f0-d1f9-4700-8817-0fe2dce5cf23",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "b5eef9a9-4a87-4649-a80d-14878c05f44e",
            compensationMultiplier: 2,
          },
          {
            name: "Regular Hours",
            hours: "0.000",
            jobUuid: "332bd171-9efc-432b-abbb-a75c9dba706a",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "0.000",
            jobUuid: "ca9b3dc1-57ac-4736-901a-9b1c9634b9d5",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "1bad01e2-140c-49ed-9542-2388ce4a19b3",
            compensationMultiplier: 2,
          },
        ],
        paidTimeOff: [],
      },
    ],
    createdAt: new Date("2022-02-01T22:00:00Z"),
    processingRequest: null,
  });
});

test("Payrolls Post V1 Companies Company Id Payrolls Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-payrolls-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.create({
    companyId: "<id>",
    requestBody: {
      offCycle: true,
      offCycleReason: "Bonus",
      startDate: "<value>",
      endDate: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Payrolls Post V1 Companies Company Id Payrolls Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-payrolls-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.create({
    companyId: "<id>",
    requestBody: {
      offCycle: true,
      offCycleReason: "Transition from old pay schedule",
      startDate: "<value>",
      endDate: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Payrolls Post V1 Companies Company Id Payrolls Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-payrolls-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.create({
    companyId: "<id>",
    requestBody: {
      offCycle: false,
      offCycleReason: "Bonus",
      startDate: "<value>",
      endDate: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Payrolls Get V1 Companies Company Id Payrolls Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-payrolls-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.getAll({
    companyId: "<id>",
    sortOrder: "asc",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      payrollDeadline: new Date("2021-02-18T22:00:00Z"),
      checkDate: "2021-02-22",
      processed: true,
      processedDate: "2021-02-18",
      calculatedAt: "2021-02-18T12:00:00Z",
      uuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
      payrollUuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
      companyUuid: "6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb",
      offCycle: false,
      external: false,
      payPeriod: {
        startDate: "2021-02-01",
        endDate: "2021-02-15",
        payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
      },
      totals: {
        companyDebit: "121747.71",
        netPayDebit: "79283.80",
        taxDebit: "42463.91",
        reimbursementDebit: "0.00",
        childSupportDebit: "0.00",
        reimbursements: "0.00",
        netPay: "81752.94",
        grossPay: "130635.89",
        employeeBonuses: "0.00",
        employeeCommissions: "18536.37",
        employeeCashTips: "0.00",
        employeePaycheckTips: "0.00",
        additionalEarnings: "0.00",
        ownersDraw: "0.00",
        checkAmount: "2469.14",
        employerTaxes: "6917.19",
        employeeTaxes: "35546.72",
        benefits: "0.00",
        employeeBenefitsDeductions: "13336.23",
        imputedPay: "0.00",
        deferredPayrollTaxes: "0.00",
        otherDeductions: "240.00",
      },
      createdAt: new Date("2021-02-01T22:00:00Z"),
    },
    {
      payrollDeadline: new Date("2021-02-28"),
      checkDate: "2021-03-01",
      processed: false,
      processedDate: "nil",
      calculatedAt: "nil",
      uuid: "709a0790-cc23-4f27-84a6-4b0d278a6af5",
      payrollUuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
      companyUuid: "6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb",
      offCycle: false,
      external: false,
      payPeriod: {
        startDate: "2021-02-16",
        endDate: "2021-03-01",
        payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
      },
      createdAt: new Date("2022-02-01T22:00:00Z"),
    },
  ]);
});

test("Payrolls Get V1 Companies Company Id Payroll Reversals Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-payroll_reversals-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.getReversals({
    companyId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    reversedPayrollUuid: "09505984-8d8c-41a3-adbe-5740322ae8e9",
    reversalPayrollUuid: "0424688e-0a2e-4cd0-ac86-42283e788fb3",
    reason: "Customer Request",
    approvedAt: null,
    category: "convert_check_ee_requested",
    reversedEmployeeUuids: [
      "5f036964-185e-4c85-bbf2-3873e1203b30",
    ],
  });
});

test("Payrolls Get V1 Companies Company Id Payrolls Payroll Id Unprocessed", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-payrolls-payroll_id-Unprocessed",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.get({
    companyId: "<id>",
    payrollId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payrollDeadline: new Date("2021-02-18T22:00:00Z"),
    checkDate: "2021-02-22",
    processed: false,
    processedDate: "<value>",
    calculatedAt: "<value>",
    uuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    payrollUuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    companyUuid: "6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb",
    offCycle: false,
    autoPilot: false,
    external: false,
    payPeriod: {
      startDate: "2021-02-01",
      endDate: "2021-02-15",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
    },
    payrollStatusMeta: {
      cancellable: false,
      expectedCheckDate: "2021-02-22",
      initialCheckDate: "2021-02-22",
      expectedDebitTime: "2021-02-18T22:00:00Z",
      payrollLate: false,
      initialDebitCutoffTime: "2021-02-18T22:00:00Z",
    },
    createdAt: new Date("2022-02-01T22:00:00Z"),
    submissionBlockers: [
      {
        blockerType: "fast_ach_threshold_exceeded",
        blockerName: "Fast ACH Threshold Exceeded",
        unblockOptions: [
          {
            unblockType: "wire_in",
            checkDate: "2024-06-10T00:00:00Z",
          },
          {
            unblockType: "move_to_four_day",
            checkDate: "2024-06-12T00:00:00Z",
            metadata: {},
          },
        ],
        selectedOption: null,
        status: "unresolved",
      },
    ],
    processingRequest: null,
  });
});

test("Payrolls Get V1 Companies Company Id Payrolls Payroll Id Processed", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-payrolls-payroll_id-Processed",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.get({
    companyId: "<id>",
    payrollId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payrollDeadline: new Date("2021-02-18T22:00:00Z"),
    checkDate: "2021-02-22",
    processed: true,
    processedDate: "2021-02-18",
    calculatedAt: "2021-02-18T12:00:00Z",
    payrollUuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    companyUuid: "6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb",
    offCycle: false,
    autoPilot: true,
    external: false,
    payPeriod: {
      startDate: "2021-02-01",
      endDate: "2021-02-15",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
    },
    payrollStatusMeta: {
      cancellable: false,
      expectedCheckDate: "2021-02-22",
      initialCheckDate: "2021-02-22",
      expectedDebitTime: "2021-02-18T22:00:00Z",
      payrollLate: false,
      initialDebitCutoffTime: "2021-02-18T22:00:00Z",
    },
    totals: {
      companyDebit: "121747.71",
      netPayDebit: "79283.80",
      taxDebit: "42463.91",
      reimbursementDebit: "0.00",
      childSupportDebit: "0.00",
      reimbursements: "0.00",
      netPay: "81752.94",
      grossPay: "130635.89",
      employeeBonuses: "0.00",
      employeeCommissions: "18536.37",
      employeeCashTips: "0.00",
      employeePaycheckTips: "0.00",
      additionalEarnings: "0.00",
      ownersDraw: "0.00",
      checkAmount: "2469.14",
      employerTaxes: "6917.19",
      employeeTaxes: "35546.72",
      benefits: "0.00",
      employeeBenefitsDeductions: "13336.23",
      imputedPay: "0.00",
      deferredPayrollTaxes: "0.00",
      otherDeductions: "240.00",
    },
    employeeCompensations: [
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7067",
        excluded: false,
        grossPay: 2791.25,
        netPay: 1953.31,
        checkAmount: 1953.31,
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242ba5",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e909ba",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "15.000",
            jobUuid: "9d3760f0-d1f9-4700-8817-0fe2dce5cf23",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "b5eef9a9-4a87-4649-a80d-14878c05f44e",
            compensationMultiplier: 2,
          },
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "332bd171-9efc-432b-abbb-a75c9dba706a",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "5.000",
            jobUuid: "ca9b3dc1-57ac-4736-901a-9b1c9634b9d5",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "1bad01e2-140c-49ed-9542-2388ce4a19b3",
            compensationMultiplier: 2,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
        benefits: [
          {
            name: "Group Term Life",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: true,
          },
          {
            name: "401K",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: false,
          },
        ],
        deductions: [
          {
            name: "Child Support",
            amount: 80.00,
          },
        ],
        taxes: [
          {
            name: "Federal Income Tax",
            employer: false,
            amount: 646.69,
          },
          {
            name: "Social Security",
            employer: true,
            amount: 191.25,
          },
        ],
      },
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7012",
        excluded: false,
        grossPay: 2791.25,
        netPay: 1953.31,
        checkAmount: 1953.31,
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242b34",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e90955",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
        benefits: [
          {
            name: "Group Term Life",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: true,
          },
          {
            name: "401K",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: false,
          },
        ],
        deductions: [
          {
            name: "Child Support",
            amount: 80.00,
          },
        ],
        taxes: [
          {
            name: "Federal Income Tax",
            employer: false,
            amount: 646.69,
          },
          {
            name: "Social Security",
            employer: true,
            amount: 191.25,
          },
        ],
      },
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7781",
        excluded: false,
        grossPay: 2791.25,
        netPay: 1953.31,
        checkAmount: 1953.31,
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242bab",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e909cd",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
        benefits: [
          {
            name: "Group Term Life",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: true,
          },
          {
            name: "401K",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: false,
          },
        ],
        deductions: [
          {
            name: "Child Support",
            amount: 80.00,
          },
        ],
        taxes: [
          {
            name: "Federal Income Tax",
            employer: false,
            amount: 646.69,
          },
          {
            name: "Social Security",
            employer: true,
            amount: 191.25,
          },
        ],
      },
    ],
    companyTaxes: [
      {
        name: "MO Compensation Deduction",
        employer: true,
        amount: "-0.92",
      },
      {
        name: "NY MCTMT",
        employer: true,
        amount: "5.00",
      },
    ],
    createdAt: new Date("2022-02-01T22:00:00Z"),
    creditBlockers: [
      {
        blockerType: "waiting_for_wire_in",
        blockerName: "Waiting for Wire In",
        unblockOptions: [
          {
            unblockType: "submit_wire",
            checkDate: "2024-06-10T00:00:00Z",
          },
        ],
        selectedOption: "submit_wire",
        status: "unresolved",
      },
    ],
    processingRequest: {
      status: "submit_success",
      errors: [],
    },
  });
});

test("Payrolls Put V1 Companies Company Id Payrolls Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-payrolls-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.update({
    companyId: "<id>",
    payrollId: "<id>",
    requestBody: {
      employeeCompensations: [
        {},
        {},
        {},
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payrollDeadline: new Date("2022-02-18T22:00:00Z"),
    checkDate: "2021-02-22",
    processed: false,
    processedDate: "<value>",
    calculatedAt: "<value>",
    uuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    payrollUuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    companyUuid: "6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb",
    offCycle: false,
    offCycleReason: null,
    autoPilot: false,
    external: false,
    payPeriod: {
      startDate: "2021-02-01",
      endDate: "2021-02-15",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
    },
    payrollStatusMeta: {
      cancellable: false,
      expectedCheckDate: "2022-02-22",
      initialCheckDate: "2022-02-22",
      expectedDebitTime: "2022-02-18T22:00:00Z",
      payrollLate: false,
      initialDebitCutoffTime: "2022-02-18T22:00:00Z",
    },
    employeeCompensations: [
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7067",
        excluded: false,
        version: "4ba36d23a78c7393b4900ef38019d8ff",
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242ba5",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e909ba",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "15.000",
            jobUuid: "9d3760f0-d1f9-4700-8817-0fe2dce5cf23",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "b5eef9a9-4a87-4649-a80d-14878c05f44e",
            compensationMultiplier: 2,
          },
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "332bd171-9efc-432b-abbb-a75c9dba706a",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "5.000",
            jobUuid: "ca9b3dc1-57ac-4736-901a-9b1c9634b9d5",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "1bad01e2-140c-49ed-9542-2388ce4a19b3",
            compensationMultiplier: 2,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
      },
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7012",
        excluded: false,
        version: "ff083257a5583291fb86656ad0df1b42",
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242b34",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e90955",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
      },
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7781",
        excluded: false,
        version: "259816479e3729bf855318af9b9adddf",
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242bab",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e909cd",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
      },
    ],
    createdAt: new Date("2022-02-01T22:00:00Z"),
    fixedCompensationTypes: [
      {
        name: "Bonus",
      },
      {
        name: "Commission",
      },
      {
        name: "Paycheck Tips",
      },
      {
        name: "Cash Tips",
      },
      {
        name: "Correction Payment",
      },
      {
        name: "Anniversary Bonus",
      },
      {
        name: "Internet Stipend",
      },
      {
        name: "Reimbursement",
      },
    ],
    processingRequest: null,
  });
});

test("Payrolls Put V1 Companies Company Id Payrolls Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-payrolls-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.update({
    companyId: "<id>",
    payrollId: "<id>",
    requestBody: {
      employeeCompensations: [
        {},
        {},
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Payrolls Put V1 Companies Company Id Payrolls Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-payrolls-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.update({
    companyId: "<id>",
    payrollId: "<id>",
    requestBody: {
      employeeCompensations: [
        {},
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Payrolls Put V1 Companies Company Id Payrolls Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-payrolls-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.update({
    companyId: "<id>",
    payrollId: "<id>",
    requestBody: {
      employeeCompensations: [
        {},
        {},
        {},
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Payrolls Delete V1 Companies Company Id Payrolls", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("delete-v1-companies-company_id-payrolls"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.payrolls.delete({
    companyId: "<id>",
    payrollId: "<id>",
  });
});

test("Payrolls Put V1 Companies Company Id Payrolls Payroll Id Prepare Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-payrolls-payroll_id-prepare-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.prepareForUpdate({
    companyId: "<id>",
    payrollId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payrollDeadline: new Date("2022-02-18T22:00:00Z"),
    checkDate: "2021-02-22",
    processed: false,
    processedDate: "<value>",
    calculatedAt: "<value>",
    uuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    payrollUuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    companyUuid: "6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb",
    offCycle: false,
    offCycleReason: null,
    autoPilot: false,
    external: false,
    payPeriod: {
      startDate: "2021-02-01",
      endDate: "2021-02-15",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
    },
    payrollStatusMeta: {
      cancellable: false,
      expectedCheckDate: "2022-02-22",
      initialCheckDate: "2022-02-22",
      expectedDebitTime: "2022-02-18T22:00:00Z",
      payrollLate: false,
      initialDebitCutoffTime: "2022-02-18T22:00:00Z",
    },
    employeeCompensations: [
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7067",
        excluded: false,
        version: "4ba36d23a78c7393b4900ef38019d8ff",
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242ba5",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e909ba",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "15.000",
            jobUuid: "9d3760f0-d1f9-4700-8817-0fe2dce5cf23",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "b5eef9a9-4a87-4649-a80d-14878c05f44e",
            compensationMultiplier: 2,
          },
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "332bd171-9efc-432b-abbb-a75c9dba706a",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "5.000",
            jobUuid: "ca9b3dc1-57ac-4736-901a-9b1c9634b9d5",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "1bad01e2-140c-49ed-9542-2388ce4a19b3",
            compensationMultiplier: 2,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
      },
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7012",
        excluded: false,
        version: "ff083257a5583291fb86656ad0df1b42",
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242b34",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e90955",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
      },
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7781",
        excluded: false,
        version: "259816479e3729bf855318af9b9adddf",
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242bab",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e909cd",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
      },
    ],
    createdAt: new Date("2022-02-01T22:00:00Z"),
    fixedCompensationTypes: [
      {
        name: "Bonus",
      },
      {
        name: "Commission",
      },
      {
        name: "Paycheck Tips",
      },
      {
        name: "Cash Tips",
      },
      {
        name: "Correction Payment",
      },
      {
        name: "Anniversary Bonus",
      },
      {
        name: "Internet Stipend",
      },
      {
        name: "Reimbursement",
      },
    ],
    processingRequest: null,
  });
});

test("Payrolls Get V1 Payment Receipts Payrolls Payroll Uuid Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-payment-receipts-payrolls-payroll_uuid-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.getReceipt({
    payrollUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payrollUuid: "afccb970-357e-4013-81f5-85dafc74f9b6",
    companyUuid: "c827aa0d-3928-4d5a-ab1f-400641a7d2b8",
    nameOfSender: "Torp and Sons and Sons",
    nameOfRecipient: "Payroll Recipients",
    recipientNotice:
      "Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below.",
    debitDate: "2022-06-02",
    license:
      "ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page.",
    licenseUri: "https://gusto.com/about/licenses",
    rightToRefund: "https://gusto.com/about/licenses",
    liabilityOfLicensee: "https://gusto.com/about/licenses",
    totals: {
      companyDebit: "1080.47",
      netPayDebit: "748.34",
      childSupportDebit: "100.0",
      reimbursementDebit: "50.0",
      taxDebit: "182.13",
    },
    taxes: [
      {
        name: "Federal Income Tax",
        amount: "30.36",
      },
      {
        name: "Social Security",
        amount: "104.54",
      },
      {
        name: "Medicare",
        amount: "24.46",
      },
      {
        name: "Additional Medicare",
        amount: "0.0",
      },
      {
        name: "TX SUTA",
        amount: "22.77",
      },
      {
        name: "FUTA",
        amount: "0.0",
      },
    ],
    employeeCompensations: [
      {
        employeeUuid: "f83d0bd8-7e20-43b9-834c-6d514ef6cb47",
        employeeFirstName: "Patricia",
        employeeLastName: "Hamill",
        paymentMethod: "Direct Deposit",
        netPay: "748.34",
        totalTax: "182.13",
        totalGarnishments: "0.0",
        childSupportGarnishment: "100.0",
        totalReimbursement: "50.0",
      },
    ],
    licensee: {
      name: "Gusto, Zenpayroll Inc.",
      address: "525 20th St",
      city: "San Francisco",
      state: "CA",
      postalCode: "94107",
      phoneNumber: "4157778888",
    },
  });
});

test("Payrolls Get V1 Companies Payroll Blockers Company Uuid Payroll Blockers", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-payroll-blockers-company_uuid-Payroll Blockers",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.getBlockers({
    companyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      key: "wc_pending_approval",
      message: "Worker's compensation policy needs to be accepted.",
    },
    {
      key: "eftps_in_error",
      message:
        "We could not make payments to the Electronic Federal Tax Payment System.",
    },
    {
      key: "geocode_error",
      message:
        "Company or employee address could not be verified. Please ensure all addresses are valid.",
    },
    {
      key: "geocode_needed",
      message:
        "Company or employee address verification is missing. Please ensure all addresses are entered correctly.",
    },
    {
      key: "pay_schedule_setup_not_complete",
      message:
        "Some employees don’t have a pay schedule set up yet. Please complete this step to run payroll.",
    },
    {
      key: "invalid_signatory",
      message:
        "A signatory who is authorized to sign documents on behalf of your company is required. Please ensure their identity verification is successful.",
    },
    {
      key: "suspended",
      message: "Company is suspended and cannot run payroll.",
    },
    {
      key: "soft_suspended",
      message:
        "Company is placed in a 'soft' suspension state and requires missing/incorrect information to be corrected.",
    },
    {
      key: "pending_payroll_review",
      message:
        "Payroll is blocked. We are reviewing payroll information in your account. Please contact support if you believe this is an error.",
    },
    {
      key: "pending_recovery_case",
      message:
        "Payroll is blocked due to an open recovery case. Please contact support if you believe this is an error.",
    },
    {
      key: "pending_information_request",
      message:
        "Payroll is blocked due to an open information request. Please contact support if you believe this is an error.",
    },
    {
      key: "needs_approval",
      message: "Company needs to be approved to run payroll.",
    },
    {
      key: "missing_addresses",
      message: "Company must add addresses in order to run payroll.",
    },
    {
      key: "missing_federal_tax_setup",
      message:
        "Company must complete federal tax setup in order to run payroll.",
    },
    {
      key: "missing_industry_selection",
      message:
        "Company must complete industry selection in order to run payroll.",
    },
    {
      key: "missing_bank_info",
      message: "Company must have a bank account in order to run payroll.",
    },
    {
      key: "missing_employee_setup",
      message: "Company must add employees in order to run payroll.",
    },
    {
      key: "missing_state_tax_setup",
      message: "Company must complete state tax setup in order to run payroll.",
    },
    {
      key: "missing_pay_schedule",
      message: "Company must have a pay schedule in order to run payroll.",
    },
    {
      key: "missing_forms",
      message: "Company forms must be signed in order to run payroll.",
    },
    {
      key: "missing_bank_verification",
      message: "Company bank account must be verified in order to run payroll.",
    },
    {
      key: "missing_signatory",
      message:
        "Company must have a verified signatory in order to run payroll.",
    },
  ]);
});

test("Payrolls Post Companies Payroll Skip Company Uuid Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-companies-payroll-skip-company_uuid-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.payrolls.skip({
    companyUuid: "<id>",
    requestBody: {
      payrollType: "Regular",
      startDate: "2023-05-26T00:00:00Z",
      endDate: "2023-06-25T00:00:00Z",
      payScheduleUuid: "85100524-4b42-4d2d-bd62-9d864f9aea64",
    },
  });
});

test("Payrolls Post Payrolls Gross Up Payroll Uuid Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-payrolls-gross-up-payroll_uuid-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.calculateGrossUp({
    payrollUuid: "<id>",
    requestBody: {
      employeeUuid: "be48c41e-142d-4116-9430-5aba2313fac7",
      netPay: "1000.00",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});

test("Payrolls Put V1 Companies Company Id Payrolls Payroll Id Calculate Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-payrolls-payroll_id-calculate-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.payrolls.calculate({
    companyId: "<id>",
    payrollId: "<id>",
  });
});

test("Payrolls Put V1 Companies Company Id Payrolls Payroll Id Submit Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-payrolls-payroll_id-submit-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.payrolls.submit({
    companyId: "<id>",
    payrollId: "<id>",
    requestBody: {},
  });
});

test("Payrolls Put Api V1 Companies Company Id Payrolls Payroll Id Cancel Unprocessed", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-api-v1-companies-company_id-payrolls-payroll_id-cancel-Unprocessed",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.cancel({
    companyId: "<id>",
    payrollId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payrollDeadline: new Date("2021-02-18T22:00:00Z"),
    checkDate: "2021-02-22",
    processed: false,
    processedDate: "<value>",
    calculatedAt: "<value>",
    uuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    payrollUuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    companyUuid: "6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb",
    offCycle: false,
    autoPilot: false,
    external: false,
    payPeriod: {
      startDate: "2021-02-01",
      endDate: "2021-02-15",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
    },
    payrollStatusMeta: {
      cancellable: false,
      expectedCheckDate: "2021-02-22",
      initialCheckDate: "2021-02-22",
      expectedDebitTime: "2021-02-18T22:00:00Z",
      payrollLate: false,
      initialDebitCutoffTime: "2021-02-18T22:00:00Z",
    },
    createdAt: new Date("2022-02-01T22:00:00Z"),
    submissionBlockers: [
      {
        blockerType: "fast_ach_threshold_exceeded",
        blockerName: "Fast ACH Threshold Exceeded",
        unblockOptions: [
          {
            unblockType: "wire_in",
            checkDate: "2024-06-10T00:00:00Z",
          },
          {
            unblockType: "move_to_four_day",
            checkDate: "2024-06-12T00:00:00Z",
            metadata: {},
          },
        ],
        selectedOption: null,
        status: "unresolved",
      },
    ],
    processingRequest: null,
  });
});

test("Payrolls Put Api V1 Companies Company Id Payrolls Payroll Id Cancel Processed", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-api-v1-companies-company_id-payrolls-payroll_id-cancel-Processed",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.cancel({
    companyId: "<id>",
    payrollId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payrollDeadline: new Date("2021-02-18T22:00:00Z"),
    checkDate: "2021-02-22",
    processed: true,
    processedDate: "2021-02-18",
    calculatedAt: "2021-02-18T12:00:00Z",
    payrollUuid: "b50e611d-8f3d-4f24-b001-46675f7b5777",
    companyUuid: "6bf7807c-a5a0-4f4d-b2e7-3fbb4b2299fb",
    offCycle: false,
    autoPilot: true,
    external: false,
    payPeriod: {
      startDate: "2021-02-01",
      endDate: "2021-02-15",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
    },
    payrollStatusMeta: {
      cancellable: false,
      expectedCheckDate: "2021-02-22",
      initialCheckDate: "2021-02-22",
      expectedDebitTime: "2021-02-18T22:00:00Z",
      payrollLate: false,
      initialDebitCutoffTime: "2021-02-18T22:00:00Z",
    },
    totals: {
      companyDebit: "121747.71",
      netPayDebit: "79283.80",
      taxDebit: "42463.91",
      reimbursementDebit: "0.00",
      childSupportDebit: "0.00",
      reimbursements: "0.00",
      netPay: "81752.94",
      grossPay: "130635.89",
      employeeBonuses: "0.00",
      employeeCommissions: "18536.37",
      employeeCashTips: "0.00",
      employeePaycheckTips: "0.00",
      additionalEarnings: "0.00",
      ownersDraw: "0.00",
      checkAmount: "2469.14",
      employerTaxes: "6917.19",
      employeeTaxes: "35546.72",
      benefits: "0.00",
      employeeBenefitsDeductions: "13336.23",
      imputedPay: "0.00",
      deferredPayrollTaxes: "0.00",
      otherDeductions: "240.00",
    },
    employeeCompensations: [
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7067",
        excluded: false,
        grossPay: 2791.25,
        netPay: 1953.31,
        checkAmount: 1953.31,
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242ba5",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e909ba",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "15.000",
            jobUuid: "9d3760f0-d1f9-4700-8817-0fe2dce5cf23",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "b5eef9a9-4a87-4649-a80d-14878c05f44e",
            compensationMultiplier: 2,
          },
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "332bd171-9efc-432b-abbb-a75c9dba706a",
            compensationMultiplier: 1,
          },
          {
            name: "Overtime",
            hours: "5.000",
            jobUuid: "ca9b3dc1-57ac-4736-901a-9b1c9634b9d5",
            compensationMultiplier: 1.5,
          },
          {
            name: "Double overtime",
            hours: "0.000",
            jobUuid: "1bad01e2-140c-49ed-9542-2388ce4a19b3",
            compensationMultiplier: 2,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
        benefits: [
          {
            name: "Group Term Life",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: true,
          },
          {
            name: "401K",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: false,
          },
        ],
        deductions: [
          {
            name: "Child Support",
            amount: 80.00,
          },
        ],
        taxes: [
          {
            name: "Federal Income Tax",
            employer: false,
            amount: 646.69,
          },
          {
            name: "Social Security",
            employer: true,
            amount: 191.25,
          },
        ],
      },
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7012",
        excluded: false,
        grossPay: 2791.25,
        netPay: 1953.31,
        checkAmount: 1953.31,
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242b34",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e90955",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
        benefits: [
          {
            name: "Group Term Life",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: true,
          },
          {
            name: "401K",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: false,
          },
        ],
        deductions: [
          {
            name: "Child Support",
            amount: 80.00,
          },
        ],
        taxes: [
          {
            name: "Federal Income Tax",
            employer: false,
            amount: 646.69,
          },
          {
            name: "Social Security",
            employer: true,
            amount: 191.25,
          },
        ],
      },
      {
        employeeUuid: "187412e1-3dbe-491a-bb2f-2f40323a7781",
        excluded: false,
        grossPay: 2791.25,
        netPay: 1953.31,
        checkAmount: 1953.31,
        paymentMethod: "Direct Deposit",
        fixedCompensations: [
          {
            name: "Bonus",
            amount: "100.00",
            jobUuid: "94e0d15e-9ed2-4077-98f6-64554f242bab",
          },
          {
            name: "Reimbursement",
            amount: "100.00",
            jobUuid: "91bc3b43-ded0-4ee7-98fe-215499e909cd",
          },
        ],
        hourlyCompensations: [
          {
            name: "Regular Hours",
            hours: "40.000",
            jobUuid: "bd378298-3e0c-4145-904a-baadf8a91fa3",
            compensationMultiplier: 1,
          },
        ],
        paidTimeOff: [
          {
            name: "Vacation Hours",
            hours: "20.000",
          },
          {
            name: "Sick Hours",
            hours: "0.000",
          },
          {
            name: "Holiday Hours",
            hours: "0.000",
          },
        ],
        benefits: [
          {
            name: "Group Term Life",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: true,
          },
          {
            name: "401K",
            employeeDeduction: 100.00,
            companyContribution: 50.00,
            imputed: false,
          },
        ],
        deductions: [
          {
            name: "Child Support",
            amount: 80.00,
          },
        ],
        taxes: [
          {
            name: "Federal Income Tax",
            employer: false,
            amount: 646.69,
          },
          {
            name: "Social Security",
            employer: true,
            amount: 191.25,
          },
        ],
      },
    ],
    companyTaxes: [
      {
        name: "MO Compensation Deduction",
        employer: true,
        amount: "-0.92",
      },
      {
        name: "NY MCTMT",
        employer: true,
        amount: "5.00",
      },
    ],
    createdAt: new Date("2022-02-01T22:00:00Z"),
    creditBlockers: [
      {
        blockerType: "waiting_for_wire_in",
        blockerName: "Waiting for Wire In",
        unblockOptions: [
          {
            unblockType: "submit_wire",
            checkDate: "2024-06-10T00:00:00Z",
          },
        ],
        selectedOption: "submit_wire",
        status: "unresolved",
      },
    ],
    processingRequest: {
      status: "submit_success",
      errors: [],
    },
  });
});

test("Payrolls Put Api V1 Companies Company Id Payrolls Payroll Id Cancel Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-api-v1-companies-company_id-payrolls-payroll_id-cancel-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.cancel({
    companyId: "<id>",
    payrollId: "<id>",
  });
  expect(result).toBeDefined();
});

test("Payrolls Put Api V1 Companies Company Id Payrolls Payroll Id Cancel Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-api-v1-companies-company_id-payrolls-payroll_id-cancel-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.cancel({
    companyId: "<id>",
    payrollId: "<id>",
  });
  expect(result).toBeDefined();
});

test("Payrolls Put Api V1 Companies Company Id Payrolls Payroll Id Cancel Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-api-v1-companies-company_id-payrolls-payroll_id-cancel-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.cancel({
    companyId: "<id>",
    payrollId: "<id>",
  });
  expect(result).toBeDefined();
});

test("Payrolls Get V1 Payrolls Payroll Uuid Employees Employee Uuid Pay Stub", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-payrolls-payroll_uuid-employees-employee_uuid-pay_stub",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.payrolls.getPayStub({
    payrollId: "<id>",
    employeeId: "<id>",
  });
});

test("Payrolls Get V1 Employees Employee Uuid Pay Stubs Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_uuid-pay_stubs-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.getPayStubs({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "d2cec746-caee-464a-bcaf-00d93f7049c9",
      checkDate: "2023-11-24T00:00:00Z",
      grossPay: "880",
      netPay: "541.02",
      payrollUuid: "a039cafb-745e-4af4-bf1e-935a86fc18e0",
      checkAmount: "500.2",
    },
  ]);
});

test("Payrolls Post V1 Payrolls Payroll Uuid Generated Documents Printable Payroll Checks Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-payrolls-payroll_uuid-generated_documents-printable_payroll_checks-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.generatePrintableChecks({
    payrollUuid: "<id>",
    requestBody: {
      printingFormat: "bottom",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payrollUuid: "a83d0bd8-7d20-43b9-834c-6d514ef6cb20",
    printingFormat: "top",
    startingCheckNumber: "10",
    requestUuid: "p83d0ca8-7d41-42a9-834y-7d218ef6cb20",
    status: "pending",
    employeeCheckNumberMapping: [
      {
        employeeUuid: "9fcf1b1d-8886-4691-9283-383d3bdd4fd9",
        checkNumber: 10,
      },
    ],
  });
});

test("Payrolls Post V1 Payrolls Payroll Uuid Generated Documents Printable Payroll Checks Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-payrolls-payroll_uuid-generated_documents-printable_payroll_checks-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.generatePrintableChecks({
    payrollUuid: "<id>",
    requestBody: {
      printingFormat: "top",
    },
  });
  expect(result).toBeDefined();
});

test("Payrolls Post V1 Payrolls Payroll Uuid Generated Documents Printable Payroll Checks Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-payrolls-payroll_uuid-generated_documents-printable_payroll_checks-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.generatePrintableChecks({
    payrollUuid: "<id>",
    requestBody: {
      printingFormat: "bottom",
    },
  });
  expect(result).toBeDefined();
});

test("Payrolls Post V1 Payrolls Payroll Uuid Generated Documents Printable Payroll Checks Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-payrolls-payroll_uuid-generated_documents-printable_payroll_checks-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.payrolls.generatePrintableChecks({
    payrollUuid: "<id>",
    requestBody: {
      printingFormat: "bottom",
    },
  });
  expect(result).toBeDefined();
});
