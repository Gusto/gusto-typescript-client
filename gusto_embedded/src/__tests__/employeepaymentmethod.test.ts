/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Employeepaymentmethod Post V1 Employees Employee Id Bank Accounts Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-bank_accounts-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.createBankAccount({
    employeeId: "<id>",
    requestBody: {
      name: "BoA Checking Account",
      routingNumber: "266905059",
      accountNumber: "5809431207",
      accountType: "Checking",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "1531e824-8d9e-4bd8-9f90-0d04608125d7",
    employeeUuid: "9fcf1b1d-8886-4691-9283-383d3bdd4fd9",
    accountType: "Checking",
    name: "BoA Checking Account",
    routingNumber: "266905059",
    hiddenAccountNumber: "XXXX1207",
  });
});

test("Employeepaymentmethod Post V1 Employees Employee Id Bank Accounts Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-bank_accounts-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.createBankAccount({
    employeeId: "<id>",
    requestBody: {
      name: "<value>",
      routingNumber: "<value>",
      accountNumber: "<value>",
      accountType: "Checking",
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Post V1 Employees Employee Id Bank Accounts Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-bank_accounts-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.createBankAccount({
    employeeId: "<id>",
    requestBody: {
      name: "<value>",
      routingNumber: "<value>",
      accountNumber: "<value>",
      accountType: "Savings",
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Post V1 Employees Employee Id Bank Accounts Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-bank_accounts-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.createBankAccount({
    employeeId: "<id>",
    requestBody: {
      name: "<value>",
      routingNumber: "<value>",
      accountNumber: "<value>",
      accountType: "Savings",
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Delete V1 Employees Employee Id Bank Accounts Bank Account Id", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-employees-employee_id-bank_accounts-bank_account_id",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeePaymentMethod.deleteBankAccount({
    employeeId: "<id>",
    bankAccountUuid: "<id>",
  });
});

test("Employeepaymentmethod Put V1 Employees Employee Id Bank Accounts Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-bank_accounts-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.updateBankAccount({
    employeeId: "<id>",
    bankAccountUuid: "<id>",
    requestBody: {
      name: "BoA Checking Account",
      routingNumber: "266905059",
      accountNumber: "5809431207",
      accountType: "Checking",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "1531e824-8d9e-4bd8-9f90-0d04608125d7",
    employeeUuid: "9fcf1b1d-8886-4691-9283-383d3bdd4fd9",
    accountType: "Checking",
    name: "BoA Checking Account",
    routingNumber: "266905059",
    hiddenAccountNumber: "XXXX1207",
  });
});

test("Employeepaymentmethod Put V1 Employees Employee Id Bank Accounts Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-bank_accounts-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.updateBankAccount({
    employeeId: "<id>",
    bankAccountUuid: "<id>",
    requestBody: {
      name: "<value>",
      routingNumber: "<value>",
      accountNumber: "<value>",
      accountType: "Checking",
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Put V1 Employees Employee Id Bank Accounts Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-bank_accounts-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.updateBankAccount({
    employeeId: "<id>",
    bankAccountUuid: "<id>",
    requestBody: {
      name: "<value>",
      routingNumber: "<value>",
      accountNumber: "<value>",
      accountType: "Checking",
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Put V1 Employees Employee Id Bank Accounts Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-bank_accounts-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.updateBankAccount({
    employeeId: "<id>",
    bankAccountUuid: "<id>",
    requestBody: {
      name: "<value>",
      routingNumber: "<value>",
      accountNumber: "<value>",
      accountType: "Checking",
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Get V1 Employees Employee Id Payment Method Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-payment_method-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.get({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "63859768485e218ccf8a449bb60f14ed",
    type: "Direct Deposit",
    splitBy: "Amount",
    splits: [
      {
        uuid: "e88f9436-b74e-49a8-87e9-777b9bfe715e",
        name: "BoA Checking Account",
        priority: 1,
        splitAmount: 500,
      },
      {
        uuid: "0d2b7f73-05d6-4184-911d-269edeecc30a",
        name: "Chase Checking Account",
        priority: 2,
        splitAmount: 1000,
      },
      {
        uuid: "1531e824-8d9e-4bd8-9f90-0d04608125d7",
        name: "US Bank Checking Account",
        priority: 3,
        splitAmount: null,
      },
    ],
  });
});

test("Employeepaymentmethod Put V1 Employees Employee Id Payment Method Example 1", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-payment_method-example-1",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.update({
    employeeId: "<id>",
    requestBody: {
      version: "63859768485e218ccf8a449bb60f14ed",
      type: "Direct Deposit",
      splitBy: "Amount",
      splits: [
        {
          uuid: "e88f9436-b74e-49a8-87e9-777b9bfe715e",
          name: "BoA Checking Account",
          priority: 1,
          splitAmount: 500,
        },
        {
          uuid: "0d2b7f73-05d6-4184-911d-269edeecc30a",
          name: "Chase Checking Account",
          priority: 2,
          splitAmount: 1000,
        },
        {
          uuid: "1531e824-8d9e-4bd8-9f90-0d04608125d7",
          name: "US Bank Checking Account",
          priority: 3,
          splitAmount: null,
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Put V1 Employees Employee Id Payment Method Example 2", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-payment_method-example-2",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.update({
    employeeId: "<id>",
    requestBody: {
      version: "63859768485e218ccf8a449bb60f14ed",
      type: "Direct Deposit",
      splitBy: "Percentage",
      splits: [
        {
          uuid: "e88f9436-b74e-49a8-87e9-777b9bfe715e",
          name: "BoA Checking Account",
          priority: 1,
          splitAmount: 60,
        },
        {
          uuid: "0d2b7f73-05d6-4184-911d-269edeecc30a",
          name: "Chase Checking Account",
          priority: 2,
          splitAmount: 40,
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Put V1 Employees Employee Id Payment Method Example 3", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-payment_method-example-3",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.update({
    employeeId: "<id>",
    requestBody: {
      version: "63859768485e218ccf8a449bb60f14ed",
      type: "Check",
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Put V1 Employees Employee Id Payment Method Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-payment_method-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.update({
    employeeId: "<id>",
    requestBody: {
      version: "<value>",
      type: "Check",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "63859768485e218ccf8a449bb60f14ed",
    type: "Direct Deposit",
    splitBy: "Amount",
    splits: [
      {
        uuid: "e88f9436-b74e-49a8-87e9-777b9bfe715e",
        name: "BoA Checking Account",
        priority: 1,
        splitAmount: 500,
      },
      {
        uuid: "0d2b7f73-05d6-4184-911d-269edeecc30a",
        name: "Chase Checking Account",
        priority: 2,
        splitAmount: 1000,
      },
      {
        uuid: "1531e824-8d9e-4bd8-9f90-0d04608125d7",
        name: "US Bank Checking Account",
        priority: 3,
        splitAmount: null,
      },
    ],
  });
});

test("Employeepaymentmethod Put V1 Employees Employee Id Payment Method Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-payment_method-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.update({
    employeeId: "<id>",
    requestBody: {
      version: "<value>",
      type: "Check",
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Put V1 Employees Employee Id Payment Method Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-payment_method-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.update({
    employeeId: "<id>",
    requestBody: {
      version: "<value>",
      type: "Direct Deposit",
    },
  });
  expect(result).toBeDefined();
});

test("Employeepaymentmethod Put V1 Employees Employee Id Payment Method Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-payment_method-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeePaymentMethod.update({
    employeeId: "<id>",
    requestBody: {
      version: "<value>",
      type: "Check",
    },
  });
  expect(result).toBeDefined();
});
