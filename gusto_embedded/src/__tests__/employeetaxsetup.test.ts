/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Employeetaxsetup Get V1 Employees Employee Id Federal Taxes Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-federal_taxes-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeTaxSetup.getFederalTaxes({
    employeeUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "56a489ce86ed6c1b0f0cecc4050a0b01",
    filingStatus: "Single",
    extraWithholding: "0.0",
    twoJobs: true,
    dependentsAmount: "0.0",
    otherIncome: "0.0",
    deductions: "0.0",
    w4DataType: "rev_2020_w4",
  });
});

test("Employeetaxsetup Put V1 Employees Employee Id Federal Taxes Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-federal_taxes-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeTaxSetup.updateFederalTaxes({
    employeeUuid: "<id>",
    requestBody: {
      version: "56a489ce86ed6c1b0f0cecc4050a0b01",
      filingStatus: "Single",
      extraWithholding: "0.0",
      twoJobs: true,
      dependentsAmount: "0.0",
      otherIncome: "0.0",
      deductions: "0.0",
      w4DataType: "rev_2020_w4",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "56a489ce86ed6c1b0f0cecc4050a0b01",
    filingStatus: "Single",
    extraWithholding: "0.0",
    twoJobs: true,
    dependentsAmount: "0.0",
    otherIncome: "0.0",
    deductions: "0.0",
    w4DataType: "rev_2020_w4",
  });
});

test("Employeetaxsetup Put V1 Employees Employee Id Federal Taxes Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-federal_taxes-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeTaxSetup.updateFederalTaxes({
    employeeUuid: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeetaxsetup Put V1 Employees Employee Id Federal Taxes Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-federal_taxes-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeTaxSetup.updateFederalTaxes({
    employeeUuid: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeetaxsetup Put V1 Employees Employee Id Federal Taxes Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-federal_taxes-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeTaxSetup.updateFederalTaxes({
    employeeUuid: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeetaxsetup Get V1 Employees Employee Id State Taxes Employee State Taxes List Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-state_taxes-Employee-State-Taxes-List-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeTaxSetup.getStateTaxes({
    employeeUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      employeeUuid: "92fa4d30-e284-43d0-a26e-605619c04beb",
      state: "CA",
      fileNewHireReport: false,
      isWorkState: true,
      questions: [
        {
          label: "Filing Status",
          description:
            "The Head of Household status applies to unmarried individuals who have a relative living with them in their home. If unsure, read the <a target='_blank' data-bypass rel='noopener noreferrer' tabindex='99' href='https://www.ftb.ca.gov/file/personal/filing-status/index.html'>CA Filing Status explanation</a>.\n"
            + "",
          key: "filing_status",
          inputQuestionFormat: {
            type: "Select",
            options: [
              {
                value: "S",
                label: "Single",
              },
              {
                value: "M",
                label: "Married one income",
              },
              {
                value: "MD",
                label: "Married dual income",
              },
              {
                value: "H",
                label: "Head of household",
              },
              {
                value: "E",
                label: "Do Not Withhold",
              },
            ],
          },
          answers: [
            {
              value: "S",
              validFrom: "2010-01-01",
              validUpTo: null,
            },
          ],
        },
        {
          label: "Withholding Allowance",
          description:
            "This value is needed to calculate the employee's CA income tax withholding. If unsure, use the <a target='_blank' data-bypass rel='noopener noreferrer' tabindex='99' href='http://www.edd.ca.gov/pdf_pub_ctr/de4.pdf'>CA DE-4 form</a> to calculate the value manually.\n"
            + "",
          key: "withholding_allowance",
          inputQuestionFormat: {
            type: "Number",
          },
          answers: [
            {
              value: "1",
              validFrom: "2010-01-01",
              validUpTo: null,
            },
          ],
        },
        {
          label: "Additional Withholding",
          description:
            "You can withhold an additional amount of California income taxes here.",
          key: "additional_withholding",
          inputQuestionFormat: {
            type: "Currency",
          },
          answers: [
            {
              value: "0.0",
              validFrom: "2010-01-01",
              validUpTo: null,
            },
          ],
        },
        {
          label: "File a New Hire Report?",
          description:
            "State law requires you to file a new hire report within 20 days of hiring or re-hiring an employee.",
          key: "file_new_hire_report",
          inputQuestionFormat: {
            type: "Select",
          },
          answers: [
            {
              value: "true",
              validFrom: "2010-01-01",
              validUpTo: null,
            },
          ],
        },
      ],
    },
  ]);
});

test("Employeetaxsetup Put V1 Employees Employee Id State Taxes Employee State Taxes Update Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-state_taxes-Employee-State-Taxes-Update-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeTaxSetup.updateStateTaxes({
    employeeUuid: "<id>",
    requestBody: {
      states: [
        {
          state: "CA",
          questions: [
            {
              key: "filing_status",
              answers: [
                {
                  value: "M",
                  validFrom: "2010-01-01",
                  validUpTo: null,
                },
              ],
            },
            {
              key: "withholding_allowance",
              answers: [
                {
                  value: "2",
                  validFrom: "2010-01-01",
                  validUpTo: null,
                },
              ],
            },
            {
              key: "additional_withholding",
              answers: [
                {
                  value: "25.0",
                  validFrom: "2010-01-01",
                  validUpTo: null,
                },
              ],
            },
            {
              key: "file_new_hire_report",
              answers: [
                {
                  value: "true",
                  validFrom: "2010-01-01",
                  validUpTo: null,
                },
              ],
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      employeeUuid: "<id>",
      state: "Ohio",
      questions: [
        {
          label: "<value>",
          description: "which difficult really",
          key: "<key>",
          inputQuestionFormat: {
            type: "<value>",
          },
          answers: [
            {},
            {},
          ],
        },
      ],
    },
    {
      employeeUuid: "<id>",
      state: "Alabama",
      questions: [],
    },
    {
      employeeUuid: "<id>",
      state: "Tennessee",
      questions: [
        {
          label: "<value>",
          description:
            "notwithstanding yippee now cinch against however unearth outside stiff",
          key: "<key>",
          inputQuestionFormat: {
            type: "<value>",
          },
          answers: [
            {},
            {},
            {},
          ],
        },
        {
          label: "<value>",
          description: "incidentally shadowy cleverly",
          key: "<key>",
          inputQuestionFormat: {
            type: "<value>",
          },
          answers: [
            {},
            {},
            {},
          ],
        },
        {
          label: "<value>",
          description: "off frizz yowza huzzah whose",
          key: "<key>",
          inputQuestionFormat: {
            type: "<value>",
          },
          answers: [
            {},
            {},
          ],
        },
      ],
    },
  ]);
});

test("Employeetaxsetup Put V1 Employees Employee Id State Taxes Employee State Taxes List Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-state_taxes-Employee-State-Taxes-List-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeTaxSetup.updateStateTaxes({
    employeeUuid: "<id>",
    requestBody: {
      states: [
        {
          state: "Minnesota",
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      employeeUuid: "92fa4d30-e284-43d0-a26e-605619c04beb",
      state: "CA",
      fileNewHireReport: false,
      isWorkState: true,
      questions: [
        {
          label: "Filing Status",
          description:
            "The Head of Household status applies to unmarried individuals who have a relative living with them in their home. If unsure, read the <a target='_blank' data-bypass rel='noopener noreferrer' tabindex='99' href='https://www.ftb.ca.gov/file/personal/filing-status/index.html'>CA Filing Status explanation</a>.\n"
            + "",
          key: "filing_status",
          inputQuestionFormat: {
            type: "Select",
            options: [
              {
                value: "S",
                label: "Single",
              },
              {
                value: "M",
                label: "Married one income",
              },
              {
                value: "MD",
                label: "Married dual income",
              },
              {
                value: "H",
                label: "Head of household",
              },
              {
                value: "E",
                label: "Do Not Withhold",
              },
            ],
          },
          answers: [
            {
              value: "S",
              validFrom: "2010-01-01",
              validUpTo: null,
            },
          ],
        },
        {
          label: "Withholding Allowance",
          description:
            "This value is needed to calculate the employee's CA income tax withholding. If unsure, use the <a target='_blank' data-bypass rel='noopener noreferrer' tabindex='99' href='http://www.edd.ca.gov/pdf_pub_ctr/de4.pdf'>CA DE-4 form</a> to calculate the value manually.\n"
            + "",
          key: "withholding_allowance",
          inputQuestionFormat: {
            type: "Number",
          },
          answers: [
            {
              value: "1",
              validFrom: "2010-01-01",
              validUpTo: null,
            },
          ],
        },
        {
          label: "Additional Withholding",
          description:
            "You can withhold an additional amount of California income taxes here.",
          key: "additional_withholding",
          inputQuestionFormat: {
            type: "Currency",
          },
          answers: [
            {
              value: "0.0",
              validFrom: "2010-01-01",
              validUpTo: null,
            },
          ],
        },
        {
          label: "File a New Hire Report?",
          description:
            "State law requires you to file a new hire report within 20 days of hiring or re-hiring an employee.",
          key: "file_new_hire_report",
          inputQuestionFormat: {
            type: "Select",
          },
          answers: [
            {
              value: "true",
              validFrom: "2010-01-01",
              validUpTo: null,
            },
          ],
        },
      ],
    },
  ]);
});
