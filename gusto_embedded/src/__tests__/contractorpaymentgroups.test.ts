/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Contractorpaymentgroups Post V1 Companies Company Id Contractor Payment Groups Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-contractor_payment_groups-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.create({
    companyId: "<id>",
    requestBody: {
      checkDate: new RFCDate("2020-01-01"),
      creationToken: "1d532d13-8f61-4a57-ad3c-b5fac1c6e05e",
      contractorPayments: [],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "f693e034-d833-46e3-88d4-2c820c383c57",
    companyUuid: "c54046f7-1be4-4c54-8194-f4842c30c86d",
    checkDate: "2024-05-07T00:00:00Z",
    debitDate: "2024-05-01T00:00:00Z",
    status: "Unfunded",
    creationToken: "45ef81bb-ae24-4ad1-b2c6-6e563a4c30ed",
    totals: {
      amount: "2295.0",
      debitAmount: "2295.0",
      wageAmount: "2220.0",
      reimbursementAmount: "75.0",
    },
    contractorPayments: [
      {
        uuid: "630dc982-f498-4ebc-a6dc-4d76711027ce",
        contractorUuid: "2e6d0970-31bf-47ce-bdb4-713e4207ecf4",
        bonus: "0.0",
        hours: "40.0",
        paymentMethod: "Direct Deposit",
        reimbursement: "75.0",
        status: "Unfunded",
        hourlyRate: "18.0",
        mayCancel: false,
        wage: "0.0",
        wageType: "Hourly",
        wageTotal: "720.0",
      },
      {
        uuid: "12f51eba-d653-4357-8c05-1f1f8d0fd5e3",
        contractorUuid: "a975fda0-fcf5-469a-a5fd-06e43d1cd99d",
        bonus: "0.0",
        hours: "0.0",
        paymentMethod: "Check",
        reimbursement: "0.0",
        status: "Unfunded",
        hourlyRate: "0.0",
        mayCancel: false,
        wage: "1500.0",
        wageType: "Fixed",
        wageTotal: "1500.0",
      },
    ],
  });
});

test("Contractorpaymentgroups Post V1 Companies Company Id Contractor Payment Groups Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-contractor_payment_groups-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.create({
    companyId: "<id>",
    requestBody: {
      checkDate: new RFCDate("2020-01-01"),
      creationToken: "1d532d13-8f61-4a57-ad3c-b5fac1c6e05e",
      contractorPayments: [
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentgroups Post V1 Companies Company Id Contractor Payment Groups Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-contractor_payment_groups-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.create({
    companyId: "<id>",
    requestBody: {
      checkDate: new RFCDate("2020-01-01"),
      creationToken: "1d532d13-8f61-4a57-ad3c-b5fac1c6e05e",
      contractorPayments: [
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentgroups Post V1 Companies Company Id Contractor Payment Groups Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-contractor_payment_groups-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.create({
    companyId: "<id>",
    requestBody: {
      checkDate: new RFCDate("2020-01-01"),
      creationToken: "1d532d13-8f61-4a57-ad3c-b5fac1c6e05e",
      contractorPayments: [],
    },
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentgroups Get V1 Companies Company Id Contractor Payment Groups Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-contractor_payment_groups-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.list({
    companyId: "<id>",
    startDate: "2020-01-01",
    endDate: "2020-12-31",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "7f2337f9-9b78-44b9-aeed-be4777b833a8",
      companyUuid: "c54046f7-1be4-4c54-8194-f4842c30c86d",
      checkDate: "2024-03-15T00:00:00Z",
      debitDate: "2024-03-11T00:00:00Z",
      status: "Funded",
      creationToken: "a51a3500-3200-43af-a738-169d4b66a9db",
      totals: {
        debitAmount: "740.00",
        wageAmount: "720.00",
        reimbursementAmount: "20.00",
      },
    },
    {
      uuid: "56260b3d-c375-415c-b77a-75d99f717193",
      companyUuid: "c54046f7-1be4-4c54-8194-f4842c30c86d",
      checkDate: "2024-05-02T00:00:00Z",
      debitDate: "2024-04-26T00:00:00Z",
      status: "Unfunded",
      creationToken: "45ef81bb-ae24-4ad1-b2c6-6e563a4c30ed",
      totals: {
        debitAmount: "2365.00",
        wageAmount: "2270.00",
        reimbursementAmount: "95.00",
      },
    },
  ]);
});

test("Contractorpaymentgroups Post V1 Companies Company Id Contractor Payment Groups Preview Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-contractor_payment_groups-preview-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.preview({
    companyId: "<id>",
    requestBody: {
      checkDate: new RFCDate("2020-01-01"),
      creationToken: "1d532d13-8f61-4a57-ad3c-b5fac1c6e05e",
      contractorPayments: [
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "nil",
    companyUuid: "c54046f7-1be4-4c54-8194-f4842c30c86d",
    checkDate: "2024-05-07T00:00:00Z",
    debitDate: "2024-05-01T00:00:00Z",
    status: "Unfunded",
    creationToken: "nil",
    totals: {
      amount: "2295.0",
      debitAmount: "2295.0",
      wageAmount: "2220.0",
      reimbursementAmount: "75.0",
    },
    contractorPayments: [
      {
        uuid: "nil",
        contractorUuid: "2e6d0970-31bf-47ce-bdb4-713e4207ecf4",
        bonus: "0.0",
        hours: "40.0",
        paymentMethod: "Direct Deposit",
        reimbursement: "75.0",
        status: "Unfunded",
        hourlyRate: "18.0",
        mayCancel: false,
        wage: "0.0",
        wageType: "Hourly",
        wageTotal: "720.0",
      },
      {
        uuid: "nil",
        contractorUuid: "a975fda0-fcf5-469a-a5fd-06e43d1cd99d",
        bonus: "0.0",
        hours: "0.0",
        paymentMethod: "Check",
        reimbursement: "0.0",
        status: "Unfunded",
        hourlyRate: "0.0",
        mayCancel: false,
        wage: "1500.0",
        wageType: "Fixed",
        wageTotal: "1500.0",
      },
    ],
  });
});

test("Contractorpaymentgroups Post V1 Companies Company Id Contractor Payment Groups Preview Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-contractor_payment_groups-preview-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.preview({
    companyId: "<id>",
    requestBody: {
      checkDate: new RFCDate("2020-01-01"),
      creationToken: "1d532d13-8f61-4a57-ad3c-b5fac1c6e05e",
      contractorPayments: [
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentgroups Post V1 Companies Company Id Contractor Payment Groups Preview Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-contractor_payment_groups-preview-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.preview({
    companyId: "<id>",
    requestBody: {
      checkDate: new RFCDate("2020-01-01"),
      creationToken: "1d532d13-8f61-4a57-ad3c-b5fac1c6e05e",
      contractorPayments: [
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
        {
          wage: 5000,
          hours: 40,
          bonus: 500,
          reimbursement: 20,
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentgroups Post V1 Companies Company Id Contractor Payment Groups Preview Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-contractor_payment_groups-preview-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.preview({
    companyId: "<id>",
    requestBody: {
      checkDate: new RFCDate("2020-01-01"),
      creationToken: "1d532d13-8f61-4a57-ad3c-b5fac1c6e05e",
      contractorPayments: [],
    },
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentgroups Get V1 Contractor Payment Groups Contractor Payment Group Id Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-contractor_payment_groups-contractor_payment_group_id-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.get({
    contractorPaymentGroupUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "f693e034-d833-46e3-88d4-2c820c383c57",
    companyUuid: "c54046f7-1be4-4c54-8194-f4842c30c86d",
    checkDate: "2024-05-07T00:00:00Z",
    debitDate: "2024-05-01T00:00:00Z",
    status: "Unfunded",
    creationToken: "45ef81bb-ae24-4ad1-b2c6-6e563a4c30ed",
    totals: {
      amount: "2295.0",
      debitAmount: "2295.0",
      wageAmount: "2220.0",
      reimbursementAmount: "75.0",
    },
    contractorPayments: [
      {
        uuid: "630dc982-f498-4ebc-a6dc-4d76711027ce",
        contractorUuid: "2e6d0970-31bf-47ce-bdb4-713e4207ecf4",
        bonus: "0.0",
        hours: "40.0",
        paymentMethod: "Direct Deposit",
        reimbursement: "75.0",
        status: "Unfunded",
        hourlyRate: "18.0",
        mayCancel: false,
        wage: "0.0",
        wageType: "Hourly",
        wageTotal: "720.0",
      },
      {
        uuid: "12f51eba-d653-4357-8c05-1f1f8d0fd5e3",
        contractorUuid: "a975fda0-fcf5-469a-a5fd-06e43d1cd99d",
        bonus: "0.0",
        hours: "0.0",
        paymentMethod: "Check",
        reimbursement: "0.0",
        status: "Unfunded",
        hourlyRate: "0.0",
        mayCancel: false,
        wage: "1500.0",
        wageType: "Fixed",
        wageTotal: "1500.0",
      },
    ],
  });
});

test("Contractorpaymentgroups Delete V1 Contractor Payment Groups Contractor Payment Group Id Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-contractor_payment_groups-contractor_payment_group_id-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.contractorPaymentGroups.delete({
    contractorPaymentGroupUuid: "<id>",
  });
});

test("Contractorpaymentgroups Delete V1 Contractor Payment Groups Contractor Payment Group Id Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-contractor_payment_groups-contractor_payment_group_id-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.contractorPaymentGroups.delete({
    contractorPaymentGroupUuid: "<id>",
  });
});

test("Contractorpaymentgroups Delete V1 Contractor Payment Groups Contractor Payment Group Id Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-contractor_payment_groups-contractor_payment_group_id-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.contractorPaymentGroups.delete({
    contractorPaymentGroupUuid: "<id>",
  });
});

test("Contractorpaymentgroups Put V1 Contractor Payment Groups Contractor Payment Group Id Fund Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractor_payment_groups-contractor_payment_group_id-fund-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.fund({
    contractorPaymentGroupUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "f693e034-d833-46e3-88d4-2c820c383c57",
    companyUuid: "c54046f7-1be4-4c54-8194-f4842c30c86d",
    checkDate: "2024-05-07T00:00:00Z",
    debitDate: "2024-05-01T00:00:00Z",
    status: "Unfunded",
    creationToken: "45ef81bb-ae24-4ad1-b2c6-6e563a4c30ed",
    totals: {
      amount: "2295.0",
      debitAmount: "2295.0",
      wageAmount: "2220.0",
      reimbursementAmount: "75.0",
    },
    contractorPayments: [
      {
        uuid: "630dc982-f498-4ebc-a6dc-4d76711027ce",
        contractorUuid: "2e6d0970-31bf-47ce-bdb4-713e4207ecf4",
        bonus: "0.0",
        hours: "40.0",
        paymentMethod: "Direct Deposit",
        reimbursement: "75.0",
        status: "Unfunded",
        hourlyRate: "18.0",
        mayCancel: false,
        wage: "0.0",
        wageType: "Hourly",
        wageTotal: "720.0",
      },
      {
        uuid: "12f51eba-d653-4357-8c05-1f1f8d0fd5e3",
        contractorUuid: "a975fda0-fcf5-469a-a5fd-06e43d1cd99d",
        bonus: "0.0",
        hours: "0.0",
        paymentMethod: "Check",
        reimbursement: "0.0",
        status: "Unfunded",
        hourlyRate: "0.0",
        mayCancel: false,
        wage: "1500.0",
        wageType: "Fixed",
        wageTotal: "1500.0",
      },
    ],
  });
});

test("Contractorpaymentgroups Put V1 Contractor Payment Groups Contractor Payment Group Id Fund Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractor_payment_groups-contractor_payment_group_id-fund-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.fund({
    contractorPaymentGroupUuid: "<id>",
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentgroups Put V1 Contractor Payment Groups Contractor Payment Group Id Fund Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractor_payment_groups-contractor_payment_group_id-fund-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.fund({
    contractorPaymentGroupUuid: "<id>",
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentgroups Put V1 Contractor Payment Groups Contractor Payment Group Id Fund Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractor_payment_groups-contractor_payment_group_id-fund-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentGroups.fund({
    contractorPaymentGroupUuid: "<id>",
  });
  expect(result).toBeDefined();
});
