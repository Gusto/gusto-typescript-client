/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Timeoffpolicies Post V1 Payrolls Payroll Id Calculate Accruing Time Off Hours Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-payrolls-payroll_id-calculate_accruing_time_off_hours-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.calculateAccruingHours({
    payrollId: "<id>",
    employeeId: "<id>",
    requestBody: {
      regularHoursWorked: 30.25,
      overtimeHoursWorked: 10,
      doubleOvertimeHoursWorked: 0,
      ptoHoursUsed: 5.5,
      sickHoursUsed: 0,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      timeOffPolicyUuid: "c3a15554-f124-415d-b2c4-90b430fd8eb1",
      hours: "3.2",
    },
    {
      timeOffPolicyUuid: "386fc48d-52d2-4009-87b3-368f74f6b3df",
      hours: "6.0",
    },
  ]);
});

test("Timeoffpolicies Post V1 Payrolls Payroll Id Calculate Accruing Time Off Hours Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-payrolls-payroll_id-calculate_accruing_time_off_hours-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.calculateAccruingHours({
    payrollId: "<id>",
    employeeId: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Post V1 Payrolls Payroll Id Calculate Accruing Time Off Hours Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-payrolls-payroll_id-calculate_accruing_time_off_hours-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.calculateAccruingHours({
    payrollId: "<id>",
    employeeId: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Post V1 Payrolls Payroll Id Calculate Accruing Time Off Hours Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-payrolls-payroll_id-calculate_accruing_time_off_hours-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.calculateAccruingHours({
    payrollId: "<id>",
    employeeId: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Get Time Off Policies Time Off Policy Uuid Unlimited Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-time_off_policies-time_off_policy_uuid-Unlimited Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.retrieve({
    timeOffPolicyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "3f746cd0-dd08-408f-b712-8180c7c621e9",
    companyUuid: "de83cff2-8e7a-448e-a28c-14258a9971c3",
    name: "Test Vacation Unlimited Policy",
    policyType: "vacation",
    accrualMethod: "unlimited",
    accrualRate: "<value>",
    accrualRateUnit: "<value>",
    paidOutOnTermination: false,
    accrualWaitingPeriodDays: 370456,
    carryoverLimitHours: "<value>",
    maxAccrualHoursPerYear: "<value>",
    maxHours: "<value>",
    complete: true,
    version: "f5556bce3d75ec2b62bd11990aa7993a",
    isActive: true,
    employees: [
      {
        uuid: "05ed3150-591e-4f8b-bfd5-55d478edd2d8",
      },
      {
        uuid: "3633ce57-abb7-422f-8c5a-455566618e6a",
      },
      {
        uuid: "9b37429c-e540-40fb-86b3-738ca9af65c7",
      },
    ],
  });
});

test("Timeoffpolicies Get Time Off Policies Time Off Policy Uuid Fixed Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-time_off_policies-time_off_policy_uuid-Fixed Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.retrieve({
    timeOffPolicyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "2439c13f-f6d7-4a93-af8c-175fd4cc7ce8",
    companyUuid: "f5f7b10d-2ddb-42f6-a955-d55320ce5316",
    name: "Test Vacation Fixed Policy",
    policyType: "vacation",
    accrualMethod: "per_anniversary_year",
    accrualRate: "120.0",
    accrualRateUnit: "<value>",
    paidOutOnTermination: true,
    accrualWaitingPeriodDays: 0,
    carryoverLimitHours: "240.0",
    maxAccrualHoursPerYear: "120.0",
    maxHours: "300.0",
    complete: true,
    version: "f5556bce3d75ec2b62bd11990aa7993a",
    isActive: true,
    employees: [
      {
        uuid: "de7a5fb3-2e0f-460a-abbf-467fe310bf5c",
      },
      {
        uuid: "92af03c7-a833-43ae-bae8-f67007a59b37",
      },
    ],
  });
});

test("Timeoffpolicies Get Time Off Policies Time Off Policy Uuid Hourly Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-time_off_policies-time_off_policy_uuid-Hourly Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.retrieve({
    timeOffPolicyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "bd5f354f-12e0-4a5e-ad1f-953bb2685ad4",
    companyUuid: "6767445f-5075-4ea4-a7f5-d5b5b93d4d60",
    name: "Test Vacation Hourly Policy",
    policyType: "vacation",
    accrualMethod: "per_hour_paid",
    accrualRate: "4.0",
    accrualRateUnit: "80.0",
    paidOutOnTermination: true,
    accrualWaitingPeriodDays: 30,
    carryoverLimitHours: "200.0",
    maxAccrualHoursPerYear: "120.0",
    maxHours: "240.0",
    complete: true,
    version: "f5556bce3d75ec2b62bd11990aa7993a",
    isActive: true,
    employees: [
      {
        uuid: "1ea2764d-0f1a-4f09-b1d9-3006aecf63c4",
      },
      {
        uuid: "a0db19a2-7c8f-42b4-9d4c-2e6246c3d6e8",
      },
    ],
  });
});

test("Timeoffpolicies Put Time Off Policies Time Off Policy Uuid Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-time_off_policies-time_off_policy_uuid-example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.update({
    timeOffPolicyUuid: "<id>",
    requestBody: {
      name: "Hourly Vacation Policy",
      accrualMethod: "per_hour_paid",
      accrualRate: "4.0",
      accrualRateUnit: "80.0",
      paidOutOnTermination: true,
      accrualWaitingPeriodDays: 30,
      carryoverLimitHours: "200.0",
      maxAccrualHoursPerYear: "120.0",
      maxHours: "240.0",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "64a9fdcb-6b72-49e9-938f-aad91c34e607",
    companyUuid: "<id>",
    name: "<value>",
    policyType: "vacation",
    accrualMethod: "<value>",
    isActive: true,
    employees: [
      {},
    ],
  });
});

test("Timeoffpolicies Put Time Off Policies Time Off Policy Uuid Unlimited Vacation Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-time_off_policies-time_off_policy_uuid-Unlimited Vacation Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.update({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "3f746cd0-dd08-408f-b712-8180c7c621e9",
    companyUuid: "de83cff2-8e7a-448e-a28c-14258a9971c3",
    name: "Unlimited Vacation Policy",
    policyType: "vacation",
    accrualMethod: "unlimited",
    accrualRate: "<value>",
    accrualRateUnit: "<value>",
    paidOutOnTermination: false,
    accrualWaitingPeriodDays: 857478,
    carryoverLimitHours: "<value>",
    maxAccrualHoursPerYear: "<value>",
    maxHours: "<value>",
    complete: true,
    isActive: true,
    employees: [],
  });
});

test("Timeoffpolicies Put Time Off Policies Time Off Policy Uuid Hourly Vacation Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-time_off_policies-time_off_policy_uuid-Hourly Vacation Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.update({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "d86223a1-ec67-4204-8d6a-0f36499c02d0",
    companyUuid: "f43bcd64-7f57-4d4e-9c1a-7c90bab8a358",
    name: "Test Vacation Hourly Policy",
    policyType: "vacation",
    accrualMethod: "per_hour_paid",
    accrualRate: "4.0",
    accrualRateUnit: "80.0",
    paidOutOnTermination: true,
    accrualWaitingPeriodDays: 30,
    carryoverLimitHours: "200.0",
    maxAccrualHoursPerYear: "120.0",
    maxHours: "240.0",
    complete: true,
    isActive: true,
    employees: [],
  });
});

test("Timeoffpolicies Put Time Off Policies Time Off Policy Uuid Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-time_off_policies-time_off_policy_uuid-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.update({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put Time Off Policies Time Off Policy Uuid Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-time_off_policies-time_off_policy_uuid-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.update({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put Time Off Policies Time Off Policy Uuid Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-time_off_policies-time_off_policy_uuid-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.update({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Get Companies Company Uuid Time Off Policies Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-companies-company_uuid-time_off_policies-example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.get({
    companyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "3f746cd0-dd08-408f-b712-8180c7c621e9",
      companyUuid: "de83cff2-8e7a-448e-a28c-14258a9971c3",
      name: "Test Vacation Unlimited Policy",
      policyType: "vacation",
      accrualMethod: "unlimited",
      accrualRate: "<value>",
      accrualRateUnit: "<value>",
      paidOutOnTermination: false,
      accrualWaitingPeriodDays: 700347,
      carryoverLimitHours: "<value>",
      maxAccrualHoursPerYear: "<value>",
      maxHours: "<value>",
      complete: true,
      version: "f5556bce3d75ec2b62bd11990aa7993a",
      isActive: true,
      employees: [
        {
          uuid: "05ed3150-591e-4f8b-bfd5-55d478edd2d8",
        },
        {
          uuid: "3633ce57-abb7-422f-8c5a-455566618e6a",
        },
        {
          uuid: "9b37429c-e540-40fb-86b3-738ca9af65c7",
        },
      ],
    },
    {
      uuid: "2439c13f-f6d7-4a93-af8c-175fd4cc7ce8",
      companyUuid: "f5f7b10d-2ddb-42f6-a955-d55320ce5316",
      name: "Test Vacation Fixed Policy",
      policyType: "vacation",
      accrualMethod: "per_anniversary_year",
      accrualRate: "120.0",
      accrualRateUnit: "<value>",
      paidOutOnTermination: true,
      accrualWaitingPeriodDays: 0,
      carryoverLimitHours: "240.0",
      maxAccrualHoursPerYear: "120.0",
      maxHours: "300.0",
      complete: true,
      version: "f5556bce3d75ec2b62bd11990aa7993a",
      isActive: true,
      employees: [
        {
          uuid: "de7a5fb3-2e0f-460a-abbf-467fe310bf5c",
        },
        {
          uuid: "92af03c7-a833-43ae-bae8-f67007a59b37",
        },
      ],
    },
    {
      uuid: "bd5f354f-12e0-4a5e-ad1f-953bb2685ad4",
      companyUuid: "6767445f-5075-4ea4-a7f5-d5b5b93d4d60",
      name: "Test Vacation Hourly Policy",
      policyType: "vacation",
      accrualMethod: "per_hour_paid",
      accrualRate: "4.0",
      accrualRateUnit: "80.0",
      paidOutOnTermination: true,
      accrualWaitingPeriodDays: 30,
      carryoverLimitHours: "200.0",
      maxAccrualHoursPerYear: "120.0",
      maxHours: "240.0",
      complete: true,
      version: "f5556bce3d75ec2b62bd11990aa7993a",
      isActive: true,
      employees: [
        {
          uuid: "1ea2764d-0f1a-4f09-b1d9-3006aecf63c4",
        },
        {
          uuid: "a0db19a2-7c8f-42b4-9d4c-2e6246c3d6e8",
        },
      ],
    },
  ]);
});

test("Timeoffpolicies Post Companies Company Uuid Time Off Policies Unlimited Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-companies-company_uuid-time_off_policies-Unlimited Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.create({
    companyUuid: "<id>",
    requestBody: {
      name: "Unlimited Vacation Policy",
      policyType: "vacation",
      accrualMethod: "unlimited",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "68a1c8b1-cf9c-4f0b-91c3-8910fc125ec7",
    companyUuid: "<id>",
    name: "<value>",
    policyType: "vacation",
    accrualMethod: "<value>",
    isActive: false,
    employees: [],
  });
});

test("Timeoffpolicies Post Companies Company Uuid Time Off Policies Hourly Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-companies-company_uuid-time_off_policies-Hourly Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.create({
    companyUuid: "<id>",
    requestBody: {
      name: "Test Vacation Hourly Policy",
      policyType: "vacation",
      accrualMethod: "per_hour_paid",
      accrualRate: "4.0",
      accrualRateUnit: "80.0",
      paidOutOnTermination: true,
      accrualWaitingPeriodDays: 30,
      carryoverLimitHours: "200.0",
      maxAccrualHoursPerYear: "120.0",
      maxHours: "240.0",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "8b50daa4-883a-45ac-bf16-67931a204633",
    companyUuid: "<id>",
    name: "<value>",
    policyType: "vacation",
    accrualMethod: "<value>",
    isActive: false,
    employees: [
      {},
      {},
      {},
    ],
  });
});

test("Timeoffpolicies Post Companies Company Uuid Time Off Policies Unlimited Vacation Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-companies-company_uuid-time_off_policies-Unlimited Vacation Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.create({
    companyUuid: "<id>",
    requestBody: {
      name: "<value>",
      policyType: "<value>",
      accrualMethod: "per_anniversary_year",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "3f746cd0-dd08-408f-b712-8180c7c621e9",
    companyUuid: "de83cff2-8e7a-448e-a28c-14258a9971c3",
    name: "Unlimited Vacation Policy",
    policyType: "vacation",
    accrualMethod: "unlimited",
    accrualRate: "<value>",
    accrualRateUnit: "<value>",
    paidOutOnTermination: false,
    accrualWaitingPeriodDays: 486589,
    carryoverLimitHours: "<value>",
    maxAccrualHoursPerYear: "<value>",
    maxHours: "<value>",
    complete: true,
    isActive: true,
    employees: [],
  });
});

test("Timeoffpolicies Post Companies Company Uuid Time Off Policies Hourly Vacation Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-companies-company_uuid-time_off_policies-Hourly Vacation Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.create({
    companyUuid: "<id>",
    requestBody: {
      name: "<value>",
      policyType: "<value>",
      accrualMethod: "per_anniversary_year",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "d86223a1-ec67-4204-8d6a-0f36499c02d0",
    companyUuid: "f43bcd64-7f57-4d4e-9c1a-7c90bab8a358",
    name: "Test Vacation Hourly Policy",
    policyType: "vacation",
    accrualMethod: "per_hour_paid",
    accrualRate: "4.0",
    accrualRateUnit: "80.0",
    paidOutOnTermination: true,
    accrualWaitingPeriodDays: 30,
    carryoverLimitHours: "200.0",
    maxAccrualHoursPerYear: "120.0",
    maxHours: "240.0",
    complete: true,
    isActive: true,
    employees: [],
  });
});

test("Timeoffpolicies Post Companies Company Uuid Time Off Policies Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-companies-company_uuid-time_off_policies-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.create({
    companyUuid: "<id>",
    requestBody: {
      name: "<value>",
      policyType: "<value>",
      accrualMethod: "per_pay_period",
    },
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Post Companies Company Uuid Time Off Policies Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-companies-company_uuid-time_off_policies-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.create({
    companyUuid: "<id>",
    requestBody: {
      name: "<value>",
      policyType: "<value>",
      accrualMethod: "unlimited",
    },
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Post Companies Company Uuid Time Off Policies Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-companies-company_uuid-time_off_policies-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.create({
    companyUuid: "<id>",
    requestBody: {
      name: "<value>",
      policyType: "<value>",
      accrualMethod: "per_hour_paid",
    },
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Add Employees Unlimited Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-add_employees-Unlimited Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.addEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "3f746cd0-dd08-408f-b712-8180c7c621e9",
    companyUuid: "de83cff2-8e7a-448e-a28c-14258a9971c3",
    name: "test policy",
    policyType: "vacation",
    accrualMethod: "unlimited",
    accrualRate: "<value>",
    accrualRateUnit: "<value>",
    paidOutOnTermination: false,
    accrualWaitingPeriodDays: 556955,
    carryoverLimitHours: "<value>",
    maxAccrualHoursPerYear: "<value>",
    maxHours: "<value>",
    complete: true,
    isActive: true,
    employees: [
      {
        uuid: "05ed3150-591e-4f8b-bfd5-55d478edd2d8",
      },
    ],
  });
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Add Employees Fixed/hourly Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-add_employees-Fixed/Hourly Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.addEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "1cb0826f-c6d7-4361-b3e7-5e6d8af6853e",
    companyUuid: "<id>",
    name: "<value>",
    policyType: "vacation",
    accrualMethod: "<value>",
    isActive: true,
    employees: [
      {},
    ],
  });
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Add Employees Hourly Policy", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-add_employees-Hourly Policy",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.addEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "3f746cd0-dd08-408f-b712-8180c7c621e9",
    companyUuid: "de83cff2-8e7a-448e-a28c-14258a9971c3",
    name: "test policy",
    policyType: "vacation",
    accrualMethod: "per_hour_paid",
    accrualRate: "4.0",
    accrualRateUnit: "80.0",
    paidOutOnTermination: true,
    accrualWaitingPeriodDays: 30,
    carryoverLimitHours: "200.0",
    maxAccrualHoursPerYear: "120.0",
    maxHours: "240.0",
    complete: true,
    isActive: true,
    employees: [
      {
        uuid: "56c672b4-3918-45cd-a3bb-a62ae0ff1307",
      },
      {
        uuid: "28e7a45d-32dd-4925-a82a-9a3ccc6d302c",
      },
      {
        uuid: "f60650da-ba18-417a-b2ab-3c9b6f0fe4f2",
      },
    ],
  });
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Add Employees Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-add_employees-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.addEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Add Employees Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-add_employees-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.addEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Add Employees Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-add_employees-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.addEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put V1 Time Off Policies Time Off Policy Uuid Remove Employees Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-time_off_policies-time_off_policy_uuid-remove_employees-example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.removeEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "3f746cd0-dd08-408f-b712-8180c7c621e9",
    companyUuid: "de83cff2-8e7a-448e-a28c-14258a9971c3",
    name: "test policy",
    policyType: "vacation",
    accrualMethod: "unlimited",
    accrualRate: "<value>",
    accrualRateUnit: "<value>",
    paidOutOnTermination: false,
    accrualWaitingPeriodDays: 75298,
    carryoverLimitHours: "<value>",
    maxAccrualHoursPerYear: "<value>",
    maxHours: "<value>",
    complete: true,
    isActive: true,
    employees: [
      {
        uuid: "05ed3150-591e-4f8b-bfd5-55d478edd2d8",
      },
    ],
  });
});

test("Timeoffpolicies Put V1 Time Off Policies Time Off Policy Uuid Remove Employees Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-time_off_policies-time_off_policy_uuid-remove_employees-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.removeEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put V1 Time Off Policies Time Off Policy Uuid Remove Employees Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-time_off_policies-time_off_policy_uuid-remove_employees-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.removeEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put V1 Time Off Policies Time Off Policy Uuid Remove Employees Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-time_off_policies-time_off_policy_uuid-remove_employees-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.removeEmployees({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Balance Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-balance-example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.updateBalance({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "3f746cd0-dd08-408f-b712-8180c7c621e9",
    companyUuid: "de83cff2-8e7a-448e-a28c-14258a9971c3",
    name: "test policy",
    policyType: "vacation",
    accrualMethod: "per_hour_paid",
    accrualRate: "4.0",
    accrualRateUnit: "80.0",
    paidOutOnTermination: true,
    accrualWaitingPeriodDays: 30,
    carryoverLimitHours: "200.0",
    maxAccrualHoursPerYear: "120.0",
    maxHours: "240.0",
    complete: true,
    isActive: true,
    employees: [
      {
        uuid: "56c672b4-3918-45cd-a3bb-a62ae0ff1307",
      },
      {
        uuid: "28e7a45d-32dd-4925-a82a-9a3ccc6d302c",
      },
      {
        uuid: "f60650da-ba18-417a-b2ab-3c9b6f0fe4f2",
      },
    ],
  });
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Balance Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-balance-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.updateBalance({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Balance Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-balance-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.updateBalance({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put Version Time Off Policies Time Off Policy Uuid Balance Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-version-time_off_policies-time_off_policy_uuid-balance-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.updateBalance({
    timeOffPolicyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put V1 Time Off Policies Time Off Policy Uuid Deactivate Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-time_off_policies-time_off_policy_uuid-deactivate-example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.deactivate({
    timeOffPolicyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "3f746cd0-dd08-408f-b712-8180c7c621e9",
    companyUuid: "de83cff2-8e7a-448e-a28c-14258a9971c3",
    name: "test policy",
    policyType: "vacation",
    accrualMethod: "unlimited",
    accrualRate: "<value>",
    accrualRateUnit: "<value>",
    paidOutOnTermination: false,
    accrualWaitingPeriodDays: 340065,
    carryoverLimitHours: "<value>",
    maxAccrualHoursPerYear: "<value>",
    maxHours: "<value>",
    complete: true,
    isActive: false,
    employees: [
      {
        uuid: "05ed3150-591e-4f8b-bfd5-55d478edd2d8",
      },
    ],
  });
});

test("Timeoffpolicies Put V1 Time Off Policies Time Off Policy Uuid Deactivate Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-time_off_policies-time_off_policy_uuid-deactivate-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.deactivate({
    timeOffPolicyUuid: "<id>",
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put V1 Time Off Policies Time Off Policy Uuid Deactivate Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-time_off_policies-time_off_policy_uuid-deactivate-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.deactivate({
    timeOffPolicyUuid: "<id>",
  });
  expect(result).toBeDefined();
});

test("Timeoffpolicies Put V1 Time Off Policies Time Off Policy Uuid Deactivate Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-time_off_policies-time_off_policy_uuid-deactivate-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.timeOffPolicies.deactivate({
    timeOffPolicyUuid: "<id>",
  });
  expect(result).toBeDefined();
});
