/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Garnishments Post V1 Employees Employee Id Garnishments Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-garnishments-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.create({
    employeeId: "<id>",
    requestBody: {
      amount: "150.00",
      description: "Back taxes",
      courtOrdered: true,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "0648730b-e81b-40fd-b400-179e824ec05f",
    active: true,
    times: null,
    recurring: false,
    annualMaximum: null,
    payPeriodMaximum: null,
    deductAsPercentage: false,
  });
});

test("Garnishments Post V1 Employees Employee Id Garnishments Child Support Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-garnishments-Child-Support-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.create({
    employeeId: "<id>",
    requestBody: {
      amount: "40",
      courtOrdered: true,
      garnishmentType: "child_support",
      childSupport: {
        state: "FL",
        paymentPeriod: "Monthly",
        caseNumber: "CS1234",
      },
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "427b9e5b-95d2-4cfd-b063-45dff43ac8aa",
    active: true,
    times: null,
    recurring: false,
    annualMaximum: null,
    payPeriodMaximum: null,
    deductAsPercentage: false,
  });
});

test("Garnishments Post V1 Employees Employee Id Garnishments Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-garnishments-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.create({
    employeeId: "<id>",
    requestBody: {
      amount: "<value>",
      courtOrdered: true,
    },
  });
  expect(result).toBeDefined();
});

test("Garnishments Post V1 Employees Employee Id Garnishments Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-garnishments-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.create({
    employeeId: "<id>",
    requestBody: {
      amount: "<value>",
      courtOrdered: false,
    },
  });
  expect(result).toBeDefined();
});

test("Garnishments Post V1 Employees Employee Id Garnishments Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-garnishments-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.create({
    employeeId: "<id>",
    requestBody: {
      amount: "<value>",
      courtOrdered: true,
    },
  });
  expect(result).toBeDefined();
});

test("Garnishments Get V1 Employees Employee Id Garnishments Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-garnishments-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.get({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "b888f774-3e7c-4135-a18c-6b985523c4bc",
      active: true,
      times: null,
      recurring: false,
      annualMaximum: null,
      payPeriodMaximum: null,
      deductAsPercentage: false,
    },
    {
      uuid: "e50f7622-81da-484b-9c66-1c8a99c6b71b",
      active: true,
      times: null,
      recurring: false,
      annualMaximum: null,
      payPeriodMaximum: null,
      deductAsPercentage: false,
    },
  ]);
});

test("Garnishments Get V1 Garnishments Garnishment Id Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-garnishments-garnishment_id-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.fetch({
    garnishmentId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "a1b1d4d7-9d85-4c0c-970a-7d2676a05c04",
    active: true,
    times: null,
    recurring: false,
    annualMaximum: null,
    payPeriodMaximum: null,
    deductAsPercentage: false,
  });
});

test("Garnishments Get V1 Garnishments Garnishment Id Child Support Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-garnishments-garnishment_id-Child-Support-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.fetch({
    garnishmentId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "c70f28ce-90e2-4168-b683-1abb1a5f7f21",
    active: true,
    times: null,
    recurring: false,
    annualMaximum: null,
    payPeriodMaximum: null,
    deductAsPercentage: false,
  });
});

test("Garnishments Put V1 Garnishments Garnishment Id Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-garnishments-garnishment_id-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.update({
    garnishmentId: "<id>",
    requestBody: {
      version: "52b7c567242cb7452e89ba2bc02cb476",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "4c044b4e-cf94-4436-a3fb-eaf811f919f4",
    active: true,
    times: null,
    recurring: false,
    annualMaximum: null,
    payPeriodMaximum: null,
    deductAsPercentage: false,
  });
});

test("Garnishments Put V1 Garnishments Garnishment Id Child Support Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-garnishments-garnishment_id-Child-Support-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.update({
    garnishmentId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "b05be711-9e3f-4fc9-8067-cd32e9559970",
    active: true,
    times: null,
    recurring: false,
    annualMaximum: null,
    payPeriodMaximum: null,
    deductAsPercentage: false,
  });
});

test("Garnishments Put V1 Garnishments Garnishment Id Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-garnishments-garnishment_id-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.update({
    garnishmentId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Garnishments Put V1 Garnishments Garnishment Id Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-garnishments-garnishment_id-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.update({
    garnishmentId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Garnishments Put V1 Garnishments Garnishment Id Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-garnishments-garnishment_id-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.update({
    garnishmentId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Garnishments Get V1 Garnishments Child Support Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-garnishments-child_support-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.garnishments.getChildSupport({});
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
