/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Payschedules Post V1 Companies Company Id Pay Schedules Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.create({
    companyId: "<id>",
    requestBody: {
      frequency: "Twice per month",
      anchorPayDate: "2021-10-15",
      anchorEndOfPayPeriod: "2021-10-15",
      day1: 15,
      day2: 31,
      customName: "demo pay schedule",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "f2a69c38-e2f9-4e31-b5c5-4754fc60a052",
    frequency: "Twice per month",
    anchorPayDate: "2020-05-15",
    anchorEndOfPayPeriod: "2020-05-08",
    day1: 15,
    day2: 31,
    name: "Engineering",
    customName: "A new monthly pay schedule",
    autoPilot: false,
    active: true,
  });
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.create({
    companyId: "<id>",
    requestBody: {
      frequency: "Every other week",
      anchorPayDate: "2020-05-15",
      anchorEndOfPayPeriod: "2020-05-08",
    },
  });
  expect(result).toBeDefined();
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.create({
    companyId: "<id>",
    requestBody: {
      frequency: "Every other week",
      anchorPayDate: "2020-05-15",
      anchorEndOfPayPeriod: "2020-05-08",
    },
  });
  expect(result).toBeDefined();
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.create({
    companyId: "<id>",
    requestBody: {
      frequency: "Every week",
      anchorPayDate: "2020-05-15",
      anchorEndOfPayPeriod: "2020-05-08",
    },
  });
  expect(result).toBeDefined();
});

test("Payschedules Get V1 Companies Company Id Pay Schedules Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-pay_schedules-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.getForCompany({
    companyId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "2097fe08-407a-46d7-b35c-a32402a2355e",
      frequency: "Twice per month",
      anchorPayDate: "2020-05-15",
      anchorEndOfPayPeriod: "2020-05-08",
      day1: 15,
      day2: 31,
      name: "Engineering",
      customName: "Engineering department pay schedule",
      autoPilot: false,
      active: true,
    },
    {
      uuid: "8fc9f556-74fa-4271-97f6-4bfbfc5a5352",
      frequency: "Monthly",
      anchorPayDate: "2020-05-31",
      day1: 31,
      day2: null,
      name: "Sales",
      customName: "Sales department monthly schedule",
      autoPilot: false,
      active: false,
    },
    {
      uuid: "0e07d35a-af11-4123-bfcb-4dd5f2f12ee1",
      frequency: "Monthly",
      anchorPayDate: "2020-05-31",
      day1: 31,
      day2: null,
      name: "Staff",
      customName: "Staff department pay schedule",
      autoPilot: true,
      active: false,
    },
  ]);
});

test("Payschedules Get V1 Companies Company Id Pay Schedules Preview Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-pay_schedules-preview-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.preview({
    companyId: "<id>",
    frequency: "Monthly",
    anchorPayDate: "2020-05-15",
    anchorEndOfPayPeriod: "2020-05-08",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    payPeriods: [
      {
        checkDate: "2023-12-15T00:00:00Z",
        runPayrollBy: "2023-12-13T00:00:00Z",
        startDate: "2023-10-01T00:00:00Z",
        endDate: "2023-12-31T00:00:00Z",
      },
      {
        checkDate: "2024-03-15T00:00:00Z",
        runPayrollBy: "2024-03-13T00:00:00Z",
        startDate: "2024-01-01T00:00:00Z",
        endDate: "2024-03-31T00:00:00Z",
      },
      {
        checkDate: "2024-06-14T00:00:00Z",
        runPayrollBy: "2024-06-12T00:00:00Z",
        startDate: "2024-04-01T00:00:00Z",
        endDate: "2024-06-30T00:00:00Z",
      },
      {
        checkDate: "2024-09-13T00:00:00Z",
        runPayrollBy: "2024-09-11T00:00:00Z",
        startDate: "2024-07-01T00:00:00Z",
        endDate: "2024-09-30T00:00:00Z",
      },
    ],
    holidays: [
      "2023-10-09T00:00:00Z",
      "2023-11-11T00:00:00Z",
      "2023-11-23T00:00:00Z",
      "2023-12-25T00:00:00Z",
      "2024-01-01T00:00:00Z",
      "2024-01-15T00:00:00Z",
      "2024-02-19T00:00:00Z",
      "2024-05-27T00:00:00Z",
      "2024-06-19T00:00:00Z",
      "2024-07-04T00:00:00Z",
      "2024-09-02T00:00:00Z",
    ],
  });
});

test("Payschedules Get V1 Companies Company Id Pay Schedules Pay Schedule Id Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-pay_schedules-pay_schedule_id-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.get({
    companyId: "<id>",
    payScheduleId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "f2a69c38-e2f9-4e31-b5c5-4754fc60a052",
    frequency: "Twice per month",
    anchorPayDate: "2020-05-15",
    anchorEndOfPayPeriod: "2020-05-08",
    day1: 15,
    day2: 31,
    name: "Engineering",
    customName: "A new monthly pay schedule",
    autoPilot: false,
    active: true,
  });
});

test("Payschedules Put V1 Companies Company Id Pay Schedules Pay Schedule Id Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-pay_schedules-pay_schedule_id-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.update({
    companyId: "<id>",
    payScheduleId: "<id>",
    requestBody: {
      version: "68934a3e9455fa72420237eb05902327",
      frequency: "Twice per month",
      anchorPayDate: "2021-10-15",
      anchorEndOfPayPeriod: "2021-10-15",
      day1: 15,
      day2: 31,
      customName: "demo pay schedule",
      autoPilot: true,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "f2a69c38-e2f9-4e31-b5c5-4754fc60a052",
    frequency: "Twice per month",
    anchorPayDate: "2020-05-15",
    anchorEndOfPayPeriod: "2020-05-08",
    day1: 15,
    day2: 31,
    name: "Engineering",
    customName: "A new monthly pay schedule",
    autoPilot: false,
    active: true,
  });
});

test("Payschedules Put V1 Companies Company Id Pay Schedules Pay Schedule Id Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-pay_schedules-pay_schedule_id-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.update({
    companyId: "<id>",
    payScheduleId: "<id>",
    requestBody: {
      version: "<value>",
      anchorPayDate: "2020-05-15",
      anchorEndOfPayPeriod: "2020-05-08",
    },
  });
  expect(result).toBeDefined();
});

test("Payschedules Put V1 Companies Company Id Pay Schedules Pay Schedule Id Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-pay_schedules-pay_schedule_id-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.update({
    companyId: "<id>",
    payScheduleId: "<id>",
    requestBody: {
      version: "<value>",
      anchorPayDate: "2020-05-15",
      anchorEndOfPayPeriod: "2020-05-08",
    },
  });
  expect(result).toBeDefined();
});

test("Payschedules Put V1 Companies Company Id Pay Schedules Pay Schedule Id Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-companies-company_id-pay_schedules-pay_schedule_id-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.update({
    companyId: "<id>",
    payScheduleId: "<id>",
    requestBody: {
      version: "<value>",
      anchorPayDate: "2020-05-15",
      anchorEndOfPayPeriod: "2020-05-08",
    },
  });
  expect(result).toBeDefined();
});

test("Payschedules Get V1 Companies Company Id Pay Periods Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-pay_periods-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.list({
    companyId: "<id>",
    startDate: "2020-01-01",
    endDate: "2020-01-31",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      startDate: "2020-01-11",
      endDate: "2020-01-24",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
      payroll: {
        payrollUuid: "bfd8aad4-9c3f-4ca3-b072-a1b2b3ea689f",
        checkDate: "2020-01-30",
        processed: true,
        payrollDeadline: new Date("2020-01-28"),
        payrollType: "regular",
      },
    },
    {
      startDate: "2020-12-12",
      endDate: "2020-12-25",
      payScheduleUuid: "cb53db72-612f-4eb1-9b85-389e79cfa510",
      payroll: {
        payrollUuid: "7ed29b45-4bb1-4d38-bd94-4d607d49fd21",
        checkDate: "2020-12-30",
        processed: true,
        payrollDeadline: new Date("2020-12-28"),
        payrollType: "regular",
      },
    },
  ]);
});

test("Payschedules Get V1 Companies Company Id Unprocessed Termination Pay Periods Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-unprocessed_termination_pay_periods-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules
    .listUnprocessedTerminationPeriods({
      companyId: "<id>",
    });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      startDate: "2023-01-11",
      endDate: "2023-01-24",
      checkDate: "2023-01-28",
      debitDate: "2023-01-26",
      employeeName: "Mary Warner",
      employeeUuid: "094f6ded-a790-4651-87e6-4a7f15dec7c6",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
    },
    {
      startDate: "2023-01-25",
      endDate: "2023-02-07",
      checkDate: "2023-02-10",
      debitDate: "2023-02-08",
      employeeName: "Mary Warner",
      employeeUuid: "094f6ded-a790-4651-87e6-4a7f15dec7c6",
      payScheduleUuid: "00ebc4a4-ec88-4435-8f45-c505bb63e501",
    },
  ]);
});

test("Payschedules Get V1 Companies Company Id Pay Schedules Assignments Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-pay_schedules-assignments-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.getAssignments({
    companyId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    type: "by_employee",
    employees: [
      {
        employeeUuid: "f0238368-f2cf-43e2-9a07-b0265f2cec69",
        payScheduleUuid: "c277ac52-9871-4a96-a1e6-0c449684602a",
      },
    ],
  });
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Assignment Preview Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-assignment_preview-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.previewAssignment({
    companyId: "<id>",
    payScheduleAssignmentBody: {
      type: "by_employee",
      employees: [
        {
          employeeUuid: "f0238368-f2cf-43e2-9a07-b0265f2cec69",
          payScheduleUuid: "c277ac52-9871-4a96-a1e6-0c449684602a",
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    type: "hourly_salaried",
    employeeChanges: [
      {
        employeeUuid: "43b39ada-dc49-4879-9594-fe95f67ae434",
        firstName: "Penny",
        lastName: "Parker",
        payFrequency: "Twice per month — Salaried pay schedule",
        firstPayPeriod: {
          payScheduleUuid: "3f029a58-155d-4c30-8361-cc266b2c1f11",
          startDate: "2023-07-01T00:00:00Z",
          endDate: "2023-08-01T00:00:00Z",
          checkDate: "2023-08-02T00:00:00Z",
        },
        transitionPayPeriod: {
          startDate: "2023-06-20T00:00:00Z",
          endDate: "2023-06-30T00:00:00Z",
        },
      },
    ],
  });
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Assignment Preview Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-assignment_preview-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.previewAssignment({
    companyId: "<id>",
    payScheduleAssignmentBody: {
      type: "hourly_salaried",
    },
  });
  expect(result).toBeDefined();
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Assignment Preview Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-assignment_preview-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.previewAssignment({
    companyId: "<id>",
    payScheduleAssignmentBody: {
      type: "hourly_salaried",
    },
  });
  expect(result).toBeDefined();
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Assignment Preview Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-assignment_preview-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.paySchedules.previewAssignment({
    companyId: "<id>",
    payScheduleAssignmentBody: {
      type: "single",
    },
  });
  expect(result).toBeDefined();
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Assign Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-assign-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.paySchedules.assign({
    companyId: "<id>",
    payScheduleAssignmentBody: {
      type: "by_employee",
      employees: [
        {
          employeeUuid: "f0238368-f2cf-43e2-9a07-b0265f2cec69",
          payScheduleUuid: "c277ac52-9871-4a96-a1e6-0c449684602a",
        },
      ],
    },
  });
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Assign Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-assign-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.paySchedules.assign({
    companyId: "<id>",
    payScheduleAssignmentBody: {
      type: "by_department",
    },
  });
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Assign Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-assign-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.paySchedules.assign({
    companyId: "<id>",
    payScheduleAssignmentBody: {
      type: "single",
    },
  });
});

test("Payschedules Post V1 Companies Company Id Pay Schedules Assign Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-pay_schedules-assign-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.paySchedules.assign({
    companyId: "<id>",
    payScheduleAssignmentBody: {
      type: "hourly_salaried",
    },
  });
});
