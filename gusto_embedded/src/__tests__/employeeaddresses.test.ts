/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assert, expect, it, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Employeeaddresses Get V1 Employees Employee Id Home Addresses Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-home_addresses-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.getHomeAddresses({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      street1: "644 Fay Vista",
      street2: "Suite 842",
      city: "Richmond",
      state: "VA",
      zip: "23218",
      country: "USA",
      active: false,
      uuid: "56260b3d-c375-415c-b77a-75d99f717193",
      employeeUuid: "7087a288-8349-4632-b92e-bc94fb79f29e",
      effectiveDate: new RFCDate("2021-01-01"),
      courtesyWithholding: true,
    },
    {
      street1: "100 5th Ave",
      street2: "Suite 555",
      city: "New York",
      state: "NY",
      zip: "10001",
      country: "USA",
      active: true,
      uuid: "d9f74049-8769-4fba-8e0f-eceef2da4e6b",
      employeeUuid: "7087a288-8349-4632-b92e-bc94fb79f29e",
      effectiveDate: new RFCDate("2022-03-03"),
      courtesyWithholding: true,
    },
  ]);
});

it.skip("Employeeaddresses Post V1 Employees Employee Id Home Addresses Example", async () => {
  assert.fail(
    "incomplete test found please make sure to address the following errors: [`workflow step post-v1-employees-employee_id-home_addresses-Example.test referencing operation post-v1-employees-employee_id-home_addresses does not contain response with status code 200`]",
  );
});

test("Employeeaddresses Get V1 Home Addresses Home Address Uuid Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-home_addresses-home_address_uuid-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.getHomeAddress({
    homeAddressUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    street1: "644 Fay Vista",
    street2: "Suite 842",
    city: "Richmond",
    state: "VA",
    zip: "23218",
    country: "USA",
    active: false,
    uuid: "56260b3d-c375-415c-b77a-75d99f717193",
    effectiveDate: new RFCDate("2021-01-01"),
    courtesyWithholding: true,
  });
});

test("Employeeaddresses Put V1 Home Addresses Home Address Uuid Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-home_addresses-home_address_uuid-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.updateHomeAddress({
    homeAddressUuid: "<id>",
    requestBody: {
      version: "fe75bd065ff48b91c35fe8ff842f986c",
      street1: "300 3rd Street",
      street2: null,
      city: "San Francisco",
      state: "CA",
      zip: "94107",
      effectiveDate: new RFCDate("2021-01-01"),
      courtesyWithholding: true,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    street1: "644 Fay Vista",
    street2: "Suite 842",
    city: "Richmond",
    state: "VA",
    zip: "23218",
    country: "USA",
    active: false,
    uuid: "56260b3d-c375-415c-b77a-75d99f717193",
    effectiveDate: new RFCDate("2021-01-01"),
    courtesyWithholding: true,
  });
});

test("Employeeaddresses Put V1 Home Addresses Home Address Uuid Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-home_addresses-home_address_uuid-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.updateHomeAddress({
    homeAddressUuid: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeeaddresses Put V1 Home Addresses Home Address Uuid Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-home_addresses-home_address_uuid-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.updateHomeAddress({
    homeAddressUuid: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeeaddresses Put V1 Home Addresses Home Address Uuid Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-home_addresses-home_address_uuid-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.updateHomeAddress({
    homeAddressUuid: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeeaddresses Delete V1 Home Addresses Home Address Uuid Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-home_addresses-home_address_uuid-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeAddresses.removeHomeAddress({
    homeAddressUuid: "<id>",
  });
});

test("Employeeaddresses Delete V1 Home Addresses Home Address Uuid Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-home_addresses-home_address_uuid-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeAddresses.removeHomeAddress({
    homeAddressUuid: "<id>",
  });
});

test("Employeeaddresses Delete V1 Home Addresses Home Address Uuid Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-home_addresses-home_address_uuid-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeAddresses.removeHomeAddress({
    homeAddressUuid: "<id>",
  });
});

test("Employeeaddresses Get V1 Employees Employee Id Work Addresses Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-work_addresses-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.get({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "fc5b87dc-8d88-400d-b2da-c3587a7e5b15",
      effectiveDate: "2022-01-01",
      active: false,
      locationUuid: "d9456c94-f561-40d2-afec-919da5f59196",
      employeeUuid: "7597f3e3-31d4-4953-83a5-f95be78d2fe2",
      version: "139f9769a2e543e6a1259173e1ee3b8d",
      street1: "800 Adolfo Gardens",
      street2: "Suite 419",
      city: "Bremen",
      state: "AL",
      zip: "35033",
      country: "USA",
    },
    {
      uuid: "be1c2e24-af86-4c36-b34e-3a55dbcdbdab",
      effectiveDate: "2023-01-01",
      active: true,
      locationUuid: "6a119be7-b4b0-4e27-aaa0-89d5f2524635",
      employeeUuid: "7597f3e3-31d4-4953-83a5-f95be78d2fe2",
      version: "bbe8d4c741339c6b9e0e2e1c1b120816",
      street1: "2216 Icie Villages",
      street2: "Apt. 798",
      city: "Big Delta",
      state: "AK",
      zip: "99737",
      country: "USA",
    },
  ]);
});

test("Employeeaddresses Get V1 Work Addresses Work Address Uuid Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-work_addresses-work_address_uuid-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.getWorkAddress({
    workAddressUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "34925ef7-6234-440d-83b8-788a24d0d69a",
    effectiveDate: "2023-05-15",
    active: true,
    locationUuid: "aba6d0fd-7294-4997-b1a4-bc9268c45932",
    employeeUuid: "2363b9c0-6625-4425-9261-47627fd68783",
    version: "6a22da647ed391f184a212e6e83a541d",
    street1: "977 Marks Viaduct",
    street2: null,
    city: "Pink Hill",
    state: "NC",
    zip: "28572",
    country: "USA",
  });
});

test("Employeeaddresses Put V1 Work Addresses Work Address Uuid Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-work_addresses-work_address_uuid-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.updateWorkAddress({
    workAddressUuid: "<id>",
    requestBody: {
      locationUuid: "6a119be7-b4b0-4e27-aaa0-89d5f2524635",
      effectiveDate: new RFCDate("2023-05-15"),
      version: "e6db1baa29d3df1eb307ff6a12c778da",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "34925ef7-6234-440d-83b8-788a24d0d69a",
    effectiveDate: "2023-05-15",
    active: true,
    locationUuid: "aba6d0fd-7294-4997-b1a4-bc9268c45932",
    employeeUuid: "2363b9c0-6625-4425-9261-47627fd68783",
    version: "6a22da647ed391f184a212e6e83a541d",
    street1: "977 Marks Viaduct",
    street2: null,
    city: "Pink Hill",
    state: "NC",
    zip: "28572",
    country: "USA",
  });
});

test("Employeeaddresses Put V1 Work Addresses Work Address Uuid Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-work_addresses-work_address_uuid-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.updateWorkAddress({
    workAddressUuid: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeeaddresses Put V1 Work Addresses Work Address Uuid Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-work_addresses-work_address_uuid-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.updateWorkAddress({
    workAddressUuid: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeeaddresses Put V1 Work Addresses Work Address Uuid Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-work_addresses-work_address_uuid-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.updateWorkAddress({
    workAddressUuid: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeeaddresses Delete V1 Work Addresses Work Address Uuid Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-work_addresses-work_address_uuid-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeAddresses.delete({
    workAddressUuid: "<id>",
  });
});

test("Employeeaddresses Delete V1 Work Addresses Work Address Uuid Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-work_addresses-work_address_uuid-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeAddresses.delete({
    workAddressUuid: "<id>",
  });
});

test("Employeeaddresses Delete V1 Work Addresses Work Address Uuid Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-work_addresses-work_address_uuid-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeAddresses.delete({
    workAddressUuid: "<id>",
  });
});
