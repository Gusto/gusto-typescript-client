/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Workaddresses Post V1 Employees Employee Id Work Addresses Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-work_addresses-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.workAddresses.create({
    employeeId: "<id>",
    requestBody: {
      locationUuid: "6a119be7-b4b0-4e27-aaa0-89d5f2524635",
      effectiveDate: new RFCDate("2023-05-15"),
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "56260b3d-c375-415c-b77a-75d99f717193",
    effectiveDate: "2021-01-01",
    active: false,
    locationUuid: "6a27753a-3093-41c1-9f25-ea64f15e8266",
    employeeUuid: "7087a288-8349-4632-b92e-bc94fb79f29e",
    street1: "644 Fay Vista",
    street2: "Suite 842",
    city: "Richmond",
    state: "VA",
    zip: "23218",
    country: "USA",
  });
});

test("Workaddresses Post V1 Employees Employee Id Work Addresses Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-work_addresses-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.workAddresses.create({
    employeeId: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Workaddresses Post V1 Employees Employee Id Work Addresses Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-work_addresses-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.workAddresses.create({
    employeeId: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Workaddresses Post V1 Employees Employee Id Work Addresses Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-work_addresses-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeAddresses.workAddresses.create({
    employeeId: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});
