/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Contractorpaymentmethod Post V1 Contractors Contractor Uuid Bank Accounts Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-contractors-contractor_uuid-bank_accounts-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod.createBankAccount({
    contractorUuid: "<id>",
    requestBody: {
      name: "BoA Checking Account",
      routingNumber: "266905059",
      accountNumber: "5809431207",
      accountType: "Checking",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "1531e824-8d9e-4bd8-9f90-0d04608125d7",
    contractorUuid: "9fcf1b1d-8886-4691-9283-383d3bdd4fd9",
    accountType: "Checking",
    name: "BoA Checking Account",
    routingNumber: "266905059",
    hiddenAccountNumber: "XXXX1207",
  });
});

test("Contractorpaymentmethod Post V1 Contractors Contractor Uuid Bank Accounts Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-contractors-contractor_uuid-bank_accounts-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod.createBankAccount({
    contractorUuid: "<id>",
    requestBody: {
      name: "<value>",
      routingNumber: "<value>",
      accountNumber: "<value>",
      accountType: "Checking",
    },
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentmethod Post V1 Contractors Contractor Uuid Bank Accounts Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-contractors-contractor_uuid-bank_accounts-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod.createBankAccount({
    contractorUuid: "<id>",
    requestBody: {
      name: "<value>",
      routingNumber: "<value>",
      accountNumber: "<value>",
      accountType: "Savings",
    },
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentmethod Post V1 Contractors Contractor Uuid Bank Accounts Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-contractors-contractor_uuid-bank_accounts-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod.createBankAccount({
    contractorUuid: "<id>",
    requestBody: {
      name: "<value>",
      routingNumber: "<value>",
      accountNumber: "<value>",
      accountType: "Savings",
    },
  });
  expect(result).toBeDefined();
});

test("Contractorpaymentmethod Get V1 Contractors Contractor Uuid Bank Accounts Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-contractors-contractor_uuid-bank_accounts-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod.getBankAccounts({
    contractorUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "1531e824-8d9e-4bd8-9f90-0d04608125d7",
      contractorUuid: "9fcf1b1d-8886-4691-9283-383d3bdd4fd9",
      accountType: "Checking",
      name: "BoA Checking Account",
      routingNumber: "266905059",
      hiddenAccountNumber: "XXXX1207",
    },
  ]);
});

test("Contractorpaymentmethod Get V1 Contractors Contractor Uuid Payment Method Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-contractors-contractor_uuid-payment_method-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod.get({
    contractorUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "63859768485e218ccf8a449bb60f14ed",
    type: "Direct Deposit",
    splitBy: "Percentage",
    splits: [
      {
        uuid: "e88f9436-b74e-49a8-87e9-777b9bfe715e",
        name: "BoA Checking Account",
        hiddenAccountNumber: "XXXX0992",
        priority: 1,
        splitAmount: 100,
      },
    ],
  });
});

test("Contractorpaymentmethod Put V1 Contractors Contractor Id Payment Method Example 1", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractors-contractor_id-payment_method-example-1",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod
    .updatePaymentMethod({
      contractorUuid: "<id>",
      requestBody: {
        version: "63859768485e218ccf8a449bb60f14ed",
        type: "Direct Deposit",
      },
    });
  expect(result).toBeDefined();
});

test("Contractorpaymentmethod Put V1 Contractors Contractor Id Payment Method Example 3", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractors-contractor_id-payment_method-example-3",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod
    .updatePaymentMethod({
      contractorUuid: "<id>",
      requestBody: {
        version: "63859768485e218ccf8a449bb60f14ed",
        type: "Check",
      },
    });
  expect(result).toBeDefined();
});

test("Contractorpaymentmethod Put V1 Contractors Contractor Id Payment Method Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractors-contractor_id-payment_method-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod
    .updatePaymentMethod({
      contractorUuid: "<id>",
      requestBody: {
        version: "<value>",
        type: "Check",
      },
    });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "63859768485e218ccf8a449bb60f14ed",
    type: "Direct Deposit",
    splitBy: "Percentage",
    splits: [
      {
        uuid: "e88f9436-b74e-49a8-87e9-777b9bfe715e",
        name: "BoA Checking Account",
        hiddenAccountNumber: "XXXX0992",
        priority: 1,
        splitAmount: 100,
      },
    ],
  });
});

test("Contractorpaymentmethod Put V1 Contractors Contractor Id Payment Method Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractors-contractor_id-payment_method-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod
    .updatePaymentMethod({
      contractorUuid: "<id>",
      requestBody: {
        version: "<value>",
        type: "Check",
      },
    });
  expect(result).toBeDefined();
});

test("Contractorpaymentmethod Put V1 Contractors Contractor Id Payment Method Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractors-contractor_id-payment_method-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod
    .updatePaymentMethod({
      contractorUuid: "<id>",
      requestBody: {
        version: "<value>",
        type: "Check",
      },
    });
  expect(result).toBeDefined();
});

test("Contractorpaymentmethod Put V1 Contractors Contractor Id Payment Method Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-contractors-contractor_id-payment_method-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.contractorPaymentMethod
    .updatePaymentMethod({
      contractorUuid: "<id>",
      requestBody: {
        version: "<value>",
        type: "Check",
      },
    });
  expect(result).toBeDefined();
});
