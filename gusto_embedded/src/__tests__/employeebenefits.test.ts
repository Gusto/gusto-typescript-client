/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Employeebenefits Post V1 Employees Employee Id Employee Benefits Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-employee_benefits-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.createBenefit({
    employeeId: "<id>",
    requestBody: {
      companyBenefitUuid: "f68abb42-431e-4392-bc3f-2795627e00f3",
      contribution: {
        type: "amount",
        value: "100.00",
      },
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "09j3d29jqdpj92109j9j2d90dq",
    active: true,
    employeeDeduction: "100.00",
    deductAsPercentage: false,
    employeeDeductionAnnualMaximum: "200.00",
    contribution: {
      type: "amount",
      value: "100.00",
    },
    elective: false,
    companyContributionAnnualMaximum: "200.00",
    limitOption: null,
    catchUp: false,
    coverageAmount: null,
    deductionReducesTaxableIncome: null,
    coverageSalaryMultiplier: "0.00",
    companyContribution: "0.00",
    contributeAsPercentage: false,
    employeeUuid: "908123091820398",
    companyBenefitUuid: "54e37c27-43e6-4ae5-a5b2-e29895a133be",
    uuid: "e91ca856-a915-4339-9b18-29f9cd66b031",
  });
});

test("Employeebenefits Post V1 Employees Employee Id Employee Benefits Tiered Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-employee_benefits-Tiered example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.createBenefit({
    employeeId: "<id>",
    requestBody: {
      companyBenefitUuid: "<id>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "string",
    active: true,
    employeeDeduction: "0.00",
    deductAsPercentage: false,
    employeeDeductionAnnualMaximum: "string",
    contribution: {
      type: "tiered",
      value: {
        tiers: [
          {
            rate: "5.0",
            threshold: "2.0",
            thresholdDelta: "2.0",
          },
          {
            rate: "3.0",
            threshold: "5.0",
            thresholdDelta: "3.0",
          },
        ],
      },
    },
    elective: false,
    companyContributionAnnualMaximum: "string",
    limitOption: "string",
    catchUp: false,
    coverageAmount: "string",
    deductionReducesTaxableIncome: "unset",
    coverageSalaryMultiplier: "0.00",
    companyContribution: "0.00",
    contributeAsPercentage: false,
    employeeUuid: "8f9f3f68-8fd3-499d-ade7-4a052e56494e",
    companyBenefitUuid: "54e37c27-43e6-4ae5-a5b2-e29895a133be",
    uuid: "e91ca856-a915-4339-9b18-29f9cd66b031",
  });
});

test("Employeebenefits Post V1 Employees Employee Id Employee Benefits Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-employee_benefits-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.createBenefit({
    employeeId: "<id>",
    requestBody: {
      companyBenefitUuid: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeebenefits Post V1 Employees Employee Id Employee Benefits Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-employee_benefits-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.createBenefit({
    employeeId: "<id>",
    requestBody: {
      companyBenefitUuid: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeebenefits Post V1 Employees Employee Id Employee Benefits Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-employee_id-employee_benefits-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.createBenefit({
    employeeId: "<id>",
    requestBody: {
      companyBenefitUuid: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeebenefits Get V1 Employees Employee Id Employee Benefits Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-employee_benefits-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.getAll({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      version: "09j3d29jqdpj92109j9j2d90dq",
      active: true,
      employeeDeduction: "100.00",
      deductAsPercentage: false,
      employeeDeductionAnnualMaximum: "200.00",
      elective: false,
      companyContributionAnnualMaximum: "200.00",
      limitOption: null,
      catchUp: false,
      coverageAmount: null,
      deductionReducesTaxableIncome: null,
      coverageSalaryMultiplier: "0.00",
      companyContribution: "100.00",
      contributeAsPercentage: false,
      employeeUuid: "8f9f3f68-8fd3-499d-ade7-4a052e56494e",
      companyBenefitUuid: "54e37c27-43e6-4ae5-a5b2-e29895a133be",
      uuid: "e91ca856-a915-4339-9b18-29f9cd66b031",
    },
  ]);
});

test("Employeebenefits Get V1 Employee Benefits Employee Benefit Id Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employee_benefits-employee_benefit_id-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.get({
    employeeBenefitId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "09j3d29jqdpj92109j9j2d90dq",
    active: true,
    employeeDeduction: "100.00",
    deductAsPercentage: false,
    employeeDeductionAnnualMaximum: "200.00",
    contribution: {
      type: "amount",
      value: "100.00",
    },
    elective: false,
    companyContributionAnnualMaximum: "200.00",
    limitOption: null,
    catchUp: false,
    coverageAmount: null,
    deductionReducesTaxableIncome: null,
    coverageSalaryMultiplier: "0.00",
    companyContribution: "0.00",
    contributeAsPercentage: false,
    employeeUuid: "908123091820398",
    companyBenefitUuid: "54e37c27-43e6-4ae5-a5b2-e29895a133be",
    uuid: "e91ca856-a915-4339-9b18-29f9cd66b031",
  });
});

test("Employeebenefits Get V1 Employee Benefits Employee Benefit Id Tiered Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employee_benefits-employee_benefit_id-Tiered example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.get({
    employeeBenefitId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "string",
    active: true,
    employeeDeduction: "0.00",
    deductAsPercentage: false,
    employeeDeductionAnnualMaximum: "string",
    contribution: {
      type: "tiered",
      value: {
        tiers: [
          {
            rate: "5.0",
            threshold: "2.0",
            thresholdDelta: "2.0",
          },
          {
            rate: "3.0",
            threshold: "5.0",
            thresholdDelta: "3.0",
          },
        ],
      },
    },
    elective: false,
    companyContributionAnnualMaximum: "string",
    limitOption: "string",
    catchUp: false,
    coverageAmount: "string",
    deductionReducesTaxableIncome: "unset",
    coverageSalaryMultiplier: "0.00",
    companyContribution: "0.00",
    contributeAsPercentage: false,
    employeeUuid: "8f9f3f68-8fd3-499d-ade7-4a052e56494e",
    companyBenefitUuid: "54e37c27-43e6-4ae5-a5b2-e29895a133be",
    uuid: "e91ca856-a915-4339-9b18-29f9cd66b031",
  });
});

test("Employeebenefits Put V1 Employee Benefits Employee Benefit Id Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employee_benefits-employee_benefit_id-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.update({
    employeeBenefitId: "<id>",
    requestBody: {
      version: "09j3d29jqdpj92109j9j2d90dq",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "09j3d29jqdpj92109j9j2d90dq",
    active: true,
    employeeDeduction: "100.00",
    deductAsPercentage: false,
    employeeDeductionAnnualMaximum: "200.00",
    contribution: {
      type: "amount",
      value: "100.00",
    },
    elective: false,
    companyContributionAnnualMaximum: "200.00",
    limitOption: null,
    catchUp: false,
    coverageAmount: null,
    deductionReducesTaxableIncome: null,
    coverageSalaryMultiplier: "0.00",
    companyContribution: "0.00",
    contributeAsPercentage: false,
    employeeUuid: "908123091820398",
    companyBenefitUuid: "54e37c27-43e6-4ae5-a5b2-e29895a133be",
    uuid: "e91ca856-a915-4339-9b18-29f9cd66b031",
  });
});

test("Employeebenefits Put V1 Employee Benefits Employee Benefit Id Tiered Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employee_benefits-employee_benefit_id-Tiered example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.update({
    employeeBenefitId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    version: "string",
    active: true,
    employeeDeduction: "0.00",
    deductAsPercentage: false,
    employeeDeductionAnnualMaximum: "string",
    contribution: {
      type: "tiered",
      value: {
        tiers: [
          {
            rate: "5.0",
            threshold: "2.0",
            thresholdDelta: "2.0",
          },
          {
            rate: "3.0",
            threshold: "5.0",
            thresholdDelta: "3.0",
          },
        ],
      },
    },
    elective: false,
    companyContributionAnnualMaximum: "string",
    limitOption: "string",
    catchUp: false,
    coverageAmount: "string",
    deductionReducesTaxableIncome: "unset",
    coverageSalaryMultiplier: "0.00",
    companyContribution: "0.00",
    contributeAsPercentage: false,
    employeeUuid: "8f9f3f68-8fd3-499d-ade7-4a052e56494e",
    companyBenefitUuid: "54e37c27-43e6-4ae5-a5b2-e29895a133be",
    uuid: "e91ca856-a915-4339-9b18-29f9cd66b031",
  });
});

test("Employeebenefits Put V1 Employee Benefits Employee Benefit Id Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employee_benefits-employee_benefit_id-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.update({
    employeeBenefitId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeebenefits Put V1 Employee Benefits Employee Benefit Id Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employee_benefits-employee_benefit_id-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.update({
    employeeBenefitId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeebenefits Put V1 Employee Benefits Employee Benefit Id Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employee_benefits-employee_benefit_id-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits.update({
    employeeBenefitId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employeebenefits Delete V1 Employee Benefits Employee Benefit Id", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-employee_benefits-employee_benefit_id",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeBenefits.delete({
    employeeBenefitId: "<id>",
  });
});

test("Employeebenefits Post Employee Ytd Benefit Amounts From Different Company Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-employee-ytd-benefit-amounts-from-different-company-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeBenefits.createYtdAmountsFromDifferentCompany({
    employeeId: "<id>",
    postEmployeeYtdBenefitAmountsFromDifferentCompany: {
      taxYear: 2422.08,
    },
  });
});

test("Employeebenefits Post Employee Ytd Benefit Amounts From Different Company Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-employee-ytd-benefit-amounts-from-different-company-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeBenefits.createYtdAmountsFromDifferentCompany({
    employeeId: "<id>",
    postEmployeeYtdBenefitAmountsFromDifferentCompany: {
      taxYear: 3246.52,
    },
  });
});

test("Employeebenefits Post Employee Ytd Benefit Amounts From Different Company Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-employee-ytd-benefit-amounts-from-different-company-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employeeBenefits.createYtdAmountsFromDifferentCompany({
    employeeId: "<id>",
    postEmployeeYtdBenefitAmountsFromDifferentCompany: {
      taxYear: 9918.67,
    },
  });
});

test("Employeebenefits Get Employee Ytd Benefit Amounts From Different Company Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-employee-ytd-benefit-amounts-from-different-company-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employeeBenefits
    .getEmployeeYtdBenefitAmountsFromDifferentCompany({
      employeeId: "<id>",
      taxYear: 2024,
    });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "c5fdae57-5483-4529-9aae-f0edceed92d3",
      benefitType: 1,
      ytdEmployeeDeductionAmount: "5000.00",
      ytdCompanyContributionAmount: "2500.00",
    },
    {
      uuid: "1bfdb946-b2be-4909-ac46-9e7f73872d0a",
      benefitType: 5,
      ytdEmployeeDeductionAmount: "2132.00",
      ytdCompanyContributionAmount: "3345.00",
    },
  ]);
});
