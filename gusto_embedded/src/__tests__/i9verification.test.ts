/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("I9verification Get V1 Employees Employee Id I9 Authorization Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-i9_authorization-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.getAuthorization({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "7fe28e4d-1e30-4ebb-8d22-aae768170b82",
    version: "<value>",
    authorizationStatus: "permanent_resident",
    employerSigned: false,
    employeeSigned: false,
  });
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.createOrUpdate({
    employeeId: "<id>",
    requestBody: {
      authorizationStatus: "citizen",
      version: "52b7c567242cb7452e89ba2bc02cb476",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "4113bed5-50ae-4daa-a9a5-8a55ddb5a141",
    version: "<value>",
    authorizationStatus: "citizen",
    employerSigned: false,
    employeeSigned: true,
  });
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.createOrUpdate({
    employeeId: "<id>",
    requestBody: {
      authorizationStatus: "noncitizen",
    },
  });
  expect(result).toBeDefined();
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.createOrUpdate({
    employeeId: "<id>",
    requestBody: {
      authorizationStatus: "alien",
    },
  });
  expect(result).toBeDefined();
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.createOrUpdate({
    employeeId: "<id>",
    requestBody: {
      authorizationStatus: "citizen",
    },
  });
  expect(result).toBeDefined();
});

test("I9verification Get V1 Employees Employee Id I9 Authorization Document Options Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-i9_authorization-document_options-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.getDocumentOptions({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      section: "A",
      description: "Foreign passport",
      documentType: "foreign_passport_w_i94",
      documentTitle: [
        "Foreign passport",
      ],
      commonChoice: true,
    },
    {
      section: "B",
      description: "Driverâ€™s license or state-issued ID card",
      documentType: "driver_license",
      documentTitle: [
        "Driver's license",
        "State ID card",
      ],
      commonChoice: true,
    },
    {
      section: "C",
      description: "Social Security card",
      documentType: "ssn_card",
      documentTitle: [
        "Social Security card",
      ],
      commonChoice: true,
    },
  ]);
});

test("I9verification Get V1 Employees Employee Id I9 Authorization Documents Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-i9_authorization-documents-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.getDocuments({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "7f2337f9-9b78-44b9-aeed-be4777b833a8",
      documentType: "driver_license",
      documentTitle: "Driver's license",
      expirationDate: "2027-01-01",
      issuingAuthority: "USA",
    },
    {
      uuid: "9p2337f9-9b78-44b9-aeed-be4777b833a8",
      documentType: "ssn_card",
      documentTitle: "Social Security card",
      issuingAuthority: "USA",
    },
  ]);
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Documents Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-documents-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.createDocuments({
    employeeId: "<id>",
    requestBody: {
      documents: [
        {
          documentType: "us_passport",
          documentTitle: "US Passport",
          documentNumber: "F12345678",
          expirationDate: "2026-01-01",
          issuingAuthority: "USA",
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "7f2337f9-9b78-44b9-aeed-be4777b833a8",
      documentType: "driver_license",
      documentTitle: "Driver's license",
      expirationDate: "2027-01-01",
      issuingAuthority: "USA",
    },
    {
      uuid: "9p2337f9-9b78-44b9-aeed-be4777b833a8",
      documentType: "ssn_card",
      documentTitle: "Social Security card",
      issuingAuthority: "USA",
    },
  ]);
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Documents Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-documents-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.createDocuments({
    employeeId: "<id>",
    requestBody: {
      documents: [
        {
          documentType: "<value>",
          documentTitle: "<value>",
          issuingAuthority: "<value>",
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Documents Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-documents-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.createDocuments({
    employeeId: "<id>",
    requestBody: {
      documents: [
        {
          documentType: "<value>",
          documentTitle: "<value>",
          issuingAuthority: "<value>",
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Documents Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-documents-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.createDocuments({
    employeeId: "<id>",
    requestBody: {
      documents: [
        {
          documentType: "<value>",
          documentTitle: "<value>",
          issuingAuthority: "<value>",
        },
        {
          documentType: "<value>",
          documentTitle: "<value>",
          issuingAuthority: "<value>",
        },
        {
          documentType: "<value>",
          documentTitle: "<value>",
          issuingAuthority: "<value>",
        },
      ],
    },
  });
  expect(result).toBeDefined();
});

test("I9verification Delete V1 Employees Employee Id I9 Authorization Documents Document Id", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "delete-v1-employees-employee_id-i9_authorization-documents-document_id",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.i9Verification.deleteDocument({
    employeeId: "<id>",
    documentId: "<id>",
  });
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Employer Sign Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-employer_sign-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.employerSign({
    employeeId: "<id>",
    requestBody: {
      signatureText: "<value>",
      signerTitle: "<value>",
      signedByIpAddress: "<value>",
      agree: false,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "ab18cec1-6568-4d93-b2ad-8deafd3f650c",
    version: "<value>",
    authorizationStatus: "alien",
    employerSigned: true,
    employeeSigned: true,
  });
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Employer Sign Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-employer_sign-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.employerSign({
    employeeId: "<id>",
    requestBody: {
      signatureText: "<value>",
      signerTitle: "<value>",
      signedByIpAddress: "<value>",
      agree: true,
    },
  });
  expect(result).toBeDefined();
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Employer Sign Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-employer_sign-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.employerSign({
    employeeId: "<id>",
    requestBody: {
      signatureText: "<value>",
      signerTitle: "<value>",
      signedByIpAddress: "<value>",
      agree: true,
    },
  });
  expect(result).toBeDefined();
});

test("I9verification Put V1 Employees Employee Id I9 Authorization Employer Sign Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-i9_authorization-employer_sign-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.i9Verification.employerSign({
    employeeId: "<id>",
    requestBody: {
      signatureText: "<value>",
      signerTitle: "<value>",
      signedByIpAddress: "<value>",
      agree: true,
    },
  });
  expect(result).toBeDefined();
});
