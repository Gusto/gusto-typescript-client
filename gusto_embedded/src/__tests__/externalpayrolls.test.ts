/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Externalpayrolls Post V1 External Payroll Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-external-payroll-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.create({
    companyUuid: "<id>",
    requestBody: {
      checkDate: "2022-06-01",
      paymentPeriodStartDate: "2022-05-15",
      paymentPeriodEndDate: "2022-05-30",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "c5fdae57-5483-4529-9aae-f0edceed92d4",
    companyUuid: "bcb305b0-2855-4025-8d22-e484a9e6b7c9",
    checkDate: "2022-06-03T00:00:00Z",
    paymentPeriodStartDate: "2022-05-15T00:00:00Z",
    paymentPeriodEndDate: "2022-05-30T00:00:00Z",
    status: "unprocessed",
    externalPayrollItems: [
      {
        employeeUuid: "44f7cba9-7a3d-4f08-b7bd-6fcf5211f8ca",
        earnings: [
          {
            amount: "10000.0",
            hours: "0.0",
            earningType: "CompanyPayType",
            earningId: 1,
          },
          {
            amount: "500.0",
            hours: "0.0",
            earningType: "CompanyEarningType",
            earningId: 4,
          },
        ],
        benefits: [
          {
            benefitId: 22,
            companyContributionAmount: "100.0",
            employeeDeductionAmount: "50.0",
          },
          {
            benefitId: 25,
            companyContributionAmount: "0.0",
            employeeDeductionAmount: "300.0",
          },
        ],
        taxes: [
          {
            taxId: 1,
            amount: "400.0",
          },
          {
            taxId: 2,
            amount: "60.0",
          },
        ],
      },
    ],
    applicableEarnings: [
      {
        earningType: "CompanyPayType",
        earningId: 1,
        name: "Regular Wages",
        inputType: "amount",
        category: "default",
      },
      {
        earningType: "CompanyEarningType",
        earningId: 4,
        name: "Cash Tips",
        inputType: "amount",
        category: "default",
      },
    ],
    applicableBenefits: [
      {
        id: 22,
        description: "Kaiser",
        active: true,
      },
      {
        id: 25,
        description: "HSA",
        active: true,
      },
    ],
    applicableTaxes: [
      {
        id: 1,
        name: "Federal Income Tax",
        employerTax: false,
        residentTax: false,
      },
      {
        id: 2,
        name: "Social Security",
        employerTax: false,
        residentTax: false,
      },
    ],
    metadata: {
      deletable: true,
    },
  });
});

test("Externalpayrolls Post V1 External Payroll Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-external-payroll-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.create({
    companyUuid: "<id>",
    requestBody: {
      checkDate: "<value>",
      paymentPeriodStartDate: "<value>",
      paymentPeriodEndDate: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Externalpayrolls Post V1 External Payroll Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-external-payroll-Resource"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.create({
    companyUuid: "<id>",
    requestBody: {
      checkDate: "<value>",
      paymentPeriodStartDate: "<value>",
      paymentPeriodEndDate: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Externalpayrolls Post V1 External Payroll Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-external-payroll-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.create({
    companyUuid: "<id>",
    requestBody: {
      checkDate: "<value>",
      paymentPeriodStartDate: "<value>",
      paymentPeriodEndDate: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Externalpayrolls Get V1 Company External Payrolls Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-company-external-payrolls-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.list({
    companyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "c5fdae57-5483-4529-9aae-f0edceed92d4",
      companyUuid: "bcb305b0-2855-4025-8d22-e484a9e6b7c9",
      checkDate: "2022-06-03T00:00:00Z",
      paymentPeriodStartDate: "2022-05-15T00:00:00Z",
      paymentPeriodEndDate: "2022-05-30T00:00:00Z",
      status: "unprocessed",
    },
  ]);
});

test("Externalpayrolls Get V1 External Payroll Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("get-v1-external-payroll-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.get({
    companyUuid: "<id>",
    externalPayrollId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "c5fdae57-5483-4529-9aae-f0edceed92d4",
    companyUuid: "bcb305b0-2855-4025-8d22-e484a9e6b7c9",
    checkDate: "2022-06-03T00:00:00Z",
    paymentPeriodStartDate: "2022-05-15T00:00:00Z",
    paymentPeriodEndDate: "2022-05-30T00:00:00Z",
    status: "unprocessed",
    externalPayrollItems: [
      {
        employeeUuid: "44f7cba9-7a3d-4f08-b7bd-6fcf5211f8ca",
        earnings: [
          {
            amount: "10000.0",
            hours: "0.0",
            earningType: "CompanyPayType",
            earningId: 1,
          },
          {
            amount: "500.0",
            hours: "0.0",
            earningType: "CompanyEarningType",
            earningId: 4,
          },
        ],
        benefits: [
          {
            benefitId: 22,
            companyContributionAmount: "100.0",
            employeeDeductionAmount: "50.0",
          },
          {
            benefitId: 25,
            companyContributionAmount: "0.0",
            employeeDeductionAmount: "300.0",
          },
        ],
        taxes: [
          {
            taxId: 1,
            amount: "400.0",
          },
          {
            taxId: 2,
            amount: "60.0",
          },
        ],
      },
    ],
    applicableEarnings: [
      {
        earningType: "CompanyPayType",
        earningId: 1,
        name: "Regular Wages",
        inputType: "amount",
        category: "default",
      },
      {
        earningType: "CompanyEarningType",
        earningId: 4,
        name: "Cash Tips",
        inputType: "amount",
        category: "default",
      },
    ],
    applicableBenefits: [
      {
        id: 22,
        description: "Kaiser",
        active: true,
      },
      {
        id: 25,
        description: "HSA",
        active: true,
      },
    ],
    applicableTaxes: [
      {
        id: 1,
        name: "Federal Income Tax",
        employerTax: false,
        residentTax: false,
      },
      {
        id: 2,
        name: "Social Security",
        employerTax: false,
        residentTax: false,
      },
    ],
    metadata: {
      deletable: true,
    },
  });
});

test("Externalpayrolls Delete V1 External Payroll", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("delete-v1-external-payroll"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.externalPayrolls.delete({
    companyUuid: "<id>",
    externalPayrollId: "<id>",
  });
});

test("Externalpayrolls Put V1 External Payroll Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-external-payroll-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.update({
    companyUuid: "<id>",
    externalPayrollId: "<id>",
    requestBody: {
      replaceFields: true,
      externalPayrollItems: [
        {
          employeeUuid: "403c6ee3-5f58-40ef-a117-ff7175cd9ee3",
          earnings: [
            {
              hours: "0.0",
              amount: "200.00",
              earningId: 1,
              earningType: "CompanyPayType",
            },
            {
              hours: "0.0",
              amount: "5000.00",
              earningId: 2,
              earningType: "CompanyEarningType",
            },
          ],
          benefits: [
            {
              companyContributionAmount: "300.0",
              employeeDeductionAmount: "300.0",
              benefitId: 10,
            },
            {
              companyContributionAmount: "50.0",
              employeeDeductionAmount: "100.0",
              benefitId: 21,
            },
          ],
          taxes: [
            {
              amount: "20.0",
              taxId: 1,
            },
            {
              amount: "100.0",
              taxId: 2,
            },
          ],
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "c5fdae57-5483-4529-9aae-f0edceed92d4",
    companyUuid: "bcb305b0-2855-4025-8d22-e484a9e6b7c9",
    checkDate: "2022-06-03T00:00:00Z",
    paymentPeriodStartDate: "2022-05-15T00:00:00Z",
    paymentPeriodEndDate: "2022-05-30T00:00:00Z",
    status: "unprocessed",
    externalPayrollItems: [
      {
        employeeUuid: "44f7cba9-7a3d-4f08-b7bd-6fcf5211f8ca",
        earnings: [
          {
            amount: "10000.0",
            hours: "0.0",
            earningType: "CompanyPayType",
            earningId: 1,
          },
          {
            amount: "500.0",
            hours: "0.0",
            earningType: "CompanyEarningType",
            earningId: 4,
          },
        ],
        benefits: [
          {
            benefitId: 22,
            companyContributionAmount: "100.0",
            employeeDeductionAmount: "50.0",
          },
          {
            benefitId: 25,
            companyContributionAmount: "0.0",
            employeeDeductionAmount: "300.0",
          },
        ],
        taxes: [
          {
            taxId: 1,
            amount: "400.0",
          },
          {
            taxId: 2,
            amount: "60.0",
          },
        ],
      },
    ],
    applicableEarnings: [
      {
        earningType: "CompanyPayType",
        earningId: 1,
        name: "Regular Wages",
        inputType: "amount",
        category: "default",
      },
      {
        earningType: "CompanyEarningType",
        earningId: 4,
        name: "Cash Tips",
        inputType: "amount",
        category: "default",
      },
    ],
    applicableBenefits: [
      {
        id: 22,
        description: "Kaiser",
        active: true,
      },
      {
        id: 25,
        description: "HSA",
        active: true,
      },
    ],
    applicableTaxes: [
      {
        id: 1,
        name: "Federal Income Tax",
        employerTax: false,
        residentTax: false,
      },
      {
        id: 2,
        name: "Social Security",
        employerTax: false,
        residentTax: false,
      },
    ],
    metadata: {
      deletable: true,
    },
  });
});

test("Externalpayrolls Put V1 External Payroll Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-external-payroll-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.update({
    companyUuid: "<id>",
    externalPayrollId: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Externalpayrolls Put V1 External Payroll Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-external-payroll-Resource"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.update({
    companyUuid: "<id>",
    externalPayrollId: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Externalpayrolls Put V1 External Payroll Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-external-payroll-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.update({
    companyUuid: "<id>",
    externalPayrollId: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Externalpayrolls Get V1 External Payroll Calculate Taxes Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-external-payroll-calculate-taxes-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.getTaxSuggestions({
    companyUuid: "<id>",
    externalPayrollId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      employeeUuid: "d21848d5-446f-48a8-9430-30fbefeabda4",
      taxSuggestions: [
        {
          taxId: 1,
          amount: "500.0",
        },
        {
          taxId: 2,
          amount: "100.0",
        },
        {
          taxId: 4,
          amount: "30.0",
        },
      ],
    },
  ]);
});

test("Externalpayrolls Get V1 Tax Liabilities Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("get-v1-tax-liabilities-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.getTaxLiabilities({
    companyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    [
      {
        taxId: 1,
        taxName: "Federal Income Tax",
        lastUnpaidExternalPayrollUuid: null,
        possibleLiabilities: [
          {
            liabilityAmount: "0.0",
            payrollCheckDate: null,
            externalPayrollUuid: null,
          },
          {
            liabilityAmount: "3000.0",
            payrollCheckDate: "2022-06-01T00:00:00Z",
            externalPayrollUuid: "1bf1efe1-72d4-4e6e-a181-611f3ea66435",
          },
        ],
      },
    ],
    [
      {
        taxId: 2,
        taxName: "Social Security",
        lastUnpaidExternalPayrollUuid: null,
        possibleLiabilities: [
          {
            liabilityAmount: "0.0",
            payrollCheckDate: null,
            externalPayrollUuid: null,
          },
          {
            liabilityAmount: "50.0",
            payrollCheckDate: "2022-06-01T00:00:00Z",
            externalPayrollUuid: "1bf1efe1-72d4-4e6e-a181-611f3ea66435",
          },
        ],
      },
    ],
  ]);
});

test("Externalpayrolls Put V1 Tax Liabilities Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-tax-liabilities-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.updateTaxLiabilities({
    companyUuid: "<id>",
    requestBody: {
      liabilitySelections: [
        {
          taxId: 1,
          lastUnpaidExternalPayrollUuid: "7985032c-ee3a-4e98-af27-d56551eb5f1c",
          unpaidLiabilityAmount: 50,
        },
        {
          taxId: 2,
          lastUnpaidExternalPayrollUuid: "5ed14dbb-958f-47c8-b16e-c4fed82dc486",
          unpaidLiabilityAmount: 400,
        },
        {
          taxId: 8,
          lastUnpaidExternalPayrollUuid: null,
          unpaidLiabilityAmount: 0,
        },
      ],
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    [
      {
        taxId: 1,
        taxName: "Federal Income Tax",
        lastUnpaidExternalPayrollUuid: null,
        possibleLiabilities: [
          {
            liabilityAmount: "0.0",
            payrollCheckDate: null,
            externalPayrollUuid: null,
          },
          {
            liabilityAmount: "3000.0",
            payrollCheckDate: "2022-06-01T00:00:00Z",
            externalPayrollUuid: "1bf1efe1-72d4-4e6e-a181-611f3ea66435",
          },
        ],
      },
    ],
    [
      {
        taxId: 2,
        taxName: "Social Security",
        lastUnpaidExternalPayrollUuid: null,
        possibleLiabilities: [
          {
            liabilityAmount: "0.0",
            payrollCheckDate: null,
            externalPayrollUuid: null,
          },
          {
            liabilityAmount: "50.0",
            payrollCheckDate: "2022-06-01T00:00:00Z",
            externalPayrollUuid: "1bf1efe1-72d4-4e6e-a181-611f3ea66435",
          },
        ],
      },
    ],
  ]);
});

test("Externalpayrolls Put V1 Tax Liabilities Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-tax-liabilities-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.updateTaxLiabilities({
    companyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Externalpayrolls Put V1 Tax Liabilities Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-tax-liabilities-Resource"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.updateTaxLiabilities({
    companyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Externalpayrolls Put V1 Tax Liabilities Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-tax-liabilities-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.externalPayrolls.updateTaxLiabilities({
    companyUuid: "<id>",
    requestBody: {},
  });
  expect(result).toBeDefined();
});

test("Externalpayrolls Put V1 Tax Liabilities Finish Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-tax-liabilities-finish-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.externalPayrolls.finalizeTaxLiabilities({
    companyUuid: "<id>",
  });
});

test("Externalpayrolls Put V1 Tax Liabilities Finish Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-tax-liabilities-finish-Resource"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.externalPayrolls.finalizeTaxLiabilities({
    companyUuid: "<id>",
  });
});

test("Externalpayrolls Put V1 Tax Liabilities Finish Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-tax-liabilities-finish-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.externalPayrolls.finalizeTaxLiabilities({
    companyUuid: "<id>",
  });
});
