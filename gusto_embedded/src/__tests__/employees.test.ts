/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { RFCDate } from "../types/index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Employees Post V1 Employees Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-employees-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.create({
    companyId: "<id>",
    requestBody: {
      firstName: "Soren",
      middleInitial: "A",
      lastName: "Kierkegaard",
      preferredFirstName: "Angel",
      dateOfBirth: "1995-05-05",
      email: "knight0faith@example.com",
      ssn: "123456294",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "2593d737-d298-41b9-954f-79fed0af3fb4",
    firstName: "Marc",
    lastName: "Mertz",
    eligiblePaidTimeOff: [
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
    ],
    paymentMethod: "Check",
  });
});

test("Employees Post V1 Employees Create Employee Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-employees-Create Employee Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.create({
    companyId: "<id>",
    requestBody: {
      firstName: "Jed",
      lastName: "Johnson",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "4b3f930f-82cd-48a8-b797-798686e12e5e",
    firstName: "Isom",
    middleInitial: null,
    lastName: "Jaskolski",
    email: "dane7757869450111550@botsford.net",
    companyUuid: "a007e1ab-3595-43c2-ab4b-af7a5af2e365",
    managerUuid: "5e53e257-c8d6-45aa-aa8a-ec99283a3acd",
    version: "1c7ba9d62c8bafbfff998ffccad5d296",
    department: "Stage Hand",
    terminated: false,
    twoPercentShareholder: false,
    onboarded: true,
    onboardingStatus: "onboarding_completed",
    onboardingDocumentsConfig: {
      uuid: null,
      i9Document: false,
    },
    jobs: [
      {
        uuid: "428a653a-0745-4db4-9c80-558288d416fa",
        version: "6c0ed1521e8b86eb36bd4455a63a2dac",
        employeeUuid: "f0689739-1985-49f3-b9ba-84562e71e85f",
        hireDate: "2020-01-20",
        title: "Client Support Director",
        primary: true,
        rate: "70000.00",
        paymentUnit: "Year",
        currentCompensationUuid: "c9fd719b-8b07-48f3-8a4c-f447d2c59669",
        compensations: [
          {
            uuid: "145660ed-6fcc-4211-8915-18e2786290a2",
            version: "2cd4b18662395eb53bcf80d5b5447f36",
            jobUuid: "857feae3-414e-445d-b28b-2eb3ef50155e",
            rate: "70000.00",
            paymentUnit: "Year",
            flsaStatus: "Exempt",
            effectiveDate: "2021-01-20",
            adjustForMinimumWage: false,
            minimumWages: [],
          },
        ],
      },
    ],
    eligiblePaidTimeOff: [
      {
        name: "Sick Hours",
        policyName: "Sick Policy",
        policyUuid: "9940d205-9904-4e55-9fec-652628e84af7",
        accrualUnit: "Hour",
        accrualRate: "208.0",
        accrualMethod: "per_hour_worked",
        accrualPeriod: "Year",
        accrualBalance: "31.8",
        maximumAccrualBalance: "240.0",
        paidAtTermination: false,
      },
      {
        name: "Vacation Hours",
        policyName: "Vacation Policy",
        policyUuid: "ab59de61-239f-4805-933b-0e3360ed291c",
        accrualUnit: "Hour",
        accrualRate: "208.0",
        accrualPeriod: "Year",
        accrualBalance: "77.8",
        maximumAccrualBalance: "240.0",
        paidAtTermination: true,
      },
    ],
    terminations: [],
    garnishments: [],
    customFields: [
      {
        id: "ee515986-f3ca-49da-b576-2691b95262f9",
        companyCustomFieldId: "ea7e5d57-6abb-47d7-b654-347c142886c0",
        name: "employee_level",
        type: "text",
        description: "Employee Level",
        value: "2",
        selectionOptions: null,
      },
      {
        id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
        companyCustomFieldId: "299650e4-e970-4acf-9bf0-6f05585d20ba",
        name: "t-shirt size",
        type: "text",
        description: "What is your t-shirt size?",
        value: "md",
        selectionOptions: null,
      },
      {
        id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
        companyCustomFieldId: "024ec137-6c92-43a3-b061-14a9720531d6",
        name: "favorite fruit",
        type: "radio",
        description: "Which is your favorite fruit?",
        value: "apple",
        selectionOptions: [
          "apple",
          "banana",
          "orange",
        ],
      },
    ],
    dateOfBirth: "1986-06-25",
    hasSsn: false,
    ssn: "",
    phone: "1234567890",
    preferredFirstName: "Angel",
    paymentMethod: "Check",
    workEmail: "angel.jaskolski@example.com",
  });
});

test("Employees Post V1 Employees Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-employees-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.create({
    companyId: "<id>",
    requestBody: {
      firstName: "Stanton",
      lastName: "Auer",
    },
  });
  expect(result).toBeDefined();
});

test("Employees Post V1 Employees Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-employees-Resource"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.create({
    companyId: "<id>",
    requestBody: {
      firstName: "Clotilde",
      lastName: "Hermann",
    },
  });
  expect(result).toBeDefined();
});

test("Employees Post V1 Employees Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-employees-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.create({
    companyId: "<id>",
    requestBody: {
      firstName: "Hildegard",
      lastName: "Bins",
    },
  });
  expect(result).toBeDefined();
});

test("Employees Get V1 Companies Company Id Employees Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-employees-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.get({
    companyId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "9779767c-6044-48e0-bf68-aeb370b9a2e7",
      firstName: "Nicole",
      middleInitial: "M",
      lastName: "Boehm",
      email: "kory7757869450111548@barton-hermiston.io",
      companyUuid: "c44d66dc-c41b-4a60-9e25-5e93ff8583f2",
      managerUuid: "5e53e257-c8d6-45aa-aa8a-ec99283a3acd",
      version: "414dedaca594b77135e0b8d2f398516d",
      department: "Stage Hand",
      terminated: false,
      twoPercentShareholder: false,
      onboarded: true,
      onboardingStatus: "onboarding_completed",
      onboardingDocumentsConfig: {
        uuid: "9d5e3ce5-ea8f-4885-90e5-7ebbed03f7c5",
        i9Document: true,
      },
      jobs: [
        {
          uuid: "5d5e3ce5-ea8f-4885-90e5-7ebaed03f7c5",
          version: "91179081a7309c9fbd31bb3cf7b9893e",
          employeeUuid: "a987bce1-6d06-43f8-9978-9db886f479fb",
          hireDate: "2020-01-20",
          title: "Client Support Manager",
          primary: true,
          rate: "22.00",
          paymentUnit: "Hour",
          currentCompensationUuid: "798a962f-0fcf-491e-9b71-cfa6a1db114f",
          compensations: [
            {
              uuid: "94f17a77-cfe5-436a-af94-422bbf8248ff",
              version: "233f0096a8015e62d9795fadf1fd300d",
              jobUuid: "64711ac0-83ff-4aaf-bec1-db72f5a44e56",
              rate: "22.00",
              paymentUnit: "Hour",
              flsaStatus: "Nonexempt",
              effectiveDate: "2021-01-20",
              adjustForMinimumWage: false,
              minimumWages: [],
            },
          ],
        },
      ],
      eligiblePaidTimeOff: [
        {
          name: "Sick Hours",
          policyName: "Sick Policy",
          policyUuid: "9940d205-9904-4e55-9fec-652628e84af7",
          accrualUnit: "Hour",
          accrualRate: "208.0",
          accrualMethod: "per_hour_worked",
          accrualPeriod: "Year",
          accrualBalance: "71.0",
          maximumAccrualBalance: "240.0",
          paidAtTermination: false,
        },
        {
          name: "Vacation Hours",
          policyName: "Vacation Policy",
          policyUuid: "8b312f0e-30e7-4810-9c06-1177a6484f2d",
          accrualUnit: "Hour",
          accrualRate: "208.0",
          accrualPeriod: "Year",
          accrualBalance: "34.0",
          maximumAccrualBalance: "240.0",
          paidAtTermination: true,
        },
      ],
      terminations: [],
      garnishments: [],
      dateOfBirth: "1996-05-08",
      hasSsn: true,
      ssn: "",
      phone: "1234567890",
      preferredFirstName: "Vanessa",
      paymentMethod: "Check",
      workEmail: "vanessa.boehm@example.com",
    },
    {
      uuid: "d7cb289a-af62-4120-9cd5-acda324b5c04",
      firstName: "Maci",
      middleInitial: "M",
      lastName: "Cassin",
      email: "claud_reinger7757869450111549@gutkowski.net",
      companyUuid: "4522d043-5731-406d-a129-de1808042a32",
      managerUuid: "5e53e257-c8d6-45aa-aa8a-ec99283a3acd",
      version: "e867459e1360fa71e78b88142923d341",
      department: "Band",
      terminated: false,
      twoPercentShareholder: false,
      onboarded: true,
      onboardingStatus: "onboarding_completed",
      onboardingDocumentsConfig: {
        uuid: "1d5e3ce5-ea8f-4885-90e5-7ebbed03f7c5",
        i9Document: true,
      },
      jobs: [
        {
          uuid: "62a00cf7-342b-465e-a151-ecd295152be0",
          version: "d0e719137f89ca3dd334dd4cc248ffbb",
          employeeUuid: "5e53e257-c8d6-45aa-aa8a-ec99283a3acd",
          hireDate: "2020-01-20",
          title: "Account Director",
          primary: true,
          rate: "78000.00",
          paymentUnit: "Year",
          currentCompensationUuid: "93e5da92-173b-4faa-a0bd-d1a8dee68be0",
          compensations: [
            {
              uuid: "1bad5177-c4ed-432e-ab43-66055d40c3a5",
              version: "994b75511d1debac5d7e2ddeae13679f",
              jobUuid: "1214875b-f43d-4267-bf2f-a6d2c298ff3d",
              rate: "78000.00",
              paymentUnit: "Year",
              flsaStatus: "Exempt",
              effectiveDate: "2021-01-20",
              adjustForMinimumWage: false,
              minimumWages: [],
            },
          ],
        },
      ],
      eligiblePaidTimeOff: [
        {
          name: "Sick Hours",
          policyName: "Sick Policy",
          policyUuid: "8b312f0e-30e7-4810-9c06-1177a6484f2d",
          accrualUnit: "Hour",
          accrualRate: "208.0",
          accrualMethod: "per_hour_worked",
          accrualPeriod: "Year",
          accrualBalance: "74.0",
          maximumAccrualBalance: "240.0",
          paidAtTermination: false,
        },
        {
          name: "Vacation Hours",
          policyName: "Vacation Policy",
          policyUuid: "0d4c755e-50ac-4c54-b46e-81bdfa03da5b",
          accrualUnit: "Hour",
          accrualRate: "208.0",
          accrualPeriod: "Year",
          accrualBalance: "16.0",
          maximumAccrualBalance: "240.0",
          paidAtTermination: true,
        },
      ],
      terminations: [],
      garnishments: [],
      customFields: [
        {
          id: "ee515986-f3ca-49da-b576-2691b95262f9",
          companyCustomFieldId: "ea7e5d57-6abb-47d7-b654-347c142886c0",
          name: "employee_level",
          type: "text",
          description: "Employee Level",
          value: "2",
          selectionOptions: null,
        },
        {
          id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
          companyCustomFieldId: "299650e4-e970-4acf-9bf0-6f05585d20ba",
          name: "t-shirt size",
          type: "text",
          description: "What is your t-shirt size?",
          value: "md",
          selectionOptions: null,
        },
        {
          id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
          companyCustomFieldId: "024ec137-6c92-43a3-b061-14a9720531d6",
          name: "favorite fruit",
          type: "radio",
          description: "Which is your favorite fruit?",
          value: "apple",
          selectionOptions: [
            "apple",
            "banana",
            "orange",
          ],
        },
      ],
      dateOfBirth: "1995-09-21",
      hasSsn: true,
      ssn: "",
      phone: "1234567890",
      preferredFirstName: "Denis",
      paymentMethod: "Check",
      workEmail: "denis.cassin@example.com",
    },
  ]);
});

test("Employees Post V1 Historical Employees Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-historical_employees-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.createHistorical({
    companyUuid: "<id>",
    historicalEmployeeBody: {
      firstName: "Soren",
      middleInitial: "A",
      lastName: "Kierkegaard",
      preferredFirstName: "Angel",
      dateOfBirth: "1995-05-05T00:00:00Z",
      ssn: "123456294",
      workAddress: {
        locationUuid: "1da85d35-1910-4d5e-8e94-39e8cdfe8c9a",
      },
      homeAddress: {
        street1: "300 3rd Street",
        street2: null,
        city: "San Francisco",
        state: "CA",
        zip: "94107",
      },
      termination: {
        effectiveDate: new RFCDate("2022-09-15T00:00:00Z"),
      },
      job: {
        hireDate: new RFCDate("2018-05-09T00:00:00Z"),
      },
      employeeStateTaxes: {
        wcCovered: true,
        wcClassCode: "20992",
      },
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "c5eac208-191a-4d7d-b286-05f8a2516327",
    firstName: "Cordelia",
    lastName: "Prosacco",
    eligiblePaidTimeOff: [
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
    ],
    paymentMethod: "Check",
  });
});

test("Employees Post V1 Historical Employees Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-historical_employees-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.createHistorical({
    companyUuid: "<id>",
    historicalEmployeeBody: {
      firstName: "Terrell",
      lastName: "Mitchell",
      dateOfBirth: "1953-04-11",
      ssn: "<value>",
      workAddress: {},
      homeAddress: {
        street1: "<value>",
        city: "Lake Deshawnshire",
        state: "Nebraska",
        zip: "28098-5552",
      },
      termination: {},
      job: {},
    },
  });
  expect(result).toBeDefined();
});

test("Employees Post V1 Historical Employees Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-historical_employees-Resource"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.createHistorical({
    companyUuid: "<id>",
    historicalEmployeeBody: {
      firstName: "Bailey",
      lastName: "Quitzon",
      dateOfBirth: "1946-02-09",
      ssn: "<value>",
      workAddress: {},
      homeAddress: {
        street1: "<value>",
        city: "Dachtown",
        state: "North Carolina",
        zip: "68648-0485",
      },
      termination: {},
      job: {},
    },
  });
  expect(result).toBeDefined();
});

test("Employees Post V1 Historical Employees Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-historical_employees-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.createHistorical({
    companyUuid: "<id>",
    historicalEmployeeBody: {
      firstName: "Saul",
      lastName: "Wintheiser-Wuckert",
      dateOfBirth: "1947-03-12",
      ssn: "<value>",
      workAddress: {},
      homeAddress: {
        street1: "<value>",
        city: "Bergnaumland",
        state: "New Jersey",
        zip: "87338",
      },
      termination: {},
      job: {},
    },
  });
  expect(result).toBeDefined();
});

test("Employees Put V1 Historical Employees Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-historical_employees-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.updateHistorical({
    companyUuid: "<id>",
    historicalEmployeeUuid: "<id>",
    requestBody: {
      version: "db0edd04aaac4506f7edab03ac855d56",
      firstName: "Soren",
      middleInitial: "A",
      lastName: "Kierkegaard",
      dateOfBirth: "1995-05-05T00:00:00Z",
      ssn: "123456294",
      workAddress: {
        locationUuid: "1da85d35-1910-4d5e-8e94-39e8cdfe8c9a",
      },
      homeAddress: {
        street1: "300 3rd Street",
        street2: null,
        city: "San Francisco",
        state: "CA",
        zip: "94107",
      },
      termination: {
        effectiveDate: new RFCDate("2022-09-15T00:00:00Z"),
      },
      job: {
        hireDate: new RFCDate("2018-05-09T00:00:00Z"),
      },
      employeeStateTaxes: {
        wcCovered: true,
        wcClassCode: "20992",
      },
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "cd736941-13a7-41a0-9995-88b35305ed27",
    firstName: "Allison",
    lastName: "Koepp",
    eligiblePaidTimeOff: [
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
    ],
    paymentMethod: "Check",
  });
});

test("Employees Get V1 Employees Create Employee Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-Create Employee Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.retrieve({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "4b3f930f-82cd-48a8-b797-798686e12e5e",
    firstName: "Isom",
    middleInitial: null,
    lastName: "Jaskolski",
    email: "dane7757869450111550@botsford.net",
    companyUuid: "a007e1ab-3595-43c2-ab4b-af7a5af2e365",
    managerUuid: "5e53e257-c8d6-45aa-aa8a-ec99283a3acd",
    version: "1c7ba9d62c8bafbfff998ffccad5d296",
    department: "Stage Hand",
    terminated: false,
    twoPercentShareholder: false,
    onboarded: true,
    onboardingStatus: "onboarding_completed",
    onboardingDocumentsConfig: {
      uuid: null,
      i9Document: false,
    },
    jobs: [
      {
        uuid: "428a653a-0745-4db4-9c80-558288d416fa",
        version: "6c0ed1521e8b86eb36bd4455a63a2dac",
        employeeUuid: "f0689739-1985-49f3-b9ba-84562e71e85f",
        hireDate: "2020-01-20",
        title: "Client Support Director",
        primary: true,
        rate: "70000.00",
        paymentUnit: "Year",
        currentCompensationUuid: "c9fd719b-8b07-48f3-8a4c-f447d2c59669",
        compensations: [
          {
            uuid: "145660ed-6fcc-4211-8915-18e2786290a2",
            version: "2cd4b18662395eb53bcf80d5b5447f36",
            jobUuid: "857feae3-414e-445d-b28b-2eb3ef50155e",
            rate: "70000.00",
            paymentUnit: "Year",
            flsaStatus: "Exempt",
            effectiveDate: "2021-01-20",
            adjustForMinimumWage: false,
            minimumWages: [],
          },
        ],
      },
    ],
    eligiblePaidTimeOff: [
      {
        name: "Sick Hours",
        policyName: "Sick Policy",
        policyUuid: "9940d205-9904-4e55-9fec-652628e84af7",
        accrualUnit: "Hour",
        accrualRate: "208.0",
        accrualMethod: "per_hour_worked",
        accrualPeriod: "Year",
        accrualBalance: "31.8",
        maximumAccrualBalance: "240.0",
        paidAtTermination: false,
      },
      {
        name: "Vacation Hours",
        policyName: "Vacation Policy",
        policyUuid: "ab59de61-239f-4805-933b-0e3360ed291c",
        accrualUnit: "Hour",
        accrualRate: "208.0",
        accrualPeriod: "Year",
        accrualBalance: "77.8",
        maximumAccrualBalance: "240.0",
        paidAtTermination: true,
      },
    ],
    terminations: [],
    garnishments: [],
    customFields: [
      {
        id: "ee515986-f3ca-49da-b576-2691b95262f9",
        companyCustomFieldId: "ea7e5d57-6abb-47d7-b654-347c142886c0",
        name: "employee_level",
        type: "text",
        description: "Employee Level",
        value: "2",
        selectionOptions: null,
      },
      {
        id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
        companyCustomFieldId: "299650e4-e970-4acf-9bf0-6f05585d20ba",
        name: "t-shirt size",
        type: "text",
        description: "What is your t-shirt size?",
        value: "md",
        selectionOptions: null,
      },
      {
        id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
        companyCustomFieldId: "024ec137-6c92-43a3-b061-14a9720531d6",
        name: "favorite fruit",
        type: "radio",
        description: "Which is your favorite fruit?",
        value: "apple",
        selectionOptions: [
          "apple",
          "banana",
          "orange",
        ],
      },
    ],
    dateOfBirth: "1986-06-25",
    hasSsn: false,
    ssn: "",
    phone: "1234567890",
    preferredFirstName: "Angel",
    paymentMethod: "Check",
    workEmail: "angel.jaskolski@example.com",
  });
});

test("Employees Put V1 Employees Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-employees-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.update({
    employeeId: "<id>",
    requestBody: {
      version: "db0edd04aaac4506f7edab03ac855d56",
      firstName: "Soren",
      middleInitial: "A",
      lastName: "Kierkegaard",
      preferredFirstName: "Angel",
      dateOfBirth: "1995-05-05",
      email: "knight0faith@example.com",
      ssn: "123456294",
      twoPercentShareholder: false,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "0488dda5-9bd2-4e22-8225-091b969a682e",
    firstName: "Daphney",
    lastName: "Shanahan",
    eligiblePaidTimeOff: [
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
      {
        accrualUnit: "Hour",
        accrualMethod: "unlimited",
        accrualPeriod: "Year",
      },
    ],
    paymentMethod: "Check",
  });
});

test("Employees Put V1 Employees Create Employee Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-Create Employee Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.update({
    employeeId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "4b3f930f-82cd-48a8-b797-798686e12e5e",
    firstName: "Isom",
    middleInitial: null,
    lastName: "Jaskolski",
    email: "dane7757869450111550@botsford.net",
    companyUuid: "a007e1ab-3595-43c2-ab4b-af7a5af2e365",
    managerUuid: "5e53e257-c8d6-45aa-aa8a-ec99283a3acd",
    version: "1c7ba9d62c8bafbfff998ffccad5d296",
    department: "Stage Hand",
    terminated: false,
    twoPercentShareholder: false,
    onboarded: true,
    onboardingStatus: "onboarding_completed",
    onboardingDocumentsConfig: {
      uuid: null,
      i9Document: false,
    },
    jobs: [
      {
        uuid: "428a653a-0745-4db4-9c80-558288d416fa",
        version: "6c0ed1521e8b86eb36bd4455a63a2dac",
        employeeUuid: "f0689739-1985-49f3-b9ba-84562e71e85f",
        hireDate: "2020-01-20",
        title: "Client Support Director",
        primary: true,
        rate: "70000.00",
        paymentUnit: "Year",
        currentCompensationUuid: "c9fd719b-8b07-48f3-8a4c-f447d2c59669",
        compensations: [
          {
            uuid: "145660ed-6fcc-4211-8915-18e2786290a2",
            version: "2cd4b18662395eb53bcf80d5b5447f36",
            jobUuid: "857feae3-414e-445d-b28b-2eb3ef50155e",
            rate: "70000.00",
            paymentUnit: "Year",
            flsaStatus: "Exempt",
            effectiveDate: "2021-01-20",
            adjustForMinimumWage: false,
            minimumWages: [],
          },
        ],
      },
    ],
    eligiblePaidTimeOff: [
      {
        name: "Sick Hours",
        policyName: "Sick Policy",
        policyUuid: "9940d205-9904-4e55-9fec-652628e84af7",
        accrualUnit: "Hour",
        accrualRate: "208.0",
        accrualMethod: "per_hour_worked",
        accrualPeriod: "Year",
        accrualBalance: "31.8",
        maximumAccrualBalance: "240.0",
        paidAtTermination: false,
      },
      {
        name: "Vacation Hours",
        policyName: "Vacation Policy",
        policyUuid: "ab59de61-239f-4805-933b-0e3360ed291c",
        accrualUnit: "Hour",
        accrualRate: "208.0",
        accrualPeriod: "Year",
        accrualBalance: "77.8",
        maximumAccrualBalance: "240.0",
        paidAtTermination: true,
      },
    ],
    terminations: [],
    garnishments: [],
    customFields: [
      {
        id: "ee515986-f3ca-49da-b576-2691b95262f9",
        companyCustomFieldId: "ea7e5d57-6abb-47d7-b654-347c142886c0",
        name: "employee_level",
        type: "text",
        description: "Employee Level",
        value: "2",
        selectionOptions: null,
      },
      {
        id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
        companyCustomFieldId: "299650e4-e970-4acf-9bf0-6f05585d20ba",
        name: "t-shirt size",
        type: "text",
        description: "What is your t-shirt size?",
        value: "md",
        selectionOptions: null,
      },
      {
        id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
        companyCustomFieldId: "024ec137-6c92-43a3-b061-14a9720531d6",
        name: "favorite fruit",
        type: "radio",
        description: "Which is your favorite fruit?",
        value: "apple",
        selectionOptions: [
          "apple",
          "banana",
          "orange",
        ],
      },
    ],
    dateOfBirth: "1986-06-25",
    hasSsn: false,
    ssn: "",
    phone: "1234567890",
    preferredFirstName: "Angel",
    paymentMethod: "Check",
    workEmail: "angel.jaskolski@example.com",
  });
});

test("Employees Put V1 Employees Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-employees-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.update({
    employeeId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employees Put V1 Employees Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-employees-Resource"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.update({
    employeeId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employees Put V1 Employees Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-employees-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.update({
    employeeId: "<id>",
    requestBody: {
      version: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employees Delete V1 Employee Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("delete-v1-employee-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employees.delete({
    employeeId: "<id>",
  });
});

test("Employees Delete V1 Employee Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("delete-v1-employee-Resource"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employees.delete({
    employeeId: "<id>",
  });
});

test("Employees Delete V1 Employee Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("delete-v1-employee-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  await gustoEmbedded.employees.delete({
    employeeId: "<id>",
  });
});

test("Employees Get V1 Employees Employee Id Custom Fields Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-custom_fields-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.getCustomFields({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    customFields: [
      {
        id: "ee515986-f3ca-49da-b576-2691b95262f9",
        companyCustomFieldId: "ea7e5d57-6abb-47d7-b654-347c142886c0",
        name: "employee_level",
        type: "text",
        description: "Employee Level",
        value: "2",
        selectionOptions: null,
      },
      {
        id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
        companyCustomFieldId: "299650e4-e970-4acf-9bf0-6f05585d20ba",
        name: "t-shirt size",
        type: "text",
        description: "What is your t-shirt size?",
        value: "md",
        selectionOptions: null,
      },
      {
        id: "3796e08d-c2e3-434c-b4de-4ce1893e7b59",
        companyCustomFieldId: "024ec137-6c92-43a3-b061-14a9720531d6",
        name: "favorite fruit",
        type: "radio",
        description: "Which is your favorite fruit?",
        value: "apple",
        selectionOptions: [
          "apple",
          "banana",
          "orange",
        ],
      },
    ],
  });
});

test("Employees Put V1 Employees Employee Id Onboarding Documents Config Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-onboarding_documents_config-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.updateOnboardingDocumentsConfig({
    employeeId: "<id>",
    requestBody: {
      i9Document: true,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    i9Document: "true",
  });
});

test("Employees Get V1 Employees Employee Id Onboarding Status Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-employees-employee_id-onboarding_status-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.getOnboardingStatus({
    employeeId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "c44d66dc-c41b-4a60-9e25-5e93ff8583f2",
    onboardingStatus: "admin_onboarding_incomplete",
    onboardingSteps: [
      {
        title: "Personal details",
        id: "personal_details",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Enter compensation details",
        id: "compensation_details",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Add work address",
        id: "add_work_address",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Add home address",
        id: "add_home_address",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Enter federal tax withholdings",
        id: "federal_tax_setup",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Enter state tax information",
        id: "state_tax_setup",
        required: true,
        completed: false,
        requirements: [
          "add_work_address",
          "add_home_address",
        ],
      },
      {
        title: "Direct deposit setup",
        id: "direct_deposit_setup",
        required: false,
        completed: false,
        requirements: [],
      },
      {
        title: "Employee form signing",
        id: "employee_form_signing",
        required: true,
        completed: false,
        requirements: [
          "federal_tax_setup",
          "state_tax_setup",
        ],
      },
    ],
  });
});

test("Employees Put V1 Employees Employee Id Onboarding Status Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-onboarding_status-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.updateOnboardingStatus({
    employeeId: "<id>",
    requestBody: {
      onboardingStatus: "<value>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "c44d66dc-c41b-4a60-9e25-5e93ff8583f2",
    onboardingStatus: "admin_onboarding_incomplete",
    onboardingSteps: [
      {
        title: "Personal details",
        id: "personal_details",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Enter compensation details",
        id: "compensation_details",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Add work address",
        id: "add_work_address",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Add home address",
        id: "add_home_address",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Enter federal tax withholdings",
        id: "federal_tax_setup",
        required: true,
        completed: false,
        requirements: [],
      },
      {
        title: "Enter state tax information",
        id: "state_tax_setup",
        required: true,
        completed: false,
        requirements: [
          "add_work_address",
          "add_home_address",
        ],
      },
      {
        title: "Direct deposit setup",
        id: "direct_deposit_setup",
        required: false,
        completed: false,
        requirements: [],
      },
      {
        title: "Employee form signing",
        id: "employee_form_signing",
        required: true,
        completed: false,
        requirements: [
          "federal_tax_setup",
          "state_tax_setup",
        ],
      },
    ],
  });
});

test("Employees Put V1 Employees Employee Id Onboarding Status Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-onboarding_status-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.updateOnboardingStatus({
    employeeId: "<id>",
    requestBody: {
      onboardingStatus: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employees Put V1 Employees Employee Id Onboarding Status Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-onboarding_status-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.updateOnboardingStatus({
    employeeId: "<id>",
    requestBody: {
      onboardingStatus: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employees Put V1 Employees Employee Id Onboarding Status Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-employees-employee_id-onboarding_status-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.updateOnboardingStatus({
    employeeId: "<id>",
    requestBody: {
      onboardingStatus: "<value>",
    },
  });
  expect(result).toBeDefined();
});

test("Employees Get Version Employees Time Off Activities Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-version-employees-time_off_activities-example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.employees.getTimeOffActivities({
    employeeUuid: "<id>",
    timeOffType: "<value>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({});
});
