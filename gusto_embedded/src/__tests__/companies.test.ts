/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { GustoEmbedded } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Companies Company Onboarding 2", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("company-onboarding-2"),
  });

  const createPartnerManagedCompanyResult = await gustoEmbedded.companies
    .createPartnerManaged({
      systemAccessAuth: process.env["GUSTOEMBEDDED_SYSTEM_ACCESS_AUTH"] ?? "",
    }, {
      requestBody: {
        user: {
          firstName: "Frank",
          lastName: "Ocean",
          email: "frank@example.com",
          phone: "2345558899",
        },
        company: {
          name: "Frank's Ocean",
          tradeName: "Frankâ€™s Ocean",
          ein: "123456789",
          contractorOnly: false,
        },
      },
    });
  expect(createPartnerManagedCompanyResult).toBeDefined();
});

test("Companies Post V1 Partner Managed Companies Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("post-v1-partner-managed-companies-Basic"),
  });

  const result = await gustoEmbedded.companies.createPartnerManaged({
    systemAccessAuth: process.env["GUSTOEMBEDDED_SYSTEM_ACCESS_AUTH"] ?? "",
  }, {
    requestBody: {
      user: {
        firstName: "Gail",
        lastName: "Stracke",
        email: "Emanuel.McClure@gmail.com",
      },
      company: {
        name: "<value>",
      },
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post V1 Partner Managed Companies Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-partner-managed-companies-Resource",
    ),
  });

  const result = await gustoEmbedded.companies.createPartnerManaged({
    systemAccessAuth: process.env["GUSTOEMBEDDED_SYSTEM_ACCESS_AUTH"] ?? "",
  }, {
    requestBody: {
      user: {
        firstName: "Gretchen",
        lastName: "Vandervort",
        email: "Giuseppe_Turcotte@yahoo.com",
      },
      company: {
        name: "<value>",
      },
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post V1 Partner Managed Companies Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-partner-managed-companies-Nested",
    ),
  });

  const result = await gustoEmbedded.companies.createPartnerManaged({
    systemAccessAuth: process.env["GUSTOEMBEDDED_SYSTEM_ACCESS_AUTH"] ?? "",
  }, {
    requestBody: {
      user: {
        firstName: "Dominic",
        lastName: "Bins",
        email: "Maxime41@hotmail.com",
      },
      company: {
        name: "<value>",
      },
    },
  });
  expect(result).toBeDefined();
});

test("Companies Get V1 Companies Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("get-v1-companies-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.get({
    companyId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    ein: "00-0000001",
    entityType: "C-Corporation",
    contractorOnly: false,
    tier: "core",
    isSuspended: false,
    companyStatus: "Approved",
    uuid: "c7a07c73-a703-4462-9343-1b181182b6e0",
    name: "Shoppe Studios LLC",
    slug: "record-shoppe",
    tradeName: "Record Shoppe",
    isPartnerManaged: false,
    payScheduleType: "by_department",
    joinDate: "2023-03-01",
    fundingType: "ach",
    locations: [
      {
        street1: "412 Kiera Stravenue",
        street2: "Suite 391",
        city: "San Francisco",
        state: "CA",
        zip: "94107",
        country: "USA",
        active: true,
      },
      {
        street1: "644 Fay Vista",
        street2: "Suite 842",
        city: "Richmond",
        state: "VA",
        zip: "23218",
        country: "USA",
        active: true,
      },
    ],
    compensations: {
      hourly: [
        {
          name: "Overtime",
          multiple: 1.5,
        },
        {
          name: "Double overtime",
          multiple: 2,
        },
        {
          name: "Regular",
          multiple: 1,
        },
        {
          name: "Outstanding vacation",
          multiple: 1,
        },
        {
          name: "Holiday",
          multiple: 1,
        },
        {
          name: "Emergency sick - self care",
          multiple: 1,
        },
        {
          name: "Emergency sick - caring for others",
          multiple: 1,
        },
        {
          name: "FMLA Public Health Emergency Leave",
          multiple: 1,
        },
        {
          name: "Regular Hours",
          multiple: 1,
        },
      ],
      fixed: [
        {
          name: "Bonus",
        },
        {
          name: "Commission",
        },
        {
          name: "Paycheck Tips",
        },
        {
          name: "Cash Tips",
        },
        {
          name: "Correction Payment",
        },
        {
          name: "Severance",
        },
        {
          name: "Minimum Wage Adjustment",
        },
        {
          name: "Reimbursement",
        },
      ],
      paidTimeOff: [
        {
          name: "Vacation Hours",
        },
        {
          name: "Sick Hours",
        },
        {
          name: "Holiday Hours",
        },
      ],
    },
    primarySignatory: {
      uuid: "8a2ed9c2-9d1e-443a-8e56-a490d8bf73bb",
      firstName: "Alda",
      middleInitial: "",
      lastName: "Carter",
      phone: "1-565-710-7558",
      email: "louie.hessel7757869450111547@zemlak.biz",
      homeAddress: {
        street1: "524 Roob Divide",
        street2: "Suite 565",
        city: "San Francisco",
        state: "CA",
        zip: "94107",
        country: "USA",
      },
    },
    primaryPayrollAdmin: {
      firstName: "Ian",
      lastName: "Labadie",
      phone: "1-565-710-7559",
      email: "louie.hessel7757869450111547@zemlak.biz",
    },
  });
});

test("Companies Put V1 Companies Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-companies-Example"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.update({
    companyId: "<id>",
    requestBody: {
      contractorOnly: false,
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    ein: "00-0000001",
    entityType: "C-Corporation",
    contractorOnly: false,
    tier: "core",
    isSuspended: false,
    companyStatus: "Approved",
    uuid: "c7a07c73-a703-4462-9343-1b181182b6e0",
    name: "Shoppe Studios LLC",
    slug: "record-shoppe",
    tradeName: "Record Shoppe",
    isPartnerManaged: false,
    payScheduleType: "by_department",
    joinDate: "2023-03-01",
    fundingType: "ach",
    locations: [
      {
        street1: "412 Kiera Stravenue",
        street2: "Suite 391",
        city: "San Francisco",
        state: "CA",
        zip: "94107",
        country: "USA",
        active: true,
      },
      {
        street1: "644 Fay Vista",
        street2: "Suite 842",
        city: "Richmond",
        state: "VA",
        zip: "23218",
        country: "USA",
        active: true,
      },
    ],
    compensations: {
      hourly: [
        {
          name: "Overtime",
          multiple: 1.5,
        },
        {
          name: "Double overtime",
          multiple: 2,
        },
        {
          name: "Regular",
          multiple: 1,
        },
        {
          name: "Outstanding vacation",
          multiple: 1,
        },
        {
          name: "Holiday",
          multiple: 1,
        },
        {
          name: "Emergency sick - self care",
          multiple: 1,
        },
        {
          name: "Emergency sick - caring for others",
          multiple: 1,
        },
        {
          name: "FMLA Public Health Emergency Leave",
          multiple: 1,
        },
        {
          name: "Regular Hours",
          multiple: 1,
        },
      ],
      fixed: [
        {
          name: "Bonus",
        },
        {
          name: "Commission",
        },
        {
          name: "Paycheck Tips",
        },
        {
          name: "Cash Tips",
        },
        {
          name: "Correction Payment",
        },
        {
          name: "Severance",
        },
        {
          name: "Minimum Wage Adjustment",
        },
        {
          name: "Reimbursement",
        },
      ],
      paidTimeOff: [
        {
          name: "Vacation Hours",
        },
        {
          name: "Sick Hours",
        },
        {
          name: "Holiday Hours",
        },
      ],
    },
    primarySignatory: {
      uuid: "8a2ed9c2-9d1e-443a-8e56-a490d8bf73bb",
      firstName: "Alda",
      middleInitial: "",
      lastName: "Carter",
      phone: "1-565-710-7558",
      email: "louie.hessel7757869450111547@zemlak.biz",
      homeAddress: {
        street1: "524 Roob Divide",
        street2: "Suite 565",
        city: "San Francisco",
        state: "CA",
        zip: "94107",
        country: "USA",
      },
    },
    primaryPayrollAdmin: {
      firstName: "Ian",
      lastName: "Labadie",
      phone: "1-565-710-7559",
      email: "louie.hessel7757869450111547@zemlak.biz",
    },
  });
});

test("Companies Put V1 Companies Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-companies-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.update({
    companyId: "<id>",
    requestBody: {
      contractorOnly: false,
    },
  });
  expect(result).toBeDefined();
});

test("Companies Put V1 Companies Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-companies-Resource"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.update({
    companyId: "<id>",
    requestBody: {
      contractorOnly: false,
    },
  });
  expect(result).toBeDefined();
});

test("Companies Put V1 Companies Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("put-v1-companies-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.update({
    companyId: "<id>",
    requestBody: {
      contractorOnly: true,
    },
  });
  expect(result).toBeDefined();
});

test("Companies Put V1 Partner Managed Companies Company Uuid Migrate Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-partner-managed-companies-company-uuid-migrate-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.migrate({
    companyUuid: "<id>",
    requestBody: {
      email: "Benjamin_Kihn44@yahoo.com",
      ipAddress: "198.52.136.51",
      externalUserId: "<id>",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    companyUuid: "39abf9b9-650b-4e67-89a0-389dc6ee8a71",
    migrationStatus: "success",
  });
});

test("Companies Put V1 Partner Managed Companies Company Uuid Migrate Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-partner-managed-companies-company-uuid-migrate-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.migrate({
    companyUuid: "<id>",
    requestBody: {
      email: "Erna62@gmail.com",
      ipAddress: "02de:9982:167f:34c3:bfe5:a8ab:0cf3:5c87",
      externalUserId: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Put V1 Partner Managed Companies Company Uuid Migrate Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-partner-managed-companies-company-uuid-migrate-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.migrate({
    companyUuid: "<id>",
    requestBody: {
      email: "Lyric_Beer@yahoo.com",
      ipAddress: "217.131.195.126",
      externalUserId: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Put V1 Partner Managed Companies Company Uuid Migrate Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "put-v1-partner-managed-companies-company-uuid-migrate-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.migrate({
    companyUuid: "<id>",
    requestBody: {
      email: "Johann_Thompson@hotmail.com",
      ipAddress: "82.48.167.70",
      externalUserId: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post Partner Managed Companies Company Uuid Accept Terms Of Service Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-partner-managed-companies-company_uuid-accept_terms_of_service-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.acceptTermsOfService({
    companyUuid: "<id>",
    requestBody: {
      email: "jsmith99@gmail.com",
      ipAddress: "192.168.1.2",
      externalUserId: "2005648946132",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    latestTermsAccepted: true,
  });
});

test("Companies Post Partner Managed Companies Company Uuid Accept Terms Of Service Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-partner-managed-companies-company_uuid-accept_terms_of_service-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.acceptTermsOfService({
    companyUuid: "<id>",
    requestBody: {
      email: "Justine73@gmail.com",
      ipAddress: "168.91.169.217",
      externalUserId: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post Partner Managed Companies Company Uuid Accept Terms Of Service Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-partner-managed-companies-company_uuid-accept_terms_of_service-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.acceptTermsOfService({
    companyUuid: "<id>",
    requestBody: {
      email: "William_Goldner@hotmail.com",
      ipAddress: "bf16:0638:d9db:4e8a:c5ee:c9cd:bb4f:1d5d",
      externalUserId: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post Partner Managed Companies Company Uuid Accept Terms Of Service Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-partner-managed-companies-company_uuid-accept_terms_of_service-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.acceptTermsOfService({
    companyUuid: "<id>",
    requestBody: {
      email: "Jerad_Dicki@yahoo.com",
      ipAddress: "61.236.253.221",
      externalUserId: "<id>",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post Partner Managed Companies Company Uuid Retrieve Terms Of Service Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-partner-managed-companies-company_uuid-retrieve_terms_of_service-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.retrieveTermsOfService({
    companyUuid: "<id>",
    requestBody: {
      email: "jsmith99@gmail.com",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    latestTermsAccepted: true,
  });
});

test("Companies Post Partner Managed Companies Company Uuid Retrieve Terms Of Service Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-partner-managed-companies-company_uuid-retrieve_terms_of_service-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.retrieveTermsOfService({
    companyUuid: "<id>",
    requestBody: {
      email: "Sarina_Hand68@yahoo.com",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post Partner Managed Companies Company Uuid Retrieve Terms Of Service Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-partner-managed-companies-company_uuid-retrieve_terms_of_service-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.retrieveTermsOfService({
    companyUuid: "<id>",
    requestBody: {
      email: "Katheryn_Ernser@hotmail.com",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post Partner Managed Companies Company Uuid Retrieve Terms Of Service Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-partner-managed-companies-company_uuid-retrieve_terms_of_service-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.retrieveTermsOfService({
    companyUuid: "<id>",
    requestBody: {
      email: "Maudie_Franecki-Hammes@hotmail.com",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post V1 Companies Company Id Admins Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-admins-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.createAdmin({
    companyId: "<id>",
    requestBody: {
      firstName: "John",
      lastName: "Smith",
      email: "jsmith99@gmail.com",
    },
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "5de11791-98fd-4587-9ed0-d5d804b8e647",
    email: "jsmith99@gmail.com",
    firstName: "John",
    lastName: "Smith",
  });
});

test("Companies Post V1 Companies Company Id Admins Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-admins-Basic",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.createAdmin({
    companyId: "<id>",
    requestBody: {
      firstName: "Guillermo",
      lastName: "Koch",
      email: "Justine_Gusikowski92@yahoo.com",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post V1 Companies Company Id Admins Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-admins-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.createAdmin({
    companyId: "<id>",
    requestBody: {
      firstName: "Jaquelin",
      lastName: "Leannon",
      email: "Neil_Parisian@hotmail.com",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Post V1 Companies Company Id Admins Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "post-v1-companies-company_id-admins-Nested",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.createAdmin({
    companyId: "<id>",
    requestBody: {
      firstName: "Jessika",
      lastName: "Hudson",
      email: "Cornell_Monahan86@hotmail.com",
    },
  });
  expect(result).toBeDefined();
});

test("Companies Get V1 Companies Company Id Admins Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-admins-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.getAdmins({
    companyId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual([
    {
      uuid: "987058cc-23ee-46e9-81ef-5cee086cceca",
      email: "Katherine@acmecorp.com",
      firstName: "Katherine",
      lastName: "Johnson",
    },
    {
      uuid: "5de11791-98fd-4587-9ed0-d5d804b8e647",
      email: "Anita@acmecorp.com",
      firstName: "Anita",
      lastName: "Borg",
    },
  ]);
});

test("Companies Get V1 Company Onboarding Status Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-company-onboarding-status-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.getOnboardingStatus({
    companyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "c44d66dc-c41b-4a60-9e25-5e93ff8583f2",
    onboardingCompleted: false,
    onboardingSteps: [
      {
        title: "Add Your Company's Addresses",
        id: "add_addresses",
        required: true,
        completed: true,
        skippable: false,
        requirements: [],
      },
      {
        title: "Enter Your Federal Tax Information",
        id: "federal_tax_setup",
        required: true,
        completed: true,
        skippable: false,
        requirements: [],
      },
      {
        title: "Select Industry",
        id: "select_industry",
        required: true,
        completed: true,
        skippable: false,
        requirements: [],
      },
      {
        title: "Add Your Bank Account",
        id: "add_bank_info",
        required: true,
        completed: true,
        skippable: false,
        requirements: [],
      },
      {
        title: "Add Your Employees",
        id: "add_employees",
        required: true,
        completed: true,
        skippable: true,
        requirements: [
          "add_addresses",
        ],
      },
      {
        title: "Enter Your State Tax Information",
        id: "state_setup",
        required: true,
        completed: false,
        skippable: false,
        requirements: [
          "add_addresses",
          "add_employees",
        ],
      },
      {
        title: "Select a Pay Schedule",
        id: "payroll_schedule",
        required: true,
        completed: false,
        skippable: false,
        requirements: [],
      },
      {
        title: "Sign Documents",
        id: "sign_all_forms",
        required: true,
        completed: false,
        skippable: false,
        requirements: [
          "add_employees",
          "federal_tax_setup",
          "state_setup",
          "add_bank_info",
          "payroll_schedule",
        ],
      },
      {
        title: "Verify Your Bank Account",
        id: "verify_bank_info",
        required: true,
        completed: false,
        skippable: false,
        requirements: [
          "add_bank_info",
        ],
      },
    ],
  });
});

test("Companies Get V1 Company Finish Onboarding Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-company-finish-onboarding-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.finishOnboarding({
    companyUuid: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    uuid: "c44d66dc-c41b-4a60-9e25-5e93ff8583f2",
    onboardingCompleted: true,
    onboardingSteps: [
      {
        title: "Add Your Company's Addresses",
        id: "add_addresses",
        required: true,
        completed: true,
        skippable: false,
        requirements: [],
      },
      {
        title: "Enter Your Federal Tax Information",
        id: "federal_tax_setup",
        required: true,
        completed: true,
        skippable: false,
        requirements: [],
      },
      {
        title: "Select Industry",
        id: "select_industry",
        required: true,
        completed: true,
        skippable: false,
        requirements: [],
      },
      {
        title: "Add Your Bank Account",
        id: "add_bank_info",
        required: true,
        completed: true,
        skippable: false,
        requirements: [],
      },
      {
        title: "Add Your Employees",
        id: "add_employees",
        required: true,
        completed: true,
        skippable: true,
        requirements: [
          "add_addresses",
        ],
      },
      {
        title: "Enter Your State Tax Information",
        id: "state_setup",
        required: true,
        completed: true,
        skippable: false,
        requirements: [
          "add_addresses",
          "add_employees",
        ],
      },
      {
        title: "Select a Pay Schedule",
        id: "payroll_schedule",
        required: true,
        completed: true,
        skippable: false,
        requirements: [],
      },
      {
        title: "Sign Documents",
        id: "sign_all_forms",
        required: true,
        completed: true,
        skippable: false,
        requirements: [
          "add_employees",
          "federal_tax_setup",
          "state_setup",
          "add_bank_info",
          "payroll_schedule",
        ],
      },
      {
        title: "Verify Your Bank Account",
        id: "verify_bank_info",
        required: true,
        completed: true,
        skippable: false,
        requirements: [
          "add_bank_info",
        ],
      },
    ],
  });
});

test("Companies Get V1 Company Finish Onboarding Basic", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("get-v1-company-finish-onboarding-Basic"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.finishOnboarding({
    companyUuid: "<id>",
  });
  expect(result).toBeDefined();
});

test("Companies Get V1 Company Finish Onboarding Resource", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-company-finish-onboarding-Resource",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.finishOnboarding({
    companyUuid: "<id>",
  });
  expect(result).toBeDefined();
});

test("Companies Get V1 Company Finish Onboarding Nested", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient("get-v1-company-finish-onboarding-Nested"),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.finishOnboarding({
    companyUuid: "<id>",
  });
  expect(result).toBeDefined();
});

test("Companies Get V1 Companies Company Id Custom Fields Example", async () => {
  const gustoEmbedded = new GustoEmbedded({
    httpClient: createTestHTTPClient(
      "get-v1-companies-company_id-custom_fields-Example",
    ),
    companyAccessAuth: process.env["GUSTOEMBEDDED_COMPANY_ACCESS_AUTH"] ?? "",
  });

  const result = await gustoEmbedded.companies.getCustomFields({
    companyId: "<id>",
  });
  expect(result).toBeDefined();
  expect(result).toEqual({
    customFields: [
      {
        uuid: "ea7e5d57-6abb-47d7-b654-347c142886c0",
        name: "employee_level",
        type: "text",
        description: "Employee Level",
        selectionOptions: null,
      },
      {
        uuid: "299650e4-e970-4acf-9bf0-6f05585d20ba",
        name: "t-shirt size",
        type: "text",
        description: "What is your t-shirt size?",
        selectionOptions: null,
      },
      {
        uuid: "024ec137-6c92-43a3-b061-14a9720531d6",
        name: "favorite fruit",
        type: "radio",
        description: "Which is your favorite fruit?",
        selectionOptions: [
          "apple",
          "banana",
          "orange",
        ],
      },
    ],
  });
});
