/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contractorPaymentMethodCreateBankAccount } from "../funcs/contractorPaymentMethodCreateBankAccount.js";
import { contractorPaymentMethodGet } from "../funcs/contractorPaymentMethodGet.js";
import { contractorPaymentMethodGetBankAccounts } from "../funcs/contractorPaymentMethodGetBankAccounts.js";
import { contractorPaymentMethodUpdatePaymentMethod } from "../funcs/contractorPaymentMethodUpdatePaymentMethod.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ContractorPaymentMethod extends ClientSDK {
  /**
   * Create a contractor bank account
   *
   * @remarks
   * Creates a contractor bank account.
   *
   * Note: We currently only support one bank account per contractor. Using this endpoint on a contractor who already has a bank account will just replace it.
   *
   * scope: `contractor_payment_methods:write`
   */
  async createBankAccount(
    request: operations.PostV1ContractorsContractorUuidBankAccountsRequest,
    options?: RequestOptions,
  ): Promise<components.ContractorBankAccount> {
    return unwrapAsync(contractorPaymentMethodCreateBankAccount(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all contractor bank accounts
   *
   * @remarks
   * Returns all contractor bank accounts.
   *
   * scope: `contractor_payment_methods:read`
   */
  async getBankAccounts(
    request: operations.GetV1ContractorsContractorUuidBankAccountsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ContractorBankAccount>> {
    return unwrapAsync(contractorPaymentMethodGetBankAccounts(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a contractor's payment method
   *
   * @remarks
   * Fetches a contractor's payment method. A contractor payment method
   * describes how the payment should be split across the contractor's associated
   * bank accounts.
   *
   * scope: `contractor_payment_methods:read`
   */
  async get(
    request: operations.GetV1ContractorsContractorUuidPaymentMethodRequest,
    options?: RequestOptions,
  ): Promise<components.ContractorPaymentMethod> {
    return unwrapAsync(contractorPaymentMethodGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a contractor's payment method
   *
   * @remarks
   * Updates a contractor's payment method. Note that creating a contractor
   * bank account will also update the contractor's payment method.
   *
   * scope: `contractor_payment_methods:write`
   */
  async updatePaymentMethod(
    request: operations.PutV1ContractorsContractorIdPaymentMethodRequest,
    options?: RequestOptions,
  ): Promise<components.ContractorPaymentMethod> {
    return unwrapAsync(contractorPaymentMethodUpdatePaymentMethod(
      this,
      request,
      options,
    ));
  }
}
