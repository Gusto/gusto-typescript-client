/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contractorPaymentGroupsCreate } from "../funcs/contractorPaymentGroupsCreate.js";
import { contractorPaymentGroupsDelete } from "../funcs/contractorPaymentGroupsDelete.js";
import { contractorPaymentGroupsFund } from "../funcs/contractorPaymentGroupsFund.js";
import { contractorPaymentGroupsGet } from "../funcs/contractorPaymentGroupsGet.js";
import { contractorPaymentGroupsList } from "../funcs/contractorPaymentGroupsList.js";
import { contractorPaymentGroupsPreview } from "../funcs/contractorPaymentGroupsPreview.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ContractorPaymentGroups extends ClientSDK {
  /**
   * Create a contractor payment group
   *
   * @remarks
   * Pay a group of contractors. Information needed depends on the contractor's wage type (hourly vs fixed)
   *
   * scope: `payrolls:run`
   */
  async create(
    request: operations.PostV1CompaniesCompanyIdContractorPaymentGroupsRequest,
    options?: RequestOptions,
  ): Promise<components.ContractorPaymentGroup> {
    return unwrapAsync(contractorPaymentGroupsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get contractor payment groups for a company
   *
   * @remarks
   * Returns a list of minimal contractor payment groups within a given time period, including totals but not associated contractor payments.
   *
   * scope: `payrolls:read`
   */
  async list(
    request: operations.GetV1CompaniesCompanyIdContractorPaymentGroupsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.ContractorPaymentGroupMinimal>> {
    return unwrapAsync(contractorPaymentGroupsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Preview a contractor payment group
   *
   * @remarks
   * Preview a group of contractor payments. Request will validate inputs and return preview of the contractor payment group including the expected debit_date.  Uuid will be null in the response.
   *
   * scope: `payrolls:read`
   */
  async preview(
    request:
      operations.PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest,
    options?: RequestOptions,
  ): Promise<components.ContractorPaymentGroup> {
    return unwrapAsync(contractorPaymentGroupsPreview(
      this,
      request,
      options,
    ));
  }

  /**
   * Fetch a contractor payment group
   *
   * @remarks
   * Returns a contractor payment group with all associated contractor payments.
   *
   * scope: `payrolls:read`
   */
  async get(
    request:
      operations.GetV1ContractorPaymentGroupsContractorPaymentGroupIdRequest,
    options?: RequestOptions,
  ): Promise<components.ContractorPaymentGroup> {
    return unwrapAsync(contractorPaymentGroupsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Cancel a contractor payment group
   *
   * @remarks
   * Cancels a contractor payment group and all associated contractor payments. All contractor payments must be cancellable, unfunded.
   *
   * scope: `payrolls:run`
   */
  async delete(
    request:
      operations.DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(contractorPaymentGroupsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Fund a contractor payment group [DEMO]
   *
   * @remarks
   * > ðŸš§ Demo action
   * >
   * > This action is only available in the Demo environment
   *
   * Simulate funding a contractor payment group. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment group's `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.
   *
   * scope: `payrolls:run`
   */
  async fund(
    request:
      operations.PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequest,
    options?: RequestOptions,
  ): Promise<components.ContractorPaymentGroup> {
    return unwrapAsync(contractorPaymentGroupsFund(
      this,
      request,
      options,
    ));
  }
}
