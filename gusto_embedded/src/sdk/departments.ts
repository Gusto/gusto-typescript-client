/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { departmentsAddPeople } from "../funcs/departmentsAddPeople.js";
import { departmentsCreate } from "../funcs/departmentsCreate.js";
import { departmentsDelete } from "../funcs/departmentsDelete.js";
import { departmentsGet } from "../funcs/departmentsGet.js";
import { departmentsGetAll } from "../funcs/departmentsGetAll.js";
import { departmentsRemovePeople } from "../funcs/departmentsRemovePeople.js";
import { departmentsUpdate } from "../funcs/departmentsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Departments extends ClientSDK {
  /**
   * Create a department
   *
   * @remarks
   * Create a department
   *
   * scope: `departments:write`
   */
  async create(
    request: operations.PostDepartmentsRequest,
    options?: RequestOptions,
  ): Promise<components.Department> {
    return unwrapAsync(departmentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all departments of a company
   *
   * @remarks
   * Get all of the departments for a given company with the employees and contractors assigned to that department.
   *
   * scope: `departments:read`
   */
  async getAll(
    request: operations.GetCompaniesDepartmentsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Department>> {
    return unwrapAsync(departmentsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a department
   *
   * @remarks
   * Get a department given the UUID
   *
   * scope: `departments:read`
   */
  async get(
    request: operations.GetDepartmentRequest,
    options?: RequestOptions,
  ): Promise<components.Department> {
    return unwrapAsync(departmentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a department
   *
   * @remarks
   * Update a department
   *
   * scope: `departments:write`
   */
  async update(
    request: operations.PutDepartmentsRequest,
    options?: RequestOptions,
  ): Promise<components.Department> {
    return unwrapAsync(departmentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a department
   *
   * @remarks
   * Delete a department. You cannot delete a department until all employees and contractors have been removed.
   *
   * scope: `departments:write`
   */
  async delete(
    request: operations.DeleteDepartmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(departmentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Add people to a department
   *
   * @remarks
   * Add employees and contractors to a department
   *
   * scope: `departments:write`
   */
  async addPeople(
    request: operations.PutAddPeopleToDepartmentRequest,
    options?: RequestOptions,
  ): Promise<components.Department> {
    return unwrapAsync(departmentsAddPeople(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove people from a department
   *
   * @remarks
   * Remove employees and contractors from a department
   *
   * scope: `departments:write`
   */
  async removePeople(
    request: operations.PutRemovePeopleFromDepartmentRequest,
    options?: RequestOptions,
  ): Promise<components.Department> {
    return unwrapAsync(departmentsRemovePeople(
      this,
      request,
      options,
    ));
  }
}
