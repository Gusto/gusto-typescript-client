/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { signatoriesCreate } from "../funcs/signatoriesCreate.js";
import { signatoriesDelete } from "../funcs/signatoriesDelete.js";
import { signatoriesInvite } from "../funcs/signatoriesInvite.js";
import { signatoriesList } from "../funcs/signatoriesList.js";
import { signatoriesUpdate } from "../funcs/signatoriesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
  DeleteV1CompaniesCompanyUuidSignatoriesSignatoryUuidRequest,
  DeleteV1CompaniesCompanyUuidSignatoriesSignatoryUuidResponse,
} from "../models/operations/deletev1companiescompanyuuidsignatoriessignatoryuuid.js";
import {
  GetV1CompaniesCompanyUuidSignatoriesRequest,
  GetV1CompaniesCompanyUuidSignatoriesResponse,
} from "../models/operations/getv1companiescompanyuuidsignatories.js";
import {
  PostV1CompaniesCompanyUuidSignatoriesInviteRequest,
  PostV1CompaniesCompanyUuidSignatoriesInviteResponse,
} from "../models/operations/postv1companiescompanyuuidsignatoriesinvite.js";
import {
  PostV1CompanySignatoriesRequest,
  PostV1CompanySignatoriesResponse,
} from "../models/operations/postv1companysignatories.js";
import {
  PutV1CompaniesCompanyUuidSignatoriesSignatoryUuidRequest,
  PutV1CompaniesCompanyUuidSignatoriesSignatoryUuidResponse,
} from "../models/operations/putv1companiescompanyuuidsignatoriessignatoryuuid.js";
import { unwrapAsync } from "../types/fp.js";

export class Signatories extends ClientSDK {
  /**
   * Create a signatory
   *
   * @remarks
   * Create a company signatory with complete information.
   * A signatory can legally sign forms once the identity verification process is successful.
   * The signatory should be an officer, owner, general partner or LLC member manager, plan administrator, fiduciary, or an authorized representative who is designated to sign agreements on the company's behalf. An officer is the president, vice president, treasurer, chief accounting officer, etc. There can only be a single primary signatory in a company.
   *
   * scope: `signatories:manage`
   */
  async create(
    request: PostV1CompanySignatoriesRequest,
    options?: RequestOptions,
  ): Promise<PostV1CompanySignatoriesResponse> {
    return unwrapAsync(signatoriesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all company signatories
   *
   * @remarks
   * Returns company signatories. Currently we only support a single signatory per company.
   *
   * scope: `signatories:read`
   */
  async list(
    request: GetV1CompaniesCompanyUuidSignatoriesRequest,
    options?: RequestOptions,
  ): Promise<GetV1CompaniesCompanyUuidSignatoriesResponse> {
    return unwrapAsync(signatoriesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Invite a signatory
   *
   * @remarks
   * Create a signatory with minimal information. This signatory can be invited to provide more information through the `PUT /v1/companies/{company_uuid}/signatories/{signatory_uuid}` endpoint. This will start the identity verification process and allow the signatory to be verified to sign documents.
   */
  async invite(
    request: PostV1CompaniesCompanyUuidSignatoriesInviteRequest,
    options?: RequestOptions,
  ): Promise<PostV1CompaniesCompanyUuidSignatoriesInviteResponse> {
    return unwrapAsync(signatoriesInvite(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a signatory
   *
   * @remarks
   * Update a signatory that has been either invited or created. If the signatory has been created with minimal information through the `POST /v1/companies/{company_uuid}/signatories/invite` endpoint, then the first update must contain all attributes specified in the request body in order to start the identity verification process.
   *
   * scope: `signatories:write`
   */
  async update(
    request: PutV1CompaniesCompanyUuidSignatoriesSignatoryUuidRequest,
    options?: RequestOptions,
  ): Promise<PutV1CompaniesCompanyUuidSignatoriesSignatoryUuidResponse> {
    return unwrapAsync(signatoriesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a signatory
   *
   * @remarks
   * Delete a company signatory.
   *
   * scope: `signatories:manage`
   */
  async delete(
    request: DeleteV1CompaniesCompanyUuidSignatoriesSignatoryUuidRequest,
    options?: RequestOptions,
  ): Promise<DeleteV1CompaniesCompanyUuidSignatoriesSignatoryUuidResponse> {
    return unwrapAsync(signatoriesDelete(
      this,
      request,
      options,
    ));
  }
}
