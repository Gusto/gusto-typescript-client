/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contractorFormsGenerate1099 } from "../funcs/contractorFormsGenerate1099.js";
import { contractorFormsGet } from "../funcs/contractorFormsGet.js";
import { contractorFormsGetById } from "../funcs/contractorFormsGetById.js";
import { contractorFormsGetPdf } from "../funcs/contractorFormsGetPdf.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ContractorForms extends ClientSDK {
  /**
   * Get all contractor forms
   *
   * @remarks
   * Get a list of all contractor's forms
   *
   * scope: `contractor_forms:read`
   */
  async get(
    request: operations.GetV1ContractorFormsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Form1099>> {
    return unwrapAsync(contractorFormsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a contractor form
   *
   * @remarks
   * Get a contractor form
   *
   * scope: `contractor_forms:read`
   */
  async getById(
    request: operations.GetV1ContractorFormRequest,
    options?: RequestOptions,
  ): Promise<components.Form1099> {
    return unwrapAsync(contractorFormsGetById(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the contractor form pdf
   *
   * @remarks
   * Get the link to the form PDF
   *
   * scope: `contractor_forms:read`
   */
  async getPdf(
    request: operations.GetV1ContractorFormPdfRequest,
    options?: RequestOptions,
  ): Promise<components.FormPdf> {
    return unwrapAsync(contractorFormsGetPdf(
      this,
      request,
      options,
    ));
  }

  /**
   * Generate a 1099 form [DEMO]
   *
   * @remarks
   * > ðŸš§ Demo action
   * >
   * > This action is only available in the Demo environment
   *
   * Generates a 1099 document for testing purposes.
   *
   * scope: `contractors:write`
   */
  async generate1099(
    request: operations.PostV1SandboxGenerate1099Request,
    options?: RequestOptions,
  ): Promise<components.Form1099> {
    return unwrapAsync(contractorFormsGenerate1099(
      this,
      request,
      options,
    ));
  }
}
