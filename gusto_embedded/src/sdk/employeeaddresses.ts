/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { employeeAddressesCreate } from "../funcs/employeeAddressesCreate.js";
import { employeeAddressesDelete } from "../funcs/employeeAddressesDelete.js";
import { employeeAddressesGet } from "../funcs/employeeAddressesGet.js";
import { employeeAddressesGetHomeAddress } from "../funcs/employeeAddressesGetHomeAddress.js";
import { employeeAddressesGetHomeAddresses } from "../funcs/employeeAddressesGetHomeAddresses.js";
import { employeeAddressesGetWorkAddress } from "../funcs/employeeAddressesGetWorkAddress.js";
import { employeeAddressesRemoveHomeAddress } from "../funcs/employeeAddressesRemoveHomeAddress.js";
import { employeeAddressesUpdateHomeAddress } from "../funcs/employeeAddressesUpdateHomeAddress.js";
import { employeeAddressesUpdateWorkAddress } from "../funcs/employeeAddressesUpdateWorkAddress.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { WorkAddresses } from "./workaddresses.js";

export class EmployeeAddresses extends ClientSDK {
  private _workAddresses?: WorkAddresses;
  get workAddresses(): WorkAddresses {
    return (this._workAddresses ??= new WorkAddresses(this._options));
  }

  /**
   * Get an employee's home addresses
   *
   * @remarks
   * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
   *
   * Supports home address effective dating and courtesy withholding.
   *
   * scope: `employees:read`
   */
  async getHomeAddresses(
    request: operations.GetV1EmployeesEmployeeIdHomeAddressesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.EmployeeAddress>> {
    return unwrapAsync(employeeAddressesGetHomeAddresses(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an employee's home address
   *
   * @remarks
   * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
   *
   * Supports home address effective dating and courtesy withholding.
   *
   * scope: `employees:write`
   */
  async create(
    request: operations.PostV1EmployeesEmployeeIdHomeAddressesRequest,
    options?: RequestOptions,
  ): Promise<components.EmployeeAddress> {
    return unwrapAsync(employeeAddressesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an employee's home address
   *
   * @remarks
   * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
   *
   * Supports home address effective dating and courtesy withholding.
   *
   * scope: `employees:read`
   */
  async getHomeAddress(
    request: operations.GetV1HomeAddressesHomeAddressUuidRequest,
    options?: RequestOptions,
  ): Promise<components.EmployeeAddress> {
    return unwrapAsync(employeeAddressesGetHomeAddress(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an employee's home address
   *
   * @remarks
   * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
   *
   * Supports home address effective dating and courtesy withholding.
   *
   * scope: `employees:write`
   */
  async updateHomeAddress(
    request: operations.PutV1HomeAddressesHomeAddressUuidRequest,
    options?: RequestOptions,
  ): Promise<components.EmployeeAddress> {
    return unwrapAsync(employeeAddressesUpdateHomeAddress(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an employee's home address
   *
   * @remarks
   * Used for deleting an employee's home address.  Cannot delete the employee's active home address.
   *
   * scope: `employees:write`
   */
  async removeHomeAddress(
    request: operations.DeleteV1HomeAddressesHomeAddressUuidRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(employeeAddressesRemoveHomeAddress(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an employee's work addresses
   *
   * @remarks
   * Returns a list of an employee's work addresses. Each address includes its effective date and a boolean
   * signifying if it is the currently active work address.
   *
   * scope: `employees:read`
   */
  async get(
    request: operations.GetV1EmployeesEmployeeIdWorkAddressesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.EmployeeWorkAddress>> {
    return unwrapAsync(employeeAddressesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an employee work address
   *
   * @remarks
   * The work address of an employee is used for payroll tax purposes.
   *
   * scope: `employees:read`
   */
  async getWorkAddress(
    request: operations.GetV1WorkAddressesWorkAddressUuidRequest,
    options?: RequestOptions,
  ): Promise<components.EmployeeWorkAddress> {
    return unwrapAsync(employeeAddressesGetWorkAddress(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an employee work address
   *
   * @remarks
   * The work address of an employee is used for payroll tax purposes.
   *
   * scope: `employees:manage`
   */
  async updateWorkAddress(
    request: operations.PutV1WorkAddressesWorkAddressUuidRequest,
    options?: RequestOptions,
  ): Promise<components.EmployeeWorkAddress> {
    return unwrapAsync(employeeAddressesUpdateWorkAddress(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an employee's work address
   *
   * @remarks
   * Used for deleting an employee's work address.  Cannot delete the employee's active work address.
   *
   * scope: `employees:manage`
   */
  async delete(
    request: operations.DeleteV1WorkAddressesWorkAddressUuidRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(employeeAddressesDelete(
      this,
      request,
      options,
    ));
  }
}
