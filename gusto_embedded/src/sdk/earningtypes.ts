/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { earningTypesCreate } from "../funcs/earningTypesCreate.js";
import { earningTypesDelete } from "../funcs/earningTypesDelete.js";
import { earningTypesList } from "../funcs/earningTypesList.js";
import { earningTypesUpdate } from "../funcs/earningTypesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class EarningTypes extends ClientSDK {
  /**
   * Create a custom earning type
   *
   * @remarks
   * Create a custom earning type.
   *
   * If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.
   *
   * scope: `payrolls:write`
   */
  async create(
    request: operations.PostV1CompaniesCompanyIdEarningTypesRequest,
    options?: RequestOptions,
  ): Promise<components.EarningType> {
    return unwrapAsync(earningTypesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all earning types for a company
   *
   * @remarks
   * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.
   *
   * #### Default Earning Type
   * Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)
   *
   * #### Custom Earning Type
   * Custom earning types are all the other earning types added specifically for a company.
   *
   * scope: `payrolls:read`
   */
  async list(
    request: operations.GetV1CompaniesCompanyIdEarningTypesRequest,
    options?: RequestOptions,
  ): Promise<components.EarningTypeList> {
    return unwrapAsync(earningTypesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an earning type
   *
   * @remarks
   * Update an earning type.
   *
   * scope: `payrolls:write`
   */
  async update(
    request:
      operations.PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest,
    options?: RequestOptions,
  ): Promise<components.EarningType> {
    return unwrapAsync(earningTypesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Deactivate an earning type
   *
   * @remarks
   * Deactivate an earning type.
   *
   * scope: `payrolls:write`
   */
  async delete(
    request:
      operations.DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(earningTypesDelete(
      this,
      request,
      options,
    ));
  }
}
