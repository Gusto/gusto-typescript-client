/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { jobsCompensationsDeleteCompensation } from "../funcs/jobsCompensationsDeleteCompensation.js";
import { jobsCompensationsDeleteJob } from "../funcs/jobsCompensationsDeleteJob.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class JobsCompensations extends ClientSDK {
  /**
   * Delete an individual job
   *
   * @remarks
   * Deletes a specific job that an employee holds.
   *
   * scope: `jobs:write`
   */
  async deleteJob(
    request: operations.DeleteV1JobsJobIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(jobsCompensationsDeleteJob(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a compensation
   *
   * @remarks
   * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. This endpoint deletes a compensation for a job that hasn't been processed on payroll.
   *
   * scope: `jobs:write`
   */
  async deleteCompensation(
    request: operations.DeleteV1CompensationsCompensationIdRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(jobsCompensationsDeleteCompensation(
      this,
      request,
      options,
    ));
  }
}
