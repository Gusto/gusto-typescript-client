/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { reportsCreateCustom } from "../funcs/reportsCreateCustom.js";
import { reportsGetReportsRequestUuid } from "../funcs/reportsGetReportsRequestUuid.js";
import { reportsGetTemplate } from "../funcs/reportsGetTemplate.js";
import { reportsPostPayrollsPayrollUuidReportsGeneralLedger } from "../funcs/reportsPostPayrollsPayrollUuidReportsGeneralLedger.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
  GetCompaniesCompanyUuidReportTemplatesReportTypeRequest,
  GetCompaniesCompanyUuidReportTemplatesReportTypeResponse,
} from "../models/operations/getcompaniescompanyuuidreporttemplatesreporttype.js";
import {
  GetReportsRequestUuidRequest,
  GetReportsRequestUuidResponse,
} from "../models/operations/getreportsrequestuuid.js";
import {
  PostCompaniesCompanyUuidReportsRequest,
  PostCompaniesCompanyUuidReportsResponse,
} from "../models/operations/postcompaniescompanyuuidreports.js";
import {
  PostPayrollsPayrollUuidReportsGeneralLedgerRequest,
  PostPayrollsPayrollUuidReportsGeneralLedgerResponse,
} from "../models/operations/postpayrollspayrolluuidreportsgeneralledger.js";
import { unwrapAsync } from "../types/fp.js";

export class Reports extends ClientSDK {
  /**
   * Create a custom report
   *
   * @remarks
   * Create a custom report for a company. This endpoint initiates creating a custom report with custom columns, groupings, and filters. The `request_uuid` in the response can then be used to poll for the status and report URL upon completion using the [report GET endpoint](https://docs.gusto.com/embedded-payroll/reference/get-reports-request_uuid). This URL is valid for 10 minutes.
   *
   * scope: `company_reports:write`
   */
  async createCustom(
    request: PostCompaniesCompanyUuidReportsRequest,
    options?: RequestOptions,
  ): Promise<PostCompaniesCompanyUuidReportsResponse> {
    return unwrapAsync(reportsCreateCustom(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a general ledger report
   *
   * @remarks
   * Create a general ledger report for a payroll. The report can be aggregated by different dimensions such as job or department.
   *
   * Use the `request_uuid` in the response with the [report GET endpoint](https://docs.gusto.com/embedded-payroll/reference/get-reports-request_uuid) to poll for the status and report URL upon completion. The retrieved report will be generated in a JSON format.
   *
   * scope: `company_reports:write`
   */
  async postPayrollsPayrollUuidReportsGeneralLedger(
    request: PostPayrollsPayrollUuidReportsGeneralLedgerRequest,
    options?: RequestOptions,
  ): Promise<PostPayrollsPayrollUuidReportsGeneralLedgerResponse> {
    return unwrapAsync(reportsPostPayrollsPayrollUuidReportsGeneralLedger(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a report
   *
   * @remarks
   * Get a company's report given the `request_uuid`. The response will include the report request's status and, if complete, the report URL.
   *
   * scope: `company_reports:read`
   */
  async getReportsRequestUuid(
    request: GetReportsRequestUuidRequest,
    options?: RequestOptions,
  ): Promise<GetReportsRequestUuidResponse> {
    return unwrapAsync(reportsGetReportsRequestUuid(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a report template
   *
   * @remarks
   * Get a company's report template. The only supported report type is `payroll_journal`. The resulting columns and groupings from this endpoint can be used as a guidance to create the report using the POST create report endpoint.
   *
   * scope: `company_reports:write`
   */
  async getTemplate(
    request: GetCompaniesCompanyUuidReportTemplatesReportTypeRequest,
    options?: RequestOptions,
  ): Promise<GetCompaniesCompanyUuidReportTemplatesReportTypeResponse> {
    return unwrapAsync(reportsGetTemplate(
      this,
      request,
      options,
    ));
  }
}
