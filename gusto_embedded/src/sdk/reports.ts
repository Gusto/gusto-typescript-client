/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { reportsCreateCustom } from "../funcs/reportsCreateCustom.js";
import { reportsGet } from "../funcs/reportsGet.js";
import { reportsGetTemplate } from "../funcs/reportsGetTemplate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Reports extends ClientSDK {
  /**
   * Create a custom report
   *
   * @remarks
   * Create a custom report for a company. This endpoint initiates creating a custom report with custom columns, groupings, and filters. The `request_uuid` in the response can then be used to poll for the status and report URL upon completion using the report GET endpoint.
   *
   * scope: `company_reports:write`
   */
  async createCustom(
    request: operations.PostCompaniesCompanyUuidReportsRequest,
    options?: RequestOptions,
  ): Promise<operations.PostCompaniesCompanyUuidReportsResponse> {
    return unwrapAsync(reportsCreateCustom(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a report
   *
   * @remarks
   * Get a company's report given the `request_uuid`. The response will include the report request's status and, if complete, the report URL.
   *
   * scope: `company_reports:read`
   */
  async get(
    request: operations.GetReportsReportUuidRequest,
    options?: RequestOptions,
  ): Promise<operations.GetReportsReportUuidResponse> {
    return unwrapAsync(reportsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a report template
   *
   * @remarks
   * Get a company's report template. The only supported report type is `payroll_journal`. The resulting columns and groupings from this endpoint can be used as a guidance to create the report using the POST create report endpoint.
   *
   * scope: `company_reports:write`
   */
  async getTemplate(
    request: operations.GetCompaniesCompanyUuidReportTemplatesReportTypeRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetCompaniesCompanyUuidReportTemplatesReportTypeResponse
  > {
    return unwrapAsync(reportsGetTemplate(
      this,
      request,
      options,
    ));
  }
}
