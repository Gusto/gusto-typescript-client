/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bankAccountsCreate } from "../funcs/bankAccountsCreate.js";
import { bankAccountsCreateFromProcessorToken } from "../funcs/bankAccountsCreateFromProcessorToken.js";
import { bankAccountsList } from "../funcs/bankAccountsList.js";
import { bankAccountsVerify } from "../funcs/bankAccountsVerify.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class BankAccounts extends ClientSDK {
  /**
   * Create a company bank account
   *
   * @remarks
   * This endpoint creates a new company bank account.
   *
   * Upon being created, two verification deposits are automatically sent to the bank account, and the bank account's verification_status is 'awaiting_deposits'.
   *
   * When the deposits are successfully transferred, the verification_status changes to 'ready_for_verification', at which point the verify endpoint can be used to verify the bank account.
   * After successful verification, the bank account's verification_status is 'verified'.
   *
   * scope: `company_bank_accounts:write`
   *
   * > ðŸš§ Warning
   * >
   * > If a default bank account exists, it will be disabled and the new bank account will replace it as the company's default funding method.
   */
  async create(
    request: operations.PostV1CompaniesCompanyIdBankAccountsRequest,
    options?: RequestOptions,
  ): Promise<components.CompanyBankAccount> {
    return unwrapAsync(bankAccountsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all company bank accounts
   *
   * @remarks
   * Returns company bank accounts. Currently, we only support a single default bank account per company.
   *
   * scope: `company_bank_accounts:read`
   */
  async list(
    request: operations.GetV1CompaniesCompanyIdBankAccountsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.CompanyBankAccount>> {
    return unwrapAsync(bankAccountsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Verify a company bank account
   *
   * @remarks
   * Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter. There's a maximum of 5 verification attempts, after which we will automatically initiate a new set of micro-deposits and require the bank account to be verified with the new micro-deposits.
   *
   * ### Bank account verification in demo
   *
   * We provide the endpoint `POST '/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits'` to facilitate bank account verification in the demo environment. This endpoint simulates the micro-deposits transfer and returns them in the response. You can call this endpoint as many times as you wish to retrieve the values of the two micro deposits.
   *
   * ```
   *   POST '/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits'
   *
   *   {
   *     "deposit_1": 0.02,
   *     "deposit_2": 0.42
   *   }
   * ```
   *
   * scope: `company_bank_accounts:write`
   */
  async verify(
    request: operations.PutV1CompaniesCompanyIdBankAccountsVerifyRequest,
    options?: RequestOptions,
  ): Promise<components.CompanyBankAccount> {
    return unwrapAsync(bankAccountsVerify(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a bank account from a plaid processor token
   *
   * @remarks
   * This endpoint creates a new **verified** bank account by using a plaid processor token to retrieve its information.
   *
   * scope: `plaid_processor:write`
   *
   * > ðŸ“˜
   * > To create a token please use the [plaid api](https://plaid.com/docs/api/processors/#processortokencreate) and select "gusto" as processor.
   *
   * > ðŸš§ Warning - Company Bank Accounts
   * >
   * > If a default company bank account exists, it will be disabled and the new bank account will replace it as the company's default funding method.
   */
  async createFromProcessorToken(
    request: operations.PostV1PlaidProcessorTokenRequest,
    options?: RequestOptions,
  ): Promise<operations.PostV1PlaidProcessorTokenResponseBody> {
    return unwrapAsync(bankAccountsCreateFromProcessorToken(
      this,
      request,
      options,
    ));
  }
}
