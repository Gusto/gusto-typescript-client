/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contractorDocumentsGet } from "../funcs/contractorDocumentsGet.js";
import { contractorDocumentsGetAll } from "../funcs/contractorDocumentsGetAll.js";
import { contractorDocumentsGetPdf } from "../funcs/contractorDocumentsGetPdf.js";
import { contractorDocumentsSign } from "../funcs/contractorDocumentsSign.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ContractorDocuments extends ClientSDK {
  /**
   * Get all contractor documents
   *
   * @remarks
   * Get a list of all contractor's documents
   *
   * scope: `contractor_documents:read`
   */
  async getAll(
    request: operations.GetV1ContractorDocumentsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Document>> {
    return unwrapAsync(contractorDocumentsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a contractor document
   *
   * @remarks
   * Get a contractor document.
   *
   * scope: `contractor_documents:read`
   */
  async get(
    request: operations.GetV1ContractorDocumentRequest,
    options?: RequestOptions,
  ): Promise<components.Document> {
    return unwrapAsync(contractorDocumentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the contractor document pdf
   *
   * @remarks
   * Get the contractor document pdf.
   *
   * scope: `contractor_documents:read`
   */
  async getPdf(
    request: operations.GetV1ContractorDocumentPdfRequest,
    options?: RequestOptions,
  ): Promise<components.DocumentPdf> {
    return unwrapAsync(contractorDocumentsGetPdf(
      this,
      request,
      options,
    ));
  }

  /**
   * Sign a contractor document
   *
   * @remarks
   * Sign a contractor document.
   *
   * scope: `contractor_documents:write`
   */
  async sign(
    request: operations.PutV1ContractorDocumentSignRequest,
    options?: RequestOptions,
  ): Promise<components.DocumentSigned> {
    return unwrapAsync(contractorDocumentsSign(
      this,
      request,
      options,
    ));
  }
}
