/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contractorDocumentsGet } from "../funcs/contractorDocumentsGet.js";
import { contractorDocumentsGetAll } from "../funcs/contractorDocumentsGetAll.js";
import { contractorDocumentsGetPdf } from "../funcs/contractorDocumentsGetPdf.js";
import { contractorDocumentsSign } from "../funcs/contractorDocumentsSign.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
  GetV1ContractorDocumentRequest,
  GetV1ContractorDocumentResponse,
} from "../models/operations/getv1contractordocument.js";
import {
  GetV1ContractorDocumentPdfRequest,
  GetV1ContractorDocumentPdfResponse,
} from "../models/operations/getv1contractordocumentpdf.js";
import {
  GetV1ContractorDocumentsRequest,
  GetV1ContractorDocumentsResponse,
} from "../models/operations/getv1contractordocuments.js";
import {
  PutV1ContractorDocumentSignRequest,
  PutV1ContractorDocumentSignResponse,
} from "../models/operations/putv1contractordocumentsign.js";
import { unwrapAsync } from "../types/fp.js";

export class ContractorDocuments extends ClientSDK {
  /**
   * Get all contractor documents
   *
   * @remarks
   * Get a list of all contractor's documents
   *
   * scope: `contractor_documents:read`
   */
  async getAll(
    request: GetV1ContractorDocumentsRequest,
    options?: RequestOptions,
  ): Promise<GetV1ContractorDocumentsResponse> {
    return unwrapAsync(contractorDocumentsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a contractor document
   *
   * @remarks
   * Get a contractor document.
   *
   * scope: `contractor_documents:read`
   */
  async get(
    request: GetV1ContractorDocumentRequest,
    options?: RequestOptions,
  ): Promise<GetV1ContractorDocumentResponse> {
    return unwrapAsync(contractorDocumentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the contractor document pdf
   *
   * @remarks
   * Get the contractor document pdf.
   *
   * scope: `contractor_documents:read`
   */
  async getPdf(
    request: GetV1ContractorDocumentPdfRequest,
    options?: RequestOptions,
  ): Promise<GetV1ContractorDocumentPdfResponse> {
    return unwrapAsync(contractorDocumentsGetPdf(
      this,
      request,
      options,
    ));
  }

  /**
   * Sign a contractor document
   *
   * @remarks
   * Sign a contractor document.
   *
   * scope: `contractor_documents:write`
   */
  async sign(
    request: PutV1ContractorDocumentSignRequest,
    options?: RequestOptions,
  ): Promise<PutV1ContractorDocumentSignResponse> {
    return unwrapAsync(contractorDocumentsSign(
      this,
      request,
      options,
    ));
  }
}
