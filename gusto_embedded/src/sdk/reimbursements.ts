/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { reimbursementsDeleteV1RecurringReimbursements } from "../funcs/reimbursementsDeleteV1RecurringReimbursements.js";
import { reimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements } from "../funcs/reimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements.js";
import { reimbursementsGetV1RecurringReimbursements } from "../funcs/reimbursementsGetV1RecurringReimbursements.js";
import { reimbursementsPostV1EmployeesEmployeeIdRecurringReimbursements } from "../funcs/reimbursementsPostV1EmployeesEmployeeIdRecurringReimbursements.js";
import { reimbursementsPutV1RecurringReimbursements } from "../funcs/reimbursementsPutV1RecurringReimbursements.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
  DeleteV1RecurringReimbursementsRequest,
  DeleteV1RecurringReimbursementsResponse,
} from "../models/operations/deletev1recurringreimbursements.js";
import {
  GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
  GetV1EmployeesEmployeeIdRecurringReimbursementsResponse,
} from "../models/operations/getv1employeesemployeeidrecurringreimbursements.js";
import {
  GetV1RecurringReimbursementsRequest,
  GetV1RecurringReimbursementsResponse,
} from "../models/operations/getv1recurringreimbursements.js";
import {
  PostV1EmployeesEmployeeIdRecurringReimbursementsRequest,
  PostV1EmployeesEmployeeIdRecurringReimbursementsResponse,
} from "../models/operations/postv1employeesemployeeidrecurringreimbursements.js";
import {
  PutV1RecurringReimbursementsRequest,
  PutV1RecurringReimbursementsResponse,
} from "../models/operations/putv1recurringreimbursements.js";
import { unwrapAsync } from "../types/fp.js";

export class Reimbursements extends ClientSDK {
  /**
   * Get recurring reimbursements for an employee
   *
   * @remarks
   * Get all active recurring reimbursements for an employee.
   *
   * scope: `reimbursements:read`
   */
  async getV1EmployeesEmployeeIdRecurringReimbursements(
    request: GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
    options?: RequestOptions,
  ): Promise<GetV1EmployeesEmployeeIdRecurringReimbursementsResponse> {
    return unwrapAsync(
      reimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Create a recurring reimbursement
   *
   * @remarks
   * Create a recurring reimbursement for an employee.
   *
   * scope: `reimbursements:write`
   */
  async postV1EmployeesEmployeeIdRecurringReimbursements(
    request: PostV1EmployeesEmployeeIdRecurringReimbursementsRequest,
    options?: RequestOptions,
  ): Promise<PostV1EmployeesEmployeeIdRecurringReimbursementsResponse> {
    return unwrapAsync(
      reimbursementsPostV1EmployeesEmployeeIdRecurringReimbursements(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get a recurring reimbursement
   *
   * @remarks
   * Get a specific recurring reimbursement.
   *
   * scope: `reimbursements:read`
   */
  async getV1RecurringReimbursements(
    request: GetV1RecurringReimbursementsRequest,
    options?: RequestOptions,
  ): Promise<GetV1RecurringReimbursementsResponse> {
    return unwrapAsync(reimbursementsGetV1RecurringReimbursements(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a recurring reimbursement
   *
   * @remarks
   * Update a recurring reimbursement.
   *
   * scope: `reimbursements:write`
   */
  async putV1RecurringReimbursements(
    request: PutV1RecurringReimbursementsRequest,
    options?: RequestOptions,
  ): Promise<PutV1RecurringReimbursementsResponse> {
    return unwrapAsync(reimbursementsPutV1RecurringReimbursements(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a recurring reimbursement
   *
   * @remarks
   * Delete (soft delete) a recurring reimbursement for an employee.
   *
   * scope: `reimbursements:write`
   */
  async deleteV1RecurringReimbursements(
    request: DeleteV1RecurringReimbursementsRequest,
    options?: RequestOptions,
  ): Promise<DeleteV1RecurringReimbursementsResponse> {
    return unwrapAsync(reimbursementsDeleteV1RecurringReimbursements(
      this,
      request,
      options,
    ));
  }
}
