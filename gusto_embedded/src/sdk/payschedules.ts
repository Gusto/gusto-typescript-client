/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paySchedulesAssign } from "../funcs/paySchedulesAssign.js";
import { paySchedulesCreate } from "../funcs/paySchedulesCreate.js";
import { paySchedulesGet } from "../funcs/paySchedulesGet.js";
import { paySchedulesGetAssignments } from "../funcs/paySchedulesGetAssignments.js";
import { paySchedulesGetForCompany } from "../funcs/paySchedulesGetForCompany.js";
import { paySchedulesList } from "../funcs/paySchedulesList.js";
import { paySchedulesListUnprocessedTerminationPeriods } from "../funcs/paySchedulesListUnprocessedTerminationPeriods.js";
import { paySchedulesPreview } from "../funcs/paySchedulesPreview.js";
import { paySchedulesPreviewAssignment } from "../funcs/paySchedulesPreviewAssignment.js";
import { paySchedulesUpdate } from "../funcs/paySchedulesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class PaySchedules extends ClientSDK {
  /**
   * Create a new pay schedule
   *
   * @remarks
   * If a company does not have any pay schedules, this endpoint will create a single pay schedule and assign it to all employees. This is a common use case during company onboarding.
   *
   * If a company has an existing active pay schedule and want to support multiple pay schedules, this endpoint will create a pay schedule that is not assigned to any employee.
   *
   * Be sure to **[check state laws](https://www.dol.gov/agencies/whd/state/payday)** to know what schedule is right for your customers.
   *
   * scope: `pay_schedules:write`
   */
  async create(
    request: operations.PostV1CompaniesCompanyIdPaySchedulesRequest,
    options?: RequestOptions,
  ): Promise<components.PayScheduleCreateUpdate> {
    return unwrapAsync(paySchedulesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get the pay schedules for a company
   *
   * @remarks
   * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.
   *
   * scope: `pay_schedules:read`
   */
  async getForCompany(
    request: operations.GetV1CompaniesCompanyIdPaySchedulesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.PaySchedule>> {
    return unwrapAsync(paySchedulesGetForCompany(
      this,
      request,
      options,
    ));
  }

  /**
   * Preview pay schedule dates
   *
   * @remarks
   * Provides a preview of a pay schedule with the specified parameters for the next 18 months.
   *
   * scope: `pay_schedules:write`
   */
  async preview(
    request: operations.GetV1CompaniesCompanyIdPaySchedulesPreviewRequest,
    options?: RequestOptions,
  ): Promise<
    operations.GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody
  > {
    return unwrapAsync(paySchedulesPreview(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a pay schedule
   *
   * @remarks
   * The pay schedule object in Gusto captures the details of when employees work and when they should be paid. A company can have multiple pay schedules.
   *
   * scope: `pay_schedules:read`
   */
  async get(
    request: operations.GetV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest,
    options?: RequestOptions,
  ): Promise<components.PaySchedule> {
    return unwrapAsync(paySchedulesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a pay schedule
   *
   * @remarks
   * Updates a pay schedule.
   *
   * scope: `pay_schedules:write`
   */
  async update(
    request: operations.PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest,
    options?: RequestOptions,
  ): Promise<components.PayScheduleCreateUpdate> {
    return unwrapAsync(paySchedulesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get pay periods for a company
   *
   * @remarks
   * Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.
   *
   * By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the `start_date` and `end_date` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.
   *
   * Starting in version '2023-04-01', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.
   *
   * scope: `payrolls:read`
   */
  async list(
    request: operations.GetV1CompaniesCompanyIdPayPeriodsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.PayPeriod>> {
    return unwrapAsync(paySchedulesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Get termination pay periods for a company
   *
   * @remarks
   * When a payroll admin terminates an employee and selects "Dismissal Payroll" as the employee's final payroll, their last pay period will appear on the list.
   *
   * This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.
   *
   * scope: `payrolls:read`
   */
  async listUnprocessedTerminationPeriods(
    request:
      operations.GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
    options?: RequestOptions,
  ): Promise<Array<components.UnprocessedTerminationPayPeriod>> {
    return unwrapAsync(paySchedulesListUnprocessedTerminationPeriods(
      this,
      request,
      options,
    ));
  }

  /**
   * Get pay schedule assignments for a company
   *
   * @remarks
   * This endpoint returns the current pay schedule assignment for a company, with pay schedule and employee/department mappings depending on the pay schedule type.
   *
   * scope: `pay_schedules:read`
   */
  async getAssignments(
    request: operations.GetV1CompaniesCompanyIdPaySchedulesAssignmentsRequest,
    options?: RequestOptions,
  ): Promise<components.PayScheduleAssignment> {
    return unwrapAsync(paySchedulesGetAssignments(
      this,
      request,
      options,
    ));
  }

  /**
   * Preview pay schedule assignments for a company
   *
   * @remarks
   * This endpoint returns the employee changes, including pay period and transition pay periods, for changing the pay schedule.
   *
   * scope: `pay_schedules:write`
   */
  async previewAssignment(
    request:
      operations.PostV1CompaniesCompanyIdPaySchedulesAssignmentPreviewRequest,
    options?: RequestOptions,
  ): Promise<components.PayScheduleAssignmentPreview> {
    return unwrapAsync(paySchedulesPreviewAssignment(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign pay schedules for a company
   *
   * @remarks
   * This endpoint assigns employees to pay schedules based on the schedule type.
   * For `by_employee` and `by_department` schedules, use the `partial_assignment` parameter to control the assignment scope. Set it to `true` for partial assignments (only some employees or departments at a time) and `false` for full assignments (all employees or departments at once).
   *
   * scope: `pay_schedules:write`
   */
  async assign(
    request: operations.PostV1CompaniesCompanyIdPaySchedulesAssignRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(paySchedulesAssign(
      this,
      request,
      options,
    ));
  }
}
