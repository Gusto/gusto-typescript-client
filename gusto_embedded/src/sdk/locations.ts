/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { locationsCreate } from "../funcs/locationsCreate.js";
import { locationsGet } from "../funcs/locationsGet.js";
import { locationsGetMinimumWages } from "../funcs/locationsGetMinimumWages.js";
import { locationsRetrieve } from "../funcs/locationsRetrieve.js";
import { locationsUpdate } from "../funcs/locationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import {
  GetV1CompaniesCompanyIdLocationsRequest,
  GetV1CompaniesCompanyIdLocationsResponse,
} from "../models/operations/getv1companiescompanyidlocations.js";
import {
  GetV1LocationsLocationIdRequest,
  GetV1LocationsLocationIdResponse,
} from "../models/operations/getv1locationslocationid.js";
import {
  GetV1LocationsLocationUuidMinimumWagesRequest,
  GetV1LocationsLocationUuidMinimumWagesResponse,
} from "../models/operations/getv1locationslocationuuidminimumwages.js";
import {
  PostV1CompaniesCompanyIdLocationsRequest,
  PostV1CompaniesCompanyIdLocationsResponse,
} from "../models/operations/postv1companiescompanyidlocations.js";
import {
  PutV1LocationsLocationIdRequest,
  PutV1LocationsLocationIdResponse,
} from "../models/operations/putv1locationslocationid.js";
import { unwrapAsync } from "../types/fp.js";

export class Locations extends ClientSDK {
  /**
   * Create a company location
   *
   * @remarks
   * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.
   *
   * Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.
   *
   * scope: `companies:write`
   */
  async create(
    request: PostV1CompaniesCompanyIdLocationsRequest,
    options?: RequestOptions,
  ): Promise<PostV1CompaniesCompanyIdLocationsResponse> {
    return unwrapAsync(locationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get company locations
   *
   * @remarks
   * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.
   *
   * Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.
   *
   * scope: `companies:read`
   */
  async get(
    request: GetV1CompaniesCompanyIdLocationsRequest,
    options?: RequestOptions,
  ): Promise<GetV1CompaniesCompanyIdLocationsResponse> {
    return unwrapAsync(locationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a location
   *
   * @remarks
   * Get a location.
   *
   * scope: `companies:read`
   */
  async retrieve(
    request: GetV1LocationsLocationIdRequest,
    options?: RequestOptions,
  ): Promise<GetV1LocationsLocationIdResponse> {
    return unwrapAsync(locationsRetrieve(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a location
   *
   * @remarks
   * Update a location.
   *
   * scope: `companies.write`
   */
  async update(
    request: PutV1LocationsLocationIdRequest,
    options?: RequestOptions,
  ): Promise<PutV1LocationsLocationIdResponse> {
    return unwrapAsync(locationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get minimum wages for a location
   *
   * @remarks
   * Get minimum wages for a location
   *
   * scope: `companies:read`
   */
  async getMinimumWages(
    request: GetV1LocationsLocationUuidMinimumWagesRequest,
    options?: RequestOptions,
  ): Promise<GetV1LocationsLocationUuidMinimumWagesResponse> {
    return unwrapAsync(locationsGetMinimumWages(
      this,
      request,
      options,
    ));
  }
}
