/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { paySchedulesGetUnprocessedTerminationPeriods } from "../funcs/paySchedulesGetUnprocessedTerminationPeriods.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
  GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsResponse,
} from "../models/operations/getv1companiescompanyidunprocessedterminationpayperiods.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PaySchedulesGetUnprocessedTerminationPeriodsQueryData =
  GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsResponse;

/**
 * Get termination pay periods for a company
 *
 * @remarks
 * When a payroll admin terminates an employee and selects "Dismissal Payroll" as the employee's final payroll, their last pay period will appear on the list.
 *
 * This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.
 *
 * scope: `payrolls:read`
 */
export function usePaySchedulesGetUnprocessedTerminationPeriods(
  request: GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
  options?: QueryHookOptions<
    PaySchedulesGetUnprocessedTerminationPeriodsQueryData
  >,
): UseQueryResult<
  PaySchedulesGetUnprocessedTerminationPeriodsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildPaySchedulesGetUnprocessedTerminationPeriodsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get termination pay periods for a company
 *
 * @remarks
 * When a payroll admin terminates an employee and selects "Dismissal Payroll" as the employee's final payroll, their last pay period will appear on the list.
 *
 * This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.
 *
 * scope: `payrolls:read`
 */
export function usePaySchedulesGetUnprocessedTerminationPeriodsSuspense(
  request: GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
  options?: SuspenseQueryHookOptions<
    PaySchedulesGetUnprocessedTerminationPeriodsQueryData
  >,
): UseSuspenseQueryResult<
  PaySchedulesGetUnprocessedTerminationPeriodsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildPaySchedulesGetUnprocessedTerminationPeriodsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPaySchedulesGetUnprocessedTerminationPeriods(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPaySchedulesGetUnprocessedTerminationPeriodsQuery(
      client$,
      request,
    ),
  });
}

export function setPaySchedulesGetUnprocessedTerminationPeriodsData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    parameters: { xGustoAPIVersion?: VersionHeader | undefined },
  ],
  data: PaySchedulesGetUnprocessedTerminationPeriodsQueryData,
): PaySchedulesGetUnprocessedTerminationPeriodsQueryData | undefined {
  const key = queryKeyPaySchedulesGetUnprocessedTerminationPeriods(
    ...queryKeyBase,
  );

  return client.setQueryData<
    PaySchedulesGetUnprocessedTerminationPeriodsQueryData
  >(key, data);
}

export function invalidatePaySchedulesGetUnprocessedTerminationPeriods(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      parameters: { xGustoAPIVersion?: VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "paySchedules",
      "getUnprocessedTerminationPeriods",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllPaySchedulesGetUnprocessedTerminationPeriods(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "paySchedules",
      "getUnprocessedTerminationPeriods",
    ],
  });
}

export function buildPaySchedulesGetUnprocessedTerminationPeriodsQuery(
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<PaySchedulesGetUnprocessedTerminationPeriodsQueryData>;
} {
  return {
    queryKey: queryKeyPaySchedulesGetUnprocessedTerminationPeriods(
      request.companyId,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function paySchedulesGetUnprocessedTerminationPeriodsQueryFn(
      ctx,
    ): Promise<PaySchedulesGetUnprocessedTerminationPeriodsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(paySchedulesGetUnprocessedTerminationPeriods(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyPaySchedulesGetUnprocessedTerminationPeriods(
  companyId: string,
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "paySchedules",
    "getUnprocessedTerminationPeriods",
    companyId,
    parameters,
  ];
}
