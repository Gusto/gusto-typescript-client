/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { timeOffPoliciesAddEmployees } from "../funcs/timeOffPoliciesAddEmployees.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TimeOffPoliciesAddEmployeesMutationVariables = {
  request:
    operations.PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequest;
  options?: RequestOptions;
};

export type TimeOffPoliciesAddEmployeesMutationData = components.TimeOffPolicy;

/**
 * Add employees to a time off policy
 *
 * @remarks
 * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies
 *
 * scope: `time_off_policies:write`
 */
export function useTimeOffPoliciesAddEmployeesMutation(
  options?: MutationHookOptions<
    TimeOffPoliciesAddEmployeesMutationData,
    Error,
    TimeOffPoliciesAddEmployeesMutationVariables
  >,
): UseMutationResult<
  TimeOffPoliciesAddEmployeesMutationData,
  Error,
  TimeOffPoliciesAddEmployeesMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildTimeOffPoliciesAddEmployeesMutation(client, options),
    ...options,
  });
}

export function mutationKeyTimeOffPoliciesAddEmployees(): MutationKey {
  return ["@gusto/embedded-api", "timeOffPolicies", "addEmployees"];
}

export function buildTimeOffPoliciesAddEmployeesMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TimeOffPoliciesAddEmployeesMutationVariables,
  ) => Promise<TimeOffPoliciesAddEmployeesMutationData>;
} {
  return {
    mutationKey: mutationKeyTimeOffPoliciesAddEmployees(),
    mutationFn: function timeOffPoliciesAddEmployeesMutationFn({
      request,
      options,
    }): Promise<TimeOffPoliciesAddEmployeesMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(timeOffPoliciesAddEmployees(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
