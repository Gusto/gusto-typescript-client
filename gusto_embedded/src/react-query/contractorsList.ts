/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorsList } from "../funcs/contractorsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { ContractorsSortBy } from "../models/components/contractorssortby.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1CompaniesCompanyUuidContractorsRequest,
  GetV1CompaniesCompanyUuidContractorsResponse,
} from "../models/operations/getv1companiescompanyuuidcontractors.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ContractorsListQueryData =
  GetV1CompaniesCompanyUuidContractorsResponse;

/**
 * Get contractors of a company
 *
 * @remarks
 * Get all contractors, active and inactive, individual and business, for a company.
 *
 * scope: `contractors:read`
 */
export function useContractorsList(
  request: GetV1CompaniesCompanyUuidContractorsRequest,
  options?: QueryHookOptions<ContractorsListQueryData>,
): UseQueryResult<ContractorsListQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildContractorsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get contractors of a company
 *
 * @remarks
 * Get all contractors, active and inactive, individual and business, for a company.
 *
 * scope: `contractors:read`
 */
export function useContractorsListSuspense(
  request: GetV1CompaniesCompanyUuidContractorsRequest,
  options?: SuspenseQueryHookOptions<ContractorsListQueryData>,
): UseSuspenseQueryResult<ContractorsListQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildContractorsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchContractorsList(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyUuidContractorsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildContractorsListQuery(
      client$,
      request,
    ),
  });
}

export function setContractorsListData(
  client: QueryClient,
  queryKeyBase: [
    companyUuid: string,
    parameters: {
      page?: number | undefined;
      per?: number | undefined;
      searchTerm?: string | undefined;
      sortBy?: ContractorsSortBy | undefined;
      xGustoAPIVersion?: VersionHeader | undefined;
    },
  ],
  data: ContractorsListQueryData,
): ContractorsListQueryData | undefined {
  const key = queryKeyContractorsList(...queryKeyBase);

  return client.setQueryData<ContractorsListQueryData>(key, data);
}

export function invalidateContractorsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyUuid: string,
      parameters: {
        page?: number | undefined;
        per?: number | undefined;
        searchTerm?: string | undefined;
        sortBy?: ContractorsSortBy | undefined;
        xGustoAPIVersion?: VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Contractors", "list", ...queryKeyBase],
  });
}

export function invalidateAllContractorsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Contractors", "list"],
  });
}

export function buildContractorsListQuery(
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyUuidContractorsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<ContractorsListQueryData>;
} {
  return {
    queryKey: queryKeyContractorsList(request.companyUuid, {
      page: request.page,
      per: request.per,
      searchTerm: request.searchTerm,
      sortBy: request.sortBy,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function contractorsListQueryFn(
      ctx,
    ): Promise<ContractorsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(contractorsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyContractorsList(
  companyUuid: string,
  parameters: {
    page?: number | undefined;
    per?: number | undefined;
    searchTerm?: string | undefined;
    sortBy?: ContractorsSortBy | undefined;
    xGustoAPIVersion?: VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Contractors",
    "list",
    companyUuid,
    parameters,
  ];
}
