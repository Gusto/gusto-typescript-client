/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companyFormsGetAll } from "../funcs/companyFormsGetAll.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { CompanyFormsSortBy } from "../models/components/companyformssortby.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1CompanyFormsRequest,
  GetV1CompanyFormsResponse,
} from "../models/operations/getv1companyforms.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CompanyFormsGetAllQueryData = GetV1CompanyFormsResponse;

/**
 * Get all company forms
 *
 * @remarks
 * Get a list of all company's forms
 *
 * scope: `company_forms:read`
 */
export function useCompanyFormsGetAll(
  request: GetV1CompanyFormsRequest,
  options?: QueryHookOptions<CompanyFormsGetAllQueryData>,
): UseQueryResult<CompanyFormsGetAllQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildCompanyFormsGetAllQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get all company forms
 *
 * @remarks
 * Get a list of all company's forms
 *
 * scope: `company_forms:read`
 */
export function useCompanyFormsGetAllSuspense(
  request: GetV1CompanyFormsRequest,
  options?: SuspenseQueryHookOptions<CompanyFormsGetAllQueryData>,
): UseSuspenseQueryResult<CompanyFormsGetAllQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildCompanyFormsGetAllQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCompanyFormsGetAll(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1CompanyFormsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCompanyFormsGetAllQuery(
      client$,
      request,
    ),
  });
}

export function setCompanyFormsGetAllData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    parameters: {
      sortBy?: CompanyFormsSortBy | undefined;
      xGustoAPIVersion?: VersionHeader | undefined;
    },
  ],
  data: CompanyFormsGetAllQueryData,
): CompanyFormsGetAllQueryData | undefined {
  const key = queryKeyCompanyFormsGetAll(...queryKeyBase);

  return client.setQueryData<CompanyFormsGetAllQueryData>(key, data);
}

export function invalidateCompanyFormsGetAll(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      parameters: {
        sortBy?: CompanyFormsSortBy | undefined;
        xGustoAPIVersion?: VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "companyForms",
      "getAll",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCompanyFormsGetAll(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "companyForms", "getAll"],
  });
}

export function buildCompanyFormsGetAllQuery(
  client$: GustoEmbeddedCore,
  request: GetV1CompanyFormsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<CompanyFormsGetAllQueryData>;
} {
  return {
    queryKey: queryKeyCompanyFormsGetAll(request.companyId, {
      sortBy: request.sortBy,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function companyFormsGetAllQueryFn(
      ctx,
    ): Promise<CompanyFormsGetAllQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(companyFormsGetAll(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCompanyFormsGetAll(
  companyId: string,
  parameters: {
    sortBy?: CompanyFormsSortBy | undefined;
    xGustoAPIVersion?: VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "companyForms",
    "getAll",
    companyId,
    parameters,
  ];
}
