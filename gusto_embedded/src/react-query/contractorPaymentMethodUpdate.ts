/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorPaymentMethodUpdate } from "../funcs/contractorPaymentMethodUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ContractorPaymentMethodUpdateMutationVariables = {
  request: operations.PutV1ContractorsContractorIdPaymentMethodRequest;
  options?: RequestOptions;
};

export type ContractorPaymentMethodUpdateMutationData =
  components.ContractorPaymentMethod;

/**
 * Update a contractor's payment method
 *
 * @remarks
 * Updates a contractor's payment method. Note that creating a contractor
 * bank account will also update the contractor's payment method.
 *
 * scope: `contractor_payment_methods:write`
 */
export function useContractorPaymentMethodUpdateMutation(
  options?: MutationHookOptions<
    ContractorPaymentMethodUpdateMutationData,
    Error,
    ContractorPaymentMethodUpdateMutationVariables
  >,
): UseMutationResult<
  ContractorPaymentMethodUpdateMutationData,
  Error,
  ContractorPaymentMethodUpdateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildContractorPaymentMethodUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyContractorPaymentMethodUpdate(): MutationKey {
  return ["@gusto/embedded-api", "contractorPaymentMethod", "update"];
}

export function buildContractorPaymentMethodUpdateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ContractorPaymentMethodUpdateMutationVariables,
  ) => Promise<ContractorPaymentMethodUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyContractorPaymentMethodUpdate(),
    mutationFn: function contractorPaymentMethodUpdateMutationFn({
      request,
      options,
    }): Promise<ContractorPaymentMethodUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(contractorPaymentMethodUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
