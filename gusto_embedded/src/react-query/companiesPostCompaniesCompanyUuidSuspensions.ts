/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companiesPostCompaniesCompanyUuidSuspensions } from "../funcs/companiesPostCompaniesCompanyUuidSuspensions.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PostCompaniesCompanyUuidSuspensionsRequest,
  PostCompaniesCompanyUuidSuspensionsResponse,
} from "../models/operations/postcompaniescompanyuuidsuspensions.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CompaniesPostCompaniesCompanyUuidSuspensionsMutationVariables = {
  request: PostCompaniesCompanyUuidSuspensionsRequest;
  options?: RequestOptions;
};

export type CompaniesPostCompaniesCompanyUuidSuspensionsMutationData =
  PostCompaniesCompanyUuidSuspensionsResponse;

/**
 * Suspend a company's account
 *
 * @remarks
 * Use this endpoint to suspend a company. After suspension, company will no longer be able to run payroll but will retain access to their information, such as retrieving employee info or retrieving past payrolls.
 *
 * scope: `company_suspensions:write`
 */
export function useCompaniesPostCompaniesCompanyUuidSuspensionsMutation(
  options?: MutationHookOptions<
    CompaniesPostCompaniesCompanyUuidSuspensionsMutationData,
    Error,
    CompaniesPostCompaniesCompanyUuidSuspensionsMutationVariables
  >,
): UseMutationResult<
  CompaniesPostCompaniesCompanyUuidSuspensionsMutationData,
  Error,
  CompaniesPostCompaniesCompanyUuidSuspensionsMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildCompaniesPostCompaniesCompanyUuidSuspensionsMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeyCompaniesPostCompaniesCompanyUuidSuspensions(): MutationKey {
  return [
    "@gusto/embedded-api",
    "Companies",
    "postCompaniesCompanyUuidSuspensions",
  ];
}

export function buildCompaniesPostCompaniesCompanyUuidSuspensionsMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CompaniesPostCompaniesCompanyUuidSuspensionsMutationVariables,
  ) => Promise<CompaniesPostCompaniesCompanyUuidSuspensionsMutationData>;
} {
  return {
    mutationKey: mutationKeyCompaniesPostCompaniesCompanyUuidSuspensions(),
    mutationFn: function companiesPostCompaniesCompanyUuidSuspensionsMutationFn(
      {
        request,
        options,
      },
    ): Promise<CompaniesPostCompaniesCompanyUuidSuspensionsMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(companiesPostCompaniesCompanyUuidSuspensions(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
