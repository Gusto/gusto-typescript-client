/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeEmploymentsDeleteTermination } from "../funcs/employeeEmploymentsDeleteTermination.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EmployeeEmploymentsDeleteTerminationMutationVariables = {
  request: operations.DeleteV1EmployeesEmployeeIdTerminationsRequest;
  options?: RequestOptions;
};

export type EmployeeEmploymentsDeleteTerminationMutationData =
  operations.DeleteV1EmployeesEmployeeIdTerminationsResponse;

/**
 * Delete an employee termination
 *
 * @remarks
 * Delete an employee termination.
 *
 * scope: `employments:write`
 */
export function useEmployeeEmploymentsDeleteTerminationMutation(
  options?: MutationHookOptions<
    EmployeeEmploymentsDeleteTerminationMutationData,
    Error,
    EmployeeEmploymentsDeleteTerminationMutationVariables
  >,
): UseMutationResult<
  EmployeeEmploymentsDeleteTerminationMutationData,
  Error,
  EmployeeEmploymentsDeleteTerminationMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildEmployeeEmploymentsDeleteTerminationMutation(client, options),
    ...options,
  });
}

export function mutationKeyEmployeeEmploymentsDeleteTermination(): MutationKey {
  return ["@gusto/embedded-api", "employeeEmployments", "deleteTermination"];
}

export function buildEmployeeEmploymentsDeleteTerminationMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: EmployeeEmploymentsDeleteTerminationMutationVariables,
  ) => Promise<EmployeeEmploymentsDeleteTerminationMutationData>;
} {
  return {
    mutationKey: mutationKeyEmployeeEmploymentsDeleteTermination(),
    mutationFn: function employeeEmploymentsDeleteTerminationMutationFn({
      request,
      options,
    }): Promise<EmployeeEmploymentsDeleteTerminationMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(employeeEmploymentsDeleteTermination(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
