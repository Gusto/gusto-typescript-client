/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { reimbursementsGetV1RecurringReimbursements } from "../funcs/reimbursementsGetV1RecurringReimbursements.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetV1RecurringReimbursementsHeaderXGustoAPIVersion,
  GetV1RecurringReimbursementsRequest,
  GetV1RecurringReimbursementsResponse,
} from "../models/operations/getv1recurringreimbursements.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ReimbursementsGetV1RecurringReimbursementsQueryData =
  GetV1RecurringReimbursementsResponse;

/**
 * Get a recurring reimbursement
 *
 * @remarks
 * Get a specific recurring reimbursement.
 *
 * scope: `reimbursements:read`
 */
export function useReimbursementsGetV1RecurringReimbursements(
  request: GetV1RecurringReimbursementsRequest,
  options?: QueryHookOptions<
    ReimbursementsGetV1RecurringReimbursementsQueryData
  >,
): UseQueryResult<ReimbursementsGetV1RecurringReimbursementsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildReimbursementsGetV1RecurringReimbursementsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a recurring reimbursement
 *
 * @remarks
 * Get a specific recurring reimbursement.
 *
 * scope: `reimbursements:read`
 */
export function useReimbursementsGetV1RecurringReimbursementsSuspense(
  request: GetV1RecurringReimbursementsRequest,
  options?: SuspenseQueryHookOptions<
    ReimbursementsGetV1RecurringReimbursementsQueryData
  >,
): UseSuspenseQueryResult<
  ReimbursementsGetV1RecurringReimbursementsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildReimbursementsGetV1RecurringReimbursementsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchReimbursementsGetV1RecurringReimbursements(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1RecurringReimbursementsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildReimbursementsGetV1RecurringReimbursementsQuery(
      client$,
      request,
    ),
  });
}

export function setReimbursementsGetV1RecurringReimbursementsData(
  client: QueryClient,
  queryKeyBase: [
    id: string,
    parameters: {
      xGustoAPIVersion?:
        | GetV1RecurringReimbursementsHeaderXGustoAPIVersion
        | undefined;
    },
  ],
  data: ReimbursementsGetV1RecurringReimbursementsQueryData,
): ReimbursementsGetV1RecurringReimbursementsQueryData | undefined {
  const key = queryKeyReimbursementsGetV1RecurringReimbursements(
    ...queryKeyBase,
  );

  return client.setQueryData<
    ReimbursementsGetV1RecurringReimbursementsQueryData
  >(key, data);
}

export function invalidateReimbursementsGetV1RecurringReimbursements(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      id: string,
      parameters: {
        xGustoAPIVersion?:
          | GetV1RecurringReimbursementsHeaderXGustoAPIVersion
          | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Reimbursements",
      "getV1RecurringReimbursements",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllReimbursementsGetV1RecurringReimbursements(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Reimbursements",
      "getV1RecurringReimbursements",
    ],
  });
}

export function buildReimbursementsGetV1RecurringReimbursementsQuery(
  client$: GustoEmbeddedCore,
  request: GetV1RecurringReimbursementsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ReimbursementsGetV1RecurringReimbursementsQueryData>;
} {
  return {
    queryKey: queryKeyReimbursementsGetV1RecurringReimbursements(request.id, {
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function reimbursementsGetV1RecurringReimbursementsQueryFn(
      ctx,
    ): Promise<ReimbursementsGetV1RecurringReimbursementsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(reimbursementsGetV1RecurringReimbursements(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyReimbursementsGetV1RecurringReimbursements(
  id: string,
  parameters: {
    xGustoAPIVersion?:
      | GetV1RecurringReimbursementsHeaderXGustoAPIVersion
      | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Reimbursements",
    "getV1RecurringReimbursements",
    id,
    parameters,
  ];
}
