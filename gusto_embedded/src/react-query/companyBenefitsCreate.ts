/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companyBenefitsCreate } from "../funcs/companyBenefitsCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PostV1CompaniesCompanyIdCompanyBenefitsRequest,
  PostV1CompaniesCompanyIdCompanyBenefitsResponse,
} from "../models/operations/postv1companiescompanyidcompanybenefits.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CompanyBenefitsCreateMutationVariables = {
  request: PostV1CompaniesCompanyIdCompanyBenefitsRequest;
  options?: RequestOptions;
};

export type CompanyBenefitsCreateMutationData =
  PostV1CompaniesCompanyIdCompanyBenefitsResponse;

/**
 * Create a company benefit
 *
 * @remarks
 * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
 *
 * Note that company benefits can be deactivated only when no employees are enrolled.
 *
 * When the application has the `company_benefits:write:benefit_type_limited` data scope, the application can only create company benefits for benefit types that are permitted for the application.
 *
 * scope: `company_benefits:write`
 */
export function useCompanyBenefitsCreateMutation(
  options?: MutationHookOptions<
    CompanyBenefitsCreateMutationData,
    Error,
    CompanyBenefitsCreateMutationVariables
  >,
): UseMutationResult<
  CompanyBenefitsCreateMutationData,
  Error,
  CompanyBenefitsCreateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildCompanyBenefitsCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyCompanyBenefitsCreate(): MutationKey {
  return ["@gusto/embedded-api", "companyBenefits", "create"];
}

export function buildCompanyBenefitsCreateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CompanyBenefitsCreateMutationVariables,
  ) => Promise<CompanyBenefitsCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyCompanyBenefitsCreate(),
    mutationFn: function companyBenefitsCreateMutationFn({
      request,
      options,
    }): Promise<CompanyBenefitsCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(companyBenefitsCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
