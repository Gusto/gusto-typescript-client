/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { signatoriesDelete } from "../funcs/signatoriesDelete.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SignatoriesDeleteMutationVariables = {
  request:
    operations.DeleteV1CompaniesCompanyUuidSignatoriesSignatoryUuidRequest;
  options?: RequestOptions;
};

export type SignatoriesDeleteMutationData =
  operations.DeleteV1CompaniesCompanyUuidSignatoriesSignatoryUuidResponse;

/**
 * Delete a signatory
 *
 * @remarks
 * Delete a company signatory.
 *
 * scope: `signatories:manage`
 */
export function useSignatoriesDeleteMutation(
  options?: MutationHookOptions<
    SignatoriesDeleteMutationData,
    Error,
    SignatoriesDeleteMutationVariables
  >,
): UseMutationResult<
  SignatoriesDeleteMutationData,
  Error,
  SignatoriesDeleteMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildSignatoriesDeleteMutation(client, options),
    ...options,
  });
}

export function mutationKeySignatoriesDelete(): MutationKey {
  return ["@gusto/embedded-api", "Signatories", "delete"];
}

export function buildSignatoriesDeleteMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: SignatoriesDeleteMutationVariables,
  ) => Promise<SignatoriesDeleteMutationData>;
} {
  return {
    mutationKey: mutationKeySignatoriesDelete(),
    mutationFn: function signatoriesDeleteMutationFn({
      request,
      options,
    }): Promise<SignatoriesDeleteMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(signatoriesDelete(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
