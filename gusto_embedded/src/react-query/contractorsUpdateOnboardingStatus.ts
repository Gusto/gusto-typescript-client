/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorsUpdateOnboardingStatus } from "../funcs/contractorsUpdateOnboardingStatus.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ContractorsUpdateOnboardingStatusMutationVariables = {
  request: operations.PutV1ContractorsContractorUuidOnboardingStatusRequest;
  options?: RequestOptions;
};

export type ContractorsUpdateOnboardingStatusMutationData =
  components.ContractorOnboardingStatus;

/**
 * Change the contractor's onboarding status
 *
 * @remarks
 * Updates a contractor's onboarding status.
 *
 * scope: `contractors:write`
 *
 * Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.
 *
 * | Action | current onboarding_status | new onboarding_status |
 * |:------------------|:------------:|----------:|
 * | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_not_invited` |
 * | Invite a contractor to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_not_invited` | `self_onboarding_invited` |
 * | Cancel a contractor's self-onboarding | `self_onboarding_invited` or `self_onboarding_not_invited` | `admin_onboarding_incomplete` |
 * | Review a contractor's self-onboarded info | `self_onboarding_started` | `self_onboarding_review` |
 * | Finish a contractor's onboarding | `admin_onboarding_review` or `self_onboarding_review` | `onboarding_completed` |
 */
export function useContractorsUpdateOnboardingStatusMutation(
  options?: MutationHookOptions<
    ContractorsUpdateOnboardingStatusMutationData,
    Error,
    ContractorsUpdateOnboardingStatusMutationVariables
  >,
): UseMutationResult<
  ContractorsUpdateOnboardingStatusMutationData,
  Error,
  ContractorsUpdateOnboardingStatusMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildContractorsUpdateOnboardingStatusMutation(client, options),
    ...options,
  });
}

export function mutationKeyContractorsUpdateOnboardingStatus(): MutationKey {
  return ["@gusto/embedded-api", "Contractors", "updateOnboardingStatus"];
}

export function buildContractorsUpdateOnboardingStatusMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ContractorsUpdateOnboardingStatusMutationVariables,
  ) => Promise<ContractorsUpdateOnboardingStatusMutationData>;
} {
  return {
    mutationKey: mutationKeyContractorsUpdateOnboardingStatus(),
    mutationFn: function contractorsUpdateOnboardingStatusMutationFn({
      request,
      options,
    }): Promise<ContractorsUpdateOnboardingStatusMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(contractorsUpdateOnboardingStatus(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
