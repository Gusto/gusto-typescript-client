/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorFormsGenerate1099 } from "../funcs/contractorFormsGenerate1099.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PostV1SandboxGenerate1099Request,
  PostV1SandboxGenerate1099Response,
} from "../models/operations/postv1sandboxgenerate1099.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ContractorFormsGenerate1099MutationVariables = {
  request: PostV1SandboxGenerate1099Request;
  options?: RequestOptions;
};

export type ContractorFormsGenerate1099MutationData =
  PostV1SandboxGenerate1099Response;

/**
 * Generate a 1099 form [DEMO]
 *
 * @remarks
 * > ðŸš§ Demo action
 * >
 * > This action is only available in the Demo environment
 *
 * Generates a 1099 document for testing purposes.
 *
 * scope: `contractors:write`
 */
export function useContractorFormsGenerate1099Mutation(
  options?: MutationHookOptions<
    ContractorFormsGenerate1099MutationData,
    Error,
    ContractorFormsGenerate1099MutationVariables
  >,
): UseMutationResult<
  ContractorFormsGenerate1099MutationData,
  Error,
  ContractorFormsGenerate1099MutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildContractorFormsGenerate1099Mutation(client, options),
    ...options,
  });
}

export function mutationKeyContractorFormsGenerate1099(): MutationKey {
  return ["@gusto/embedded-api", "contractorForms", "generate1099"];
}

export function buildContractorFormsGenerate1099Mutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ContractorFormsGenerate1099MutationVariables,
  ) => Promise<ContractorFormsGenerate1099MutationData>;
} {
  return {
    mutationKey: mutationKeyContractorFormsGenerate1099(),
    mutationFn: function contractorFormsGenerate1099MutationFn({
      request,
      options,
    }): Promise<ContractorFormsGenerate1099MutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(contractorFormsGenerate1099(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
