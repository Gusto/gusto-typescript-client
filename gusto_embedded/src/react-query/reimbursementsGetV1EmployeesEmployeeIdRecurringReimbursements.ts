/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { reimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements } from "../funcs/reimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion,
  GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
  GetV1EmployeesEmployeeIdRecurringReimbursementsResponse,
} from "../models/operations/getv1employeesemployeeidrecurringreimbursements.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData =
  GetV1EmployeesEmployeeIdRecurringReimbursementsResponse;

/**
 * Get recurring reimbursements for an employee
 *
 * @remarks
 * Get all active recurring reimbursements for an employee.
 *
 * scope: `reimbursements:read`
 */
export function useReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements(
  request: GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
  options?: QueryHookOptions<
    ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData
  >,
): UseQueryResult<
  ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get recurring reimbursements for an employee
 *
 * @remarks
 * Get all active recurring reimbursements for an employee.
 *
 * scope: `reimbursements:read`
 */
export function useReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsSuspense(
  request: GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
  options?: SuspenseQueryHookOptions<
    ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData
  >,
): UseSuspenseQueryResult<
  ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQuery(
      client$,
      request,
    ),
  });
}

export function setReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsData(
  client: QueryClient,
  queryKeyBase: [
    employeeId: string,
    parameters: {
      xGustoAPIVersion?:
        | GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion
        | undefined;
      page?: number | undefined;
      per?: number | undefined;
    },
  ],
  data: ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData,
):
  | ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData
  | undefined
{
  const key =
    queryKeyReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements(
      ...queryKeyBase,
    );

  return client.setQueryData<
    ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData
  >(key, data);
}

export function invalidateReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      employeeId: string,
      parameters: {
        xGustoAPIVersion?:
          | GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion
          | undefined;
        page?: number | undefined;
        per?: number | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Reimbursements",
      "getV1EmployeesEmployeeIdRecurringReimbursements",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Reimbursements",
      "getV1EmployeesEmployeeIdRecurringReimbursements",
    ],
  });
}

export function buildReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQuery(
  client$: GustoEmbeddedCore,
  request: GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<
    ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData
  >;
} {
  return {
    queryKey:
      queryKeyReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements(
        request.employeeId,
        {
          xGustoAPIVersion: request.xGustoAPIVersion,
          page: request.page,
          per: request.per,
        },
      ),
    queryFn:
      async function reimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryFn(
        ctx,
      ): Promise<
        ReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursementsQueryData
      > {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(
          reimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements(
            client$,
            request,
            mergedOptions,
          ),
        );
      },
  };
}

export function queryKeyReimbursementsGetV1EmployeesEmployeeIdRecurringReimbursements(
  employeeId: string,
  parameters: {
    xGustoAPIVersion?:
      | GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion
      | undefined;
    page?: number | undefined;
    per?: number | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Reimbursements",
    "getV1EmployeesEmployeeIdRecurringReimbursements",
    employeeId,
    parameters,
  ];
}
