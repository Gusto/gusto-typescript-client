/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { signatoriesUpdate } from "../funcs/signatoriesUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type SignatoriesUpdateMutationVariables = {
  request: operations.PutV1CompaniesCompanyUuidSignatoriesSignatoryUuidRequest;
  options?: RequestOptions;
};

export type SignatoriesUpdateMutationData =
  operations.PutV1CompaniesCompanyUuidSignatoriesSignatoryUuidResponse;

/**
 * Update a signatory
 *
 * @remarks
 * Update a signatory that has been either invited or created. If the signatory has been created with minimal information through the `POST /v1/companies/{company_uuid}/signatories/invite` endpoint, then the first update must contain all attributes specified in the request body in order to start the identity verification process.
 *
 * scope: `signatories:write`
 */
export function useSignatoriesUpdateMutation(
  options?: MutationHookOptions<
    SignatoriesUpdateMutationData,
    Error,
    SignatoriesUpdateMutationVariables
  >,
): UseMutationResult<
  SignatoriesUpdateMutationData,
  Error,
  SignatoriesUpdateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildSignatoriesUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeySignatoriesUpdate(): MutationKey {
  return ["@gusto/embedded-api", "Signatories", "update"];
}

export function buildSignatoriesUpdateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: SignatoriesUpdateMutationVariables,
  ) => Promise<SignatoriesUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeySignatoriesUpdate(),
    mutationFn: function signatoriesUpdateMutationFn({
      request,
      options,
    }): Promise<SignatoriesUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(signatoriesUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
