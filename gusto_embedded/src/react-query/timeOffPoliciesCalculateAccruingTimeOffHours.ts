/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { timeOffPoliciesCalculateAccruingTimeOffHours } from "../funcs/timeOffPoliciesCalculateAccruingTimeOffHours.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TimeOffPoliciesCalculateAccruingTimeOffHoursMutationVariables = {
  request:
    operations.PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequest;
  options?: RequestOptions;
};

export type TimeOffPoliciesCalculateAccruingTimeOffHoursMutationData = Array<
  components.AccruingTimeOffHour
>;

/**
 * Calculate accruing time off hours
 *
 * @remarks
 * Returns a list of accruing time off for each time off policy associated with the employee.
 *
 * Factors affecting the accrued hours:
 *   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)
 *   * how many hours of work during this pay period
 *   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)
 *   * company pay schedule frequency (for per pay period)
 *
 * If none of the parameters is passed in, the accrued time off hour will be 0.
 *
 * scope: `payrolls:read`
 */
export function useTimeOffPoliciesCalculateAccruingTimeOffHoursMutation(
  options?: MutationHookOptions<
    TimeOffPoliciesCalculateAccruingTimeOffHoursMutationData,
    Error,
    TimeOffPoliciesCalculateAccruingTimeOffHoursMutationVariables
  >,
): UseMutationResult<
  TimeOffPoliciesCalculateAccruingTimeOffHoursMutationData,
  Error,
  TimeOffPoliciesCalculateAccruingTimeOffHoursMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildTimeOffPoliciesCalculateAccruingTimeOffHoursMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeyTimeOffPoliciesCalculateAccruingTimeOffHours(): MutationKey {
  return [
    "@gusto/embedded-api",
    "timeOffPolicies",
    "calculateAccruingTimeOffHours",
  ];
}

export function buildTimeOffPoliciesCalculateAccruingTimeOffHoursMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TimeOffPoliciesCalculateAccruingTimeOffHoursMutationVariables,
  ) => Promise<TimeOffPoliciesCalculateAccruingTimeOffHoursMutationData>;
} {
  return {
    mutationKey: mutationKeyTimeOffPoliciesCalculateAccruingTimeOffHours(),
    mutationFn: function timeOffPoliciesCalculateAccruingTimeOffHoursMutationFn(
      {
        request,
        options,
      },
    ): Promise<TimeOffPoliciesCalculateAccruingTimeOffHoursMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(timeOffPoliciesCalculateAccruingTimeOffHours(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
