/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorDocumentsSign } from "../funcs/contractorDocumentsSign.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PutV1ContractorDocumentSignRequest,
  PutV1ContractorDocumentSignResponse,
} from "../models/operations/putv1contractordocumentsign.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ContractorDocumentsSignMutationVariables = {
  request: PutV1ContractorDocumentSignRequest;
  options?: RequestOptions;
};

export type ContractorDocumentsSignMutationData =
  PutV1ContractorDocumentSignResponse;

/**
 * Sign a contractor document
 *
 * @remarks
 * Sign a contractor document.
 *
 * scope: `contractor_documents:write`
 */
export function useContractorDocumentsSignMutation(
  options?: MutationHookOptions<
    ContractorDocumentsSignMutationData,
    Error,
    ContractorDocumentsSignMutationVariables
  >,
): UseMutationResult<
  ContractorDocumentsSignMutationData,
  Error,
  ContractorDocumentsSignMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildContractorDocumentsSignMutation(client, options),
    ...options,
  });
}

export function mutationKeyContractorDocumentsSign(): MutationKey {
  return ["@gusto/embedded-api", "contractorDocuments", "sign"];
}

export function buildContractorDocumentsSignMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ContractorDocumentsSignMutationVariables,
  ) => Promise<ContractorDocumentsSignMutationData>;
} {
  return {
    mutationKey: mutationKeyContractorDocumentsSign(),
    mutationFn: function contractorDocumentsSignMutationFn({
      request,
      options,
    }): Promise<ContractorDocumentsSignMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(contractorDocumentsSign(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
