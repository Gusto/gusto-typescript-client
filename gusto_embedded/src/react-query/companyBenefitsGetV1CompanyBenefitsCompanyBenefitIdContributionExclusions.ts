/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions } from "../funcs/companyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsRequest,
  GetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsResponse,
} from "../models/operations/getv1companybenefitscompanybenefitidcontributionexclusions.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData =
  GetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsResponse;

/**
 * Get contribution exclusions for a company benefit
 *
 * @remarks
 * Returns all contributions for a given company benefit and whether they are excluded or not.
 *
 * Currently this endpoint only works for 401-k and Roth 401-k benefit types.
 *
 * scope: `company_benefits:read`
 */
export function useCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions(
  request: GetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsRequest,
  options?: QueryHookOptions<
    CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData
  >,
): UseQueryResult<
  CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get contribution exclusions for a company benefit
 *
 * @remarks
 * Returns all contributions for a given company benefit and whether they are excluded or not.
 *
 * Currently this endpoint only works for 401-k and Roth 401-k benefit types.
 *
 * scope: `company_benefits:read`
 */
export function useCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsSuspense(
  request: GetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsRequest,
  options?: SuspenseQueryHookOptions<
    CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData
  >,
): UseSuspenseQueryResult<
  CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQuery(
      client$,
      request,
    ),
  });
}

export function setCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsData(
  client: QueryClient,
  queryKeyBase: [
    companyBenefitId: string,
    parameters: { xGustoAPIVersion?: VersionHeader | undefined },
  ],
  data:
    CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData,
):
  | CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData
  | undefined
{
  const key =
    queryKeyCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions(
      ...queryKeyBase,
    );

  return client.setQueryData<
    CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData
  >(key, data);
}

export function invalidateCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyBenefitId: string,
      parameters: { xGustoAPIVersion?: VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "companyBenefits",
      "getV1CompanyBenefitsCompanyBenefitIdContributionExclusions",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "companyBenefits",
      "getV1CompanyBenefitsCompanyBenefitIdContributionExclusions",
    ],
  });
}

export function buildCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQuery(
  client$: GustoEmbeddedCore,
  request: GetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<
    CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData
  >;
} {
  return {
    queryKey:
      queryKeyCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions(
        request.companyBenefitId,
        { xGustoAPIVersion: request.xGustoAPIVersion },
      ),
    queryFn:
      async function companyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryFn(
        ctx,
      ): Promise<
        CompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusionsQueryData
      > {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(
          companyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions(
            client$,
            request,
            mergedOptions,
          ),
        );
      },
  };
}

export function queryKeyCompanyBenefitsGetV1CompanyBenefitsCompanyBenefitIdContributionExclusions(
  companyBenefitId: string,
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "companyBenefits",
    "getV1CompanyBenefitsCompanyBenefitIdContributionExclusions",
    companyBenefitId,
    parameters,
  ];
}
