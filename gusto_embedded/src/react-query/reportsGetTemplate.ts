/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { reportsGetTemplate } from "../funcs/reportsGetTemplate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ReportsGetTemplateQueryData = components.ReportTemplate;

/**
 * Get a report template
 *
 * @remarks
 * Get a company's report template. The only supported report type is `payroll_journal`. The resulting columns and groupings from this endpoint can be used as a guidance to create the report using the POST create report endpoint.
 *
 * scope: `company_reports:write`
 */
export function useReportsGetTemplate(
  request: operations.GetCompaniesCompanyUuidReportTemplatesReportTypeRequest,
  options?: QueryHookOptions<ReportsGetTemplateQueryData>,
): UseQueryResult<ReportsGetTemplateQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildReportsGetTemplateQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a report template
 *
 * @remarks
 * Get a company's report template. The only supported report type is `payroll_journal`. The resulting columns and groupings from this endpoint can be used as a guidance to create the report using the POST create report endpoint.
 *
 * scope: `company_reports:write`
 */
export function useReportsGetTemplateSuspense(
  request: operations.GetCompaniesCompanyUuidReportTemplatesReportTypeRequest,
  options?: SuspenseQueryHookOptions<ReportsGetTemplateQueryData>,
): UseSuspenseQueryResult<ReportsGetTemplateQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildReportsGetTemplateQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchReportsGetTemplate(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetCompaniesCompanyUuidReportTemplatesReportTypeRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildReportsGetTemplateQuery(
      client$,
      request,
    ),
  });
}

export function setReportsGetTemplateData(
  client: QueryClient,
  queryKeyBase: [
    companyUuid: string,
    reportType: string,
    parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
  ],
  data: ReportsGetTemplateQueryData,
): ReportsGetTemplateQueryData | undefined {
  const key = queryKeyReportsGetTemplate(...queryKeyBase);

  return client.setQueryData<ReportsGetTemplateQueryData>(key, data);
}

export function invalidateReportsGetTemplate(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyUuid: string,
      reportType: string,
      parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Reports",
      "getTemplate",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllReportsGetTemplate(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Reports", "getTemplate"],
  });
}

export function buildReportsGetTemplateQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetCompaniesCompanyUuidReportTemplatesReportTypeRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ReportsGetTemplateQueryData>;
} {
  return {
    queryKey: queryKeyReportsGetTemplate(
      request.companyUuid,
      request.reportType,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function reportsGetTemplateQueryFn(
      ctx,
    ): Promise<ReportsGetTemplateQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(reportsGetTemplate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyReportsGetTemplate(
  companyUuid: string,
  reportType: string,
  parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Reports",
    "getTemplate",
    companyUuid,
    reportType,
    parameters,
  ];
}
