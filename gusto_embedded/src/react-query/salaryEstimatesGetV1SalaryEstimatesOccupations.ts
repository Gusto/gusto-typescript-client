/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { salaryEstimatesGetV1SalaryEstimatesOccupations } from "../funcs/salaryEstimatesGetV1SalaryEstimatesOccupations.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetV1SalaryEstimatesOccupationsHeaderXGustoAPIVersion,
  GetV1SalaryEstimatesOccupationsRequest,
  GetV1SalaryEstimatesOccupationsResponse,
  GetV1SalaryEstimatesOccupationsSecurity,
} from "../models/operations/getv1salaryestimatesoccupations.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData =
  GetV1SalaryEstimatesOccupationsResponse;

/**
 * Search for BLS occupations
 *
 * @remarks
 * Search for Bureau of Labor Statistics (BLS) occupations by name or keyword. This endpoint helps users find the appropriate occupation codes to use when creating or updating salary estimates.
 *
 * Returns a list of matching occupations with their codes, titles, and descriptions.
 *
 * U0001F4D8 System Access Authentication
 *
 * This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access)
 *
 * scope: `salary_estimates:read`
 */
export function useSalaryEstimatesGetV1SalaryEstimatesOccupations(
  security: GetV1SalaryEstimatesOccupationsSecurity,
  request: GetV1SalaryEstimatesOccupationsRequest,
  options?: QueryHookOptions<
    SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData
  >,
): UseQueryResult<
  SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildSalaryEstimatesGetV1SalaryEstimatesOccupationsQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Search for BLS occupations
 *
 * @remarks
 * Search for Bureau of Labor Statistics (BLS) occupations by name or keyword. This endpoint helps users find the appropriate occupation codes to use when creating or updating salary estimates.
 *
 * Returns a list of matching occupations with their codes, titles, and descriptions.
 *
 * U0001F4D8 System Access Authentication
 *
 * This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access)
 *
 * scope: `salary_estimates:read`
 */
export function useSalaryEstimatesGetV1SalaryEstimatesOccupationsSuspense(
  security: GetV1SalaryEstimatesOccupationsSecurity,
  request: GetV1SalaryEstimatesOccupationsRequest,
  options?: SuspenseQueryHookOptions<
    SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData
  >,
): UseSuspenseQueryResult<
  SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildSalaryEstimatesGetV1SalaryEstimatesOccupationsQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSalaryEstimatesGetV1SalaryEstimatesOccupations(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  security: GetV1SalaryEstimatesOccupationsSecurity,
  request: GetV1SalaryEstimatesOccupationsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSalaryEstimatesGetV1SalaryEstimatesOccupationsQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setSalaryEstimatesGetV1SalaryEstimatesOccupationsData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      xGustoAPIVersion?:
        | GetV1SalaryEstimatesOccupationsHeaderXGustoAPIVersion
        | undefined;
      search: string;
    },
  ],
  data: SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData,
): SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData | undefined {
  const key = queryKeySalaryEstimatesGetV1SalaryEstimatesOccupations(
    ...queryKeyBase,
  );

  return client.setQueryData<
    SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData
  >(key, data);
}

export function invalidateSalaryEstimatesGetV1SalaryEstimatesOccupations(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      xGustoAPIVersion?:
        | GetV1SalaryEstimatesOccupationsHeaderXGustoAPIVersion
        | undefined;
      search: string;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Salary Estimates",
      "getV1SalaryEstimatesOccupations",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllSalaryEstimatesGetV1SalaryEstimatesOccupations(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Salary Estimates",
      "getV1SalaryEstimatesOccupations",
    ],
  });
}

export function buildSalaryEstimatesGetV1SalaryEstimatesOccupationsQuery(
  client$: GustoEmbeddedCore,
  security: GetV1SalaryEstimatesOccupationsSecurity,
  request: GetV1SalaryEstimatesOccupationsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData>;
} {
  return {
    queryKey: queryKeySalaryEstimatesGetV1SalaryEstimatesOccupations({
      xGustoAPIVersion: request.xGustoAPIVersion,
      search: request.search,
    }),
    queryFn:
      async function salaryEstimatesGetV1SalaryEstimatesOccupationsQueryFn(
        ctx,
      ): Promise<SalaryEstimatesGetV1SalaryEstimatesOccupationsQueryData> {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(salaryEstimatesGetV1SalaryEstimatesOccupations(
          client$,
          security,
          request,
          mergedOptions,
        ));
      },
  };
}

export function queryKeySalaryEstimatesGetV1SalaryEstimatesOccupations(
  parameters: {
    xGustoAPIVersion?:
      | GetV1SalaryEstimatesOccupationsHeaderXGustoAPIVersion
      | undefined;
    search: string;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Salary Estimates",
    "getV1SalaryEstimatesOccupations",
    parameters,
  ];
}
