/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companiesCreateAdmin } from "../funcs/companiesCreateAdmin.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CompaniesCreateAdminMutationVariables = {
  request: operations.PostV1CompaniesCompanyIdAdminsRequest;
  options?: RequestOptions;
};

export type CompaniesCreateAdminMutationData =
  operations.PostV1CompaniesCompanyIdAdminsResponse;

/**
 * Create an admin for the company
 *
 * @remarks
 * Creates a new admin for a company.
 * If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.
 *
 * scope: `company_admin:write`
 */
export function useCompaniesCreateAdminMutation(
  options?: MutationHookOptions<
    CompaniesCreateAdminMutationData,
    Error,
    CompaniesCreateAdminMutationVariables
  >,
): UseMutationResult<
  CompaniesCreateAdminMutationData,
  Error,
  CompaniesCreateAdminMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildCompaniesCreateAdminMutation(client, options),
    ...options,
  });
}

export function mutationKeyCompaniesCreateAdmin(): MutationKey {
  return ["@gusto/embedded-api", "Companies", "createAdmin"];
}

export function buildCompaniesCreateAdminMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CompaniesCreateAdminMutationVariables,
  ) => Promise<CompaniesCreateAdminMutationData>;
} {
  return {
    mutationKey: mutationKeyCompaniesCreateAdmin(),
    mutationFn: function companiesCreateAdminMutationFn({
      request,
      options,
    }): Promise<CompaniesCreateAdminMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(companiesCreateAdmin(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
