/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { introspectionRefreshToken } from "../funcs/introspectionRefreshToken.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type IntrospectionRefreshTokenMutationVariables = {
  request: operations.RefreshAccessTokenRequest;
  options?: RequestOptions;
};

export type IntrospectionRefreshTokenMutationData = components.Authentication;

/**
 * Refresh access token
 *
 * @remarks
 * Exchange a refresh token for a new access token.
 *
 * The previous `refresh_token` will be revoked on the first usage of the new `access_token`.
 *
 * The `expires_in` value is provided in seconds from when the `access_token` was generated.
 */
export function useIntrospectionRefreshTokenMutation(
  options?: MutationHookOptions<
    IntrospectionRefreshTokenMutationData,
    Error,
    IntrospectionRefreshTokenMutationVariables
  >,
): UseMutationResult<
  IntrospectionRefreshTokenMutationData,
  Error,
  IntrospectionRefreshTokenMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildIntrospectionRefreshTokenMutation(client, options),
    ...options,
  });
}

export function mutationKeyIntrospectionRefreshToken(): MutationKey {
  return ["@gusto/embedded-api", "Introspection", "refreshToken"];
}

export function buildIntrospectionRefreshTokenMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: IntrospectionRefreshTokenMutationVariables,
  ) => Promise<IntrospectionRefreshTokenMutationData>;
} {
  return {
    mutationKey: mutationKeyIntrospectionRefreshToken(),
    mutationFn: function introspectionRefreshTokenMutationFn({
      request,
      options,
    }): Promise<IntrospectionRefreshTokenMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(introspectionRefreshToken(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
