/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { paySchedulesListUnprocessedTerminationPeriods } from "../funcs/paySchedulesListUnprocessedTerminationPeriods.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PaySchedulesListUnprocessedTerminationPeriodsQueryData = Array<
  components.UnprocessedTerminationPayPeriod
>;

/**
 * Get termination pay periods for a company
 *
 * @remarks
 * When a payroll admin terminates an employee and selects "Dismissal Payroll" as the employee's final payroll, their last pay period will appear on the list.
 *
 * This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.
 *
 * scope: `payrolls:read`
 */
export function usePaySchedulesListUnprocessedTerminationPeriods(
  request:
    operations.GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
  options?: QueryHookOptions<
    PaySchedulesListUnprocessedTerminationPeriodsQueryData
  >,
): UseQueryResult<
  PaySchedulesListUnprocessedTerminationPeriodsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildPaySchedulesListUnprocessedTerminationPeriodsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get termination pay periods for a company
 *
 * @remarks
 * When a payroll admin terminates an employee and selects "Dismissal Payroll" as the employee's final payroll, their last pay period will appear on the list.
 *
 * This endpoint returns the unprocessed pay periods for past and future terminated employees in a given company.
 *
 * scope: `payrolls:read`
 */
export function usePaySchedulesListUnprocessedTerminationPeriodsSuspense(
  request:
    operations.GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
  options?: SuspenseQueryHookOptions<
    PaySchedulesListUnprocessedTerminationPeriodsQueryData
  >,
): UseSuspenseQueryResult<
  PaySchedulesListUnprocessedTerminationPeriodsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildPaySchedulesListUnprocessedTerminationPeriodsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPaySchedulesListUnprocessedTerminationPeriods(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request:
    operations.GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPaySchedulesListUnprocessedTerminationPeriodsQuery(
      client$,
      request,
    ),
  });
}

export function setPaySchedulesListUnprocessedTerminationPeriodsData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
  ],
  data: PaySchedulesListUnprocessedTerminationPeriodsQueryData,
): PaySchedulesListUnprocessedTerminationPeriodsQueryData | undefined {
  const key = queryKeyPaySchedulesListUnprocessedTerminationPeriods(
    ...queryKeyBase,
  );

  return client.setQueryData<
    PaySchedulesListUnprocessedTerminationPeriodsQueryData
  >(key, data);
}

export function invalidatePaySchedulesListUnprocessedTerminationPeriods(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "paySchedules",
      "listUnprocessedTerminationPeriods",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllPaySchedulesListUnprocessedTerminationPeriods(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "paySchedules",
      "listUnprocessedTerminationPeriods",
    ],
  });
}

export function buildPaySchedulesListUnprocessedTerminationPeriodsQuery(
  client$: GustoEmbeddedCore,
  request:
    operations.GetV1CompaniesCompanyIdUnprocessedTerminationPayPeriodsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<PaySchedulesListUnprocessedTerminationPeriodsQueryData>;
} {
  return {
    queryKey: queryKeyPaySchedulesListUnprocessedTerminationPeriods(
      request.companyId,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn:
      async function paySchedulesListUnprocessedTerminationPeriodsQueryFn(
        ctx,
      ): Promise<PaySchedulesListUnprocessedTerminationPeriodsQueryData> {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(paySchedulesListUnprocessedTerminationPeriods(
          client$,
          request,
          mergedOptions,
        ));
      },
  };
}

export function queryKeyPaySchedulesListUnprocessedTerminationPeriods(
  companyId: string,
  parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "paySchedules",
    "listUnprocessedTerminationPeriods",
    companyId,
    parameters,
  ];
}
