/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { introspectionGetInfo } from "../funcs/introspectionGetInfo.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1TokenInfoRequest,
  GetV1TokenInfoResponse,
} from "../models/operations/getv1tokeninfo.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type IntrospectionGetInfoQueryData = GetV1TokenInfoResponse;

/**
 * Get info about the current access token
 *
 * @remarks
 * Returns scope and resource information associated with the current access token.
 */
export function useIntrospectionGetInfo(
  request: GetV1TokenInfoRequest,
  options?: QueryHookOptions<IntrospectionGetInfoQueryData>,
): UseQueryResult<IntrospectionGetInfoQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildIntrospectionGetInfoQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get info about the current access token
 *
 * @remarks
 * Returns scope and resource information associated with the current access token.
 */
export function useIntrospectionGetInfoSuspense(
  request: GetV1TokenInfoRequest,
  options?: SuspenseQueryHookOptions<IntrospectionGetInfoQueryData>,
): UseSuspenseQueryResult<IntrospectionGetInfoQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildIntrospectionGetInfoQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchIntrospectionGetInfo(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1TokenInfoRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildIntrospectionGetInfoQuery(
      client$,
      request,
    ),
  });
}

export function setIntrospectionGetInfoData(
  client: QueryClient,
  queryKeyBase: [parameters: { xGustoAPIVersion?: VersionHeader | undefined }],
  data: IntrospectionGetInfoQueryData,
): IntrospectionGetInfoQueryData | undefined {
  const key = queryKeyIntrospectionGetInfo(...queryKeyBase);

  return client.setQueryData<IntrospectionGetInfoQueryData>(key, data);
}

export function invalidateIntrospectionGetInfo(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { xGustoAPIVersion?: VersionHeader | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Introspection",
      "getInfo",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllIntrospectionGetInfo(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Introspection", "getInfo"],
  });
}

export function buildIntrospectionGetInfoQuery(
  client$: GustoEmbeddedCore,
  request: GetV1TokenInfoRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<IntrospectionGetInfoQueryData>;
} {
  return {
    queryKey: queryKeyIntrospectionGetInfo({
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function introspectionGetInfoQueryFn(
      ctx,
    ): Promise<IntrospectionGetInfoQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(introspectionGetInfo(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyIntrospectionGetInfo(
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return ["@gusto/embedded-api", "Introspection", "getInfo", parameters];
}
