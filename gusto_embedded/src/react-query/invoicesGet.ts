/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { invoicesGet } from "../funcs/invoicesGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetInvoicesInvoicePeriodRequest,
  GetInvoicesInvoicePeriodResponse,
  GetInvoicesInvoicePeriodSecurity,
} from "../models/operations/getinvoicesinvoiceperiod.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type InvoicesGetQueryData = GetInvoicesInvoicePeriodResponse;

/**
 * Retrieve invoicing data for companies
 *
 * @remarks
 * Retrieve data for active companies used to calculate invoices for Gusto Embedded Payroll. A company is considered active for an invoice period if they are an active partner managed company, have run payroll or created contractor payments since becoming a partner managed company, and are not suspended at any point during the invoice period.  This endpoint forces pagination, with 100 results returned at a time. You can learn more about our pagination here: [pagination guide](https://docs.gusto.com/embedded-payroll/docs/pagination)
 *
 * > ðŸ“˜ System Access Authentication
 * >
 * > This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access)
 *
 * scope: `invoices:read`
 */
export function useInvoicesGet(
  security: GetInvoicesInvoicePeriodSecurity,
  request: GetInvoicesInvoicePeriodRequest,
  options?: QueryHookOptions<InvoicesGetQueryData>,
): UseQueryResult<InvoicesGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildInvoicesGetQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Retrieve invoicing data for companies
 *
 * @remarks
 * Retrieve data for active companies used to calculate invoices for Gusto Embedded Payroll. A company is considered active for an invoice period if they are an active partner managed company, have run payroll or created contractor payments since becoming a partner managed company, and are not suspended at any point during the invoice period.  This endpoint forces pagination, with 100 results returned at a time. You can learn more about our pagination here: [pagination guide](https://docs.gusto.com/embedded-payroll/docs/pagination)
 *
 * > ðŸ“˜ System Access Authentication
 * >
 * > This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access)
 *
 * scope: `invoices:read`
 */
export function useInvoicesGetSuspense(
  security: GetInvoicesInvoicePeriodSecurity,
  request: GetInvoicesInvoicePeriodRequest,
  options?: SuspenseQueryHookOptions<InvoicesGetQueryData>,
): UseSuspenseQueryResult<InvoicesGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildInvoicesGetQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchInvoicesGet(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  security: GetInvoicesInvoicePeriodSecurity,
  request: GetInvoicesInvoicePeriodRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildInvoicesGetQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setInvoicesGetData(
  client: QueryClient,
  queryKeyBase: [
    invoicePeriod: string,
    parameters: {
      page?: number | undefined;
      per?: number | undefined;
      companyUuids?: string | undefined;
      xGustoAPIVersion?: VersionHeader | undefined;
    },
  ],
  data: InvoicesGetQueryData,
): InvoicesGetQueryData | undefined {
  const key = queryKeyInvoicesGet(...queryKeyBase);

  return client.setQueryData<InvoicesGetQueryData>(key, data);
}

export function invalidateInvoicesGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      invoicePeriod: string,
      parameters: {
        page?: number | undefined;
        per?: number | undefined;
        companyUuids?: string | undefined;
        xGustoAPIVersion?: VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Invoices", "get", ...queryKeyBase],
  });
}

export function invalidateAllInvoicesGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Invoices", "get"],
  });
}

export function buildInvoicesGetQuery(
  client$: GustoEmbeddedCore,
  security: GetInvoicesInvoicePeriodSecurity,
  request: GetInvoicesInvoicePeriodRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<InvoicesGetQueryData>;
} {
  return {
    queryKey: queryKeyInvoicesGet(request.invoicePeriod, {
      page: request.page,
      per: request.per,
      companyUuids: request.companyUuids,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function invoicesGetQueryFn(
      ctx,
    ): Promise<InvoicesGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(invoicesGet(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyInvoicesGet(
  invoicePeriod: string,
  parameters: {
    page?: number | undefined;
    per?: number | undefined;
    companyUuids?: string | undefined;
    xGustoAPIVersion?: VersionHeader | undefined;
  },
): QueryKey {
  return ["@gusto/embedded-api", "Invoices", "get", invoicePeriod, parameters];
}
