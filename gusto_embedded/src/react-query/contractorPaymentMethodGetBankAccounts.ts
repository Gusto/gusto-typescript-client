/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorPaymentMethodGetBankAccounts } from "../funcs/contractorPaymentMethodGetBankAccounts.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ContractorPaymentMethodGetBankAccountsQueryData =
  operations.GetV1ContractorsContractorUuidBankAccountsResponse;

/**
 * Get all contractor bank accounts
 *
 * @remarks
 * Returns all contractor bank accounts.
 *
 * scope: `contractor_payment_methods:read`
 */
export function useContractorPaymentMethodGetBankAccounts(
  request: operations.GetV1ContractorsContractorUuidBankAccountsRequest,
  options?: QueryHookOptions<ContractorPaymentMethodGetBankAccountsQueryData>,
): UseQueryResult<ContractorPaymentMethodGetBankAccountsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildContractorPaymentMethodGetBankAccountsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get all contractor bank accounts
 *
 * @remarks
 * Returns all contractor bank accounts.
 *
 * scope: `contractor_payment_methods:read`
 */
export function useContractorPaymentMethodGetBankAccountsSuspense(
  request: operations.GetV1ContractorsContractorUuidBankAccountsRequest,
  options?: SuspenseQueryHookOptions<
    ContractorPaymentMethodGetBankAccountsQueryData
  >,
): UseSuspenseQueryResult<
  ContractorPaymentMethodGetBankAccountsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildContractorPaymentMethodGetBankAccountsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchContractorPaymentMethodGetBankAccounts(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetV1ContractorsContractorUuidBankAccountsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildContractorPaymentMethodGetBankAccountsQuery(
      client$,
      request,
    ),
  });
}

export function setContractorPaymentMethodGetBankAccountsData(
  client: QueryClient,
  queryKeyBase: [
    contractorUuid: string,
    parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
  ],
  data: ContractorPaymentMethodGetBankAccountsQueryData,
): ContractorPaymentMethodGetBankAccountsQueryData | undefined {
  const key = queryKeyContractorPaymentMethodGetBankAccounts(...queryKeyBase);

  return client.setQueryData<ContractorPaymentMethodGetBankAccountsQueryData>(
    key,
    data,
  );
}

export function invalidateContractorPaymentMethodGetBankAccounts(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      contractorUuid: string,
      parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "contractorPaymentMethod",
      "getBankAccounts",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllContractorPaymentMethodGetBankAccounts(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "contractorPaymentMethod",
      "getBankAccounts",
    ],
  });
}

export function buildContractorPaymentMethodGetBankAccountsQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetV1ContractorsContractorUuidBankAccountsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ContractorPaymentMethodGetBankAccountsQueryData>;
} {
  return {
    queryKey: queryKeyContractorPaymentMethodGetBankAccounts(
      request.contractorUuid,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function contractorPaymentMethodGetBankAccountsQueryFn(
      ctx,
    ): Promise<ContractorPaymentMethodGetBankAccountsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(contractorPaymentMethodGetBankAccounts(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyContractorPaymentMethodGetBankAccounts(
  contractorUuid: string,
  parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "contractorPaymentMethod",
    "getBankAccounts",
    contractorUuid,
    parameters,
  ];
}
