/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { taxRequirementsGet } from "../funcs/taxRequirementsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TaxRequirementsGetQueryData =
  operations.GetV1CompaniesCompanyUuidTaxRequirementsStateResponse;

/**
 * Get State Tax Requirements
 *
 * @remarks
 * Get all tax requirements for a given state.
 *
 * ### Metadata Examples
 *
 * ```json select
 * {
 *   "type": "select",
 *   "options": [
 *     { "label": "Semiweekly",  value: "Semi-weekly" },
 *     { "label": "Monthly",  value: "Monthly" },
 *     { "label": "Quarterly",  value: "Quarterly" },
 *   ]
 * }
 * ```
 * ```json radio
 * {
 *   "type": "radio",
 *   "options": [
 *     { "label": "No, we cannot reimburse",  value: false, short_label: "Not Reimbursable" },
 *     { "label": "Yes, we can reimburse",  value: true, short_label: "Reimbursable" },
 *   ]
 * }
 * ```
 * ```json account_number
 * {
 *   "type": "account_number",
 *   "mask": "######-##',
 *   "prefix": null
 * }
 * ```
 * ```json tax_rate
 * {
 *   "type": "tax_rate",
 *   "validation": {
 *     "type": "min_max",
 *     "min": "0.0004",
 *     "max": "0.081"
 *   }
 * }
 * ```
 *
 * scope: `company_tax_requirements:read`
 */
export function useTaxRequirementsGet(
  request: operations.GetV1CompaniesCompanyUuidTaxRequirementsStateRequest,
  options?: QueryHookOptions<TaxRequirementsGetQueryData>,
): UseQueryResult<TaxRequirementsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildTaxRequirementsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get State Tax Requirements
 *
 * @remarks
 * Get all tax requirements for a given state.
 *
 * ### Metadata Examples
 *
 * ```json select
 * {
 *   "type": "select",
 *   "options": [
 *     { "label": "Semiweekly",  value: "Semi-weekly" },
 *     { "label": "Monthly",  value: "Monthly" },
 *     { "label": "Quarterly",  value: "Quarterly" },
 *   ]
 * }
 * ```
 * ```json radio
 * {
 *   "type": "radio",
 *   "options": [
 *     { "label": "No, we cannot reimburse",  value: false, short_label: "Not Reimbursable" },
 *     { "label": "Yes, we can reimburse",  value: true, short_label: "Reimbursable" },
 *   ]
 * }
 * ```
 * ```json account_number
 * {
 *   "type": "account_number",
 *   "mask": "######-##',
 *   "prefix": null
 * }
 * ```
 * ```json tax_rate
 * {
 *   "type": "tax_rate",
 *   "validation": {
 *     "type": "min_max",
 *     "min": "0.0004",
 *     "max": "0.081"
 *   }
 * }
 * ```
 *
 * scope: `company_tax_requirements:read`
 */
export function useTaxRequirementsGetSuspense(
  request: operations.GetV1CompaniesCompanyUuidTaxRequirementsStateRequest,
  options?: SuspenseQueryHookOptions<TaxRequirementsGetQueryData>,
): UseSuspenseQueryResult<TaxRequirementsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildTaxRequirementsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchTaxRequirementsGet(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyUuidTaxRequirementsStateRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTaxRequirementsGetQuery(
      client$,
      request,
    ),
  });
}

export function setTaxRequirementsGetData(
  client: QueryClient,
  queryKeyBase: [
    companyUuid: string,
    state: string,
    parameters: {
      scheduling?: boolean | undefined;
      xGustoAPIVersion?: components.VersionHeader | undefined;
    },
  ],
  data: TaxRequirementsGetQueryData,
): TaxRequirementsGetQueryData | undefined {
  const key = queryKeyTaxRequirementsGet(...queryKeyBase);

  return client.setQueryData<TaxRequirementsGetQueryData>(key, data);
}

export function invalidateTaxRequirementsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyUuid: string,
      state: string,
      parameters: {
        scheduling?: boolean | undefined;
        xGustoAPIVersion?: components.VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "taxRequirements",
      "get",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllTaxRequirementsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "taxRequirements", "get"],
  });
}

export function buildTaxRequirementsGetQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyUuidTaxRequirementsStateRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<TaxRequirementsGetQueryData>;
} {
  return {
    queryKey: queryKeyTaxRequirementsGet(request.companyUuid, request.state, {
      scheduling: request.scheduling,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function taxRequirementsGetQueryFn(
      ctx,
    ): Promise<TaxRequirementsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(taxRequirementsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTaxRequirementsGet(
  companyUuid: string,
  state: string,
  parameters: {
    scheduling?: boolean | undefined;
    xGustoAPIVersion?: components.VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "taxRequirements",
    "get",
    companyUuid,
    state,
    parameters,
  ];
}
