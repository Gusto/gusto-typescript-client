/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companyBenefitsGetAll } from "../funcs/companyBenefitsGetAll.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1BenefitsRequest,
  GetV1BenefitsResponse,
} from "../models/operations/getv1benefits.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CompanyBenefitsGetAllQueryData = GetV1BenefitsResponse;

/**
 * Get all benefits supported by Gusto
 *
 * @remarks
 * Returns all benefits supported by Gusto.
 *
 * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
 *
 * scope: `benefits:read`
 */
export function useCompanyBenefitsGetAll(
  request: GetV1BenefitsRequest,
  options?: QueryHookOptions<CompanyBenefitsGetAllQueryData>,
): UseQueryResult<CompanyBenefitsGetAllQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildCompanyBenefitsGetAllQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get all benefits supported by Gusto
 *
 * @remarks
 * Returns all benefits supported by Gusto.
 *
 * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
 *
 * scope: `benefits:read`
 */
export function useCompanyBenefitsGetAllSuspense(
  request: GetV1BenefitsRequest,
  options?: SuspenseQueryHookOptions<CompanyBenefitsGetAllQueryData>,
): UseSuspenseQueryResult<CompanyBenefitsGetAllQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildCompanyBenefitsGetAllQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCompanyBenefitsGetAll(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1BenefitsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCompanyBenefitsGetAllQuery(
      client$,
      request,
    ),
  });
}

export function setCompanyBenefitsGetAllData(
  client: QueryClient,
  queryKeyBase: [parameters: { xGustoAPIVersion?: VersionHeader | undefined }],
  data: CompanyBenefitsGetAllQueryData,
): CompanyBenefitsGetAllQueryData | undefined {
  const key = queryKeyCompanyBenefitsGetAll(...queryKeyBase);

  return client.setQueryData<CompanyBenefitsGetAllQueryData>(key, data);
}

export function invalidateCompanyBenefitsGetAll(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { xGustoAPIVersion?: VersionHeader | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "companyBenefits",
      "getAll",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCompanyBenefitsGetAll(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "companyBenefits", "getAll"],
  });
}

export function buildCompanyBenefitsGetAllQuery(
  client$: GustoEmbeddedCore,
  request: GetV1BenefitsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<CompanyBenefitsGetAllQueryData>;
} {
  return {
    queryKey: queryKeyCompanyBenefitsGetAll({
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function companyBenefitsGetAllQueryFn(
      ctx,
    ): Promise<CompanyBenefitsGetAllQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(companyBenefitsGetAll(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCompanyBenefitsGetAll(
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return ["@gusto/embedded-api", "companyBenefits", "getAll", parameters];
}
