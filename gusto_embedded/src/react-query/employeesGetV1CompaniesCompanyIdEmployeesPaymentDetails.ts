/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeesGetV1CompaniesCompanyIdEmployeesPaymentDetails } from "../funcs/employeesGetV1CompaniesCompanyIdEmployeesPaymentDetails.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest,
  GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse,
} from "../models/operations/getv1companiescompanyidemployeespaymentdetails.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData =
  GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse;

/**
 * Get employee payment details for a company
 *
 * @remarks
 * Fetches payment details for employees in a given company. Results are paginated.
 *
 * Use the `employee_uuid` query parameter to filter for a single employee.
 * Use the `payroll_uuid` query parameter to filter for employees on a specific payroll.
 * Providing both `employee_uuid` and `payroll_uuid` will result in a 400 error.
 * An empty array is returned if the company has no employees or if no employees match the filter criteria.
 *
 * The `encrypted_account_number` in the `splits` array is only visible if the `employee_payment_methods:read:account_number` scope is present.
 *
 * Base scope: `employee_payment_methods:read`
 */
export function useEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetails(
  request: GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest,
  options?: QueryHookOptions<
    EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData
  >,
): UseQueryResult<
  EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get employee payment details for a company
 *
 * @remarks
 * Fetches payment details for employees in a given company. Results are paginated.
 *
 * Use the `employee_uuid` query parameter to filter for a single employee.
 * Use the `payroll_uuid` query parameter to filter for employees on a specific payroll.
 * Providing both `employee_uuid` and `payroll_uuid` will result in a 400 error.
 * An empty array is returned if the company has no employees or if no employees match the filter criteria.
 *
 * The `encrypted_account_number` in the `splits` array is only visible if the `employee_payment_methods:read:account_number` scope is present.
 *
 * Base scope: `employee_payment_methods:read`
 */
export function useEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsSuspense(
  request: GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest,
  options?: SuspenseQueryHookOptions<
    EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData
  >,
): UseSuspenseQueryResult<
  EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetails(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQuery(
      client$,
      request,
    ),
  });
}

export function setEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    parameters: {
      employeeUuid?: string | undefined;
      payrollUuid?: string | undefined;
      page?: number | undefined;
      per?: number | undefined;
      xGustoAPIVersion?: VersionHeader | undefined;
    },
  ],
  data: EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData,
):
  | EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData
  | undefined
{
  const key = queryKeyEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetails(
    ...queryKeyBase,
  );

  return client.setQueryData<
    EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData
  >(key, data);
}

export function invalidateEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetails(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      parameters: {
        employeeUuid?: string | undefined;
        payrollUuid?: string | undefined;
        page?: number | undefined;
        per?: number | undefined;
        xGustoAPIVersion?: VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Employees",
      "getV1CompaniesCompanyIdEmployeesPaymentDetails",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetails(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Employees",
      "getV1CompaniesCompanyIdEmployeesPaymentDetails",
    ],
  });
}

export function buildEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQuery(
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<
    EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData
  >;
} {
  return {
    queryKey: queryKeyEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetails(
      request.companyId,
      {
        employeeUuid: request.employeeUuid,
        payrollUuid: request.payrollUuid,
        page: request.page,
        per: request.per,
        xGustoAPIVersion: request.xGustoAPIVersion,
      },
    ),
    queryFn:
      async function employeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryFn(
        ctx,
      ): Promise<
        EmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetailsQueryData
      > {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(
          employeesGetV1CompaniesCompanyIdEmployeesPaymentDetails(
            client$,
            request,
            mergedOptions,
          ),
        );
      },
  };
}

export function queryKeyEmployeesGetV1CompaniesCompanyIdEmployeesPaymentDetails(
  companyId: string,
  parameters: {
    employeeUuid?: string | undefined;
    payrollUuid?: string | undefined;
    page?: number | undefined;
    per?: number | undefined;
    xGustoAPIVersion?: VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Employees",
    "getV1CompaniesCompanyIdEmployeesPaymentDetails",
    companyId,
    parameters,
  ];
}
