/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorsGetV1CompaniesCompanyIdContractorsPaymentDetails } from "../funcs/contractorsGetV1CompaniesCompanyIdContractorsPaymentDetails.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion,
  GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest,
  GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse,
} from "../models/operations/getv1companiescompanyidcontractorspaymentdetails.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData =
  GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse;

/**
 * List contractor payment details
 *
 * @remarks
 * Get payment details for contractors in a company. This endpoint returns a list of all contractors
 * associated with the specified company, including their payment methods and bank account details
 * if they are paid via direct deposit.
 *
 * For contractors paid by direct deposit, the response includes their bank account information
 * with sensitive data masked for security. The payment details also include information about
 * how their payments are split if they have multiple bank accounts configured.
 *
 * For contractors paid by check, only the basic payment method information is returned.
 *
 * ### Response Details
 * - For direct deposit contractors:
 *   - Bank account details (masked)
 *   - Payment splits configuration
 *   - Routing numbers
 *   - Account types
 * - For check payments:
 *   - Basic payment method designation
 *
 * ### Common Use Cases
 * - Fetching contractor payment information for payroll processing
 * - Verifying contractor payment methods
 * - Reviewing payment split configurations
 *
 * `encrypted_account_number` is available only with the additional scope `contractor_payment_methods:read:account_numbers`.
 *
 * scope: `contractor_payment_methods:read`
 */
export function useContractorsGetV1CompaniesCompanyIdContractorsPaymentDetails(
  request: GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest,
  options?: QueryHookOptions<
    ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData
  >,
): UseQueryResult<
  ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List contractor payment details
 *
 * @remarks
 * Get payment details for contractors in a company. This endpoint returns a list of all contractors
 * associated with the specified company, including their payment methods and bank account details
 * if they are paid via direct deposit.
 *
 * For contractors paid by direct deposit, the response includes their bank account information
 * with sensitive data masked for security. The payment details also include information about
 * how their payments are split if they have multiple bank accounts configured.
 *
 * For contractors paid by check, only the basic payment method information is returned.
 *
 * ### Response Details
 * - For direct deposit contractors:
 *   - Bank account details (masked)
 *   - Payment splits configuration
 *   - Routing numbers
 *   - Account types
 * - For check payments:
 *   - Basic payment method designation
 *
 * ### Common Use Cases
 * - Fetching contractor payment information for payroll processing
 * - Verifying contractor payment methods
 * - Reviewing payment split configurations
 *
 * `encrypted_account_number` is available only with the additional scope `contractor_payment_methods:read:account_numbers`.
 *
 * scope: `contractor_payment_methods:read`
 */
export function useContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsSuspense(
  request: GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest,
  options?: SuspenseQueryHookOptions<
    ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData
  >,
): UseSuspenseQueryResult<
  ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchContractorsGetV1CompaniesCompanyIdContractorsPaymentDetails(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQuery(
      client$,
      request,
    ),
  });
}

export function setContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    parameters: {
      contractorUuid?: string | undefined;
      contractorPaymentGroupUuid?: string | undefined;
      xGustoAPIVersion?:
        | GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion
        | undefined;
    },
  ],
  data: ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData,
):
  | ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData
  | undefined
{
  const key =
    queryKeyContractorsGetV1CompaniesCompanyIdContractorsPaymentDetails(
      ...queryKeyBase,
    );

  return client.setQueryData<
    ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData
  >(key, data);
}

export function invalidateContractorsGetV1CompaniesCompanyIdContractorsPaymentDetails(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      parameters: {
        contractorUuid?: string | undefined;
        contractorPaymentGroupUuid?: string | undefined;
        xGustoAPIVersion?:
          | GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion
          | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Contractors",
      "getV1CompaniesCompanyIdContractorsPaymentDetails",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllContractorsGetV1CompaniesCompanyIdContractorsPaymentDetails(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Contractors",
      "getV1CompaniesCompanyIdContractorsPaymentDetails",
    ],
  });
}

export function buildContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQuery(
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<
    ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData
  >;
} {
  return {
    queryKey:
      queryKeyContractorsGetV1CompaniesCompanyIdContractorsPaymentDetails(
        request.companyId,
        {
          contractorUuid: request.contractorUuid,
          contractorPaymentGroupUuid: request.contractorPaymentGroupUuid,
          xGustoAPIVersion: request.xGustoAPIVersion,
        },
      ),
    queryFn:
      async function contractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryFn(
        ctx,
      ): Promise<
        ContractorsGetV1CompaniesCompanyIdContractorsPaymentDetailsQueryData
      > {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(
          contractorsGetV1CompaniesCompanyIdContractorsPaymentDetails(
            client$,
            request,
            mergedOptions,
          ),
        );
      },
  };
}

export function queryKeyContractorsGetV1CompaniesCompanyIdContractorsPaymentDetails(
  companyId: string,
  parameters: {
    contractorUuid?: string | undefined;
    contractorPaymentGroupUuid?: string | undefined;
    xGustoAPIVersion?:
      | GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion
      | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Contractors",
    "getV1CompaniesCompanyIdContractorsPaymentDetails",
    companyId,
    parameters,
  ];
}
