/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeBenefitsCreateBenefit } from "../funcs/employeeBenefitsCreateBenefit.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EmployeeBenefitsCreateBenefitMutationVariables = {
  request: operations.PostV1EmployeesEmployeeIdEmployeeBenefitsRequest;
  options?: RequestOptions;
};

export type EmployeeBenefitsCreateBenefitMutationData =
  components.EmployeeBenefit;

/**
 * Create an employee benefit
 *
 * @remarks
 * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employeeâ€™s enrollment.
 *
 * scope: `employee_benefits:write`
 */
export function useEmployeeBenefitsCreateBenefitMutation(
  options?: MutationHookOptions<
    EmployeeBenefitsCreateBenefitMutationData,
    Error,
    EmployeeBenefitsCreateBenefitMutationVariables
  >,
): UseMutationResult<
  EmployeeBenefitsCreateBenefitMutationData,
  Error,
  EmployeeBenefitsCreateBenefitMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildEmployeeBenefitsCreateBenefitMutation(client, options),
    ...options,
  });
}

export function mutationKeyEmployeeBenefitsCreateBenefit(): MutationKey {
  return ["@gusto/embedded-api", "employeeBenefits", "createBenefit"];
}

export function buildEmployeeBenefitsCreateBenefitMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: EmployeeBenefitsCreateBenefitMutationVariables,
  ) => Promise<EmployeeBenefitsCreateBenefitMutationData>;
} {
  return {
    mutationKey: mutationKeyEmployeeBenefitsCreateBenefit(),
    mutationFn: function employeeBenefitsCreateBenefitMutationFn({
      request,
      options,
    }): Promise<EmployeeBenefitsCreateBenefitMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(employeeBenefitsCreateBenefit(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
