/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { jobsAndCompensationsUpdate } from "../funcs/jobsAndCompensationsUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type JobsAndCompensationsUpdateMutationVariables = {
  request: operations.PutV1JobsJobIdRequest;
  options?: RequestOptions;
};

export type JobsAndCompensationsUpdateMutationData = components.Job;

/**
 * Update a job
 *
 * @remarks
 * Update a job.
 *
 * scope: `jobs:write`
 */
export function useJobsAndCompensationsUpdateMutation(
  options?: MutationHookOptions<
    JobsAndCompensationsUpdateMutationData,
    Error,
    JobsAndCompensationsUpdateMutationVariables
  >,
): UseMutationResult<
  JobsAndCompensationsUpdateMutationData,
  Error,
  JobsAndCompensationsUpdateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildJobsAndCompensationsUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyJobsAndCompensationsUpdate(): MutationKey {
  return ["@gusto/embedded-api", "jobsAndCompensations", "update"];
}

export function buildJobsAndCompensationsUpdateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: JobsAndCompensationsUpdateMutationVariables,
  ) => Promise<JobsAndCompensationsUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyJobsAndCompensationsUpdate(),
    mutationFn: function jobsAndCompensationsUpdateMutationFn({
      request,
      options,
    }): Promise<JobsAndCompensationsUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(jobsAndCompensationsUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
