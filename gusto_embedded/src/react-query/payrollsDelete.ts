/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsDelete } from "../funcs/payrollsDelete.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type PayrollsDeleteMutationVariables = {
  request: operations.DeleteV1CompaniesCompanyIdPayrollsRequest;
  options?: RequestOptions;
};

export type PayrollsDeleteMutationData = void;

/**
 * Delete a payroll
 *
 * @remarks
 * This endpoint allows you to delete an **unprocessed** payroll.
 *
 * By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the `async=true` query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return `204/No Content`. When a payroll has been enqueued for asynchronous deletion, `202/Accepted` will be returned.
 *
 * scope: `payrolls:run`
 */
export function usePayrollsDeleteMutation(
  options?: MutationHookOptions<
    PayrollsDeleteMutationData,
    Error,
    PayrollsDeleteMutationVariables
  >,
): UseMutationResult<
  PayrollsDeleteMutationData,
  Error,
  PayrollsDeleteMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildPayrollsDeleteMutation(client, options),
    ...options,
  });
}

export function mutationKeyPayrollsDelete(): MutationKey {
  return ["@gusto/embedded-api", "Payrolls", "delete"];
}

export function buildPayrollsDeleteMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: PayrollsDeleteMutationVariables,
  ) => Promise<PayrollsDeleteMutationData>;
} {
  return {
    mutationKey: mutationKeyPayrollsDelete(),
    mutationFn: function payrollsDeleteMutationFn({
      request,
      options,
    }): Promise<PayrollsDeleteMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(payrollsDelete(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
