/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeesUpdateOnboardingStatus } from "../funcs/employeesUpdateOnboardingStatus.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EmployeesUpdateOnboardingStatusMutationVariables = {
  request: operations.PutV1EmployeesEmployeeIdOnboardingStatusRequest;
  options?: RequestOptions;
};

export type EmployeesUpdateOnboardingStatusMutationData =
  components.EmployeeOnboardingStatus;

/**
 * Update the employee's onboarding status
 *
 * @remarks
 * scope: `employees:manage`
 *
 * Updates an employee's onboarding status.
 * Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.
 *
 * | Action | current onboarding_status | new onboarding_status |
 * |:------------------|:------------:|----------:|
 * | Mark an employee as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_pending_invite` |
 * | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_pending_invite` | `self_onboarding_invited` |
 * | Cancel an employee's self-onboarding | `self_onboarding_invited` or `self_onboarding_pending_invite` | `admin_onboarding_incomplete` |
 * | Review an employee's self-onboarded info | `self_onboarding_completed_by_employee` | `self_onboarding_awaiting_admin_review` |
 * | Finish an employee's onboarding | `admin_onboarding_incomplete` or `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
 */
export function useEmployeesUpdateOnboardingStatusMutation(
  options?: MutationHookOptions<
    EmployeesUpdateOnboardingStatusMutationData,
    Error,
    EmployeesUpdateOnboardingStatusMutationVariables
  >,
): UseMutationResult<
  EmployeesUpdateOnboardingStatusMutationData,
  Error,
  EmployeesUpdateOnboardingStatusMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildEmployeesUpdateOnboardingStatusMutation(client, options),
    ...options,
  });
}

export function mutationKeyEmployeesUpdateOnboardingStatus(): MutationKey {
  return ["@gusto/embedded-api", "Employees", "updateOnboardingStatus"];
}

export function buildEmployeesUpdateOnboardingStatusMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: EmployeesUpdateOnboardingStatusMutationVariables,
  ) => Promise<EmployeesUpdateOnboardingStatusMutationData>;
} {
  return {
    mutationKey: mutationKeyEmployeesUpdateOnboardingStatus(),
    mutationFn: function employeesUpdateOnboardingStatusMutationFn({
      request,
      options,
    }): Promise<EmployeesUpdateOnboardingStatusMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(employeesUpdateOnboardingStatus(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
