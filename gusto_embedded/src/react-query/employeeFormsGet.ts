/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeFormsGet } from "../funcs/employeeFormsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EmployeeFormsGetQueryData = operations.GetV1EmployeeFormResponse;

/**
 * Get an employee form
 *
 * @remarks
 * Get an employee form
 *
 * scope: `employee_forms:read`
 */
export function useEmployeeFormsGet(
  request: operations.GetV1EmployeeFormRequest,
  options?: QueryHookOptions<EmployeeFormsGetQueryData>,
): UseQueryResult<EmployeeFormsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildEmployeeFormsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get an employee form
 *
 * @remarks
 * Get an employee form
 *
 * scope: `employee_forms:read`
 */
export function useEmployeeFormsGetSuspense(
  request: operations.GetV1EmployeeFormRequest,
  options?: SuspenseQueryHookOptions<EmployeeFormsGetQueryData>,
): UseSuspenseQueryResult<EmployeeFormsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildEmployeeFormsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEmployeeFormsGet(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetV1EmployeeFormRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEmployeeFormsGetQuery(
      client$,
      request,
    ),
  });
}

export function setEmployeeFormsGetData(
  client: QueryClient,
  queryKeyBase: [
    employeeId: string,
    formId: string,
    parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
  ],
  data: EmployeeFormsGetQueryData,
): EmployeeFormsGetQueryData | undefined {
  const key = queryKeyEmployeeFormsGet(...queryKeyBase);

  return client.setQueryData<EmployeeFormsGetQueryData>(key, data);
}

export function invalidateEmployeeFormsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      employeeId: string,
      formId: string,
      parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "employeeForms", "get", ...queryKeyBase],
  });
}

export function invalidateAllEmployeeFormsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "employeeForms", "get"],
  });
}

export function buildEmployeeFormsGetQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetV1EmployeeFormRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<EmployeeFormsGetQueryData>;
} {
  return {
    queryKey: queryKeyEmployeeFormsGet(request.employeeId, request.formId, {
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function employeeFormsGetQueryFn(
      ctx,
    ): Promise<EmployeeFormsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(employeeFormsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEmployeeFormsGet(
  employeeId: string,
  formId: string,
  parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "employeeForms",
    "get",
    employeeId,
    formId,
    parameters,
  ];
}
