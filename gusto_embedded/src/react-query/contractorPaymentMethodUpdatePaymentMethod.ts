/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorPaymentMethodUpdatePaymentMethod } from "../funcs/contractorPaymentMethodUpdatePaymentMethod.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ContractorPaymentMethodUpdatePaymentMethodMutationVariables = {
  request: operations.PutV1ContractorsContractorIdPaymentMethodRequest;
  options?: RequestOptions;
};

export type ContractorPaymentMethodUpdatePaymentMethodMutationData =
  components.ContractorPaymentMethod;

/**
 * Update a contractor's payment method
 *
 * @remarks
 * Updates a contractor's payment method. Note that creating a contractor
 * bank account will also update the contractor's payment method.
 *
 * scope: `contractor_payment_methods:write`
 */
export function useContractorPaymentMethodUpdatePaymentMethodMutation(
  options?: MutationHookOptions<
    ContractorPaymentMethodUpdatePaymentMethodMutationData,
    Error,
    ContractorPaymentMethodUpdatePaymentMethodMutationVariables
  >,
): UseMutationResult<
  ContractorPaymentMethodUpdatePaymentMethodMutationData,
  Error,
  ContractorPaymentMethodUpdatePaymentMethodMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildContractorPaymentMethodUpdatePaymentMethodMutation(client, options),
    ...options,
  });
}

export function mutationKeyContractorPaymentMethodUpdatePaymentMethod(): MutationKey {
  return [
    "@gusto/embedded-api",
    "contractorPaymentMethod",
    "updatePaymentMethod",
  ];
}

export function buildContractorPaymentMethodUpdatePaymentMethodMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ContractorPaymentMethodUpdatePaymentMethodMutationVariables,
  ) => Promise<ContractorPaymentMethodUpdatePaymentMethodMutationData>;
} {
  return {
    mutationKey: mutationKeyContractorPaymentMethodUpdatePaymentMethod(),
    mutationFn: function contractorPaymentMethodUpdatePaymentMethodMutationFn({
      request,
      options,
    }): Promise<ContractorPaymentMethodUpdatePaymentMethodMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(contractorPaymentMethodUpdatePaymentMethod(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
