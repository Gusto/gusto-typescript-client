/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorPaymentGroupsPreview } from "../funcs/contractorPaymentGroupsPreview.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ContractorPaymentGroupsPreviewMutationVariables = {
  request:
    operations.PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest;
  options?: RequestOptions;
};

export type ContractorPaymentGroupsPreviewMutationData =
  operations.PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse;

/**
 * Preview a contractor payment group
 *
 * @remarks
 * Preview a group of contractor payments. Request will validate inputs and return preview of the contractor payment group including the expected debit_date.  Uuid will be null in the response.
 *
 * scope: `payrolls:read`
 */
export function useContractorPaymentGroupsPreviewMutation(
  options?: MutationHookOptions<
    ContractorPaymentGroupsPreviewMutationData,
    Error,
    ContractorPaymentGroupsPreviewMutationVariables
  >,
): UseMutationResult<
  ContractorPaymentGroupsPreviewMutationData,
  Error,
  ContractorPaymentGroupsPreviewMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildContractorPaymentGroupsPreviewMutation(client, options),
    ...options,
  });
}

export function mutationKeyContractorPaymentGroupsPreview(): MutationKey {
  return ["@gusto/embedded-api", "contractorPaymentGroups", "preview"];
}

export function buildContractorPaymentGroupsPreviewMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ContractorPaymentGroupsPreviewMutationVariables,
  ) => Promise<ContractorPaymentGroupsPreviewMutationData>;
} {
  return {
    mutationKey: mutationKeyContractorPaymentGroupsPreview(),
    mutationFn: function contractorPaymentGroupsPreviewMutationFn({
      request,
      options,
    }): Promise<ContractorPaymentGroupsPreviewMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(contractorPaymentGroupsPreview(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
