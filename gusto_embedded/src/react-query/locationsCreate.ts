/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { locationsCreate } from "../funcs/locationsCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PostV1CompaniesCompanyIdLocationsRequest,
  PostV1CompaniesCompanyIdLocationsResponse,
} from "../models/operations/postv1companiescompanyidlocations.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type LocationsCreateMutationVariables = {
  request: PostV1CompaniesCompanyIdLocationsRequest;
  options?: RequestOptions;
};

export type LocationsCreateMutationData =
  PostV1CompaniesCompanyIdLocationsResponse;

/**
 * Create a company location
 *
 * @remarks
 * Company locations represent all addresses associated with a company. These can be filing addresses, mailing addresses, and/or work locations; one address may serve multiple, or all, purposes.
 *
 * Since all company locations are subsets of locations, retrieving or updating an individual record should be done via the locations endpoints.
 *
 * scope: `companies:write`
 */
export function useLocationsCreateMutation(
  options?: MutationHookOptions<
    LocationsCreateMutationData,
    Error,
    LocationsCreateMutationVariables
  >,
): UseMutationResult<
  LocationsCreateMutationData,
  Error,
  LocationsCreateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildLocationsCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyLocationsCreate(): MutationKey {
  return ["@gusto/embedded-api", "Locations", "create"];
}

export function buildLocationsCreateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: LocationsCreateMutationVariables,
  ) => Promise<LocationsCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyLocationsCreate(),
    mutationFn: function locationsCreateMutationFn({
      request,
      options,
    }): Promise<LocationsCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(locationsCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
