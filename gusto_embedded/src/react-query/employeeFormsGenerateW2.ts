/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeFormsGenerateW2 } from "../funcs/employeeFormsGenerateW2.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EmployeeFormsGenerateW2MutationVariables = {
  request: operations.PostV1SandboxGenerateW2Request;
  options?: RequestOptions;
};

export type EmployeeFormsGenerateW2MutationData =
  operations.PostV1SandboxGenerateW2Form;

/**
 * Generate a W2 form [DEMO]
 *
 * @remarks
 * > ðŸš§ Demo action
 * >
 * > This action is only available in the Demo environment
 *
 * Generates a W2 document for testing purposes.
 *
 * scope: `employees:write`
 */
export function useEmployeeFormsGenerateW2Mutation(
  options?: MutationHookOptions<
    EmployeeFormsGenerateW2MutationData,
    Error,
    EmployeeFormsGenerateW2MutationVariables
  >,
): UseMutationResult<
  EmployeeFormsGenerateW2MutationData,
  Error,
  EmployeeFormsGenerateW2MutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildEmployeeFormsGenerateW2Mutation(client, options),
    ...options,
  });
}

export function mutationKeyEmployeeFormsGenerateW2(): MutationKey {
  return ["@gusto/embedded-api", "employeeForms", "generateW2"];
}

export function buildEmployeeFormsGenerateW2Mutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: EmployeeFormsGenerateW2MutationVariables,
  ) => Promise<EmployeeFormsGenerateW2MutationData>;
} {
  return {
    mutationKey: mutationKeyEmployeeFormsGenerateW2(),
    mutationFn: function employeeFormsGenerateW2MutationFn({
      request,
      options,
    }): Promise<EmployeeFormsGenerateW2MutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(employeeFormsGenerateW2(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
