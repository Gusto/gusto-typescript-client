/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeEmploymentsCreateTermination } from "../funcs/employeeEmploymentsCreateTermination.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EmployeeEmploymentsCreateTerminationMutationVariables = {
  request: operations.PostV1EmployeesEmployeeIdTerminationsRequest;
  options?: RequestOptions;
};

export type EmployeeEmploymentsCreateTerminationMutationData =
  components.Termination;

/**
 * Create an employee termination
 *
 * @remarks
 * Terminations are created whenever an employee is scheduled to leave the company. The only things required are an effective date (their last day of work) and whether they should receive their wages in a one-off termination payroll or with the rest of the company.
 *
 * Note that some states require employees to receive their final wages within 24 hours (unless they consent otherwise,) in which case running a one-off payroll may be the only option.
 *
 * scope: `employments:write`
 */
export function useEmployeeEmploymentsCreateTerminationMutation(
  options?: MutationHookOptions<
    EmployeeEmploymentsCreateTerminationMutationData,
    Error,
    EmployeeEmploymentsCreateTerminationMutationVariables
  >,
): UseMutationResult<
  EmployeeEmploymentsCreateTerminationMutationData,
  Error,
  EmployeeEmploymentsCreateTerminationMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildEmployeeEmploymentsCreateTerminationMutation(client, options),
    ...options,
  });
}

export function mutationKeyEmployeeEmploymentsCreateTermination(): MutationKey {
  return ["@gusto/embedded-api", "employeeEmployments", "createTermination"];
}

export function buildEmployeeEmploymentsCreateTerminationMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: EmployeeEmploymentsCreateTerminationMutationVariables,
  ) => Promise<EmployeeEmploymentsCreateTerminationMutationData>;
} {
  return {
    mutationKey: mutationKeyEmployeeEmploymentsCreateTermination(),
    mutationFn: function employeeEmploymentsCreateTerminationMutationFn({
      request,
      options,
    }): Promise<EmployeeEmploymentsCreateTerminationMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(employeeEmploymentsCreateTermination(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
