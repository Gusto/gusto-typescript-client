/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { externalPayrollsGetTaxSuggestions } from "../funcs/externalPayrollsGetTaxSuggestions.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ExternalPayrollsGetTaxSuggestionsQueryData = Array<
  components.ExternalPayrollTaxSuggestions
>;

/**
 * Get tax suggestions for an external payroll
 *
 * @remarks
 * Get tax suggestions for an external payroll. Earnings and/or benefits
 * data must be saved prior to the calculation in order to retrieve accurate
 * tax calculation.
 *
 * scope: `external_payrolls:read`
 */
export function useExternalPayrollsGetTaxSuggestions(
  request: operations.GetV1ExternalPayrollCalculateTaxesRequest,
  options?: QueryHookOptions<ExternalPayrollsGetTaxSuggestionsQueryData>,
): UseQueryResult<ExternalPayrollsGetTaxSuggestionsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildExternalPayrollsGetTaxSuggestionsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get tax suggestions for an external payroll
 *
 * @remarks
 * Get tax suggestions for an external payroll. Earnings and/or benefits
 * data must be saved prior to the calculation in order to retrieve accurate
 * tax calculation.
 *
 * scope: `external_payrolls:read`
 */
export function useExternalPayrollsGetTaxSuggestionsSuspense(
  request: operations.GetV1ExternalPayrollCalculateTaxesRequest,
  options?: SuspenseQueryHookOptions<
    ExternalPayrollsGetTaxSuggestionsQueryData
  >,
): UseSuspenseQueryResult<ExternalPayrollsGetTaxSuggestionsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildExternalPayrollsGetTaxSuggestionsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchExternalPayrollsGetTaxSuggestions(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetV1ExternalPayrollCalculateTaxesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildExternalPayrollsGetTaxSuggestionsQuery(
      client$,
      request,
    ),
  });
}

export function setExternalPayrollsGetTaxSuggestionsData(
  client: QueryClient,
  queryKeyBase: [
    companyUuid: string,
    externalPayrollId: string,
    parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
  ],
  data: ExternalPayrollsGetTaxSuggestionsQueryData,
): ExternalPayrollsGetTaxSuggestionsQueryData | undefined {
  const key = queryKeyExternalPayrollsGetTaxSuggestions(...queryKeyBase);

  return client.setQueryData<ExternalPayrollsGetTaxSuggestionsQueryData>(
    key,
    data,
  );
}

export function invalidateExternalPayrollsGetTaxSuggestions(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyUuid: string,
      externalPayrollId: string,
      parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "externalPayrolls",
      "getTaxSuggestions",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllExternalPayrollsGetTaxSuggestions(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "externalPayrolls", "getTaxSuggestions"],
  });
}

export function buildExternalPayrollsGetTaxSuggestionsQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetV1ExternalPayrollCalculateTaxesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ExternalPayrollsGetTaxSuggestionsQueryData>;
} {
  return {
    queryKey: queryKeyExternalPayrollsGetTaxSuggestions(
      request.companyUuid,
      request.externalPayrollId,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function externalPayrollsGetTaxSuggestionsQueryFn(
      ctx,
    ): Promise<ExternalPayrollsGetTaxSuggestionsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(externalPayrollsGetTaxSuggestions(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyExternalPayrollsGetTaxSuggestions(
  companyUuid: string,
  externalPayrollId: string,
  parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "externalPayrolls",
    "getTaxSuggestions",
    companyUuid,
    externalPayrollId,
    parameters,
  ];
}
