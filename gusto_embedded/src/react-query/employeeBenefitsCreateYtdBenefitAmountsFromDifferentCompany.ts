/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompany } from "../funcs/employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompany.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationVariables =
  {
    request:
      operations.PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest;
    options?: RequestOptions;
  };

export type EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationData =
  operations.PostEmployeeYtdBenefitAmountsFromDifferentCompanyResponse;

/**
 * Create year-to-date benefit amounts from a different company
 *
 * @remarks
 * Year-to-date benefit amounts from a different company represents the amount of money added to an employee's plan during a current year, made outside of the current contribution when they were employed at a different company.
 *
 * This endpoint only supports passing outside contributions for 401(k) benefits.
 *
 * scope: `employee_benefits:write`
 */
export function useEmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutation(
  options?: MutationHookOptions<
    EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationData,
    Error,
    EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationVariables
  >,
): UseMutationResult<
  EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationData,
  Error,
  EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildEmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeyEmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompany(): MutationKey {
  return [
    "@gusto/embedded-api",
    "employeeBenefits",
    "createYtdBenefitAmountsFromDifferentCompany",
  ];
}

export function buildEmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables:
      EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationVariables,
  ) => Promise<
    EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationData
  >;
} {
  return {
    mutationKey:
      mutationKeyEmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompany(),
    mutationFn:
      function employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationFn(
        {
          request,
          options,
        },
      ): Promise<
        EmployeeBenefitsCreateYtdBenefitAmountsFromDifferentCompanyMutationData
      > {
        const mergedOptions = {
          ...hookOptions,
          ...options,
          fetchOptions: {
            ...hookOptions?.fetchOptions,
            ...options?.fetchOptions,
            signal: combineSignals(
              hookOptions?.fetchOptions?.signal,
              options?.fetchOptions?.signal,
            ),
          },
        };
        return unwrapAsync(
          employeeBenefitsCreateYtdBenefitAmountsFromDifferentCompany(
            client$,
            request,
            mergedOptions,
          ),
        );
      },
  };
}
