/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companiesSuspensionsGet } from "../funcs/companiesSuspensionsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetCompaniesCompanyUuidSuspensionsHeaderXGustoAPIVersion,
  GetCompaniesCompanyUuidSuspensionsRequest,
  GetCompaniesCompanyUuidSuspensionsResponse,
} from "../models/operations/getcompaniescompanyuuidsuspensions.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CompaniesSuspensionsGetQueryData =
  GetCompaniesCompanyUuidSuspensionsResponse;

/**
 * Get suspensions for this company
 *
 * @remarks
 * Get existing suspension records for this company. A company may have multiple suspension records if they have suspended their Gusto account more than once.
 *
 * >ðŸ“˜ To check if company is already suspended
 * >
 * > To determine if a company is _currently_ suspended, use the `is_suspended` and `company_status` fields in the [Get a company](https://docs.gusto.com/embedded-payroll/reference/get-v1-companies) endpoint.
 *
 * scope: `company_suspensions:read`
 */
export function useCompaniesSuspensionsGet(
  request: GetCompaniesCompanyUuidSuspensionsRequest,
  options?: QueryHookOptions<CompaniesSuspensionsGetQueryData>,
): UseQueryResult<CompaniesSuspensionsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildCompaniesSuspensionsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get suspensions for this company
 *
 * @remarks
 * Get existing suspension records for this company. A company may have multiple suspension records if they have suspended their Gusto account more than once.
 *
 * >ðŸ“˜ To check if company is already suspended
 * >
 * > To determine if a company is _currently_ suspended, use the `is_suspended` and `company_status` fields in the [Get a company](https://docs.gusto.com/embedded-payroll/reference/get-v1-companies) endpoint.
 *
 * scope: `company_suspensions:read`
 */
export function useCompaniesSuspensionsGetSuspense(
  request: GetCompaniesCompanyUuidSuspensionsRequest,
  options?: SuspenseQueryHookOptions<CompaniesSuspensionsGetQueryData>,
): UseSuspenseQueryResult<CompaniesSuspensionsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildCompaniesSuspensionsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCompaniesSuspensionsGet(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetCompaniesCompanyUuidSuspensionsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCompaniesSuspensionsGetQuery(
      client$,
      request,
    ),
  });
}

export function setCompaniesSuspensionsGetData(
  client: QueryClient,
  queryKeyBase: [
    companyUuid: string,
    parameters: {
      xGustoAPIVersion?:
        | GetCompaniesCompanyUuidSuspensionsHeaderXGustoAPIVersion
        | undefined;
    },
  ],
  data: CompaniesSuspensionsGetQueryData,
): CompaniesSuspensionsGetQueryData | undefined {
  const key = queryKeyCompaniesSuspensionsGet(...queryKeyBase);

  return client.setQueryData<CompaniesSuspensionsGetQueryData>(key, data);
}

export function invalidateCompaniesSuspensionsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyUuid: string,
      parameters: {
        xGustoAPIVersion?:
          | GetCompaniesCompanyUuidSuspensionsHeaderXGustoAPIVersion
          | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "suspensions", "get", ...queryKeyBase],
  });
}

export function invalidateAllCompaniesSuspensionsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "suspensions", "get"],
  });
}

export function buildCompaniesSuspensionsGetQuery(
  client$: GustoEmbeddedCore,
  request: GetCompaniesCompanyUuidSuspensionsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<CompaniesSuspensionsGetQueryData>;
} {
  return {
    queryKey: queryKeyCompaniesSuspensionsGet(request.companyUuid, {
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function companiesSuspensionsGetQueryFn(
      ctx,
    ): Promise<CompaniesSuspensionsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(companiesSuspensionsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCompaniesSuspensionsGet(
  companyUuid: string,
  parameters: {
    xGustoAPIVersion?:
      | GetCompaniesCompanyUuidSuspensionsHeaderXGustoAPIVersion
      | undefined;
  },
): QueryKey {
  return ["@gusto/embedded-api", "suspensions", "get", companyUuid, parameters];
}
