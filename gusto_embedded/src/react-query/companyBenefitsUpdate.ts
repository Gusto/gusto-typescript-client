/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companyBenefitsUpdate } from "../funcs/companyBenefitsUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CompanyBenefitsUpdateMutationVariables = {
  request: operations.PutV1CompanyBenefitsCompanyBenefitIdRequest;
  options?: RequestOptions;
};

export type CompanyBenefitsUpdateMutationData =
  operations.PutV1CompanyBenefitsCompanyBenefitIdResponse;

/**
 * Update a company benefit
 *
 * @remarks
 * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
 *
 * Note that company benefits can be deactivated only when no employees are enrolled.
 *
 * scope: `company_benefits:write`
 */
export function useCompanyBenefitsUpdateMutation(
  options?: MutationHookOptions<
    CompanyBenefitsUpdateMutationData,
    Error,
    CompanyBenefitsUpdateMutationVariables
  >,
): UseMutationResult<
  CompanyBenefitsUpdateMutationData,
  Error,
  CompanyBenefitsUpdateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildCompanyBenefitsUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyCompanyBenefitsUpdate(): MutationKey {
  return ["@gusto/embedded-api", "companyBenefits", "update"];
}

export function buildCompanyBenefitsUpdateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CompanyBenefitsUpdateMutationVariables,
  ) => Promise<CompanyBenefitsUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyCompanyBenefitsUpdate(),
    mutationFn: function companyBenefitsUpdateMutationFn({
      request,
      options,
    }): Promise<CompanyBenefitsUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(companyBenefitsUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
