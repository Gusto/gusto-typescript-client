/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companyBenefitsGetEmployeeBenefits } from "../funcs/companyBenefitsGetEmployeeBenefits.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CompanyBenefitsGetEmployeeBenefitsQueryData =
  operations.GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse;

/**
 * Get all employee benefits for a company benefit
 *
 * @remarks
 * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
 *
 * Returns an array of all employee benefits enrolled for this company benefit.
 *
 * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
 *
 * scope: `employee_benefits:read`
 */
export function useCompanyBenefitsGetEmployeeBenefits(
  request:
    operations.GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest,
  options?: QueryHookOptions<CompanyBenefitsGetEmployeeBenefitsQueryData>,
): UseQueryResult<CompanyBenefitsGetEmployeeBenefitsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildCompanyBenefitsGetEmployeeBenefitsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get all employee benefits for a company benefit
 *
 * @remarks
 * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
 *
 * Returns an array of all employee benefits enrolled for this company benefit.
 *
 * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
 *
 * scope: `employee_benefits:read`
 */
export function useCompanyBenefitsGetEmployeeBenefitsSuspense(
  request:
    operations.GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest,
  options?: SuspenseQueryHookOptions<
    CompanyBenefitsGetEmployeeBenefitsQueryData
  >,
): UseSuspenseQueryResult<CompanyBenefitsGetEmployeeBenefitsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildCompanyBenefitsGetEmployeeBenefitsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCompanyBenefitsGetEmployeeBenefits(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request:
    operations.GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCompanyBenefitsGetEmployeeBenefitsQuery(
      client$,
      request,
    ),
  });
}

export function setCompanyBenefitsGetEmployeeBenefitsData(
  client: QueryClient,
  queryKeyBase: [
    companyBenefitId: string,
    parameters: {
      page?: number | undefined;
      per?: number | undefined;
      xGustoAPIVersion?: components.VersionHeader | undefined;
    },
  ],
  data: CompanyBenefitsGetEmployeeBenefitsQueryData,
): CompanyBenefitsGetEmployeeBenefitsQueryData | undefined {
  const key = queryKeyCompanyBenefitsGetEmployeeBenefits(...queryKeyBase);

  return client.setQueryData<CompanyBenefitsGetEmployeeBenefitsQueryData>(
    key,
    data,
  );
}

export function invalidateCompanyBenefitsGetEmployeeBenefits(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyBenefitId: string,
      parameters: {
        page?: number | undefined;
        per?: number | undefined;
        xGustoAPIVersion?: components.VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "companyBenefits",
      "getEmployeeBenefits",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCompanyBenefitsGetEmployeeBenefits(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "companyBenefits", "getEmployeeBenefits"],
  });
}

export function buildCompanyBenefitsGetEmployeeBenefitsQuery(
  client$: GustoEmbeddedCore,
  request:
    operations.GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<CompanyBenefitsGetEmployeeBenefitsQueryData>;
} {
  return {
    queryKey: queryKeyCompanyBenefitsGetEmployeeBenefits(
      request.companyBenefitId,
      {
        page: request.page,
        per: request.per,
        xGustoAPIVersion: request.xGustoAPIVersion,
      },
    ),
    queryFn: async function companyBenefitsGetEmployeeBenefitsQueryFn(
      ctx,
    ): Promise<CompanyBenefitsGetEmployeeBenefitsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(companyBenefitsGetEmployeeBenefits(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCompanyBenefitsGetEmployeeBenefits(
  companyBenefitId: string,
  parameters: {
    page?: number | undefined;
    per?: number | undefined;
    xGustoAPIVersion?: components.VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "companyBenefits",
    "getEmployeeBenefits",
    companyBenefitId,
    parameters,
  ];
}
