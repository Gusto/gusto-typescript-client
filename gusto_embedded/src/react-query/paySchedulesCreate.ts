/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { paySchedulesCreate } from "../funcs/paySchedulesCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PostV1CompaniesCompanyIdPaySchedulesRequest,
  PostV1CompaniesCompanyIdPaySchedulesResponse,
} from "../models/operations/postv1companiescompanyidpayschedules.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type PaySchedulesCreateMutationVariables = {
  request: PostV1CompaniesCompanyIdPaySchedulesRequest;
  options?: RequestOptions;
};

export type PaySchedulesCreateMutationData =
  PostV1CompaniesCompanyIdPaySchedulesResponse;

/**
 * Create a new pay schedule
 *
 * @remarks
 * If a company does not have any pay schedules, this endpoint will create a single pay schedule and assign it to all employees. This is a common use case during company onboarding.
 *
 * If a company has an existing active pay schedule and want to support multiple pay schedules, this endpoint will create a pay schedule that is not assigned to any employee.
 *
 * Be sure to **[check state laws](https://www.dol.gov/agencies/whd/state/payday)** to know what schedule is right for your customers.
 *
 * scope: `pay_schedules:write`
 */
export function usePaySchedulesCreateMutation(
  options?: MutationHookOptions<
    PaySchedulesCreateMutationData,
    Error,
    PaySchedulesCreateMutationVariables
  >,
): UseMutationResult<
  PaySchedulesCreateMutationData,
  Error,
  PaySchedulesCreateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildPaySchedulesCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyPaySchedulesCreate(): MutationKey {
  return ["@gusto/embedded-api", "paySchedules", "create"];
}

export function buildPaySchedulesCreateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: PaySchedulesCreateMutationVariables,
  ) => Promise<PaySchedulesCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyPaySchedulesCreate(),
    mutationFn: function paySchedulesCreateMutationFn({
      request,
      options,
    }): Promise<PaySchedulesCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(paySchedulesCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
