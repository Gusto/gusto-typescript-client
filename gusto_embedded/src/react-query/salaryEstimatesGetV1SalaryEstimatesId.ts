/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { salaryEstimatesGetV1SalaryEstimatesId } from "../funcs/salaryEstimatesGetV1SalaryEstimatesId.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetV1SalaryEstimatesIdHeaderXGustoAPIVersion,
  GetV1SalaryEstimatesIdRequest,
  GetV1SalaryEstimatesIdResponse,
} from "../models/operations/getv1salaryestimatesid.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type SalaryEstimatesGetV1SalaryEstimatesIdQueryData =
  GetV1SalaryEstimatesIdResponse;

/**
 * Get a salary estimate
 *
 * @remarks
 * Retrieve a salary estimate by its UUID. Returns the estimated salary calculation along with all occupation details, revenue, and location information.
 *
 * scope: `salary_estimates:read`
 */
export function useSalaryEstimatesGetV1SalaryEstimatesId(
  request: GetV1SalaryEstimatesIdRequest,
  options?: QueryHookOptions<SalaryEstimatesGetV1SalaryEstimatesIdQueryData>,
): UseQueryResult<SalaryEstimatesGetV1SalaryEstimatesIdQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildSalaryEstimatesGetV1SalaryEstimatesIdQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a salary estimate
 *
 * @remarks
 * Retrieve a salary estimate by its UUID. Returns the estimated salary calculation along with all occupation details, revenue, and location information.
 *
 * scope: `salary_estimates:read`
 */
export function useSalaryEstimatesGetV1SalaryEstimatesIdSuspense(
  request: GetV1SalaryEstimatesIdRequest,
  options?: SuspenseQueryHookOptions<
    SalaryEstimatesGetV1SalaryEstimatesIdQueryData
  >,
): UseSuspenseQueryResult<
  SalaryEstimatesGetV1SalaryEstimatesIdQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildSalaryEstimatesGetV1SalaryEstimatesIdQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchSalaryEstimatesGetV1SalaryEstimatesId(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1SalaryEstimatesIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildSalaryEstimatesGetV1SalaryEstimatesIdQuery(
      client$,
      request,
    ),
  });
}

export function setSalaryEstimatesGetV1SalaryEstimatesIdData(
  client: QueryClient,
  queryKeyBase: [
    uuid: string,
    parameters: {
      xGustoAPIVersion?:
        | GetV1SalaryEstimatesIdHeaderXGustoAPIVersion
        | undefined;
    },
  ],
  data: SalaryEstimatesGetV1SalaryEstimatesIdQueryData,
): SalaryEstimatesGetV1SalaryEstimatesIdQueryData | undefined {
  const key = queryKeySalaryEstimatesGetV1SalaryEstimatesId(...queryKeyBase);

  return client.setQueryData<SalaryEstimatesGetV1SalaryEstimatesIdQueryData>(
    key,
    data,
  );
}

export function invalidateSalaryEstimatesGetV1SalaryEstimatesId(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      uuid: string,
      parameters: {
        xGustoAPIVersion?:
          | GetV1SalaryEstimatesIdHeaderXGustoAPIVersion
          | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Salary Estimates",
      "getV1SalaryEstimatesId",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllSalaryEstimatesGetV1SalaryEstimatesId(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Salary Estimates",
      "getV1SalaryEstimatesId",
    ],
  });
}

export function buildSalaryEstimatesGetV1SalaryEstimatesIdQuery(
  client$: GustoEmbeddedCore,
  request: GetV1SalaryEstimatesIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<SalaryEstimatesGetV1SalaryEstimatesIdQueryData>;
} {
  return {
    queryKey: queryKeySalaryEstimatesGetV1SalaryEstimatesId(request.uuid, {
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function salaryEstimatesGetV1SalaryEstimatesIdQueryFn(
      ctx,
    ): Promise<SalaryEstimatesGetV1SalaryEstimatesIdQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(salaryEstimatesGetV1SalaryEstimatesId(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeySalaryEstimatesGetV1SalaryEstimatesId(
  uuid: string,
  parameters: {
    xGustoAPIVersion?: GetV1SalaryEstimatesIdHeaderXGustoAPIVersion | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Salary Estimates",
    "getV1SalaryEstimatesId",
    uuid,
    parameters,
  ];
}
