/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { informationRequestsGetInformationRequests } from "../funcs/informationRequestsGetInformationRequests.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetInformationRequestsRequest,
  GetInformationRequestsResponse,
} from "../models/operations/getinformationrequests.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type InformationRequestsGetInformationRequestsQueryData =
  GetInformationRequestsResponse;

/**
 * Get all information requests for a company
 *
 * @remarks
 * Fetch all information requests for a company.
 *
 * scope: `information_requests:read`
 */
export function useInformationRequestsGetInformationRequests(
  request: GetInformationRequestsRequest,
  options?: QueryHookOptions<
    InformationRequestsGetInformationRequestsQueryData
  >,
): UseQueryResult<InformationRequestsGetInformationRequestsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildInformationRequestsGetInformationRequestsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get all information requests for a company
 *
 * @remarks
 * Fetch all information requests for a company.
 *
 * scope: `information_requests:read`
 */
export function useInformationRequestsGetInformationRequestsSuspense(
  request: GetInformationRequestsRequest,
  options?: SuspenseQueryHookOptions<
    InformationRequestsGetInformationRequestsQueryData
  >,
): UseSuspenseQueryResult<
  InformationRequestsGetInformationRequestsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildInformationRequestsGetInformationRequestsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchInformationRequestsGetInformationRequests(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetInformationRequestsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildInformationRequestsGetInformationRequestsQuery(
      client$,
      request,
    ),
  });
}

export function setInformationRequestsGetInformationRequestsData(
  client: QueryClient,
  queryKeyBase: [
    companyUuid: string,
    parameters: { xGustoAPIVersion?: VersionHeader | undefined },
  ],
  data: InformationRequestsGetInformationRequestsQueryData,
): InformationRequestsGetInformationRequestsQueryData | undefined {
  const key = queryKeyInformationRequestsGetInformationRequests(
    ...queryKeyBase,
  );

  return client.setQueryData<
    InformationRequestsGetInformationRequestsQueryData
  >(key, data);
}

export function invalidateInformationRequestsGetInformationRequests(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyUuid: string,
      parameters: { xGustoAPIVersion?: VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Information Requests",
      "getInformationRequests",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllInformationRequestsGetInformationRequests(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Information Requests",
      "getInformationRequests",
    ],
  });
}

export function buildInformationRequestsGetInformationRequestsQuery(
  client$: GustoEmbeddedCore,
  request: GetInformationRequestsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<InformationRequestsGetInformationRequestsQueryData>;
} {
  return {
    queryKey: queryKeyInformationRequestsGetInformationRequests(
      request.companyUuid,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function informationRequestsGetInformationRequestsQueryFn(
      ctx,
    ): Promise<InformationRequestsGetInformationRequestsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(informationRequestsGetInformationRequests(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyInformationRequestsGetInformationRequests(
  companyUuid: string,
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Information Requests",
    "getInformationRequests",
    companyUuid,
    parameters,
  ];
}
