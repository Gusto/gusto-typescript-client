/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companyBenefitsGet } from "../funcs/companyBenefitsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1CompanyBenefitsCompanyBenefitIdRequest,
  GetV1CompanyBenefitsCompanyBenefitIdResponse,
} from "../models/operations/getv1companybenefitscompanybenefitid.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CompanyBenefitsGetQueryData =
  GetV1CompanyBenefitsCompanyBenefitIdResponse;

/**
 * Get a company benefit
 *
 * @remarks
 * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
 *
 * Note that company benefits can be deactivated only when no employees are enrolled.
 *
 * When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.
 *
 * scope: `company_benefits:read`
 */
export function useCompanyBenefitsGet(
  request: GetV1CompanyBenefitsCompanyBenefitIdRequest,
  options?: QueryHookOptions<CompanyBenefitsGetQueryData>,
): UseQueryResult<CompanyBenefitsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildCompanyBenefitsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a company benefit
 *
 * @remarks
 * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
 *
 * Note that company benefits can be deactivated only when no employees are enrolled.
 *
 * When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.
 *
 * scope: `company_benefits:read`
 */
export function useCompanyBenefitsGetSuspense(
  request: GetV1CompanyBenefitsCompanyBenefitIdRequest,
  options?: SuspenseQueryHookOptions<CompanyBenefitsGetQueryData>,
): UseSuspenseQueryResult<CompanyBenefitsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildCompanyBenefitsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCompanyBenefitsGet(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1CompanyBenefitsCompanyBenefitIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCompanyBenefitsGetQuery(
      client$,
      request,
    ),
  });
}

export function setCompanyBenefitsGetData(
  client: QueryClient,
  queryKeyBase: [
    companyBenefitId: string,
    parameters: {
      withEmployeeBenefits?: boolean | undefined;
      xGustoAPIVersion?: VersionHeader | undefined;
    },
  ],
  data: CompanyBenefitsGetQueryData,
): CompanyBenefitsGetQueryData | undefined {
  const key = queryKeyCompanyBenefitsGet(...queryKeyBase);

  return client.setQueryData<CompanyBenefitsGetQueryData>(key, data);
}

export function invalidateCompanyBenefitsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyBenefitId: string,
      parameters: {
        withEmployeeBenefits?: boolean | undefined;
        xGustoAPIVersion?: VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "companyBenefits",
      "get",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCompanyBenefitsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "companyBenefits", "get"],
  });
}

export function buildCompanyBenefitsGetQuery(
  client$: GustoEmbeddedCore,
  request: GetV1CompanyBenefitsCompanyBenefitIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<CompanyBenefitsGetQueryData>;
} {
  return {
    queryKey: queryKeyCompanyBenefitsGet(request.companyBenefitId, {
      withEmployeeBenefits: request.withEmployeeBenefits,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function companyBenefitsGetQueryFn(
      ctx,
    ): Promise<CompanyBenefitsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(companyBenefitsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCompanyBenefitsGet(
  companyBenefitId: string,
  parameters: {
    withEmployeeBenefits?: boolean | undefined;
    xGustoAPIVersion?: VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "companyBenefits",
    "get",
    companyBenefitId,
    parameters,
  ];
}
