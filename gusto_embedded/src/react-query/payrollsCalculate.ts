/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsCalculate } from "../funcs/payrollsCalculate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PutV1CompaniesCompanyIdPayrollsPayrollIdCalculateRequest,
  PutV1CompaniesCompanyIdPayrollsPayrollIdCalculateResponse,
} from "../models/operations/putv1companiescompanyidpayrollspayrollidcalculate.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type PayrollsCalculateMutationVariables = {
  request: PutV1CompaniesCompanyIdPayrollsPayrollIdCalculateRequest;
  options?: RequestOptions;
};

export type PayrollsCalculateMutationData =
  PutV1CompaniesCompanyIdPayrollsPayrollIdCalculateResponse;

/**
 * Calculate a payroll
 *
 * @remarks
 * Performs calculations for taxes, benefits, and deductions for an unprocessed payroll. The calculated payroll details provide a preview of the actual values that will be used when the payroll is run.
 *
 * This calculation is asynchronous and a successful request responds with a 202 HTTP status. To view the details of the calculated payroll, use the GET /v1/companies/{company_id}/payrolls/{payroll_id} endpoint with *include=taxes,benefits,deductions* params.
 * In v2023-04-01, *show_calculation=true* is no longer required.
 *
 * If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.
 */
export function usePayrollsCalculateMutation(
  options?: MutationHookOptions<
    PayrollsCalculateMutationData,
    Error,
    PayrollsCalculateMutationVariables
  >,
): UseMutationResult<
  PayrollsCalculateMutationData,
  Error,
  PayrollsCalculateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildPayrollsCalculateMutation(client, options),
    ...options,
  });
}

export function mutationKeyPayrollsCalculate(): MutationKey {
  return ["@gusto/embedded-api", "Payrolls", "calculate"];
}

export function buildPayrollsCalculateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: PayrollsCalculateMutationVariables,
  ) => Promise<PayrollsCalculateMutationData>;
} {
  return {
    mutationKey: mutationKeyPayrollsCalculate(),
    mutationFn: function payrollsCalculateMutationFn({
      request,
      options,
    }): Promise<PayrollsCalculateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(payrollsCalculate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
