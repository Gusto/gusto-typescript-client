/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorPaymentsGetReceipt } from "../funcs/contractorPaymentsGetReceipt.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type ContractorPaymentsGetReceiptQueryData =
  operations.GetV1ContractorPaymentsContractorPaymentUuidReceiptResponse;

/**
 * Get a single contractor payment receipt
 *
 * @remarks
 * Returns a contractor payment receipt.
 *
 * Notes:
 * * Receipts are only available for direct deposit payments and are only available once those payments have been funded.
 * * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status.
 * * Hour and dollar amounts are returned as string representations of numeric decimals.
 * * Dollar amounts are represented to the cent.
 * * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).
 *
 * scope: `payrolls:read`
 */
export function useContractorPaymentsGetReceipt(
  request:
    operations.GetV1ContractorPaymentsContractorPaymentUuidReceiptRequest,
  options?: QueryHookOptions<ContractorPaymentsGetReceiptQueryData>,
): UseQueryResult<ContractorPaymentsGetReceiptQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildContractorPaymentsGetReceiptQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a single contractor payment receipt
 *
 * @remarks
 * Returns a contractor payment receipt.
 *
 * Notes:
 * * Receipts are only available for direct deposit payments and are only available once those payments have been funded.
 * * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status.
 * * Hour and dollar amounts are returned as string representations of numeric decimals.
 * * Dollar amounts are represented to the cent.
 * * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).
 *
 * scope: `payrolls:read`
 */
export function useContractorPaymentsGetReceiptSuspense(
  request:
    operations.GetV1ContractorPaymentsContractorPaymentUuidReceiptRequest,
  options?: SuspenseQueryHookOptions<ContractorPaymentsGetReceiptQueryData>,
): UseSuspenseQueryResult<ContractorPaymentsGetReceiptQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildContractorPaymentsGetReceiptQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchContractorPaymentsGetReceipt(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request:
    operations.GetV1ContractorPaymentsContractorPaymentUuidReceiptRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildContractorPaymentsGetReceiptQuery(
      client$,
      request,
    ),
  });
}

export function setContractorPaymentsGetReceiptData(
  client: QueryClient,
  queryKeyBase: [
    contractorPaymentUuid: string,
    parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
  ],
  data: ContractorPaymentsGetReceiptQueryData,
): ContractorPaymentsGetReceiptQueryData | undefined {
  const key = queryKeyContractorPaymentsGetReceipt(...queryKeyBase);

  return client.setQueryData<ContractorPaymentsGetReceiptQueryData>(key, data);
}

export function invalidateContractorPaymentsGetReceipt(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      contractorPaymentUuid: string,
      parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "contractorPayments",
      "getReceipt",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllContractorPaymentsGetReceipt(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "contractorPayments", "getReceipt"],
  });
}

export function buildContractorPaymentsGetReceiptQuery(
  client$: GustoEmbeddedCore,
  request:
    operations.GetV1ContractorPaymentsContractorPaymentUuidReceiptRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<ContractorPaymentsGetReceiptQueryData>;
} {
  return {
    queryKey: queryKeyContractorPaymentsGetReceipt(
      request.contractorPaymentUuid,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function contractorPaymentsGetReceiptQueryFn(
      ctx,
    ): Promise<ContractorPaymentsGetReceiptQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(contractorPaymentsGetReceipt(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyContractorPaymentsGetReceipt(
  contractorPaymentUuid: string,
  parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "contractorPayments",
    "getReceipt",
    contractorPaymentUuid,
    parameters,
  ];
}
