/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { contractorPaymentGroupsFund } from "../funcs/contractorPaymentGroupsFund.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ContractorPaymentGroupsFundMutationVariables = {
  request:
    operations.PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequest;
  options?: RequestOptions;
};

export type ContractorPaymentGroupsFundMutationData =
  operations.PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundResponse;

/**
 * Fund a contractor payment group [DEMO]
 *
 * @remarks
 * > ðŸš§ Demo action
 * >
 * > This action is only available in the Demo environment
 *
 * Simulate funding a contractor payment group. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment group's `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.
 *
 * scope: `payrolls:run`
 */
export function useContractorPaymentGroupsFundMutation(
  options?: MutationHookOptions<
    ContractorPaymentGroupsFundMutationData,
    Error,
    ContractorPaymentGroupsFundMutationVariables
  >,
): UseMutationResult<
  ContractorPaymentGroupsFundMutationData,
  Error,
  ContractorPaymentGroupsFundMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildContractorPaymentGroupsFundMutation(client, options),
    ...options,
  });
}

export function mutationKeyContractorPaymentGroupsFund(): MutationKey {
  return ["@gusto/embedded-api", "contractorPaymentGroups", "fund"];
}

export function buildContractorPaymentGroupsFundMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ContractorPaymentGroupsFundMutationVariables,
  ) => Promise<ContractorPaymentGroupsFundMutationData>;
} {
  return {
    mutationKey: mutationKeyContractorPaymentGroupsFund(),
    mutationFn: function contractorPaymentGroupsFundMutationFn({
      request,
      options,
    }): Promise<ContractorPaymentGroupsFundMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(contractorPaymentGroupsFund(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
