/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { earningTypesList } from "../funcs/earningTypesList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EarningTypesListQueryData =
  operations.GetV1CompaniesCompanyIdEarningTypesResponse;

/**
 * Get all earning types for a company
 *
 * @remarks
 * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.
 *
 * #### Default Earning Type
 * Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)
 *
 * #### Custom Earning Type
 * Custom earning types are all the other earning types added specifically for a company.
 *
 * scope: `payrolls:read`
 */
export function useEarningTypesList(
  request: operations.GetV1CompaniesCompanyIdEarningTypesRequest,
  options?: QueryHookOptions<EarningTypesListQueryData>,
): UseQueryResult<EarningTypesListQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildEarningTypesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get all earning types for a company
 *
 * @remarks
 * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.
 *
 * #### Default Earning Type
 * Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)
 *
 * #### Custom Earning Type
 * Custom earning types are all the other earning types added specifically for a company.
 *
 * scope: `payrolls:read`
 */
export function useEarningTypesListSuspense(
  request: operations.GetV1CompaniesCompanyIdEarningTypesRequest,
  options?: SuspenseQueryHookOptions<EarningTypesListQueryData>,
): UseSuspenseQueryResult<EarningTypesListQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildEarningTypesListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEarningTypesList(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyIdEarningTypesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEarningTypesListQuery(
      client$,
      request,
    ),
  });
}

export function setEarningTypesListData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
  ],
  data: EarningTypesListQueryData,
): EarningTypesListQueryData | undefined {
  const key = queryKeyEarningTypesList(...queryKeyBase);

  return client.setQueryData<EarningTypesListQueryData>(key, data);
}

export function invalidateEarningTypesList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "earningTypes", "list", ...queryKeyBase],
  });
}

export function invalidateAllEarningTypesList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "earningTypes", "list"],
  });
}

export function buildEarningTypesListQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyIdEarningTypesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<EarningTypesListQueryData>;
} {
  return {
    queryKey: queryKeyEarningTypesList(request.companyId, {
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function earningTypesListQueryFn(
      ctx,
    ): Promise<EarningTypesListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(earningTypesList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEarningTypesList(
  companyId: string,
  parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
): QueryKey {
  return ["@gusto/embedded-api", "earningTypes", "list", companyId, parameters];
}
