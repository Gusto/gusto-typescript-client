/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { bankAccountsVerify } from "../funcs/bankAccountsVerify.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type BankAccountsVerifyMutationVariables = {
  request: operations.PutV1CompaniesCompanyIdBankAccountsVerifyRequest;
  options?: RequestOptions;
};

export type BankAccountsVerifyMutationData =
  operations.PutV1CompaniesCompanyIdBankAccountsVerifyResponse;

/**
 * Verify a company bank account
 *
 * @remarks
 * Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter. There's a maximum of 5 verification attempts, after which we will automatically initiate a new set of micro-deposits and require the bank account to be verified with the new micro-deposits.
 *
 * ### Bank account verification in demo
 *
 * We provide the endpoint `POST '/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits'` to facilitate bank account verification in the demo environment. This endpoint simulates the micro-deposits transfer and returns them in the response. You can call this endpoint as many times as you wish to retrieve the values of the two micro deposits.
 *
 * ```
 *   POST '/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits'
 *
 *   {
 *     "deposit_1": 0.02,
 *     "deposit_2": 0.42
 *   }
 * ```
 *
 * scope: `company_bank_accounts:write`
 */
export function useBankAccountsVerifyMutation(
  options?: MutationHookOptions<
    BankAccountsVerifyMutationData,
    Error,
    BankAccountsVerifyMutationVariables
  >,
): UseMutationResult<
  BankAccountsVerifyMutationData,
  Error,
  BankAccountsVerifyMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildBankAccountsVerifyMutation(client, options),
    ...options,
  });
}

export function mutationKeyBankAccountsVerify(): MutationKey {
  return ["@gusto/embedded-api", "bankAccounts", "verify"];
}

export function buildBankAccountsVerifyMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: BankAccountsVerifyMutationVariables,
  ) => Promise<BankAccountsVerifyMutationData>;
} {
  return {
    mutationKey: mutationKeyBankAccountsVerify(),
    mutationFn: function bankAccountsVerifyMutationFn({
      request,
      options,
    }): Promise<BankAccountsVerifyMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(bankAccountsVerify(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
