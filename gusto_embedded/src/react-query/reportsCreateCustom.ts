/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { reportsCreateCustom } from "../funcs/reportsCreateCustom.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PostCompaniesCompanyUuidReportsRequest,
  PostCompaniesCompanyUuidReportsResponse,
} from "../models/operations/postcompaniescompanyuuidreports.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ReportsCreateCustomMutationVariables = {
  request: PostCompaniesCompanyUuidReportsRequest;
  options?: RequestOptions;
};

export type ReportsCreateCustomMutationData =
  PostCompaniesCompanyUuidReportsResponse;

/**
 * Create a custom report
 *
 * @remarks
 * Create a custom report for a company. This endpoint initiates creating a custom report with custom columns, groupings, and filters. The `request_uuid` in the response can then be used to poll for the status and report URL upon completion using the report GET endpoint. This URL is valid for 10 minutes.
 *
 * scope: `company_reports:write`
 */
export function useReportsCreateCustomMutation(
  options?: MutationHookOptions<
    ReportsCreateCustomMutationData,
    Error,
    ReportsCreateCustomMutationVariables
  >,
): UseMutationResult<
  ReportsCreateCustomMutationData,
  Error,
  ReportsCreateCustomMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildReportsCreateCustomMutation(client, options),
    ...options,
  });
}

export function mutationKeyReportsCreateCustom(): MutationKey {
  return ["@gusto/embedded-api", "Reports", "createCustom"];
}

export function buildReportsCreateCustomMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ReportsCreateCustomMutationVariables,
  ) => Promise<ReportsCreateCustomMutationData>;
} {
  return {
    mutationKey: mutationKeyReportsCreateCustom(),
    mutationFn: function reportsCreateCustomMutationFn({
      request,
      options,
    }): Promise<ReportsCreateCustomMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(reportsCreateCustom(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
