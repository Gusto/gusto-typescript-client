/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { eventsGet } from "../funcs/eventsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EventsGetQueryData = operations.GetEventsResponse;

/**
 * Get all events
 *
 * @remarks
 * Fetch all events, going back up to 30 days, that your partner application has the required scopes for. Note that a partner does NOT have to have verified webhook subscriptions in order to utilize this endpoint.
 *
 * > ðŸ“˜ System Access Authentication
 * >
 * > This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
 *
 * scope: `events:read`
 */
export function useEventsGet(
  security: operations.GetEventsSecurity,
  request: operations.GetEventsRequest,
  options?: QueryHookOptions<EventsGetQueryData>,
): UseQueryResult<EventsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildEventsGetQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get all events
 *
 * @remarks
 * Fetch all events, going back up to 30 days, that your partner application has the required scopes for. Note that a partner does NOT have to have verified webhook subscriptions in order to utilize this endpoint.
 *
 * > ðŸ“˜ System Access Authentication
 * >
 * > This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
 *
 * scope: `events:read`
 */
export function useEventsGetSuspense(
  security: operations.GetEventsSecurity,
  request: operations.GetEventsRequest,
  options?: SuspenseQueryHookOptions<EventsGetQueryData>,
): UseSuspenseQueryResult<EventsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildEventsGetQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEventsGet(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  security: operations.GetEventsSecurity,
  request: operations.GetEventsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEventsGetQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setEventsGetData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      startingAfterUuid?: string | undefined;
      resourceUuid?: string | undefined;
      limit?: string | undefined;
      eventType?: string | undefined;
      sortOrder?: components.SortOrder | undefined;
      xGustoAPIVersion?: components.VersionHeader | undefined;
    },
  ],
  data: EventsGetQueryData,
): EventsGetQueryData | undefined {
  const key = queryKeyEventsGet(...queryKeyBase);

  return client.setQueryData<EventsGetQueryData>(key, data);
}

export function invalidateEventsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      startingAfterUuid?: string | undefined;
      resourceUuid?: string | undefined;
      limit?: string | undefined;
      eventType?: string | undefined;
      sortOrder?: components.SortOrder | undefined;
      xGustoAPIVersion?: components.VersionHeader | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Events", "get", ...queryKeyBase],
  });
}

export function invalidateAllEventsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Events", "get"],
  });
}

export function buildEventsGetQuery(
  client$: GustoEmbeddedCore,
  security: operations.GetEventsSecurity,
  request: operations.GetEventsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<EventsGetQueryData>;
} {
  return {
    queryKey: queryKeyEventsGet({
      startingAfterUuid: request.startingAfterUuid,
      resourceUuid: request.resourceUuid,
      limit: request.limit,
      eventType: request.eventType,
      sortOrder: request.sortOrder,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function eventsGetQueryFn(ctx): Promise<EventsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(eventsGet(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEventsGet(
  parameters: {
    startingAfterUuid?: string | undefined;
    resourceUuid?: string | undefined;
    limit?: string | undefined;
    eventType?: string | undefined;
    sortOrder?: components.SortOrder | undefined;
    xGustoAPIVersion?: components.VersionHeader | undefined;
  },
): QueryKey {
  return ["@gusto/embedded-api", "Events", "get", parameters];
}
