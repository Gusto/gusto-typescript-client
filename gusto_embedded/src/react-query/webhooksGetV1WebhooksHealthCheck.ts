/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { webhooksGetV1WebhooksHealthCheck } from "../funcs/webhooksGetV1WebhooksHealthCheck.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetV1WebhooksHealthCheckHeaderXGustoAPIVersion,
  GetV1WebhooksHealthCheckRequest,
  GetV1WebhooksHealthCheckResponse,
  GetV1WebhooksHealthCheckSecurity,
} from "../models/operations/getv1webhookshealthcheck.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type WebhooksGetV1WebhooksHealthCheckQueryData =
  GetV1WebhooksHealthCheckResponse;

/**
 * Get the webhooks health status
 *
 * @remarks
 * Returns the health status (`healthy`, `unhealthy`, or `unknown`) of the webhooks system based on the last ten minutes of activity.
 *
 * scope: `webhook_subscriptions:read`
 */
export function useWebhooksGetV1WebhooksHealthCheck(
  security: GetV1WebhooksHealthCheckSecurity,
  request: GetV1WebhooksHealthCheckRequest,
  options?: QueryHookOptions<WebhooksGetV1WebhooksHealthCheckQueryData>,
): UseQueryResult<WebhooksGetV1WebhooksHealthCheckQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildWebhooksGetV1WebhooksHealthCheckQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get the webhooks health status
 *
 * @remarks
 * Returns the health status (`healthy`, `unhealthy`, or `unknown`) of the webhooks system based on the last ten minutes of activity.
 *
 * scope: `webhook_subscriptions:read`
 */
export function useWebhooksGetV1WebhooksHealthCheckSuspense(
  security: GetV1WebhooksHealthCheckSecurity,
  request: GetV1WebhooksHealthCheckRequest,
  options?: SuspenseQueryHookOptions<WebhooksGetV1WebhooksHealthCheckQueryData>,
): UseSuspenseQueryResult<WebhooksGetV1WebhooksHealthCheckQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildWebhooksGetV1WebhooksHealthCheckQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchWebhooksGetV1WebhooksHealthCheck(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  security: GetV1WebhooksHealthCheckSecurity,
  request: GetV1WebhooksHealthCheckRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildWebhooksGetV1WebhooksHealthCheckQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setWebhooksGetV1WebhooksHealthCheckData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      xGustoAPIVersion?:
        | GetV1WebhooksHealthCheckHeaderXGustoAPIVersion
        | undefined;
    },
  ],
  data: WebhooksGetV1WebhooksHealthCheckQueryData,
): WebhooksGetV1WebhooksHealthCheckQueryData | undefined {
  const key = queryKeyWebhooksGetV1WebhooksHealthCheck(...queryKeyBase);

  return client.setQueryData<WebhooksGetV1WebhooksHealthCheckQueryData>(
    key,
    data,
  );
}

export function invalidateWebhooksGetV1WebhooksHealthCheck(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      xGustoAPIVersion?:
        | GetV1WebhooksHealthCheckHeaderXGustoAPIVersion
        | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Webhooks",
      "getV1WebhooksHealthCheck",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllWebhooksGetV1WebhooksHealthCheck(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Webhooks", "getV1WebhooksHealthCheck"],
  });
}

export function buildWebhooksGetV1WebhooksHealthCheckQuery(
  client$: GustoEmbeddedCore,
  security: GetV1WebhooksHealthCheckSecurity,
  request: GetV1WebhooksHealthCheckRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<WebhooksGetV1WebhooksHealthCheckQueryData>;
} {
  return {
    queryKey: queryKeyWebhooksGetV1WebhooksHealthCheck({
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function webhooksGetV1WebhooksHealthCheckQueryFn(
      ctx,
    ): Promise<WebhooksGetV1WebhooksHealthCheckQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(webhooksGetV1WebhooksHealthCheck(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyWebhooksGetV1WebhooksHealthCheck(
  parameters: {
    xGustoAPIVersion?:
      | GetV1WebhooksHealthCheckHeaderXGustoAPIVersion
      | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Webhooks",
    "getV1WebhooksHealthCheck",
    parameters,
  ];
}
