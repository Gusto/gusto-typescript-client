/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { jobsAndCompensationsGetJob } from "../funcs/jobsAndCompensationsGetJob.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1JobsJobIdQueryParamInclude,
  GetV1JobsJobIdRequest,
  GetV1JobsJobIdResponse,
} from "../models/operations/getv1jobsjobid.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type JobsAndCompensationsGetJobQueryData = GetV1JobsJobIdResponse;

/**
 * Get a job
 *
 * @remarks
 * Get a job.
 *
 * scope: `jobs:read`
 */
export function useJobsAndCompensationsGetJob(
  request: GetV1JobsJobIdRequest,
  options?: QueryHookOptions<JobsAndCompensationsGetJobQueryData>,
): UseQueryResult<JobsAndCompensationsGetJobQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildJobsAndCompensationsGetJobQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a job
 *
 * @remarks
 * Get a job.
 *
 * scope: `jobs:read`
 */
export function useJobsAndCompensationsGetJobSuspense(
  request: GetV1JobsJobIdRequest,
  options?: SuspenseQueryHookOptions<JobsAndCompensationsGetJobQueryData>,
): UseSuspenseQueryResult<JobsAndCompensationsGetJobQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildJobsAndCompensationsGetJobQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchJobsAndCompensationsGetJob(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1JobsJobIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildJobsAndCompensationsGetJobQuery(
      client$,
      request,
    ),
  });
}

export function setJobsAndCompensationsGetJobData(
  client: QueryClient,
  queryKeyBase: [
    jobId: string,
    parameters: {
      include?: GetV1JobsJobIdQueryParamInclude | undefined;
      xGustoAPIVersion?: VersionHeader | undefined;
    },
  ],
  data: JobsAndCompensationsGetJobQueryData,
): JobsAndCompensationsGetJobQueryData | undefined {
  const key = queryKeyJobsAndCompensationsGetJob(...queryKeyBase);

  return client.setQueryData<JobsAndCompensationsGetJobQueryData>(key, data);
}

export function invalidateJobsAndCompensationsGetJob(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      jobId: string,
      parameters: {
        include?: GetV1JobsJobIdQueryParamInclude | undefined;
        xGustoAPIVersion?: VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "jobsAndCompensations",
      "getJob",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllJobsAndCompensationsGetJob(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "jobsAndCompensations", "getJob"],
  });
}

export function buildJobsAndCompensationsGetJobQuery(
  client$: GustoEmbeddedCore,
  request: GetV1JobsJobIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<JobsAndCompensationsGetJobQueryData>;
} {
  return {
    queryKey: queryKeyJobsAndCompensationsGetJob(request.jobId, {
      include: request.include,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function jobsAndCompensationsGetJobQueryFn(
      ctx,
    ): Promise<JobsAndCompensationsGetJobQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(jobsAndCompensationsGetJob(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyJobsAndCompensationsGetJob(
  jobId: string,
  parameters: {
    include?: GetV1JobsJobIdQueryParamInclude | undefined;
    xGustoAPIVersion?: VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "jobsAndCompensations",
    "getJob",
    jobId,
    parameters,
  ];
}
