/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { webhooksCreateSubscription } from "../funcs/webhooksCreateSubscription.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type WebhooksCreateSubscriptionMutationVariables = {
  security: operations.PostV1WebhookSubscriptionSecurity;
  request: operations.PostV1WebhookSubscriptionRequest;
  options?: RequestOptions;
};

export type WebhooksCreateSubscriptionMutationData =
  operations.PostV1WebhookSubscriptionResponse;

/**
 * Create a webhook subscription
 *
 * @remarks
 * Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.
 *
 * > ðŸ“˜ System Access Authentication
 * >
 * > This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
 *
 * scope: `webhook_subscriptions:write`
 */
export function useWebhooksCreateSubscriptionMutation(
  options?: MutationHookOptions<
    WebhooksCreateSubscriptionMutationData,
    Error,
    WebhooksCreateSubscriptionMutationVariables
  >,
): UseMutationResult<
  WebhooksCreateSubscriptionMutationData,
  Error,
  WebhooksCreateSubscriptionMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildWebhooksCreateSubscriptionMutation(client, options),
    ...options,
  });
}

export function mutationKeyWebhooksCreateSubscription(): MutationKey {
  return ["@gusto/embedded-api", "Webhooks", "createSubscription"];
}

export function buildWebhooksCreateSubscriptionMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: WebhooksCreateSubscriptionMutationVariables,
  ) => Promise<WebhooksCreateSubscriptionMutationData>;
} {
  return {
    mutationKey: mutationKeyWebhooksCreateSubscription(),
    mutationFn: function webhooksCreateSubscriptionMutationFn({
      security,
      request,
      options,
    }): Promise<WebhooksCreateSubscriptionMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(webhooksCreateSubscription(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}
