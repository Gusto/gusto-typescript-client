/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { paySchedulesPreview } from "../funcs/paySchedulesPreview.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PaySchedulesPreviewQueryData =
  operations.GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody;

/**
 * Preview pay schedule dates
 *
 * @remarks
 * Provides a preview of a pay schedule with the specified parameters for the next 18 months.
 *
 * scope: `pay_schedules:write`
 */
export function usePaySchedulesPreview(
  request: operations.GetV1CompaniesCompanyIdPaySchedulesPreviewRequest,
  options?: QueryHookOptions<PaySchedulesPreviewQueryData>,
): UseQueryResult<PaySchedulesPreviewQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildPaySchedulesPreviewQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Preview pay schedule dates
 *
 * @remarks
 * Provides a preview of a pay schedule with the specified parameters for the next 18 months.
 *
 * scope: `pay_schedules:write`
 */
export function usePaySchedulesPreviewSuspense(
  request: operations.GetV1CompaniesCompanyIdPaySchedulesPreviewRequest,
  options?: SuspenseQueryHookOptions<PaySchedulesPreviewQueryData>,
): UseSuspenseQueryResult<PaySchedulesPreviewQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildPaySchedulesPreviewQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPaySchedulesPreview(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyIdPaySchedulesPreviewRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPaySchedulesPreviewQuery(
      client$,
      request,
    ),
  });
}

export function setPaySchedulesPreviewData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    parameters: {
      frequency: operations.QueryParamFrequency;
      anchorPayDate: string;
      anchorEndOfPayPeriod: string;
      day1?: number | undefined;
      day2?: number | undefined;
      xGustoAPIVersion?: components.VersionHeader | undefined;
    },
  ],
  data: PaySchedulesPreviewQueryData,
): PaySchedulesPreviewQueryData | undefined {
  const key = queryKeyPaySchedulesPreview(...queryKeyBase);

  return client.setQueryData<PaySchedulesPreviewQueryData>(key, data);
}

export function invalidatePaySchedulesPreview(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      parameters: {
        frequency: operations.QueryParamFrequency;
        anchorPayDate: string;
        anchorEndOfPayPeriod: string;
        day1?: number | undefined;
        day2?: number | undefined;
        xGustoAPIVersion?: components.VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "paySchedules",
      "preview",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllPaySchedulesPreview(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "paySchedules", "preview"],
  });
}

export function buildPaySchedulesPreviewQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyIdPaySchedulesPreviewRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<PaySchedulesPreviewQueryData>;
} {
  return {
    queryKey: queryKeyPaySchedulesPreview(request.companyId, {
      frequency: request.frequency,
      anchorPayDate: request.anchorPayDate,
      anchorEndOfPayPeriod: request.anchorEndOfPayPeriod,
      day1: request.day1,
      day2: request.day2,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function paySchedulesPreviewQueryFn(
      ctx,
    ): Promise<PaySchedulesPreviewQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(paySchedulesPreview(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyPaySchedulesPreview(
  companyId: string,
  parameters: {
    frequency: operations.QueryParamFrequency;
    anchorPayDate: string;
    anchorEndOfPayPeriod: string;
    day1?: number | undefined;
    day2?: number | undefined;
    xGustoAPIVersion?: components.VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "paySchedules",
    "preview",
    companyId,
    parameters,
  ];
}
