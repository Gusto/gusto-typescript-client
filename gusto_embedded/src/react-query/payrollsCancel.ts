/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsCancel } from "../funcs/payrollsCancel.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest,
  PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse,
} from "../models/operations/putapiv1companiescompanyidpayrollspayrollidcancel.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type PayrollsCancelMutationVariables = {
  request: PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest;
  options?: RequestOptions;
};

export type PayrollsCancelMutationData =
  PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse;

/**
 * Cancel a payroll
 *
 * @remarks
 * Transitions a `processed` payroll back to the `unprocessed` state. A payroll can be canceled if it meets both criteria:
 * - `processed` is true
 * - Current time is earlier than 3:30pm PT on the payroll_deadline
 *
 * scope: `payrolls:run`
 */
export function usePayrollsCancelMutation(
  options?: MutationHookOptions<
    PayrollsCancelMutationData,
    Error,
    PayrollsCancelMutationVariables
  >,
): UseMutationResult<
  PayrollsCancelMutationData,
  Error,
  PayrollsCancelMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildPayrollsCancelMutation(client, options),
    ...options,
  });
}

export function mutationKeyPayrollsCancel(): MutationKey {
  return ["@gusto/embedded-api", "Payrolls", "cancel"];
}

export function buildPayrollsCancelMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: PayrollsCancelMutationVariables,
  ) => Promise<PayrollsCancelMutationData>;
} {
  return {
    mutationKey: mutationKeyPayrollsCancel(),
    mutationFn: function payrollsCancelMutationFn({
      request,
      options,
    }): Promise<PayrollsCancelMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(payrollsCancel(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
