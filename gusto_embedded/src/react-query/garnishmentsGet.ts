/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { garnishmentsGet } from "../funcs/garnishmentsGet.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1GarnishmentsGarnishmentIdRequest,
  GetV1GarnishmentsGarnishmentIdResponse,
} from "../models/operations/getv1garnishmentsgarnishmentid.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type GarnishmentsGetQueryData = GetV1GarnishmentsGarnishmentIdResponse;

/**
 * Get a garnishment
 *
 * @remarks
 * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.
 *
 * scope: `garnishments:read`
 */
export function useGarnishmentsGet(
  request: GetV1GarnishmentsGarnishmentIdRequest,
  options?: QueryHookOptions<GarnishmentsGetQueryData>,
): UseQueryResult<GarnishmentsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildGarnishmentsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a garnishment
 *
 * @remarks
 * Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employee’s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.
 *
 * scope: `garnishments:read`
 */
export function useGarnishmentsGetSuspense(
  request: GetV1GarnishmentsGarnishmentIdRequest,
  options?: SuspenseQueryHookOptions<GarnishmentsGetQueryData>,
): UseSuspenseQueryResult<GarnishmentsGetQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildGarnishmentsGetQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchGarnishmentsGet(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1GarnishmentsGarnishmentIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildGarnishmentsGetQuery(
      client$,
      request,
    ),
  });
}

export function setGarnishmentsGetData(
  client: QueryClient,
  queryKeyBase: [
    garnishmentId: string,
    parameters: { xGustoAPIVersion?: VersionHeader | undefined },
  ],
  data: GarnishmentsGetQueryData,
): GarnishmentsGetQueryData | undefined {
  const key = queryKeyGarnishmentsGet(...queryKeyBase);

  return client.setQueryData<GarnishmentsGetQueryData>(key, data);
}

export function invalidateGarnishmentsGet(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      garnishmentId: string,
      parameters: { xGustoAPIVersion?: VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Garnishments", "get", ...queryKeyBase],
  });
}

export function invalidateAllGarnishmentsGet(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Garnishments", "get"],
  });
}

export function buildGarnishmentsGetQuery(
  client$: GustoEmbeddedCore,
  request: GetV1GarnishmentsGarnishmentIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<GarnishmentsGetQueryData>;
} {
  return {
    queryKey: queryKeyGarnishmentsGet(request.garnishmentId, {
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function garnishmentsGetQueryFn(
      ctx,
    ): Promise<GarnishmentsGetQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(garnishmentsGet(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyGarnishmentsGet(
  garnishmentId: string,
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Garnishments",
    "get",
    garnishmentId,
    parameters,
  ];
}
