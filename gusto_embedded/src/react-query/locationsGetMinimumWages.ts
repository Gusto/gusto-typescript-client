/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { locationsGetMinimumWages } from "../funcs/locationsGetMinimumWages.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetV1LocationsLocationUuidMinimumWagesHeaderXGustoAPIVersion,
  GetV1LocationsLocationUuidMinimumWagesRequest,
  GetV1LocationsLocationUuidMinimumWagesResponse,
} from "../models/operations/getv1locationslocationuuidminimumwages.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type LocationsGetMinimumWagesQueryData =
  GetV1LocationsLocationUuidMinimumWagesResponse;

/**
 * Get minimum wages for a location
 *
 * @remarks
 * Get minimum wages for a location
 *
 * scope: `companies:read`
 */
export function useLocationsGetMinimumWages(
  request: GetV1LocationsLocationUuidMinimumWagesRequest,
  options?: QueryHookOptions<LocationsGetMinimumWagesQueryData>,
): UseQueryResult<LocationsGetMinimumWagesQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildLocationsGetMinimumWagesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get minimum wages for a location
 *
 * @remarks
 * Get minimum wages for a location
 *
 * scope: `companies:read`
 */
export function useLocationsGetMinimumWagesSuspense(
  request: GetV1LocationsLocationUuidMinimumWagesRequest,
  options?: SuspenseQueryHookOptions<LocationsGetMinimumWagesQueryData>,
): UseSuspenseQueryResult<LocationsGetMinimumWagesQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildLocationsGetMinimumWagesQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchLocationsGetMinimumWages(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1LocationsLocationUuidMinimumWagesRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildLocationsGetMinimumWagesQuery(
      client$,
      request,
    ),
  });
}

export function setLocationsGetMinimumWagesData(
  client: QueryClient,
  queryKeyBase: [
    locationUuid: string,
    parameters: {
      xGustoAPIVersion?:
        | GetV1LocationsLocationUuidMinimumWagesHeaderXGustoAPIVersion
        | undefined;
      effectiveDate?: string | undefined;
    },
  ],
  data: LocationsGetMinimumWagesQueryData,
): LocationsGetMinimumWagesQueryData | undefined {
  const key = queryKeyLocationsGetMinimumWages(...queryKeyBase);

  return client.setQueryData<LocationsGetMinimumWagesQueryData>(key, data);
}

export function invalidateLocationsGetMinimumWages(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      locationUuid: string,
      parameters: {
        xGustoAPIVersion?:
          | GetV1LocationsLocationUuidMinimumWagesHeaderXGustoAPIVersion
          | undefined;
        effectiveDate?: string | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Locations",
      "getMinimumWages",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllLocationsGetMinimumWages(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Locations", "getMinimumWages"],
  });
}

export function buildLocationsGetMinimumWagesQuery(
  client$: GustoEmbeddedCore,
  request: GetV1LocationsLocationUuidMinimumWagesRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<LocationsGetMinimumWagesQueryData>;
} {
  return {
    queryKey: queryKeyLocationsGetMinimumWages(request.locationUuid, {
      xGustoAPIVersion: request.xGustoAPIVersion,
      effectiveDate: request.effectiveDate,
    }),
    queryFn: async function locationsGetMinimumWagesQueryFn(
      ctx,
    ): Promise<LocationsGetMinimumWagesQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(locationsGetMinimumWages(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyLocationsGetMinimumWages(
  locationUuid: string,
  parameters: {
    xGustoAPIVersion?:
      | GetV1LocationsLocationUuidMinimumWagesHeaderXGustoAPIVersion
      | undefined;
    effectiveDate?: string | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Locations",
    "getMinimumWages",
    locationUuid,
    parameters,
  ];
}
