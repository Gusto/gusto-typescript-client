/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { webhooksRequestVerificationToken } from "../funcs/webhooksRequestVerificationToken.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type WebhooksRequestVerificationTokenQueryData =
  operations.GetV1WebhookSubscriptionVerificationTokenUuidResponse;

/**
 * Request the webhook subscription verification_token
 *
 * @remarks
 * Request that the webhook subscription `verification_token` be POSTed to the Subscription URL.
 *
 * > ðŸ“˜ System Access Authentication
 * >
 * > This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
 *
 * scope: `webhook_subscriptions:read`
 */
export function useWebhooksRequestVerificationToken(
  security: operations.GetV1WebhookSubscriptionVerificationTokenUuidSecurity,
  request: operations.GetV1WebhookSubscriptionVerificationTokenUuidRequest,
  options?: QueryHookOptions<WebhooksRequestVerificationTokenQueryData>,
): UseQueryResult<WebhooksRequestVerificationTokenQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildWebhooksRequestVerificationTokenQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Request the webhook subscription verification_token
 *
 * @remarks
 * Request that the webhook subscription `verification_token` be POSTed to the Subscription URL.
 *
 * > ðŸ“˜ System Access Authentication
 * >
 * > This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
 *
 * scope: `webhook_subscriptions:read`
 */
export function useWebhooksRequestVerificationTokenSuspense(
  security: operations.GetV1WebhookSubscriptionVerificationTokenUuidSecurity,
  request: operations.GetV1WebhookSubscriptionVerificationTokenUuidRequest,
  options?: SuspenseQueryHookOptions<WebhooksRequestVerificationTokenQueryData>,
): UseSuspenseQueryResult<WebhooksRequestVerificationTokenQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildWebhooksRequestVerificationTokenQuery(
      client,
      security,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchWebhooksRequestVerificationToken(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  security: operations.GetV1WebhookSubscriptionVerificationTokenUuidSecurity,
  request: operations.GetV1WebhookSubscriptionVerificationTokenUuidRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildWebhooksRequestVerificationTokenQuery(
      client$,
      security,
      request,
    ),
  });
}

export function setWebhooksRequestVerificationTokenData(
  client: QueryClient,
  queryKeyBase: [
    webhookSubscriptionUuid: string,
    parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
  ],
  data: WebhooksRequestVerificationTokenQueryData,
): WebhooksRequestVerificationTokenQueryData | undefined {
  const key = queryKeyWebhooksRequestVerificationToken(...queryKeyBase);

  return client.setQueryData<WebhooksRequestVerificationTokenQueryData>(
    key,
    data,
  );
}

export function invalidateWebhooksRequestVerificationToken(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      webhookSubscriptionUuid: string,
      parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Webhooks",
      "requestVerificationToken",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllWebhooksRequestVerificationToken(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Webhooks", "requestVerificationToken"],
  });
}

export function buildWebhooksRequestVerificationTokenQuery(
  client$: GustoEmbeddedCore,
  security: operations.GetV1WebhookSubscriptionVerificationTokenUuidSecurity,
  request: operations.GetV1WebhookSubscriptionVerificationTokenUuidRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<WebhooksRequestVerificationTokenQueryData>;
} {
  return {
    queryKey: queryKeyWebhooksRequestVerificationToken(
      request.webhookSubscriptionUuid,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function webhooksRequestVerificationTokenQueryFn(
      ctx,
    ): Promise<WebhooksRequestVerificationTokenQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(webhooksRequestVerificationToken(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyWebhooksRequestVerificationToken(
  webhookSubscriptionUuid: string,
  parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Webhooks",
    "requestVerificationToken",
    webhookSubscriptionUuid,
    parameters,
  ];
}
