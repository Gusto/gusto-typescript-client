/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeAddressesUpdate } from "../funcs/employeeAddressesUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EmployeeAddressesUpdateMutationVariables = {
  request: operations.PutV1HomeAddressesHomeAddressUuidRequest;
  options?: RequestOptions;
};

export type EmployeeAddressesUpdateMutationData = components.EmployeeAddress;

/**
 * Update an employee's home address
 *
 * @remarks
 * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
 *
 * Supports home address effective dating and courtesy withholding.
 *
 * scope: `employees:write`
 */
export function useEmployeeAddressesUpdateMutation(
  options?: MutationHookOptions<
    EmployeeAddressesUpdateMutationData,
    Error,
    EmployeeAddressesUpdateMutationVariables
  >,
): UseMutationResult<
  EmployeeAddressesUpdateMutationData,
  Error,
  EmployeeAddressesUpdateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildEmployeeAddressesUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyEmployeeAddressesUpdate(): MutationKey {
  return ["@gusto/embedded-api", "employeeAddresses", "update"];
}

export function buildEmployeeAddressesUpdateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: EmployeeAddressesUpdateMutationVariables,
  ) => Promise<EmployeeAddressesUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyEmployeeAddressesUpdate(),
    mutationFn: function employeeAddressesUpdateMutationFn({
      request,
      options,
    }): Promise<EmployeeAddressesUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(employeeAddressesUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
