/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { externalPayrollsUpdate } from "../funcs/externalPayrollsUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ExternalPayrollsUpdateMutationVariables = {
  request: operations.PutV1ExternalPayrollRequest;
  options?: RequestOptions;
};

export type ExternalPayrollsUpdateMutationData = components.ExternalPayroll;

/**
 * Update an external payroll
 *
 * @remarks
 * Update an external payroll with a list of external payroll items
 *
 * scope: `external_payrolls:write`
 */
export function useExternalPayrollsUpdateMutation(
  options?: MutationHookOptions<
    ExternalPayrollsUpdateMutationData,
    Error,
    ExternalPayrollsUpdateMutationVariables
  >,
): UseMutationResult<
  ExternalPayrollsUpdateMutationData,
  Error,
  ExternalPayrollsUpdateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildExternalPayrollsUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyExternalPayrollsUpdate(): MutationKey {
  return ["@gusto/embedded-api", "externalPayrolls", "update"];
}

export function buildExternalPayrollsUpdateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ExternalPayrollsUpdateMutationVariables,
  ) => Promise<ExternalPayrollsUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyExternalPayrollsUpdate(),
    mutationFn: function externalPayrollsUpdateMutationFn({
      request,
      options,
    }): Promise<ExternalPayrollsUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(externalPayrollsUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
