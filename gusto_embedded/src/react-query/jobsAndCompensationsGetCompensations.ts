/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { jobsAndCompensationsGetCompensations } from "../funcs/jobsAndCompensationsGetCompensations.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1JobsJobIdCompensationsQueryParamInclude,
  GetV1JobsJobIdCompensationsRequest,
  GetV1JobsJobIdCompensationsResponse,
} from "../models/operations/getv1jobsjobidcompensations.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type JobsAndCompensationsGetCompensationsQueryData =
  GetV1JobsJobIdCompensationsResponse;

/**
 * Get compensations for a job
 *
 * @remarks
 * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. By default the API returns only the current compensation - see the `include` query parameter for retrieving all compensations.
 *
 * Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same `job_uuid` as another will fail with a relevant error.
 *
 * Use `flsa_status` to determine if an employee is eligible for overtime.
 *
 * scope: `jobs:read`
 */
export function useJobsAndCompensationsGetCompensations(
  request: GetV1JobsJobIdCompensationsRequest,
  options?: QueryHookOptions<JobsAndCompensationsGetCompensationsQueryData>,
): UseQueryResult<JobsAndCompensationsGetCompensationsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildJobsAndCompensationsGetCompensationsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get compensations for a job
 *
 * @remarks
 * Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. By default the API returns only the current compensation - see the `include` query parameter for retrieving all compensations.
 *
 * Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same `job_uuid` as another will fail with a relevant error.
 *
 * Use `flsa_status` to determine if an employee is eligible for overtime.
 *
 * scope: `jobs:read`
 */
export function useJobsAndCompensationsGetCompensationsSuspense(
  request: GetV1JobsJobIdCompensationsRequest,
  options?: SuspenseQueryHookOptions<
    JobsAndCompensationsGetCompensationsQueryData
  >,
): UseSuspenseQueryResult<
  JobsAndCompensationsGetCompensationsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildJobsAndCompensationsGetCompensationsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchJobsAndCompensationsGetCompensations(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1JobsJobIdCompensationsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildJobsAndCompensationsGetCompensationsQuery(
      client$,
      request,
    ),
  });
}

export function setJobsAndCompensationsGetCompensationsData(
  client: QueryClient,
  queryKeyBase: [
    jobId: string,
    parameters: {
      page?: number | undefined;
      per?: number | undefined;
      include?: GetV1JobsJobIdCompensationsQueryParamInclude | undefined;
      xGustoAPIVersion?: VersionHeader | undefined;
    },
  ],
  data: JobsAndCompensationsGetCompensationsQueryData,
): JobsAndCompensationsGetCompensationsQueryData | undefined {
  const key = queryKeyJobsAndCompensationsGetCompensations(...queryKeyBase);

  return client.setQueryData<JobsAndCompensationsGetCompensationsQueryData>(
    key,
    data,
  );
}

export function invalidateJobsAndCompensationsGetCompensations(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      jobId: string,
      parameters: {
        page?: number | undefined;
        per?: number | undefined;
        include?: GetV1JobsJobIdCompensationsQueryParamInclude | undefined;
        xGustoAPIVersion?: VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "jobsAndCompensations",
      "getCompensations",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllJobsAndCompensationsGetCompensations(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "jobsAndCompensations",
      "getCompensations",
    ],
  });
}

export function buildJobsAndCompensationsGetCompensationsQuery(
  client$: GustoEmbeddedCore,
  request: GetV1JobsJobIdCompensationsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<JobsAndCompensationsGetCompensationsQueryData>;
} {
  return {
    queryKey: queryKeyJobsAndCompensationsGetCompensations(request.jobId, {
      page: request.page,
      per: request.per,
      include: request.include,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function jobsAndCompensationsGetCompensationsQueryFn(
      ctx,
    ): Promise<JobsAndCompensationsGetCompensationsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(jobsAndCompensationsGetCompensations(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyJobsAndCompensationsGetCompensations(
  jobId: string,
  parameters: {
    page?: number | undefined;
    per?: number | undefined;
    include?: GetV1JobsJobIdCompensationsQueryParamInclude | undefined;
    xGustoAPIVersion?: VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "jobsAndCompensations",
    "getCompensations",
    jobId,
    parameters,
  ];
}
