/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsGetPayStub } from "../funcs/payrollsGetPayStub.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest,
  GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse,
} from "../models/operations/getv1payrollspayrolluuidemployeesemployeeuuidpaystub.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PayrollsGetPayStubQueryData =
  GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse;

/**
 * Get an employee pay stub (pdf)
 *
 * @remarks
 * Get an employee's pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.
 *
 * scope: `pay_stubs:read`
 */
export function usePayrollsGetPayStub(
  request: GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest,
  options?: QueryHookOptions<PayrollsGetPayStubQueryData>,
): UseQueryResult<PayrollsGetPayStubQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildPayrollsGetPayStubQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get an employee pay stub (pdf)
 *
 * @remarks
 * Get an employee's pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.
 *
 * scope: `pay_stubs:read`
 */
export function usePayrollsGetPayStubSuspense(
  request: GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest,
  options?: SuspenseQueryHookOptions<PayrollsGetPayStubQueryData>,
): UseSuspenseQueryResult<PayrollsGetPayStubQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildPayrollsGetPayStubQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPayrollsGetPayStub(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPayrollsGetPayStubQuery(
      client$,
      request,
    ),
  });
}

export function setPayrollsGetPayStubData(
  client: QueryClient,
  queryKeyBase: [
    payrollId: string,
    employeeId: string,
    parameters: { xGustoAPIVersion?: VersionHeader | undefined },
  ],
  data: PayrollsGetPayStubQueryData,
): PayrollsGetPayStubQueryData | undefined {
  const key = queryKeyPayrollsGetPayStub(...queryKeyBase);

  return client.setQueryData<PayrollsGetPayStubQueryData>(key, data);
}

export function invalidatePayrollsGetPayStub(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      payrollId: string,
      employeeId: string,
      parameters: { xGustoAPIVersion?: VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Payrolls",
      "getPayStub",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllPayrollsGetPayStub(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Payrolls", "getPayStub"],
  });
}

export function buildPayrollsGetPayStubQuery(
  client$: GustoEmbeddedCore,
  request: GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<PayrollsGetPayStubQueryData>;
} {
  return {
    queryKey: queryKeyPayrollsGetPayStub(
      request.payrollId,
      request.employeeId,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function payrollsGetPayStubQueryFn(
      ctx,
    ): Promise<PayrollsGetPayStubQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(payrollsGetPayStub(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyPayrollsGetPayStub(
  payrollId: string,
  employeeId: string,
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Payrolls",
    "getPayStub",
    payrollId,
    employeeId,
    parameters,
  ];
}
