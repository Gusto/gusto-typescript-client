/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeAddressesDelete } from "../funcs/employeeAddressesDelete.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type EmployeeAddressesDeleteMutationVariables = {
  request: operations.DeleteV1WorkAddressesWorkAddressUuidRequest;
  options?: RequestOptions;
};

export type EmployeeAddressesDeleteMutationData = void;

/**
 * Delete an employee's work address
 *
 * @remarks
 * Used for deleting an employee's work address.  Cannot delete the employee's active work address.
 *
 * scope: `employees:manage`
 */
export function useEmployeeAddressesDeleteMutation(
  options?: MutationHookOptions<
    EmployeeAddressesDeleteMutationData,
    Error,
    EmployeeAddressesDeleteMutationVariables
  >,
): UseMutationResult<
  EmployeeAddressesDeleteMutationData,
  Error,
  EmployeeAddressesDeleteMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildEmployeeAddressesDeleteMutation(client, options),
    ...options,
  });
}

export function mutationKeyEmployeeAddressesDelete(): MutationKey {
  return ["@gusto/embedded-api", "employeeAddresses", "delete"];
}

export function buildEmployeeAddressesDeleteMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: EmployeeAddressesDeleteMutationVariables,
  ) => Promise<EmployeeAddressesDeleteMutationData>;
} {
  return {
    mutationKey: mutationKeyEmployeeAddressesDelete(),
    mutationFn: function employeeAddressesDeleteMutationFn({
      request,
      options,
    }): Promise<EmployeeAddressesDeleteMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(employeeAddressesDelete(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
