/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { notificationsGetCompanyNotifications } from "../funcs/notificationsGetCompanyNotifications.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetCompanyNotificationsHeaderXGustoAPIVersion,
  GetCompanyNotificationsRequest,
  GetCompanyNotificationsResponse,
  Status,
} from "../models/operations/getcompanynotifications.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type NotificationsGetCompanyNotificationsQueryData =
  GetCompanyNotificationsResponse;

/**
 * Get notifications for company
 *
 * @remarks
 * Returns all notifications relevant for the given company.
 *
 * scope: `notifications:read`
 */
export function useNotificationsGetCompanyNotifications(
  request: GetCompanyNotificationsRequest,
  options?: QueryHookOptions<NotificationsGetCompanyNotificationsQueryData>,
): UseQueryResult<NotificationsGetCompanyNotificationsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildNotificationsGetCompanyNotificationsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get notifications for company
 *
 * @remarks
 * Returns all notifications relevant for the given company.
 *
 * scope: `notifications:read`
 */
export function useNotificationsGetCompanyNotificationsSuspense(
  request: GetCompanyNotificationsRequest,
  options?: SuspenseQueryHookOptions<
    NotificationsGetCompanyNotificationsQueryData
  >,
): UseSuspenseQueryResult<
  NotificationsGetCompanyNotificationsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildNotificationsGetCompanyNotificationsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchNotificationsGetCompanyNotifications(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetCompanyNotificationsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildNotificationsGetCompanyNotificationsQuery(
      client$,
      request,
    ),
  });
}

export function setNotificationsGetCompanyNotificationsData(
  client: QueryClient,
  queryKeyBase: [
    companyUuid: string,
    parameters: {
      status?: Status | undefined;
      xGustoAPIVersion?:
        | GetCompanyNotificationsHeaderXGustoAPIVersion
        | undefined;
      page?: number | undefined;
      per?: number | undefined;
    },
  ],
  data: NotificationsGetCompanyNotificationsQueryData,
): NotificationsGetCompanyNotificationsQueryData | undefined {
  const key = queryKeyNotificationsGetCompanyNotifications(...queryKeyBase);

  return client.setQueryData<NotificationsGetCompanyNotificationsQueryData>(
    key,
    data,
  );
}

export function invalidateNotificationsGetCompanyNotifications(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyUuid: string,
      parameters: {
        status?: Status | undefined;
        xGustoAPIVersion?:
          | GetCompanyNotificationsHeaderXGustoAPIVersion
          | undefined;
        page?: number | undefined;
        per?: number | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Notifications",
      "getCompanyNotifications",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllNotificationsGetCompanyNotifications(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Notifications",
      "getCompanyNotifications",
    ],
  });
}

export function buildNotificationsGetCompanyNotificationsQuery(
  client$: GustoEmbeddedCore,
  request: GetCompanyNotificationsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<NotificationsGetCompanyNotificationsQueryData>;
} {
  return {
    queryKey: queryKeyNotificationsGetCompanyNotifications(
      request.companyUuid,
      {
        status: request.status,
        xGustoAPIVersion: request.xGustoAPIVersion,
        page: request.page,
        per: request.per,
      },
    ),
    queryFn: async function notificationsGetCompanyNotificationsQueryFn(
      ctx,
    ): Promise<NotificationsGetCompanyNotificationsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(notificationsGetCompanyNotifications(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyNotificationsGetCompanyNotifications(
  companyUuid: string,
  parameters: {
    status?: Status | undefined;
    xGustoAPIVersion?:
      | GetCompanyNotificationsHeaderXGustoAPIVersion
      | undefined;
    page?: number | undefined;
    per?: number | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Notifications",
    "getCompanyNotifications",
    companyUuid,
    parameters,
  ];
}
