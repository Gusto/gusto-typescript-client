/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companiesGetCompaniesCompanyUuidSuspensions } from "../funcs/companiesGetCompaniesCompanyUuidSuspensions.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetCompaniesCompanyUuidSuspensionsRequest,
  GetCompaniesCompanyUuidSuspensionsResponse,
} from "../models/operations/getcompaniescompanyuuidsuspensions.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CompaniesGetCompaniesCompanyUuidSuspensionsQueryData =
  GetCompaniesCompanyUuidSuspensionsResponse;

/**
 * Get suspensions for this company
 *
 * @remarks
 * Get existing suspension records for this company. A company may have multiple suspension records if they have suspended their Gusto account more than once.
 *
 * > ðŸ“˜ To check if company is already suspended
 * >
 * > To determine if a company is _currently_ suspended, use the `is_suspended` and `company_status` fields in the [Get a company](https://docs.gusto.com/embedded-payroll/reference/get-v1-companies) endpoint.
 *
 * scope: `company_suspensions:read`
 */
export function useCompaniesGetCompaniesCompanyUuidSuspensions(
  request: GetCompaniesCompanyUuidSuspensionsRequest,
  options?: QueryHookOptions<
    CompaniesGetCompaniesCompanyUuidSuspensionsQueryData
  >,
): UseQueryResult<CompaniesGetCompaniesCompanyUuidSuspensionsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildCompaniesGetCompaniesCompanyUuidSuspensionsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get suspensions for this company
 *
 * @remarks
 * Get existing suspension records for this company. A company may have multiple suspension records if they have suspended their Gusto account more than once.
 *
 * > ðŸ“˜ To check if company is already suspended
 * >
 * > To determine if a company is _currently_ suspended, use the `is_suspended` and `company_status` fields in the [Get a company](https://docs.gusto.com/embedded-payroll/reference/get-v1-companies) endpoint.
 *
 * scope: `company_suspensions:read`
 */
export function useCompaniesGetCompaniesCompanyUuidSuspensionsSuspense(
  request: GetCompaniesCompanyUuidSuspensionsRequest,
  options?: SuspenseQueryHookOptions<
    CompaniesGetCompaniesCompanyUuidSuspensionsQueryData
  >,
): UseSuspenseQueryResult<
  CompaniesGetCompaniesCompanyUuidSuspensionsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildCompaniesGetCompaniesCompanyUuidSuspensionsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCompaniesGetCompaniesCompanyUuidSuspensions(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetCompaniesCompanyUuidSuspensionsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCompaniesGetCompaniesCompanyUuidSuspensionsQuery(
      client$,
      request,
    ),
  });
}

export function setCompaniesGetCompaniesCompanyUuidSuspensionsData(
  client: QueryClient,
  queryKeyBase: [
    companyUuid: string,
    parameters: { xGustoAPIVersion?: VersionHeader | undefined },
  ],
  data: CompaniesGetCompaniesCompanyUuidSuspensionsQueryData,
): CompaniesGetCompaniesCompanyUuidSuspensionsQueryData | undefined {
  const key = queryKeyCompaniesGetCompaniesCompanyUuidSuspensions(
    ...queryKeyBase,
  );

  return client.setQueryData<
    CompaniesGetCompaniesCompanyUuidSuspensionsQueryData
  >(key, data);
}

export function invalidateCompaniesGetCompaniesCompanyUuidSuspensions(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyUuid: string,
      parameters: { xGustoAPIVersion?: VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Companies",
      "getCompaniesCompanyUuidSuspensions",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCompaniesGetCompaniesCompanyUuidSuspensions(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Companies",
      "getCompaniesCompanyUuidSuspensions",
    ],
  });
}

export function buildCompaniesGetCompaniesCompanyUuidSuspensionsQuery(
  client$: GustoEmbeddedCore,
  request: GetCompaniesCompanyUuidSuspensionsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<CompaniesGetCompaniesCompanyUuidSuspensionsQueryData>;
} {
  return {
    queryKey: queryKeyCompaniesGetCompaniesCompanyUuidSuspensions(
      request.companyUuid,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function companiesGetCompaniesCompanyUuidSuspensionsQueryFn(
      ctx,
    ): Promise<CompaniesGetCompaniesCompanyUuidSuspensionsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(companiesGetCompaniesCompanyUuidSuspensions(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCompaniesGetCompaniesCompanyUuidSuspensions(
  companyUuid: string,
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Companies",
    "getCompaniesCompanyUuidSuspensions",
    companyUuid,
    parameters,
  ];
}
