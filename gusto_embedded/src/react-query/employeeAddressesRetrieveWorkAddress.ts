/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeAddressesRetrieveWorkAddress } from "../funcs/employeeAddressesRetrieveWorkAddress.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1WorkAddressesWorkAddressUuidRequest,
  GetV1WorkAddressesWorkAddressUuidResponse,
} from "../models/operations/getv1workaddressesworkaddressuuid.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EmployeeAddressesRetrieveWorkAddressQueryData =
  GetV1WorkAddressesWorkAddressUuidResponse;

/**
 * Get an employee work address
 *
 * @remarks
 * The work address of an employee is used for payroll tax purposes.
 *
 * scope: `employees:read`
 */
export function useEmployeeAddressesRetrieveWorkAddress(
  request: GetV1WorkAddressesWorkAddressUuidRequest,
  options?: QueryHookOptions<EmployeeAddressesRetrieveWorkAddressQueryData>,
): UseQueryResult<EmployeeAddressesRetrieveWorkAddressQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildEmployeeAddressesRetrieveWorkAddressQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get an employee work address
 *
 * @remarks
 * The work address of an employee is used for payroll tax purposes.
 *
 * scope: `employees:read`
 */
export function useEmployeeAddressesRetrieveWorkAddressSuspense(
  request: GetV1WorkAddressesWorkAddressUuidRequest,
  options?: SuspenseQueryHookOptions<
    EmployeeAddressesRetrieveWorkAddressQueryData
  >,
): UseSuspenseQueryResult<
  EmployeeAddressesRetrieveWorkAddressQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildEmployeeAddressesRetrieveWorkAddressQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEmployeeAddressesRetrieveWorkAddress(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1WorkAddressesWorkAddressUuidRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEmployeeAddressesRetrieveWorkAddressQuery(
      client$,
      request,
    ),
  });
}

export function setEmployeeAddressesRetrieveWorkAddressData(
  client: QueryClient,
  queryKeyBase: [
    workAddressUuid: string,
    parameters: { xGustoAPIVersion?: VersionHeader | undefined },
  ],
  data: EmployeeAddressesRetrieveWorkAddressQueryData,
): EmployeeAddressesRetrieveWorkAddressQueryData | undefined {
  const key = queryKeyEmployeeAddressesRetrieveWorkAddress(...queryKeyBase);

  return client.setQueryData<EmployeeAddressesRetrieveWorkAddressQueryData>(
    key,
    data,
  );
}

export function invalidateEmployeeAddressesRetrieveWorkAddress(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      workAddressUuid: string,
      parameters: { xGustoAPIVersion?: VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "employeeAddresses",
      "retrieveWorkAddress",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllEmployeeAddressesRetrieveWorkAddress(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "employeeAddresses",
      "retrieveWorkAddress",
    ],
  });
}

export function buildEmployeeAddressesRetrieveWorkAddressQuery(
  client$: GustoEmbeddedCore,
  request: GetV1WorkAddressesWorkAddressUuidRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<EmployeeAddressesRetrieveWorkAddressQueryData>;
} {
  return {
    queryKey: queryKeyEmployeeAddressesRetrieveWorkAddress(
      request.workAddressUuid,
      { xGustoAPIVersion: request.xGustoAPIVersion },
    ),
    queryFn: async function employeeAddressesRetrieveWorkAddressQueryFn(
      ctx,
    ): Promise<EmployeeAddressesRetrieveWorkAddressQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(employeeAddressesRetrieveWorkAddress(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyEmployeeAddressesRetrieveWorkAddress(
  workAddressUuid: string,
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "employeeAddresses",
    "retrieveWorkAddress",
    workAddressUuid,
    parameters,
  ];
}
