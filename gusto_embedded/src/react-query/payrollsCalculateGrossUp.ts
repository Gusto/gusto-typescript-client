/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsCalculateGrossUp } from "../funcs/payrollsCalculateGrossUp.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type PayrollsCalculateGrossUpMutationVariables = {
  request: operations.PostPayrollsGrossUpPayrollUuidRequest;
  options?: RequestOptions;
};

export type PayrollsCalculateGrossUpMutationData =
  operations.PostPayrollsGrossUpPayrollUuidResponse;

/**
 * Calculate gross up
 *
 * @remarks
 * Calculates gross up earnings for an employee's payroll, given net earnings. This endpoint is only applicable to off-cycle unprocessed payrolls.
 *
 * The gross up amount must then be mapped to the corresponding fixed compensation earning type to get the correct payroll amount. For example, for bonus off-cycles, the gross up amount should be set with the Bonus earning type in the payroll `fixed_compensations` field.
 *
 * scope: `payrolls:run`
 */
export function usePayrollsCalculateGrossUpMutation(
  options?: MutationHookOptions<
    PayrollsCalculateGrossUpMutationData,
    Error,
    PayrollsCalculateGrossUpMutationVariables
  >,
): UseMutationResult<
  PayrollsCalculateGrossUpMutationData,
  Error,
  PayrollsCalculateGrossUpMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildPayrollsCalculateGrossUpMutation(client, options),
    ...options,
  });
}

export function mutationKeyPayrollsCalculateGrossUp(): MutationKey {
  return ["@gusto/embedded-api", "Payrolls", "calculateGrossUp"];
}

export function buildPayrollsCalculateGrossUpMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: PayrollsCalculateGrossUpMutationVariables,
  ) => Promise<PayrollsCalculateGrossUpMutationData>;
} {
  return {
    mutationKey: mutationKeyPayrollsCalculateGrossUp(),
    mutationFn: function payrollsCalculateGrossUpMutationFn({
      request,
      options,
    }): Promise<PayrollsCalculateGrossUpMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(payrollsCalculateGrossUp(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
