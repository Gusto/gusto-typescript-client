/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { employeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany } from "../funcs/employeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData =
  Array<components.YtdBenefitAmountsFromDifferentCompany>;

/**
 * Get year-to-date benefit amounts from a different company
 *
 * @remarks
 * Retrieves year-to-date benefit amounts that were contributed at a different company for the specified employee.
 * Returns benefit amounts for the requested tax year (defaults to current year if not specified).
 *
 * This endpoint only supports retrieving outside contributions for 401(k) benefits.
 *
 * scope: `employee_benefits:read`
 */
export function useEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany(
  request: operations.GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
  options?: QueryHookOptions<
    EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData
  >,
): UseQueryResult<
  EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get year-to-date benefit amounts from a different company
 *
 * @remarks
 * Retrieves year-to-date benefit amounts that were contributed at a different company for the specified employee.
 * Returns benefit amounts for the requested tax year (defaults to current year if not specified).
 *
 * This endpoint only supports retrieving outside contributions for 401(k) benefits.
 *
 * scope: `employee_benefits:read`
 */
export function useEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanySuspense(
  request: operations.GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
  options?: SuspenseQueryHookOptions<
    EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData
  >,
): UseSuspenseQueryResult<
  EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQuery(
      client$,
      request,
    ),
  });
}

export function setEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyData(
  client: QueryClient,
  queryKeyBase: [
    employeeId: string,
    parameters: {
      taxYear?: number | undefined;
      xGustoAPIVersion?: components.VersionHeader | undefined;
    },
  ],
  data:
    EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData,
):
  | EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData
  | undefined
{
  const key =
    queryKeyEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany(
      ...queryKeyBase,
    );

  return client.setQueryData<
    EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData
  >(key, data);
}

export function invalidateEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      employeeId: string,
      parameters: {
        taxYear?: number | undefined;
        xGustoAPIVersion?: components.VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "employeeBenefits",
      "getEmployeeYtdBenefitAmountsFromDifferentCompany",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "employeeBenefits",
      "getEmployeeYtdBenefitAmountsFromDifferentCompany",
    ],
  });
}

export function buildEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<
    EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData
  >;
} {
  return {
    queryKey:
      queryKeyEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany(
        request.employeeId,
        {
          taxYear: request.taxYear,
          xGustoAPIVersion: request.xGustoAPIVersion,
        },
      ),
    queryFn:
      async function employeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryFn(
        ctx,
      ): Promise<
        EmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompanyQueryData
      > {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(
          employeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany(
            client$,
            request,
            mergedOptions,
          ),
        );
      },
  };
}

export function queryKeyEmployeeBenefitsGetEmployeeYtdBenefitAmountsFromDifferentCompany(
  employeeId: string,
  parameters: {
    taxYear?: number | undefined;
    xGustoAPIVersion?: components.VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "employeeBenefits",
    "getEmployeeYtdBenefitAmountsFromDifferentCompany",
    employeeId,
    parameters,
  ];
}
