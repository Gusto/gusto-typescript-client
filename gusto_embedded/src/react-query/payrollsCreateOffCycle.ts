/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsCreateOffCycle } from "../funcs/payrollsCreateOffCycle.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type PayrollsCreateOffCycleMutationVariables = {
  request: operations.PostV1CompaniesCompanyIdPayrollsRequest;
  options?: RequestOptions;
};

export type PayrollsCreateOffCycleMutationData = components.PayrollPrepared;

/**
 * Create an off-cycle payroll
 *
 * @remarks
 * Creates a new, unprocessed, off-cycle payroll.
 *
 * ## `off_cycle_reason`
 * By default:
 * - External benefits and deductions will be included when the `off_cycle_reason` is set to `Correction`.
 * - All benefits and deductions are blocked when the `off_cycle_reason` is set to `Bonus`.
 *
 * These elections can be overridden with the `skip_regular_deductions` boolean.
 *
 * scope: `payrolls:run`
 */
export function usePayrollsCreateOffCycleMutation(
  options?: MutationHookOptions<
    PayrollsCreateOffCycleMutationData,
    Error,
    PayrollsCreateOffCycleMutationVariables
  >,
): UseMutationResult<
  PayrollsCreateOffCycleMutationData,
  Error,
  PayrollsCreateOffCycleMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildPayrollsCreateOffCycleMutation(client, options),
    ...options,
  });
}

export function mutationKeyPayrollsCreateOffCycle(): MutationKey {
  return ["@gusto/embedded-api", "Payrolls", "createOffCycle"];
}

export function buildPayrollsCreateOffCycleMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: PayrollsCreateOffCycleMutationVariables,
  ) => Promise<PayrollsCreateOffCycleMutationData>;
} {
  return {
    mutationKey: mutationKeyPayrollsCreateOffCycle(),
    mutationFn: function payrollsCreateOffCycleMutationFn({
      request,
      options,
    }): Promise<PayrollsCreateOffCycleMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(payrollsCreateOffCycle(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
