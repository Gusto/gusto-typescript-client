/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsUpdate } from "../funcs/payrollsUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type PayrollsUpdateMutationVariables = {
  request: operations.PutV1CompaniesCompanyIdPayrollsRequest;
  options?: RequestOptions;
};

export type PayrollsUpdateMutationData =
  operations.PutV1CompaniesCompanyIdPayrollsResponse;

/**
 * Update a payroll by ID
 *
 * @remarks
 * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed**
 * payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values
 * of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they
 * will not be removed from the payroll.
 *
 * scope: `payrolls:write`
 */
export function usePayrollsUpdateMutation(
  options?: MutationHookOptions<
    PayrollsUpdateMutationData,
    Error,
    PayrollsUpdateMutationVariables
  >,
): UseMutationResult<
  PayrollsUpdateMutationData,
  Error,
  PayrollsUpdateMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildPayrollsUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyPayrollsUpdate(): MutationKey {
  return ["@gusto/embedded-api", "Payrolls", "update"];
}

export function buildPayrollsUpdateMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: PayrollsUpdateMutationVariables,
  ) => Promise<PayrollsUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyPayrollsUpdate(),
    mutationFn: function payrollsUpdateMutationFn({
      request,
      options,
    }): Promise<PayrollsUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(payrollsUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
