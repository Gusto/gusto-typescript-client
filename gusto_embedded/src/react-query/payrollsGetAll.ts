/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsGetAll } from "../funcs/payrollsGetAll.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PayrollsGetAllQueryData = Array<components.PayrollMinimal>;

/**
 * Get all payrolls for a company
 *
 * @remarks
 * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.
 *
 * By default, will return processed, regular payrolls for the past 6 months.
 *
 * Notes:
 * * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent.
 * * end_date can be at most 3 months in the future and start_date and end_date can't be more than 1 year apart.
 *
 * scope: `payrolls:read`
 */
export function usePayrollsGetAll(
  request: operations.GetV1CompaniesCompanyIdPayrollsRequest,
  options?: QueryHookOptions<PayrollsGetAllQueryData>,
): UseQueryResult<PayrollsGetAllQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildPayrollsGetAllQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get all payrolls for a company
 *
 * @remarks
 * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, & end_date params.
 *
 * By default, will return processed, regular payrolls for the past 6 months.
 *
 * Notes:
 * * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent.
 * * end_date can be at most 3 months in the future and start_date and end_date can't be more than 1 year apart.
 *
 * scope: `payrolls:read`
 */
export function usePayrollsGetAllSuspense(
  request: operations.GetV1CompaniesCompanyIdPayrollsRequest,
  options?: SuspenseQueryHookOptions<PayrollsGetAllQueryData>,
): UseSuspenseQueryResult<PayrollsGetAllQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildPayrollsGetAllQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPayrollsGetAll(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyIdPayrollsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPayrollsGetAllQuery(
      client$,
      request,
    ),
  });
}

export function setPayrollsGetAllData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    parameters: {
      processingStatuses?: Array<operations.ProcessingStatuses> | undefined;
      payrollTypes?: Array<operations.PayrollTypes> | undefined;
      include?:
        | Array<operations.GetV1CompaniesCompanyIdPayrollsQueryParamInclude>
        | undefined;
      startDate?: string | undefined;
      endDate?: string | undefined;
      sortOrder?: components.SortOrder | undefined;
      xGustoAPIVersion?: components.VersionHeader | undefined;
    },
  ],
  data: PayrollsGetAllQueryData,
): PayrollsGetAllQueryData | undefined {
  const key = queryKeyPayrollsGetAll(...queryKeyBase);

  return client.setQueryData<PayrollsGetAllQueryData>(key, data);
}

export function invalidatePayrollsGetAll(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      parameters: {
        processingStatuses?: Array<operations.ProcessingStatuses> | undefined;
        payrollTypes?: Array<operations.PayrollTypes> | undefined;
        include?:
          | Array<operations.GetV1CompaniesCompanyIdPayrollsQueryParamInclude>
          | undefined;
        startDate?: string | undefined;
        endDate?: string | undefined;
        sortOrder?: components.SortOrder | undefined;
        xGustoAPIVersion?: components.VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Payrolls", "getAll", ...queryKeyBase],
  });
}

export function invalidateAllPayrollsGetAll(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Payrolls", "getAll"],
  });
}

export function buildPayrollsGetAllQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyIdPayrollsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<PayrollsGetAllQueryData>;
} {
  return {
    queryKey: queryKeyPayrollsGetAll(request.companyId, {
      processingStatuses: request.processingStatuses,
      payrollTypes: request.payrollTypes,
      include: request.include,
      startDate: request.startDate,
      endDate: request.endDate,
      sortOrder: request.sortOrder,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function payrollsGetAllQueryFn(
      ctx,
    ): Promise<PayrollsGetAllQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(payrollsGetAll(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyPayrollsGetAll(
  companyId: string,
  parameters: {
    processingStatuses?: Array<operations.ProcessingStatuses> | undefined;
    payrollTypes?: Array<operations.PayrollTypes> | undefined;
    include?:
      | Array<operations.GetV1CompaniesCompanyIdPayrollsQueryParamInclude>
      | undefined;
    startDate?: string | undefined;
    endDate?: string | undefined;
    sortOrder?: components.SortOrder | undefined;
    xGustoAPIVersion?: components.VersionHeader | undefined;
  },
): QueryKey {
  return ["@gusto/embedded-api", "Payrolls", "getAll", companyId, parameters];
}
