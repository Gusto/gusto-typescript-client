/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companyBenefitsGetSupportedBenefit } from "../funcs/companyBenefitsGetSupportedBenefit.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type CompanyBenefitsGetSupportedBenefitQueryData =
  components.SupportedBenefit;

/**
 * Get a supported benefit by ID
 *
 * @remarks
 * Returns a benefit supported by Gusto.
 *
 * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
 *
 * scope: `benefits:read`
 */
export function useCompanyBenefitsGetSupportedBenefit(
  request: operations.GetV1BenefitsBenefitIdRequest,
  options?: QueryHookOptions<CompanyBenefitsGetSupportedBenefitQueryData>,
): UseQueryResult<CompanyBenefitsGetSupportedBenefitQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildCompanyBenefitsGetSupportedBenefitQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a supported benefit by ID
 *
 * @remarks
 * Returns a benefit supported by Gusto.
 *
 * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
 *
 * scope: `benefits:read`
 */
export function useCompanyBenefitsGetSupportedBenefitSuspense(
  request: operations.GetV1BenefitsBenefitIdRequest,
  options?: SuspenseQueryHookOptions<
    CompanyBenefitsGetSupportedBenefitQueryData
  >,
): UseSuspenseQueryResult<CompanyBenefitsGetSupportedBenefitQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildCompanyBenefitsGetSupportedBenefitQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchCompanyBenefitsGetSupportedBenefit(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetV1BenefitsBenefitIdRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildCompanyBenefitsGetSupportedBenefitQuery(
      client$,
      request,
    ),
  });
}

export function setCompanyBenefitsGetSupportedBenefitData(
  client: QueryClient,
  queryKeyBase: [
    benefitId: string,
    parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
  ],
  data: CompanyBenefitsGetSupportedBenefitQueryData,
): CompanyBenefitsGetSupportedBenefitQueryData | undefined {
  const key = queryKeyCompanyBenefitsGetSupportedBenefit(...queryKeyBase);

  return client.setQueryData<CompanyBenefitsGetSupportedBenefitQueryData>(
    key,
    data,
  );
}

export function invalidateCompanyBenefitsGetSupportedBenefit(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      benefitId: string,
      parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "companyBenefits",
      "getSupportedBenefit",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllCompanyBenefitsGetSupportedBenefit(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "companyBenefits", "getSupportedBenefit"],
  });
}

export function buildCompanyBenefitsGetSupportedBenefitQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetV1BenefitsBenefitIdRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<CompanyBenefitsGetSupportedBenefitQueryData>;
} {
  return {
    queryKey: queryKeyCompanyBenefitsGetSupportedBenefit(request.benefitId, {
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function companyBenefitsGetSupportedBenefitQueryFn(
      ctx,
    ): Promise<CompanyBenefitsGetSupportedBenefitQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(companyBenefitsGetSupportedBenefit(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyCompanyBenefitsGetSupportedBenefit(
  benefitId: string,
  parameters: { xGustoAPIVersion?: components.VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "companyBenefits",
    "getSupportedBenefit",
    benefitId,
    parameters,
  ];
}
