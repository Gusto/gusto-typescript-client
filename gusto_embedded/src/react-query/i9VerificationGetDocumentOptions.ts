/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { i9VerificationGetDocumentOptions } from "../funcs/i9VerificationGetDocumentOptions.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import { VersionHeader } from "../models/components/versionheader.js";
import {
  GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest,
  GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse,
} from "../models/operations/getv1employeesemployeeidi9authorizationdocumentoptions.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type I9VerificationGetDocumentOptionsQueryData =
  GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse;

/**
 * Get an employee's I-9 verification document options
 *
 * @remarks
 * An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint returns the possible document options based on the employee's authorization status. These options can then be used to create the I-9 verification documents.
 *
 * scope: `i9_authorizations:read`
 */
export function useI9VerificationGetDocumentOptions(
  request: GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest,
  options?: QueryHookOptions<I9VerificationGetDocumentOptionsQueryData>,
): UseQueryResult<I9VerificationGetDocumentOptionsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildI9VerificationGetDocumentOptionsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get an employee's I-9 verification document options
 *
 * @remarks
 * An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint returns the possible document options based on the employee's authorization status. These options can then be used to create the I-9 verification documents.
 *
 * scope: `i9_authorizations:read`
 */
export function useI9VerificationGetDocumentOptionsSuspense(
  request: GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest,
  options?: SuspenseQueryHookOptions<I9VerificationGetDocumentOptionsQueryData>,
): UseSuspenseQueryResult<I9VerificationGetDocumentOptionsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildI9VerificationGetDocumentOptionsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchI9VerificationGetDocumentOptions(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildI9VerificationGetDocumentOptionsQuery(
      client$,
      request,
    ),
  });
}

export function setI9VerificationGetDocumentOptionsData(
  client: QueryClient,
  queryKeyBase: [
    employeeId: string,
    parameters: { xGustoAPIVersion?: VersionHeader | undefined },
  ],
  data: I9VerificationGetDocumentOptionsQueryData,
): I9VerificationGetDocumentOptionsQueryData | undefined {
  const key = queryKeyI9VerificationGetDocumentOptions(...queryKeyBase);

  return client.setQueryData<I9VerificationGetDocumentOptionsQueryData>(
    key,
    data,
  );
}

export function invalidateI9VerificationGetDocumentOptions(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      employeeId: string,
      parameters: { xGustoAPIVersion?: VersionHeader | undefined },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "i9Verification",
      "getDocumentOptions",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllI9VerificationGetDocumentOptions(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "i9Verification", "getDocumentOptions"],
  });
}

export function buildI9VerificationGetDocumentOptionsQuery(
  client$: GustoEmbeddedCore,
  request: GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<I9VerificationGetDocumentOptionsQueryData>;
} {
  return {
    queryKey: queryKeyI9VerificationGetDocumentOptions(request.employeeId, {
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function i9VerificationGetDocumentOptionsQueryFn(
      ctx,
    ): Promise<I9VerificationGetDocumentOptionsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(i9VerificationGetDocumentOptions(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyI9VerificationGetDocumentOptions(
  employeeId: string,
  parameters: { xGustoAPIVersion?: VersionHeader | undefined },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "i9Verification",
    "getDocumentOptions",
    employeeId,
    parameters,
  ];
}
