/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { externalPayrollsUpdateTaxLiabilities } from "../funcs/externalPayrollsUpdateTaxLiabilities.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type ExternalPayrollsUpdateTaxLiabilitiesMutationVariables = {
  request: operations.PutV1TaxLiabilitiesRequest;
  options?: RequestOptions;
};

export type ExternalPayrollsUpdateTaxLiabilitiesMutationData = Array<
  Array<components.TaxLiabilitiesSelections>
>;

/**
 * Update tax liabilities
 *
 * @remarks
 * Update tax liabilities for a company.
 *
 * scope: `external_payrolls:write`
 */
export function useExternalPayrollsUpdateTaxLiabilitiesMutation(
  options?: MutationHookOptions<
    ExternalPayrollsUpdateTaxLiabilitiesMutationData,
    Error,
    ExternalPayrollsUpdateTaxLiabilitiesMutationVariables
  >,
): UseMutationResult<
  ExternalPayrollsUpdateTaxLiabilitiesMutationData,
  Error,
  ExternalPayrollsUpdateTaxLiabilitiesMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildExternalPayrollsUpdateTaxLiabilitiesMutation(client, options),
    ...options,
  });
}

export function mutationKeyExternalPayrollsUpdateTaxLiabilities(): MutationKey {
  return ["@gusto/embedded-api", "externalPayrolls", "updateTaxLiabilities"];
}

export function buildExternalPayrollsUpdateTaxLiabilitiesMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: ExternalPayrollsUpdateTaxLiabilitiesMutationVariables,
  ) => Promise<ExternalPayrollsUpdateTaxLiabilitiesMutationData>;
} {
  return {
    mutationKey: mutationKeyExternalPayrollsUpdateTaxLiabilities(),
    mutationFn: function externalPayrollsUpdateTaxLiabilitiesMutationFn({
      request,
      options,
    }): Promise<ExternalPayrollsUpdateTaxLiabilitiesMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(externalPayrollsUpdateTaxLiabilities(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
