/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsGetApprovedReversals } from "../funcs/payrollsGetApprovedReversals.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PayrollsGetApprovedReversalsQueryData = components.PayrollReversal;

/**
 * Get approved payroll reversals
 *
 * @remarks
 * Returns all approved Payroll Reversals for a Company.
 *
 * scope: `payrolls:read`
 */
export function usePayrollsGetApprovedReversals(
  request: operations.GetV1CompaniesCompanyIdPayrollReversalsRequest,
  options?: QueryHookOptions<PayrollsGetApprovedReversalsQueryData>,
): UseQueryResult<PayrollsGetApprovedReversalsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildPayrollsGetApprovedReversalsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get approved payroll reversals
 *
 * @remarks
 * Returns all approved Payroll Reversals for a Company.
 *
 * scope: `payrolls:read`
 */
export function usePayrollsGetApprovedReversalsSuspense(
  request: operations.GetV1CompaniesCompanyIdPayrollReversalsRequest,
  options?: SuspenseQueryHookOptions<PayrollsGetApprovedReversalsQueryData>,
): UseSuspenseQueryResult<PayrollsGetApprovedReversalsQueryData, Error> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildPayrollsGetApprovedReversalsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPayrollsGetApprovedReversals(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyIdPayrollReversalsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPayrollsGetApprovedReversalsQuery(
      client$,
      request,
    ),
  });
}

export function setPayrollsGetApprovedReversalsData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    parameters: {
      page?: number | undefined;
      per?: number | undefined;
      xGustoAPIVersion?: components.VersionHeader | undefined;
    },
  ],
  data: PayrollsGetApprovedReversalsQueryData,
): PayrollsGetApprovedReversalsQueryData | undefined {
  const key = queryKeyPayrollsGetApprovedReversals(...queryKeyBase);

  return client.setQueryData<PayrollsGetApprovedReversalsQueryData>(key, data);
}

export function invalidatePayrollsGetApprovedReversals(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      parameters: {
        page?: number | undefined;
        per?: number | undefined;
        xGustoAPIVersion?: components.VersionHeader | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Payrolls",
      "getApprovedReversals",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllPayrollsGetApprovedReversals(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@gusto/embedded-api", "Payrolls", "getApprovedReversals"],
  });
}

export function buildPayrollsGetApprovedReversalsQuery(
  client$: GustoEmbeddedCore,
  request: operations.GetV1CompaniesCompanyIdPayrollReversalsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<PayrollsGetApprovedReversalsQueryData>;
} {
  return {
    queryKey: queryKeyPayrollsGetApprovedReversals(request.companyId, {
      page: request.page,
      per: request.per,
      xGustoAPIVersion: request.xGustoAPIVersion,
    }),
    queryFn: async function payrollsGetApprovedReversalsQueryFn(
      ctx,
    ): Promise<PayrollsGetApprovedReversalsQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(payrollsGetApprovedReversals(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyPayrollsGetApprovedReversals(
  companyId: string,
  parameters: {
    page?: number | undefined;
    per?: number | undefined;
    xGustoAPIVersion?: components.VersionHeader | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Payrolls",
    "getApprovedReversals",
    companyId,
    parameters,
  ];
}
