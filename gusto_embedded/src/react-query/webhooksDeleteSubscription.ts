/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { webhooksDeleteSubscription } from "../funcs/webhooksDeleteSubscription.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type WebhooksDeleteSubscriptionMutationVariables = {
  security: operations.DeleteV1WebhookSubscriptionUuidSecurity;
  request: operations.DeleteV1WebhookSubscriptionUuidRequest;
  options?: RequestOptions;
};

export type WebhooksDeleteSubscriptionMutationData =
  operations.DeleteV1WebhookSubscriptionUuidResponse;

/**
 * Delete a webhook subscription
 *
 * @remarks
 * Deletes the Webhook Subscription associated with the provided UUID.
 *
 * > ðŸ“˜ System Access Authentication
 * >
 * > This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
 *
 * scope: `webhook_subscriptions:write`
 */
export function useWebhooksDeleteSubscriptionMutation(
  options?: MutationHookOptions<
    WebhooksDeleteSubscriptionMutationData,
    Error,
    WebhooksDeleteSubscriptionMutationVariables
  >,
): UseMutationResult<
  WebhooksDeleteSubscriptionMutationData,
  Error,
  WebhooksDeleteSubscriptionMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildWebhooksDeleteSubscriptionMutation(client, options),
    ...options,
  });
}

export function mutationKeyWebhooksDeleteSubscription(): MutationKey {
  return ["@gusto/embedded-api", "Webhooks", "deleteSubscription"];
}

export function buildWebhooksDeleteSubscriptionMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: WebhooksDeleteSubscriptionMutationVariables,
  ) => Promise<WebhooksDeleteSubscriptionMutationData>;
} {
  return {
    mutationKey: mutationKeyWebhooksDeleteSubscription(),
    mutationFn: function webhooksDeleteSubscriptionMutationFn({
      security,
      request,
      options,
    }): Promise<WebhooksDeleteSubscriptionMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(webhooksDeleteSubscription(
        client$,
        security,
        request,
        mergedOptions,
      ));
    },
  };
}
