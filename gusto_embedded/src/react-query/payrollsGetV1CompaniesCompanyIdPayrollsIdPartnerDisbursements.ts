/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { payrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements } from "../funcs/payrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsHeaderXGustoAPIVersion,
  GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsRequest,
  GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsResponse,
} from "../models/operations/getv1companiescompanyidpayrollsidpartnerdisbursements.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData =
  GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsResponse;

/**
 * Get partner disbursements for a payroll
 *
 * @remarks
 * Get partner disbursements for a specific payroll.
 *
 * scope: `partner_disbursements:read`
 */
export function usePayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements(
  request: GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsRequest,
  options?: QueryHookOptions<
    PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData
  >,
): UseQueryResult<
  PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useQuery({
    ...buildPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get partner disbursements for a payroll
 *
 * @remarks
 * Get partner disbursements for a specific payroll.
 *
 * scope: `partner_disbursements:read`
 */
export function usePayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsSuspense(
  request: GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsRequest,
  options?: SuspenseQueryHookOptions<
    PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData
  >,
): UseSuspenseQueryResult<
  PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData,
  Error
> {
  const client = useGustoEmbeddedContext();
  return useSuspenseQuery({
    ...buildPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements(
  queryClient: QueryClient,
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQuery(
      client$,
      request,
    ),
  });
}

export function setPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsData(
  client: QueryClient,
  queryKeyBase: [
    companyId: string,
    id: string,
    parameters: {
      xGustoAPIVersion?:
        | GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsHeaderXGustoAPIVersion
        | undefined;
    },
  ],
  data: PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData,
):
  | PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData
  | undefined
{
  const key =
    queryKeyPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements(
      ...queryKeyBase,
    );

  return client.setQueryData<
    PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData
  >(key, data);
}

export function invalidatePayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [
      companyId: string,
      id: string,
      parameters: {
        xGustoAPIVersion?:
          | GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsHeaderXGustoAPIVersion
          | undefined;
      },
    ]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Payrolls",
      "getV1CompaniesCompanyIdPayrollsIdPartnerDisbursements",
      ...queryKeyBase,
    ],
  });
}

export function invalidateAllPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: [
      "@gusto/embedded-api",
      "Payrolls",
      "getV1CompaniesCompanyIdPayrollsIdPartnerDisbursements",
    ],
  });
}

export function buildPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQuery(
  client$: GustoEmbeddedCore,
  request: GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<
    PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData
  >;
} {
  return {
    queryKey:
      queryKeyPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements(
        request.companyId,
        request.id,
        { xGustoAPIVersion: request.xGustoAPIVersion },
      ),
    queryFn:
      async function payrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryFn(
        ctx,
      ): Promise<
        PayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsQueryData
      > {
        const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
        const mergedOptions = {
          ...options,
          fetchOptions: { ...options?.fetchOptions, signal: sig },
        };

        return unwrapAsync(
          payrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements(
            client$,
            request,
            mergedOptions,
          ),
        );
      },
  };
}

export function queryKeyPayrollsGetV1CompaniesCompanyIdPayrollsIdPartnerDisbursements(
  companyId: string,
  id: string,
  parameters: {
    xGustoAPIVersion?:
      | GetV1CompaniesCompanyIdPayrollsIdPartnerDisbursementsHeaderXGustoAPIVersion
      | undefined;
  },
): QueryKey {
  return [
    "@gusto/embedded-api",
    "Payrolls",
    "getV1CompaniesCompanyIdPayrollsIdPartnerDisbursements",
    companyId,
    id,
    parameters,
  ];
}
