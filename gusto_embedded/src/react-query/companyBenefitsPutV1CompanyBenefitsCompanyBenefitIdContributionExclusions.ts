/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { GustoEmbeddedCore } from "../core.js";
import { companyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusions } from "../funcs/companyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusions.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import {
  PutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsRequest,
  PutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsResponse,
} from "../models/operations/putv1companybenefitscompanybenefitidcontributionexclusions.js";
import { unwrapAsync } from "../types/fp.js";
import { useGustoEmbeddedContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationVariables =
  {
    request: PutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsRequest;
    options?: RequestOptions;
  };

export type CompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationData =
  PutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsResponse;

/**
 * Update contribution exclusions for a company benefit
 *
 * @remarks
 * Updates contribution exclusions for a given company benefit.
 *
 * Currently this endpoint only works for 401-k and Roth 401-k benefit types.
 *
 * scope: `company_benefits:write`
 */
export function useCompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutation(
  options?: MutationHookOptions<
    CompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationData,
    Error,
    CompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationVariables
  >,
): UseMutationResult<
  CompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationData,
  Error,
  CompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationVariables
> {
  const client = useGustoEmbeddedContext();
  return useMutation({
    ...buildCompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutation(
      client,
      options,
    ),
    ...options,
  });
}

export function mutationKeyCompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusions(): MutationKey {
  return [
    "@gusto/embedded-api",
    "companyBenefits",
    "putV1CompanyBenefitsCompanyBenefitIdContributionExclusions",
  ];
}

export function buildCompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutation(
  client$: GustoEmbeddedCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables:
      CompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationVariables,
  ) => Promise<
    CompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationData
  >;
} {
  return {
    mutationKey:
      mutationKeyCompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusions(),
    mutationFn:
      function companyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationFn(
        {
          request,
          options,
        },
      ): Promise<
        CompanyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusionsMutationData
      > {
        const mergedOptions = {
          ...hookOptions,
          ...options,
          fetchOptions: {
            ...hookOptions?.fetchOptions,
            ...options?.fetchOptions,
            signal: combineSignals(
              hookOptions?.fetchOptions?.signal,
              options?.fetchOptions?.signal,
            ),
          },
        };
        return unwrapAsync(
          companyBenefitsPutV1CompanyBenefitsCompanyBenefitIdContributionExclusions(
            client$,
            request,
            mergedOptions,
          ),
        );
      },
  };
}
