/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmployeeStateTaxQuestion,
  EmployeeStateTaxQuestion$inboundSchema,
  EmployeeStateTaxQuestion$Outbound,
  EmployeeStateTaxQuestion$outboundSchema,
} from "./employeestatetaxquestion.js";

export type EmployeeStateTaxesList = {
  /**
   * The employee's uuid
   */
  employeeUuid?: string | undefined;
  /**
   * Two letter US state abbreviation
   */
  state?: string | undefined;
  fileNewHireReport?: boolean | null | undefined;
  isWorkState?: boolean | undefined;
  questions?: Array<EmployeeStateTaxQuestion> | undefined;
};

/** @internal */
export const EmployeeStateTaxesList$inboundSchema: z.ZodType<
  EmployeeStateTaxesList,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_uuid: z.string().optional(),
  state: z.string().optional(),
  file_new_hire_report: z.nullable(z.boolean()).optional(),
  is_work_state: z.boolean().optional(),
  questions: z.array(EmployeeStateTaxQuestion$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
    "file_new_hire_report": "fileNewHireReport",
    "is_work_state": "isWorkState",
  });
});

/** @internal */
export type EmployeeStateTaxesList$Outbound = {
  employee_uuid?: string | undefined;
  state?: string | undefined;
  file_new_hire_report?: boolean | null | undefined;
  is_work_state?: boolean | undefined;
  questions?: Array<EmployeeStateTaxQuestion$Outbound> | undefined;
};

/** @internal */
export const EmployeeStateTaxesList$outboundSchema: z.ZodType<
  EmployeeStateTaxesList$Outbound,
  z.ZodTypeDef,
  EmployeeStateTaxesList
> = z.object({
  employeeUuid: z.string().optional(),
  state: z.string().optional(),
  fileNewHireReport: z.nullable(z.boolean()).optional(),
  isWorkState: z.boolean().optional(),
  questions: z.array(EmployeeStateTaxQuestion$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
    fileNewHireReport: "file_new_hire_report",
    isWorkState: "is_work_state",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeStateTaxesList$ {
  /** @deprecated use `EmployeeStateTaxesList$inboundSchema` instead. */
  export const inboundSchema = EmployeeStateTaxesList$inboundSchema;
  /** @deprecated use `EmployeeStateTaxesList$outboundSchema` instead. */
  export const outboundSchema = EmployeeStateTaxesList$outboundSchema;
  /** @deprecated use `EmployeeStateTaxesList$Outbound` instead. */
  export type Outbound = EmployeeStateTaxesList$Outbound;
}

export function employeeStateTaxesListToJSON(
  employeeStateTaxesList: EmployeeStateTaxesList,
): string {
  return JSON.stringify(
    EmployeeStateTaxesList$outboundSchema.parse(employeeStateTaxesList),
  );
}

export function employeeStateTaxesListFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeStateTaxesList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeStateTaxesList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeStateTaxesList' from JSON`,
  );
}
