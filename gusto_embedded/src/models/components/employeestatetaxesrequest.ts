/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The payment method type. If type is Check, then split_by and splits do not need to be populated. If type is Direct Deposit, split_by and splits are required.
 */
export const EmployeeStateTaxesRequestType = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The payment method type. If type is Check, then split_by and splits do not need to be populated. If type is Direct Deposit, split_by and splits are required.
 */
export type EmployeeStateTaxesRequestType = ClosedEnum<
  typeof EmployeeStateTaxesRequestType
>;

/**
 * Describes how the payment will be split. If split_by is Percentage, then the split amounts must add up to exactly 100. If split_by is Amount, then the last split amount must be nil to capture the remainder.
 */
export const EmployeeStateTaxesRequestSplitBy = {
  Amount: "Amount",
  Percentage: "Percentage",
} as const;
/**
 * Describes how the payment will be split. If split_by is Percentage, then the split amounts must add up to exactly 100. If split_by is Amount, then the last split amount must be nil to capture the remainder.
 */
export type EmployeeStateTaxesRequestSplitBy = ClosedEnum<
  typeof EmployeeStateTaxesRequestSplitBy
>;

export type Splits = {
  /**
   * The bank account ID
   *
   * @remarks
   */
  uuid?: string | undefined;
  /**
   * The bank account name
   */
  name?: string | undefined;
  /**
   * The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
   */
  priority?: number | undefined;
  /**
   * The cents amount allocated for each payment split
   */
  splitAmount?: number | null | undefined;
};

export type EmployeeStateTaxesRequest = {
  /**
   * The payment method type. If type is Check, then split_by and splits do not need to be populated. If type is Direct Deposit, split_by and splits are required.
   */
  type: EmployeeStateTaxesRequestType;
  /**
   * Describes how the payment will be split. If split_by is Percentage, then the split amounts must add up to exactly 100. If split_by is Amount, then the last split amount must be nil to capture the remainder.
   */
  splitBy?: EmployeeStateTaxesRequestSplitBy | undefined;
  splits?: Array<Splits> | undefined;
};

/** @internal */
export const EmployeeStateTaxesRequestType$inboundSchema: z.ZodNativeEnum<
  typeof EmployeeStateTaxesRequestType
> = z.nativeEnum(EmployeeStateTaxesRequestType);

/** @internal */
export const EmployeeStateTaxesRequestType$outboundSchema: z.ZodNativeEnum<
  typeof EmployeeStateTaxesRequestType
> = EmployeeStateTaxesRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeStateTaxesRequestType$ {
  /** @deprecated use `EmployeeStateTaxesRequestType$inboundSchema` instead. */
  export const inboundSchema = EmployeeStateTaxesRequestType$inboundSchema;
  /** @deprecated use `EmployeeStateTaxesRequestType$outboundSchema` instead. */
  export const outboundSchema = EmployeeStateTaxesRequestType$outboundSchema;
}

/** @internal */
export const EmployeeStateTaxesRequestSplitBy$inboundSchema: z.ZodNativeEnum<
  typeof EmployeeStateTaxesRequestSplitBy
> = z.nativeEnum(EmployeeStateTaxesRequestSplitBy);

/** @internal */
export const EmployeeStateTaxesRequestSplitBy$outboundSchema: z.ZodNativeEnum<
  typeof EmployeeStateTaxesRequestSplitBy
> = EmployeeStateTaxesRequestSplitBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeStateTaxesRequestSplitBy$ {
  /** @deprecated use `EmployeeStateTaxesRequestSplitBy$inboundSchema` instead. */
  export const inboundSchema = EmployeeStateTaxesRequestSplitBy$inboundSchema;
  /** @deprecated use `EmployeeStateTaxesRequestSplitBy$outboundSchema` instead. */
  export const outboundSchema = EmployeeStateTaxesRequestSplitBy$outboundSchema;
}

/** @internal */
export const Splits$inboundSchema: z.ZodType<Splits, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string().optional(),
    name: z.string().optional(),
    priority: z.number().int().optional(),
    split_amount: z.nullable(z.number().int()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "split_amount": "splitAmount",
    });
  });

/** @internal */
export type Splits$Outbound = {
  uuid?: string | undefined;
  name?: string | undefined;
  priority?: number | undefined;
  split_amount?: number | null | undefined;
};

/** @internal */
export const Splits$outboundSchema: z.ZodType<
  Splits$Outbound,
  z.ZodTypeDef,
  Splits
> = z.object({
  uuid: z.string().optional(),
  name: z.string().optional(),
  priority: z.number().int().optional(),
  splitAmount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    splitAmount: "split_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Splits$ {
  /** @deprecated use `Splits$inboundSchema` instead. */
  export const inboundSchema = Splits$inboundSchema;
  /** @deprecated use `Splits$outboundSchema` instead. */
  export const outboundSchema = Splits$outboundSchema;
  /** @deprecated use `Splits$Outbound` instead. */
  export type Outbound = Splits$Outbound;
}

export function splitsToJSON(splits: Splits): string {
  return JSON.stringify(Splits$outboundSchema.parse(splits));
}

export function splitsFromJSON(
  jsonString: string,
): SafeParseResult<Splits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Splits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Splits' from JSON`,
  );
}

/** @internal */
export const EmployeeStateTaxesRequest$inboundSchema: z.ZodType<
  EmployeeStateTaxesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: EmployeeStateTaxesRequestType$inboundSchema,
  split_by: EmployeeStateTaxesRequestSplitBy$inboundSchema.optional(),
  splits: z.array(z.lazy(() => Splits$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "split_by": "splitBy",
  });
});

/** @internal */
export type EmployeeStateTaxesRequest$Outbound = {
  type: string;
  split_by?: string | undefined;
  splits?: Array<Splits$Outbound> | undefined;
};

/** @internal */
export const EmployeeStateTaxesRequest$outboundSchema: z.ZodType<
  EmployeeStateTaxesRequest$Outbound,
  z.ZodTypeDef,
  EmployeeStateTaxesRequest
> = z.object({
  type: EmployeeStateTaxesRequestType$outboundSchema,
  splitBy: EmployeeStateTaxesRequestSplitBy$outboundSchema.optional(),
  splits: z.array(z.lazy(() => Splits$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    splitBy: "split_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeStateTaxesRequest$ {
  /** @deprecated use `EmployeeStateTaxesRequest$inboundSchema` instead. */
  export const inboundSchema = EmployeeStateTaxesRequest$inboundSchema;
  /** @deprecated use `EmployeeStateTaxesRequest$outboundSchema` instead. */
  export const outboundSchema = EmployeeStateTaxesRequest$outboundSchema;
  /** @deprecated use `EmployeeStateTaxesRequest$Outbound` instead. */
  export type Outbound = EmployeeStateTaxesRequest$Outbound;
}

export function employeeStateTaxesRequestToJSON(
  employeeStateTaxesRequest: EmployeeStateTaxesRequest,
): string {
  return JSON.stringify(
    EmployeeStateTaxesRequest$outboundSchema.parse(employeeStateTaxesRequest),
  );
}

export function employeeStateTaxesRequestFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeStateTaxesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeStateTaxesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeStateTaxesRequest' from JSON`,
  );
}
