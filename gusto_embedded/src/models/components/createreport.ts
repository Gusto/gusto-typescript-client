/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Example response
 */
export type CreateReport = {
  /**
   * A unique identifier of the report request
   */
  requestUuid?: string | undefined;
  /**
   * Company UUID
   */
  companyUuid?: string | undefined;
  /**
   * Title of the report
   */
  customName?: string | null | undefined;
  /**
   * File type
   */
  fileType?: string | undefined;
};

/** @internal */
export const CreateReport$inboundSchema: z.ZodType<
  CreateReport,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_uuid: z.string().optional(),
  company_uuid: z.string().optional(),
  custom_name: z.nullable(z.string()).optional(),
  file_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_uuid": "requestUuid",
    "company_uuid": "companyUuid",
    "custom_name": "customName",
    "file_type": "fileType",
  });
});

/** @internal */
export type CreateReport$Outbound = {
  request_uuid?: string | undefined;
  company_uuid?: string | undefined;
  custom_name?: string | null | undefined;
  file_type?: string | undefined;
};

/** @internal */
export const CreateReport$outboundSchema: z.ZodType<
  CreateReport$Outbound,
  z.ZodTypeDef,
  CreateReport
> = z.object({
  requestUuid: z.string().optional(),
  companyUuid: z.string().optional(),
  customName: z.nullable(z.string()).optional(),
  fileType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestUuid: "request_uuid",
    companyUuid: "company_uuid",
    customName: "custom_name",
    fileType: "file_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateReport$ {
  /** @deprecated use `CreateReport$inboundSchema` instead. */
  export const inboundSchema = CreateReport$inboundSchema;
  /** @deprecated use `CreateReport$outboundSchema` instead. */
  export const outboundSchema = CreateReport$outboundSchema;
  /** @deprecated use `CreateReport$Outbound` instead. */
  export type Outbound = CreateReport$Outbound;
}

export function createReportToJSON(createReport: CreateReport): string {
  return JSON.stringify(CreateReport$outboundSchema.parse(createReport));
}

export function createReportFromJSON(
  jsonString: string,
): SafeParseResult<CreateReport, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateReport$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateReport' from JSON`,
  );
}
