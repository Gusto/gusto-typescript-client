/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The contractor's wage type, either "Fixed" or "Hourly".
 */
export const WageType = {
  Fixed: "Fixed",
  Hourly: "Hourly",
} as const;
/**
 * The contractor's wage type, either "Fixed" or "Hourly".
 */
export type WageType = ClosedEnum<typeof WageType>;

/**
 * The contractor's type, either "Individual" or "Business".
 */
export const ContractorType = {
  Individual: "Individual",
  Business: "Business",
} as const;
/**
 * The contractor's type, either "Individual" or "Business".
 */
export type ContractorType = ClosedEnum<typeof ContractorType>;

/**
 * The contractor’s home address.
 */
export type Address = {
  street1?: string | undefined;
  street2?: string | null | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
  country?: string | undefined;
};

/**
 * One of the "onboarding_status" enum values.
 */
export const ContractorOnboardingStatus1 = {
  AdminOnboardingIncomplete: "admin_onboarding_incomplete",
  AdminOnboardingReview: "admin_onboarding_review",
  SelfOnboardingNotInvited: "self_onboarding_not_invited",
  SelfOnboardingInvited: "self_onboarding_invited",
  SelfOnboardingStarted: "self_onboarding_started",
  SelfOnboardingReview: "self_onboarding_review",
  OnboardingCompleted: "onboarding_completed",
} as const;
/**
 * One of the "onboarding_status" enum values.
 */
export type ContractorOnboardingStatus1 = ClosedEnum<
  typeof ContractorOnboardingStatus1
>;

/**
 * The contractor's payment method.
 */
export const ContractorPaymentMethod1 = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The contractor's payment method.
 */
export type ContractorPaymentMethod1 = ClosedEnum<
  typeof ContractorPaymentMethod1
>;

/**
 * The representation of a contractor (individual or business) in Gusto.
 */
export type Contractor = {
  /**
   * The UUID of the contractor in Gusto.
   */
  uuid: string;
  /**
   * The UUID of the company the contractor is employed by.
   */
  companyUuid?: string | undefined;
  /**
   * The contractor's wage type, either "Fixed" or "Hourly".
   */
  wageType?: WageType | undefined;
  /**
   * The status of the contractor with the company.
   */
  isActive?: boolean | undefined;
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The contractor's type, either "Individual" or "Business".
   */
  type?: ContractorType | undefined;
  /**
   * The contractor’s first name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
   */
  firstName?: string | null | undefined;
  /**
   * The contractor’s last name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
   */
  lastName?: string | null | undefined;
  /**
   * The contractor’s middle initial. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors.
   */
  middleInitial?: string | null | undefined;
  /**
   * The name of the contractor business. This attribute is required for “Business” contractors and will be ignored for “Individual” contractors.
   */
  businessName?: string | null | undefined;
  /**
   * The Federal Employer Identification Number of the contractor business. This attribute is optional for “Business” contractors and will be ignored for “Individual” contractors.
   */
  ein?: string | null | undefined;
  /**
   * Whether company's Employer Identification Number (EIN) is present
   */
  hasEin?: boolean | null | undefined;
  /**
   * The contractor’s email address. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors.
   */
  email?: string | null | undefined;
  /**
   * The contractor's start date.
   */
  startDate?: string | undefined;
  /**
   * The contractor’s home address.
   */
  address?: Address | null | undefined;
  /**
   * The contractor’s hourly rate. This attribute is required if the wage_type is “Hourly”.
   */
  hourlyRate?: string | undefined;
  /**
   * The boolean flag indicating whether Gusto will file a new hire report for the contractor
   */
  fileNewHireReport?: boolean | null | undefined;
  /**
   * State where the contractor will be conducting the majority of their work for the company.
   *
   * @remarks
   * This value is used when generating the new hire report.
   */
  workState?: string | null | undefined;
  /**
   * The updated onboarding status for the contractor
   */
  onboarded?: boolean | undefined;
  /**
   * One of the "onboarding_status" enum values.
   */
  onboardingStatus?: ContractorOnboardingStatus1 | undefined;
  /**
   * The contractor's payment method.
   */
  paymentMethod?: ContractorPaymentMethod1 | null | undefined;
  /**
   * Indicates whether the contractor has an SSN in Gusto.
   */
  hasSsn?: boolean | undefined;
  /**
   * The UUID of the department the contractor is under
   */
  departmentUuid?: string | null | undefined;
  /**
   * The contractor's department in the company.
   */
  department?: string | null | undefined;
  /**
   * The contractor's dismissal date.
   */
  dismissalDate?: string | null | undefined;
};

/** @internal */
export const WageType$inboundSchema: z.ZodNativeEnum<typeof WageType> = z
  .nativeEnum(WageType);

/** @internal */
export const WageType$outboundSchema: z.ZodNativeEnum<typeof WageType> =
  WageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WageType$ {
  /** @deprecated use `WageType$inboundSchema` instead. */
  export const inboundSchema = WageType$inboundSchema;
  /** @deprecated use `WageType$outboundSchema` instead. */
  export const outboundSchema = WageType$outboundSchema;
}

/** @internal */
export const ContractorType$inboundSchema: z.ZodNativeEnum<
  typeof ContractorType
> = z.nativeEnum(ContractorType);

/** @internal */
export const ContractorType$outboundSchema: z.ZodNativeEnum<
  typeof ContractorType
> = ContractorType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorType$ {
  /** @deprecated use `ContractorType$inboundSchema` instead. */
  export const inboundSchema = ContractorType$inboundSchema;
  /** @deprecated use `ContractorType$outboundSchema` instead. */
  export const outboundSchema = ContractorType$outboundSchema;
}

/** @internal */
export const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown> =
  z.object({
    street_1: z.string().optional(),
    street_2: z.nullable(z.string()).optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip: z.string().optional(),
    country: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "street_1": "street1",
      "street_2": "street2",
    });
  });

/** @internal */
export type Address$Outbound = {
  street_1?: string | undefined;
  street_2?: string | null | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const Address$outboundSchema: z.ZodType<
  Address$Outbound,
  z.ZodTypeDef,
  Address
> = z.object({
  street1: z.string().optional(),
  street2: z.nullable(z.string()).optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zip: z.string().optional(),
  country: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    street1: "street_1",
    street2: "street_2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Address$ {
  /** @deprecated use `Address$inboundSchema` instead. */
  export const inboundSchema = Address$inboundSchema;
  /** @deprecated use `Address$outboundSchema` instead. */
  export const outboundSchema = Address$outboundSchema;
  /** @deprecated use `Address$Outbound` instead. */
  export type Outbound = Address$Outbound;
}

export function addressToJSON(address: Address): string {
  return JSON.stringify(Address$outboundSchema.parse(address));
}

export function addressFromJSON(
  jsonString: string,
): SafeParseResult<Address, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Address$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Address' from JSON`,
  );
}

/** @internal */
export const ContractorOnboardingStatus1$inboundSchema: z.ZodNativeEnum<
  typeof ContractorOnboardingStatus1
> = z.nativeEnum(ContractorOnboardingStatus1);

/** @internal */
export const ContractorOnboardingStatus1$outboundSchema: z.ZodNativeEnum<
  typeof ContractorOnboardingStatus1
> = ContractorOnboardingStatus1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorOnboardingStatus1$ {
  /** @deprecated use `ContractorOnboardingStatus1$inboundSchema` instead. */
  export const inboundSchema = ContractorOnboardingStatus1$inboundSchema;
  /** @deprecated use `ContractorOnboardingStatus1$outboundSchema` instead. */
  export const outboundSchema = ContractorOnboardingStatus1$outboundSchema;
}

/** @internal */
export const ContractorPaymentMethod1$inboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentMethod1
> = z.nativeEnum(ContractorPaymentMethod1);

/** @internal */
export const ContractorPaymentMethod1$outboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentMethod1
> = ContractorPaymentMethod1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentMethod1$ {
  /** @deprecated use `ContractorPaymentMethod1$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentMethod1$inboundSchema;
  /** @deprecated use `ContractorPaymentMethod1$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentMethod1$outboundSchema;
}

/** @internal */
export const Contractor$inboundSchema: z.ZodType<
  Contractor,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  company_uuid: z.string().optional(),
  wage_type: WageType$inboundSchema.optional(),
  is_active: z.boolean().default(true),
  version: z.string().optional(),
  type: ContractorType$inboundSchema.optional(),
  first_name: z.nullable(z.string()).optional(),
  last_name: z.nullable(z.string()).optional(),
  middle_initial: z.nullable(z.string()).optional(),
  business_name: z.nullable(z.string()).optional(),
  ein: z.nullable(z.string()).optional(),
  has_ein: z.nullable(z.boolean()).optional(),
  email: z.nullable(z.string()).optional(),
  start_date: z.string().optional(),
  address: z.nullable(z.lazy(() => Address$inboundSchema)).optional(),
  hourly_rate: z.string().optional(),
  file_new_hire_report: z.nullable(z.boolean()).optional(),
  work_state: z.nullable(z.string()).optional(),
  onboarded: z.boolean().optional(),
  onboarding_status: ContractorOnboardingStatus1$inboundSchema.optional(),
  payment_method: z.nullable(ContractorPaymentMethod1$inboundSchema).optional(),
  has_ssn: z.boolean().optional(),
  department_uuid: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  dismissal_date: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "wage_type": "wageType",
    "is_active": "isActive",
    "first_name": "firstName",
    "last_name": "lastName",
    "middle_initial": "middleInitial",
    "business_name": "businessName",
    "has_ein": "hasEin",
    "start_date": "startDate",
    "hourly_rate": "hourlyRate",
    "file_new_hire_report": "fileNewHireReport",
    "work_state": "workState",
    "onboarding_status": "onboardingStatus",
    "payment_method": "paymentMethod",
    "has_ssn": "hasSsn",
    "department_uuid": "departmentUuid",
    "dismissal_date": "dismissalDate",
  });
});

/** @internal */
export type Contractor$Outbound = {
  uuid: string;
  company_uuid?: string | undefined;
  wage_type?: string | undefined;
  is_active: boolean;
  version?: string | undefined;
  type?: string | undefined;
  first_name?: string | null | undefined;
  last_name?: string | null | undefined;
  middle_initial?: string | null | undefined;
  business_name?: string | null | undefined;
  ein?: string | null | undefined;
  has_ein?: boolean | null | undefined;
  email?: string | null | undefined;
  start_date?: string | undefined;
  address?: Address$Outbound | null | undefined;
  hourly_rate?: string | undefined;
  file_new_hire_report?: boolean | null | undefined;
  work_state?: string | null | undefined;
  onboarded?: boolean | undefined;
  onboarding_status?: string | undefined;
  payment_method?: string | null | undefined;
  has_ssn?: boolean | undefined;
  department_uuid?: string | null | undefined;
  department?: string | null | undefined;
  dismissal_date?: string | null | undefined;
};

/** @internal */
export const Contractor$outboundSchema: z.ZodType<
  Contractor$Outbound,
  z.ZodTypeDef,
  Contractor
> = z.object({
  uuid: z.string(),
  companyUuid: z.string().optional(),
  wageType: WageType$outboundSchema.optional(),
  isActive: z.boolean().default(true),
  version: z.string().optional(),
  type: ContractorType$outboundSchema.optional(),
  firstName: z.nullable(z.string()).optional(),
  lastName: z.nullable(z.string()).optional(),
  middleInitial: z.nullable(z.string()).optional(),
  businessName: z.nullable(z.string()).optional(),
  ein: z.nullable(z.string()).optional(),
  hasEin: z.nullable(z.boolean()).optional(),
  email: z.nullable(z.string()).optional(),
  startDate: z.string().optional(),
  address: z.nullable(z.lazy(() => Address$outboundSchema)).optional(),
  hourlyRate: z.string().optional(),
  fileNewHireReport: z.nullable(z.boolean()).optional(),
  workState: z.nullable(z.string()).optional(),
  onboarded: z.boolean().optional(),
  onboardingStatus: ContractorOnboardingStatus1$outboundSchema.optional(),
  paymentMethod: z.nullable(ContractorPaymentMethod1$outboundSchema).optional(),
  hasSsn: z.boolean().optional(),
  departmentUuid: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()).optional(),
  dismissalDate: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    wageType: "wage_type",
    isActive: "is_active",
    firstName: "first_name",
    lastName: "last_name",
    middleInitial: "middle_initial",
    businessName: "business_name",
    hasEin: "has_ein",
    startDate: "start_date",
    hourlyRate: "hourly_rate",
    fileNewHireReport: "file_new_hire_report",
    workState: "work_state",
    onboardingStatus: "onboarding_status",
    paymentMethod: "payment_method",
    hasSsn: "has_ssn",
    departmentUuid: "department_uuid",
    dismissalDate: "dismissal_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contractor$ {
  /** @deprecated use `Contractor$inboundSchema` instead. */
  export const inboundSchema = Contractor$inboundSchema;
  /** @deprecated use `Contractor$outboundSchema` instead. */
  export const outboundSchema = Contractor$outboundSchema;
  /** @deprecated use `Contractor$Outbound` instead. */
  export type Outbound = Contractor$Outbound;
}

export function contractorToJSON(contractor: Contractor): string {
  return JSON.stringify(Contractor$outboundSchema.parse(contractor));
}

export function contractorFromJSON(
  jsonString: string,
): SafeParseResult<Contractor, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contractor$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contractor' from JSON`,
  );
}
