/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Example response
 */
export type Report = {
  /**
   * A unique identifier of the report request
   */
  requestUuid?: string | undefined;
  /**
   * Current status of the report, possible values are 'succeeded', 'pending', or 'failed'
   */
  status?: string | undefined;
  /**
   * The array of urls to access the report
   */
  reportUrls?: Array<string> | undefined;
};

/** @internal */
export const Report$inboundSchema: z.ZodType<Report, z.ZodTypeDef, unknown> = z
  .object({
    request_uuid: z.string().optional(),
    status: z.string().optional(),
    report_urls: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "request_uuid": "requestUuid",
      "report_urls": "reportUrls",
    });
  });

/** @internal */
export type Report$Outbound = {
  request_uuid?: string | undefined;
  status?: string | undefined;
  report_urls?: Array<string> | undefined;
};

/** @internal */
export const Report$outboundSchema: z.ZodType<
  Report$Outbound,
  z.ZodTypeDef,
  Report
> = z.object({
  requestUuid: z.string().optional(),
  status: z.string().optional(),
  reportUrls: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    requestUuid: "request_uuid",
    reportUrls: "report_urls",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Report$ {
  /** @deprecated use `Report$inboundSchema` instead. */
  export const inboundSchema = Report$inboundSchema;
  /** @deprecated use `Report$outboundSchema` instead. */
  export const outboundSchema = Report$outboundSchema;
  /** @deprecated use `Report$Outbound` instead. */
  export type Outbound = Report$Outbound;
}

export function reportToJSON(report: Report): string {
  return JSON.stringify(Report$outboundSchema.parse(report));
}

export function reportFromJSON(
  jsonString: string,
): SafeParseResult<Report, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Report$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Report' from JSON`,
  );
}
