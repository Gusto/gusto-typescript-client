/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Details of a single payment split for a payment method.
 */
export type DetailedPaymentAccountSplit = {
  /**
   * The UUID of the bank account.
   */
  bankAccountUuid?: string | undefined;
  /**
   * The masked account number.
   */
  hiddenAccountNumber?: string | undefined;
  /**
   * The name of the bank account.
   */
  name?: string | undefined;
  /**
   * The priority of the payment split.
   */
  priority?: number | undefined;
  /**
   * The amount for the split. If `split_by` is 'Amount', this is in cents (e.g., 500 for $5.00). If `split_by` is 'Percentage', this is the percentage value (e.g., 60 for 60%).
   */
  splitAmount?: number | undefined;
  /**
   * Ciphertext containing the full bank account number, which must be decrypted using a key provided by Gusto. Only visible with the appropriate `read:account_number` scope (e.g., `employee_payment_methods:read:account_number`).
   */
  encryptedAccountNumber?: string | null | undefined;
};

/** @internal */
export const DetailedPaymentAccountSplit$inboundSchema: z.ZodType<
  DetailedPaymentAccountSplit,
  z.ZodTypeDef,
  unknown
> = z.object({
  bank_account_uuid: z.string().optional(),
  hidden_account_number: z.string().optional(),
  name: z.string().optional(),
  priority: z.number().int().optional(),
  split_amount: z.number().int().optional(),
  encrypted_account_number: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "bank_account_uuid": "bankAccountUuid",
    "hidden_account_number": "hiddenAccountNumber",
    "split_amount": "splitAmount",
    "encrypted_account_number": "encryptedAccountNumber",
  });
});

/** @internal */
export type DetailedPaymentAccountSplit$Outbound = {
  bank_account_uuid?: string | undefined;
  hidden_account_number?: string | undefined;
  name?: string | undefined;
  priority?: number | undefined;
  split_amount?: number | undefined;
  encrypted_account_number?: string | null | undefined;
};

/** @internal */
export const DetailedPaymentAccountSplit$outboundSchema: z.ZodType<
  DetailedPaymentAccountSplit$Outbound,
  z.ZodTypeDef,
  DetailedPaymentAccountSplit
> = z.object({
  bankAccountUuid: z.string().optional(),
  hiddenAccountNumber: z.string().optional(),
  name: z.string().optional(),
  priority: z.number().int().optional(),
  splitAmount: z.number().int().optional(),
  encryptedAccountNumber: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    bankAccountUuid: "bank_account_uuid",
    hiddenAccountNumber: "hidden_account_number",
    splitAmount: "split_amount",
    encryptedAccountNumber: "encrypted_account_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DetailedPaymentAccountSplit$ {
  /** @deprecated use `DetailedPaymentAccountSplit$inboundSchema` instead. */
  export const inboundSchema = DetailedPaymentAccountSplit$inboundSchema;
  /** @deprecated use `DetailedPaymentAccountSplit$outboundSchema` instead. */
  export const outboundSchema = DetailedPaymentAccountSplit$outboundSchema;
  /** @deprecated use `DetailedPaymentAccountSplit$Outbound` instead. */
  export type Outbound = DetailedPaymentAccountSplit$Outbound;
}

export function detailedPaymentAccountSplitToJSON(
  detailedPaymentAccountSplit: DetailedPaymentAccountSplit,
): string {
  return JSON.stringify(
    DetailedPaymentAccountSplit$outboundSchema.parse(
      detailedPaymentAccountSplit,
    ),
  );
}

export function detailedPaymentAccountSplitFromJSON(
  jsonString: string,
): SafeParseResult<DetailedPaymentAccountSplit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DetailedPaymentAccountSplit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DetailedPaymentAccountSplit' from JSON`,
  );
}
