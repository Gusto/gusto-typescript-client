/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The representation of a contribution exclusion for a company benefit.
 */
export type ContributionExclusion = {
  /**
   * The UUID of the contribution type.
   */
  contributionUuid: string;
  /**
   * The name of the contribution type.
   */
  contributionType: string;
  /**
   * Whether this contribution type is excluded from the benefit.
   */
  excluded: boolean;
};

/** @internal */
export const ContributionExclusion$inboundSchema: z.ZodType<
  ContributionExclusion,
  z.ZodTypeDef,
  unknown
> = z.object({
  contribution_uuid: z.string(),
  contribution_type: z.string(),
  excluded: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "contribution_uuid": "contributionUuid",
    "contribution_type": "contributionType",
  });
});

/** @internal */
export type ContributionExclusion$Outbound = {
  contribution_uuid: string;
  contribution_type: string;
  excluded: boolean;
};

/** @internal */
export const ContributionExclusion$outboundSchema: z.ZodType<
  ContributionExclusion$Outbound,
  z.ZodTypeDef,
  ContributionExclusion
> = z.object({
  contributionUuid: z.string(),
  contributionType: z.string(),
  excluded: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    contributionUuid: "contribution_uuid",
    contributionType: "contribution_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContributionExclusion$ {
  /** @deprecated use `ContributionExclusion$inboundSchema` instead. */
  export const inboundSchema = ContributionExclusion$inboundSchema;
  /** @deprecated use `ContributionExclusion$outboundSchema` instead. */
  export const outboundSchema = ContributionExclusion$outboundSchema;
  /** @deprecated use `ContributionExclusion$Outbound` instead. */
  export type Outbound = ContributionExclusion$Outbound;
}

export function contributionExclusionToJSON(
  contributionExclusion: ContributionExclusion,
): string {
  return JSON.stringify(
    ContributionExclusion$outboundSchema.parse(contributionExclusion),
  );
}

export function contributionExclusionFromJSON(
  jsonString: string,
): SafeParseResult<ContributionExclusion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContributionExclusion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContributionExclusion' from JSON`,
  );
}
