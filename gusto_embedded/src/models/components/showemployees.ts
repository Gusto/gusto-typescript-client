/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EmployeeCustomField,
  EmployeeCustomField$inboundSchema,
  EmployeeCustomField$Outbound,
  EmployeeCustomField$outboundSchema,
} from "./employeecustomfield.js";
import {
  EmployeeHomeAddress,
  EmployeeHomeAddress$inboundSchema,
  EmployeeHomeAddress$Outbound,
  EmployeeHomeAddress$outboundSchema,
} from "./employeehomeaddress.js";
import {
  FlsaStatusType,
  FlsaStatusType$inboundSchema,
  FlsaStatusType$outboundSchema,
} from "./flsastatustype.js";
import {
  Garnishment,
  Garnishment$inboundSchema,
  Garnishment$Outbound,
  Garnishment$outboundSchema,
} from "./garnishment.js";
import {
  Job,
  Job$inboundSchema,
  Job$Outbound,
  Job$outboundSchema,
} from "./job.js";
import {
  PaidTimeOff,
  PaidTimeOff$inboundSchema,
  PaidTimeOff$Outbound,
  PaidTimeOff$outboundSchema,
} from "./paidtimeoff.js";
import {
  Termination,
  Termination$inboundSchema,
  Termination$Outbound,
  Termination$outboundSchema,
} from "./termination.js";

/**
 * The current onboarding status of the employee
 */
export const OnboardingStatus = {
  OnboardingCompleted: "onboarding_completed",
  AdminOnboardingIncomplete: "admin_onboarding_incomplete",
  SelfOnboardingPendingInvite: "self_onboarding_pending_invite",
  SelfOnboardingInvited: "self_onboarding_invited",
  SelfOnboardingInvitedStarted: "self_onboarding_invited_started",
  SelfOnboardingInvitedOverdue: "self_onboarding_invited_overdue",
  SelfOnboardingCompletedByEmployee: "self_onboarding_completed_by_employee",
  SelfOnboardingAwaitingAdminReview: "self_onboarding_awaiting_admin_review",
} as const;
/**
 * The current onboarding status of the employee
 */
export type OnboardingStatus = ClosedEnum<typeof OnboardingStatus>;

/**
 * Configuration for an employee onboarding documents during onboarding
 */
export type OnboardingDocumentsConfig = {
  /**
   * The UUID of the onboarding documents config
   */
  uuid?: string | null | undefined;
  /**
   * Whether to include Form I-9 for an employee during onboarding
   */
  i9Document?: boolean | undefined;
};

/**
 * The employee's payment method
 */
export const PaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The employee's payment method
 */
export type PaymentMethod = ClosedEnum<typeof PaymentMethod>;

/**
 * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
 */
export const CurrentEmploymentStatus = {
  FullTime: "full_time",
  PartTimeUnderTwentyHours: "part_time_under_twenty_hours",
  PartTimeTwentyPlusHours: "part_time_twenty_plus_hours",
  Variable: "variable",
  Seasonal: "seasonal",
} as const;
/**
 * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
 */
export type CurrentEmploymentStatus = ClosedEnum<
  typeof CurrentEmploymentStatus
>;

/**
 * The representation of an employee in Gusto.
 */
export type ShowEmployees = {
  /**
   * The UUID of the employee in Gusto.
   */
  uuid: string;
  firstName: string;
  middleInitial?: string | null | undefined;
  lastName: string;
  /**
   * The personal email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
   */
  email?: string | null | undefined;
  /**
   * The UUID of the company the employee is employed by.
   */
  companyUuid?: string | undefined;
  /**
   * The UUID of the employee's manager.
   */
  managerUuid?: string | null | undefined;
  /**
   * The current version of the employee. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The employee's department in the company.
   */
  department?: string | null | undefined;
  /**
   * Whether the employee is terminated.
   */
  terminated?: boolean | undefined;
  /**
   * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
   */
  twoPercentShareholder?: boolean | null | undefined;
  /**
   * The work email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
   */
  workEmail?: string | null | undefined;
  /**
   * Whether the employee has completed onboarding.
   */
  onboarded?: boolean | undefined;
  /**
   * The current onboarding status of the employee
   */
  onboardingStatus?: OnboardingStatus | null | undefined;
  /**
   * Configuration for an employee onboarding documents during onboarding
   */
  onboardingDocumentsConfig?: OnboardingDocumentsConfig | undefined;
  jobs?: Array<Job> | undefined;
  eligiblePaidTimeOff?: Array<PaidTimeOff> | undefined;
  terminations?: Array<Termination> | undefined;
  garnishments?: Array<Garnishment> | undefined;
  /**
   * Custom fields are only included for the employee if the include param has the custom_fields value set
   */
  customFields?: Array<EmployeeCustomField> | undefined;
  dateOfBirth?: string | null | undefined;
  /**
   * Indicates whether the employee has an SSN in Gusto.
   */
  hasSsn?: boolean | undefined;
  /**
   * Deprecated. This field always returns an empty string.
   */
  ssn?: string | undefined;
  phone?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  /**
   * The employee's payment method
   */
  paymentMethod?: PaymentMethod | undefined;
  /**
   * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
   */
  currentEmploymentStatus?: CurrentEmploymentStatus | null | undefined;
  historical?: boolean | undefined;
  /**
   * The short format code of the employee
   */
  employeeCode?: string | undefined;
  /**
   * The UUID of the department the employee is under
   */
  departmentUuid?: string | null | undefined;
  title?: string | undefined;
  /**
   * The date when the employee was hired to the company
   */
  hiredAt?: RFCDate | undefined;
  hiddenSsn?: string | undefined;
  /**
   * The FLSA status for this compensation. Salaried ('Exempt') employees are paid a fixed salary every pay period. Salaried with overtime ('Salaried Nonexempt') employees are paid a fixed salary every pay period, and receive overtime pay when applicable. Hourly ('Nonexempt') employees are paid for the hours they work, and receive overtime pay when applicable. Commissioned employees ('Commission Only Exempt') earn wages based only on commission. Commissioned with overtime ('Commission Only Nonexempt') earn wages based on commission, and receive overtime pay when applicable. Owners ('Owner') are employees that own at least twenty percent of the company.
   */
  flsaStatus?: FlsaStatusType | undefined;
  applicableTaxIds?: Array<number> | undefined;
  currentHomeAddress?: EmployeeHomeAddress | undefined;
  allHomeAddresses?: Array<EmployeeHomeAddress> | undefined;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const OnboardingStatus$inboundSchema: z.ZodNativeEnum<
  typeof OnboardingStatus
> = z.nativeEnum(OnboardingStatus);

/** @internal */
export const OnboardingStatus$outboundSchema: z.ZodNativeEnum<
  typeof OnboardingStatus
> = OnboardingStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnboardingStatus$ {
  /** @deprecated use `OnboardingStatus$inboundSchema` instead. */
  export const inboundSchema = OnboardingStatus$inboundSchema;
  /** @deprecated use `OnboardingStatus$outboundSchema` instead. */
  export const outboundSchema = OnboardingStatus$outboundSchema;
}

/** @internal */
export const OnboardingDocumentsConfig$inboundSchema: z.ZodType<
  OnboardingDocumentsConfig,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.nullable(z.string()).optional(),
  i9_document: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "i9_document": "i9Document",
  });
});

/** @internal */
export type OnboardingDocumentsConfig$Outbound = {
  uuid?: string | null | undefined;
  i9_document?: boolean | undefined;
};

/** @internal */
export const OnboardingDocumentsConfig$outboundSchema: z.ZodType<
  OnboardingDocumentsConfig$Outbound,
  z.ZodTypeDef,
  OnboardingDocumentsConfig
> = z.object({
  uuid: z.nullable(z.string()).optional(),
  i9Document: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    i9Document: "i9_document",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnboardingDocumentsConfig$ {
  /** @deprecated use `OnboardingDocumentsConfig$inboundSchema` instead. */
  export const inboundSchema = OnboardingDocumentsConfig$inboundSchema;
  /** @deprecated use `OnboardingDocumentsConfig$outboundSchema` instead. */
  export const outboundSchema = OnboardingDocumentsConfig$outboundSchema;
  /** @deprecated use `OnboardingDocumentsConfig$Outbound` instead. */
  export type Outbound = OnboardingDocumentsConfig$Outbound;
}

export function onboardingDocumentsConfigToJSON(
  onboardingDocumentsConfig: OnboardingDocumentsConfig,
): string {
  return JSON.stringify(
    OnboardingDocumentsConfig$outboundSchema.parse(onboardingDocumentsConfig),
  );
}

export function onboardingDocumentsConfigFromJSON(
  jsonString: string,
): SafeParseResult<OnboardingDocumentsConfig, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnboardingDocumentsConfig$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnboardingDocumentsConfig' from JSON`,
  );
}

/** @internal */
export const PaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof PaymentMethod
> = z.nativeEnum(PaymentMethod);

/** @internal */
export const PaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof PaymentMethod
> = PaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethod$ {
  /** @deprecated use `PaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PaymentMethod$inboundSchema;
  /** @deprecated use `PaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PaymentMethod$outboundSchema;
}

/** @internal */
export const CurrentEmploymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof CurrentEmploymentStatus
> = z.nativeEnum(CurrentEmploymentStatus);

/** @internal */
export const CurrentEmploymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof CurrentEmploymentStatus
> = CurrentEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CurrentEmploymentStatus$ {
  /** @deprecated use `CurrentEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema = CurrentEmploymentStatus$inboundSchema;
  /** @deprecated use `CurrentEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema = CurrentEmploymentStatus$outboundSchema;
}

/** @internal */
export const ShowEmployees$inboundSchema: z.ZodType<
  ShowEmployees,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    uuid: z.string(),
    first_name: z.string(),
    middle_initial: z.nullable(z.string()).optional(),
    last_name: z.string(),
    email: z.nullable(z.string()).optional(),
    company_uuid: z.string().optional(),
    manager_uuid: z.nullable(z.string()).optional(),
    version: z.string().optional(),
    department: z.nullable(z.string()).optional(),
    terminated: z.boolean().optional(),
    two_percent_shareholder: z.nullable(z.boolean()).optional(),
    work_email: z.nullable(z.string()).optional(),
    onboarded: z.boolean().optional(),
    onboarding_status: z.nullable(OnboardingStatus$inboundSchema).optional(),
    onboarding_documents_config: z.lazy(() =>
      OnboardingDocumentsConfig$inboundSchema
    ).optional(),
    jobs: z.array(Job$inboundSchema).optional(),
    eligible_paid_time_off: z.array(PaidTimeOff$inboundSchema).optional(),
    terminations: z.array(Termination$inboundSchema).optional(),
    garnishments: z.array(Garnishment$inboundSchema).optional(),
    custom_fields: z.array(EmployeeCustomField$inboundSchema).optional(),
    date_of_birth: z.nullable(z.string()).optional(),
    has_ssn: z.boolean().optional(),
    ssn: z.string().optional(),
    phone: z.nullable(z.string()).optional(),
    preferred_first_name: z.nullable(z.string()).optional(),
    payment_method: PaymentMethod$inboundSchema.default("Check"),
    current_employment_status: z.nullable(CurrentEmploymentStatus$inboundSchema)
      .optional(),
    historical: z.boolean().optional(),
    employee_code: z.string().optional(),
    department_uuid: z.nullable(z.string()).optional(),
    title: z.string().optional(),
    hired_at: z.string().transform(v => new RFCDate(v)).optional(),
    hidden_ssn: z.string().optional(),
    flsa_status: FlsaStatusType$inboundSchema.optional(),
    applicable_tax_ids: z.array(z.number()).optional(),
    current_home_address: EmployeeHomeAddress$inboundSchema.optional(),
    all_home_addresses: z.array(EmployeeHomeAddress$inboundSchema).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "middle_initial": "middleInitial",
    "last_name": "lastName",
    "company_uuid": "companyUuid",
    "manager_uuid": "managerUuid",
    "two_percent_shareholder": "twoPercentShareholder",
    "work_email": "workEmail",
    "onboarding_status": "onboardingStatus",
    "onboarding_documents_config": "onboardingDocumentsConfig",
    "eligible_paid_time_off": "eligiblePaidTimeOff",
    "custom_fields": "customFields",
    "date_of_birth": "dateOfBirth",
    "has_ssn": "hasSsn",
    "preferred_first_name": "preferredFirstName",
    "payment_method": "paymentMethod",
    "current_employment_status": "currentEmploymentStatus",
    "employee_code": "employeeCode",
    "department_uuid": "departmentUuid",
    "hired_at": "hiredAt",
    "hidden_ssn": "hiddenSsn",
    "flsa_status": "flsaStatus",
    "applicable_tax_ids": "applicableTaxIds",
    "current_home_address": "currentHomeAddress",
    "all_home_addresses": "allHomeAddresses",
  });
});

/** @internal */
export type ShowEmployees$Outbound = {
  uuid: string;
  first_name: string;
  middle_initial?: string | null | undefined;
  last_name: string;
  email?: string | null | undefined;
  company_uuid?: string | undefined;
  manager_uuid?: string | null | undefined;
  version?: string | undefined;
  department?: string | null | undefined;
  terminated?: boolean | undefined;
  two_percent_shareholder?: boolean | null | undefined;
  work_email?: string | null | undefined;
  onboarded?: boolean | undefined;
  onboarding_status?: string | null | undefined;
  onboarding_documents_config?: OnboardingDocumentsConfig$Outbound | undefined;
  jobs?: Array<Job$Outbound> | undefined;
  eligible_paid_time_off?: Array<PaidTimeOff$Outbound> | undefined;
  terminations?: Array<Termination$Outbound> | undefined;
  garnishments?: Array<Garnishment$Outbound> | undefined;
  custom_fields?: Array<EmployeeCustomField$Outbound> | undefined;
  date_of_birth?: string | null | undefined;
  has_ssn?: boolean | undefined;
  ssn?: string | undefined;
  phone?: string | null | undefined;
  preferred_first_name?: string | null | undefined;
  payment_method: string;
  current_employment_status?: string | null | undefined;
  historical?: boolean | undefined;
  employee_code?: string | undefined;
  department_uuid?: string | null | undefined;
  title?: string | undefined;
  hired_at?: string | undefined;
  hidden_ssn?: string | undefined;
  flsa_status?: string | undefined;
  applicable_tax_ids?: Array<number> | undefined;
  current_home_address?: EmployeeHomeAddress$Outbound | undefined;
  all_home_addresses?: Array<EmployeeHomeAddress$Outbound> | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const ShowEmployees$outboundSchema: z.ZodType<
  ShowEmployees$Outbound,
  z.ZodTypeDef,
  ShowEmployees
> = z.object({
  uuid: z.string(),
  firstName: z.string(),
  middleInitial: z.nullable(z.string()).optional(),
  lastName: z.string(),
  email: z.nullable(z.string()).optional(),
  companyUuid: z.string().optional(),
  managerUuid: z.nullable(z.string()).optional(),
  version: z.string().optional(),
  department: z.nullable(z.string()).optional(),
  terminated: z.boolean().optional(),
  twoPercentShareholder: z.nullable(z.boolean()).optional(),
  workEmail: z.nullable(z.string()).optional(),
  onboarded: z.boolean().optional(),
  onboardingStatus: z.nullable(OnboardingStatus$outboundSchema).optional(),
  onboardingDocumentsConfig: z.lazy(() =>
    OnboardingDocumentsConfig$outboundSchema
  ).optional(),
  jobs: z.array(Job$outboundSchema).optional(),
  eligiblePaidTimeOff: z.array(PaidTimeOff$outboundSchema).optional(),
  terminations: z.array(Termination$outboundSchema).optional(),
  garnishments: z.array(Garnishment$outboundSchema).optional(),
  customFields: z.array(EmployeeCustomField$outboundSchema).optional(),
  dateOfBirth: z.nullable(z.string()).optional(),
  hasSsn: z.boolean().optional(),
  ssn: z.string().optional(),
  phone: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  paymentMethod: PaymentMethod$outboundSchema.default("Check"),
  currentEmploymentStatus: z.nullable(CurrentEmploymentStatus$outboundSchema)
    .optional(),
  historical: z.boolean().optional(),
  employeeCode: z.string().optional(),
  departmentUuid: z.nullable(z.string()).optional(),
  title: z.string().optional(),
  hiredAt: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  hiddenSsn: z.string().optional(),
  flsaStatus: FlsaStatusType$outboundSchema.optional(),
  applicableTaxIds: z.array(z.number()).optional(),
  currentHomeAddress: EmployeeHomeAddress$outboundSchema.optional(),
  allHomeAddresses: z.array(EmployeeHomeAddress$outboundSchema).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      firstName: "first_name",
      middleInitial: "middle_initial",
      lastName: "last_name",
      companyUuid: "company_uuid",
      managerUuid: "manager_uuid",
      twoPercentShareholder: "two_percent_shareholder",
      workEmail: "work_email",
      onboardingStatus: "onboarding_status",
      onboardingDocumentsConfig: "onboarding_documents_config",
      eligiblePaidTimeOff: "eligible_paid_time_off",
      customFields: "custom_fields",
      dateOfBirth: "date_of_birth",
      hasSsn: "has_ssn",
      preferredFirstName: "preferred_first_name",
      paymentMethod: "payment_method",
      currentEmploymentStatus: "current_employment_status",
      employeeCode: "employee_code",
      departmentUuid: "department_uuid",
      hiredAt: "hired_at",
      hiddenSsn: "hidden_ssn",
      flsaStatus: "flsa_status",
      applicableTaxIds: "applicable_tax_ids",
      currentHomeAddress: "current_home_address",
      allHomeAddresses: "all_home_addresses",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ShowEmployees$ {
  /** @deprecated use `ShowEmployees$inboundSchema` instead. */
  export const inboundSchema = ShowEmployees$inboundSchema;
  /** @deprecated use `ShowEmployees$outboundSchema` instead. */
  export const outboundSchema = ShowEmployees$outboundSchema;
  /** @deprecated use `ShowEmployees$Outbound` instead. */
  export type Outbound = ShowEmployees$Outbound;
}

export function showEmployeesToJSON(showEmployees: ShowEmployees): string {
  return JSON.stringify(ShowEmployees$outboundSchema.parse(showEmployees));
}

export function showEmployeesFromJSON(
  jsonString: string,
): SafeParseResult<ShowEmployees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ShowEmployees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ShowEmployees' from JSON`,
  );
}
