/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Example response
 */
export type Form = {
  /**
   * The UUID of the form
   */
  uuid: string;
  /**
   * The type identifier of the form
   */
  name?: string | undefined;
  /**
   * The title of the form
   */
  title?: string | undefined;
  /**
   * The description of the form
   */
  description?: string | undefined;
  /**
   * If the form is in a draft state. E.g. End of year tax forms may be provided in a draft state prior to being finalized.
   */
  draft?: boolean | undefined;
  /**
   * The year of this form. For some forms, e.g. tax forms, this is the year which the form represents. A W2 for January - December 2022 would be delivered in January 2023 and have a year value of 2022. This value is nullable and will not be present on all forms.
   */
  year?: number | null | undefined;
  /**
   * The quarter of this form. For some forms, e.g. tax forms, this is the calendar quarter which this form represents. An Employer's Quarterly Federal Tax Return (Form 941) for April, May, June 2022 would have a quarter value of 2 (and a year value of 2022). This value is nullable and will not be present on all forms.
   */
  quarter?: number | null | undefined;
  /**
   * A boolean flag that indicates whether the form needs signing or not. Note that this value will change after the form is signed.
   */
  requiresSigning?: boolean | undefined;
  /**
   * The content type of the associated document. Most forms are PDFs with a content type of `application/pdf`. Some tax file packages will be zip files (containing PDFs) with a content type of `application/zip`. This attribute will be `null` when the document has not been prepared.
   */
  documentContentType?: string | null | undefined;
};

/** @internal */
export const Form$inboundSchema: z.ZodType<Form, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string(),
    name: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    draft: z.boolean().optional(),
    year: z.nullable(z.number().int()).optional(),
    quarter: z.nullable(z.number().int()).optional(),
    requires_signing: z.boolean().optional(),
    document_content_type: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "requires_signing": "requiresSigning",
      "document_content_type": "documentContentType",
    });
  });

/** @internal */
export type Form$Outbound = {
  uuid: string;
  name?: string | undefined;
  title?: string | undefined;
  description?: string | undefined;
  draft?: boolean | undefined;
  year?: number | null | undefined;
  quarter?: number | null | undefined;
  requires_signing?: boolean | undefined;
  document_content_type?: string | null | undefined;
};

/** @internal */
export const Form$outboundSchema: z.ZodType<Form$Outbound, z.ZodTypeDef, Form> =
  z.object({
    uuid: z.string(),
    name: z.string().optional(),
    title: z.string().optional(),
    description: z.string().optional(),
    draft: z.boolean().optional(),
    year: z.nullable(z.number().int()).optional(),
    quarter: z.nullable(z.number().int()).optional(),
    requiresSigning: z.boolean().optional(),
    documentContentType: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      requiresSigning: "requires_signing",
      documentContentType: "document_content_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Form$ {
  /** @deprecated use `Form$inboundSchema` instead. */
  export const inboundSchema = Form$inboundSchema;
  /** @deprecated use `Form$outboundSchema` instead. */
  export const outboundSchema = Form$outboundSchema;
  /** @deprecated use `Form$Outbound` instead. */
  export type Outbound = Form$Outbound;
}

export function formToJSON(form: Form): string {
  return JSON.stringify(Form$outboundSchema.parse(form));
}

export function formFromJSON(
  jsonString: string,
): SafeParseResult<Form, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Form$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Form' from JSON`,
  );
}
