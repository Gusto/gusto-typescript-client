/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Example response
 */
export type ReportTemplate = {
  /**
   * List of columns recommended
   */
  columns?: Array<string> | undefined;
  /**
   * List of groupings recommended
   */
  groupings?: Array<string> | undefined;
  /**
   * Company UUID
   */
  companyUuid?: string | undefined;
  /**
   * Type of report template
   */
  reportType?: string | undefined;
};

/** @internal */
export const ReportTemplate$inboundSchema: z.ZodType<
  ReportTemplate,
  z.ZodTypeDef,
  unknown
> = z.object({
  columns: z.array(z.string()).optional(),
  groupings: z.array(z.string()).optional(),
  company_uuid: z.string().optional(),
  report_type: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "report_type": "reportType",
  });
});

/** @internal */
export type ReportTemplate$Outbound = {
  columns?: Array<string> | undefined;
  groupings?: Array<string> | undefined;
  company_uuid?: string | undefined;
  report_type?: string | undefined;
};

/** @internal */
export const ReportTemplate$outboundSchema: z.ZodType<
  ReportTemplate$Outbound,
  z.ZodTypeDef,
  ReportTemplate
> = z.object({
  columns: z.array(z.string()).optional(),
  groupings: z.array(z.string()).optional(),
  companyUuid: z.string().optional(),
  reportType: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    reportType: "report_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReportTemplate$ {
  /** @deprecated use `ReportTemplate$inboundSchema` instead. */
  export const inboundSchema = ReportTemplate$inboundSchema;
  /** @deprecated use `ReportTemplate$outboundSchema` instead. */
  export const outboundSchema = ReportTemplate$outboundSchema;
  /** @deprecated use `ReportTemplate$Outbound` instead. */
  export type Outbound = ReportTemplate$Outbound;
}

export function reportTemplateToJSON(reportTemplate: ReportTemplate): string {
  return JSON.stringify(ReportTemplate$outboundSchema.parse(reportTemplate));
}

export function reportTemplateFromJSON(
  jsonString: string,
): SafeParseResult<ReportTemplate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReportTemplate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReportTemplate' from JSON`,
  );
}
