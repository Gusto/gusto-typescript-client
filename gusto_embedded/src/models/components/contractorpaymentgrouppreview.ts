/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContractorPaymentForGroupPreview,
  ContractorPaymentForGroupPreview$inboundSchema,
  ContractorPaymentForGroupPreview$Outbound,
  ContractorPaymentForGroupPreview$outboundSchema,
} from "./contractorpaymentforgrouppreview.js";
import {
  PayrollCreditBlockersType,
  PayrollCreditBlockersType$inboundSchema,
  PayrollCreditBlockersType$Outbound,
  PayrollCreditBlockersType$outboundSchema,
} from "./payrollcreditblockerstype.js";
import {
  PayrollSubmissionBlockersType,
  PayrollSubmissionBlockersType$inboundSchema,
  PayrollSubmissionBlockersType$Outbound,
  PayrollSubmissionBlockersType$outboundSchema,
} from "./payrollsubmissionblockerstype.js";

/**
 * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
 */
export const ContractorPaymentGroupPreviewStatus = {
  Unfunded: "Unfunded",
  Funded: "Funded",
} as const;
/**
 * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
 */
export type ContractorPaymentGroupPreviewStatus = ClosedEnum<
  typeof ContractorPaymentGroupPreviewStatus
>;

export type ContractorPaymentGroupPreviewTotals = {
  /**
   * The total amount for the group of contractor payments.
   */
  amount?: string | undefined;
  /**
   * The total debit amount for the group of contractor payments. Sum of wage & reimbursement amount.
   */
  debitAmount?: string | undefined;
  /**
   * The total wage amount for the group of contractor payments.
   */
  wageAmount?: string | undefined;
  /**
   * The total reimbursement amount for the group of contractor payments.
   */
  reimbursementAmount?: string | undefined;
  /**
   * The total check amount for the group of contractor payments.
   */
  checkAmount?: string | undefined;
};

/**
 * Preview of a contractor payment group
 */
export type ContractorPaymentGroupPreview = {
  /**
   * The unique identifier of the contractor payment group.
   */
  uuid?: string | null | undefined;
  /**
   * The UUID of the company.
   */
  companyUuid?: string | undefined;
  /**
   * The check date of the contractor payment group.
   */
  checkDate?: string | undefined;
  /**
   * The debit date of the contractor payment group.
   */
  debitDate?: string | undefined;
  /**
   * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
   */
  status?: ContractorPaymentGroupPreviewStatus | undefined;
  /**
   * Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
   */
  creationToken?: string | null | undefined;
  /**
   * Whether the disbursement is partner owned.
   */
  partnerOwnedDisbursement?: boolean | null | undefined;
  /**
   * List of submission blockers for the contractor payment group.
   */
  submissionBlockers?: Array<Array<PayrollSubmissionBlockersType>> | undefined;
  /**
   * List of credit blockers for the contractor payment group.
   */
  creditBlockers?: Array<Array<PayrollCreditBlockersType>> | undefined;
  totals?: ContractorPaymentGroupPreviewTotals | undefined;
  contractorPayments?: Array<ContractorPaymentForGroupPreview> | undefined;
};

/** @internal */
export const ContractorPaymentGroupPreviewStatus$inboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentGroupPreviewStatus
> = z.nativeEnum(ContractorPaymentGroupPreviewStatus);

/** @internal */
export const ContractorPaymentGroupPreviewStatus$outboundSchema:
  z.ZodNativeEnum<typeof ContractorPaymentGroupPreviewStatus> =
    ContractorPaymentGroupPreviewStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupPreviewStatus$ {
  /** @deprecated use `ContractorPaymentGroupPreviewStatus$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentGroupPreviewStatus$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupPreviewStatus$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupPreviewStatus$outboundSchema;
}

/** @internal */
export const ContractorPaymentGroupPreviewTotals$inboundSchema: z.ZodType<
  ContractorPaymentGroupPreviewTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  debit_amount: z.string().optional(),
  wage_amount: z.string().optional(),
  reimbursement_amount: z.string().optional(),
  check_amount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "debit_amount": "debitAmount",
    "wage_amount": "wageAmount",
    "reimbursement_amount": "reimbursementAmount",
    "check_amount": "checkAmount",
  });
});

/** @internal */
export type ContractorPaymentGroupPreviewTotals$Outbound = {
  amount?: string | undefined;
  debit_amount?: string | undefined;
  wage_amount?: string | undefined;
  reimbursement_amount?: string | undefined;
  check_amount?: string | undefined;
};

/** @internal */
export const ContractorPaymentGroupPreviewTotals$outboundSchema: z.ZodType<
  ContractorPaymentGroupPreviewTotals$Outbound,
  z.ZodTypeDef,
  ContractorPaymentGroupPreviewTotals
> = z.object({
  amount: z.string().optional(),
  debitAmount: z.string().optional(),
  wageAmount: z.string().optional(),
  reimbursementAmount: z.string().optional(),
  checkAmount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    debitAmount: "debit_amount",
    wageAmount: "wage_amount",
    reimbursementAmount: "reimbursement_amount",
    checkAmount: "check_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupPreviewTotals$ {
  /** @deprecated use `ContractorPaymentGroupPreviewTotals$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentGroupPreviewTotals$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupPreviewTotals$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupPreviewTotals$outboundSchema;
  /** @deprecated use `ContractorPaymentGroupPreviewTotals$Outbound` instead. */
  export type Outbound = ContractorPaymentGroupPreviewTotals$Outbound;
}

export function contractorPaymentGroupPreviewTotalsToJSON(
  contractorPaymentGroupPreviewTotals: ContractorPaymentGroupPreviewTotals,
): string {
  return JSON.stringify(
    ContractorPaymentGroupPreviewTotals$outboundSchema.parse(
      contractorPaymentGroupPreviewTotals,
    ),
  );
}

export function contractorPaymentGroupPreviewTotalsFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentGroupPreviewTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContractorPaymentGroupPreviewTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentGroupPreviewTotals' from JSON`,
  );
}

/** @internal */
export const ContractorPaymentGroupPreview$inboundSchema: z.ZodType<
  ContractorPaymentGroupPreview,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.nullable(z.string()).optional(),
  company_uuid: z.string().optional(),
  check_date: z.string().optional(),
  debit_date: z.string().optional(),
  status: ContractorPaymentGroupPreviewStatus$inboundSchema.optional(),
  creation_token: z.nullable(z.string()).optional(),
  partner_owned_disbursement: z.nullable(z.boolean()).optional(),
  submission_blockers: z.array(
    z.array(PayrollSubmissionBlockersType$inboundSchema),
  ).optional(),
  credit_blockers: z.array(z.array(PayrollCreditBlockersType$inboundSchema))
    .optional(),
  totals: z.lazy(() => ContractorPaymentGroupPreviewTotals$inboundSchema)
    .optional(),
  contractor_payments: z.array(ContractorPaymentForGroupPreview$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "check_date": "checkDate",
    "debit_date": "debitDate",
    "creation_token": "creationToken",
    "partner_owned_disbursement": "partnerOwnedDisbursement",
    "submission_blockers": "submissionBlockers",
    "credit_blockers": "creditBlockers",
    "contractor_payments": "contractorPayments",
  });
});

/** @internal */
export type ContractorPaymentGroupPreview$Outbound = {
  uuid?: string | null | undefined;
  company_uuid?: string | undefined;
  check_date?: string | undefined;
  debit_date?: string | undefined;
  status?: string | undefined;
  creation_token?: string | null | undefined;
  partner_owned_disbursement?: boolean | null | undefined;
  submission_blockers?:
    | Array<Array<PayrollSubmissionBlockersType$Outbound>>
    | undefined;
  credit_blockers?:
    | Array<Array<PayrollCreditBlockersType$Outbound>>
    | undefined;
  totals?: ContractorPaymentGroupPreviewTotals$Outbound | undefined;
  contractor_payments?:
    | Array<ContractorPaymentForGroupPreview$Outbound>
    | undefined;
};

/** @internal */
export const ContractorPaymentGroupPreview$outboundSchema: z.ZodType<
  ContractorPaymentGroupPreview$Outbound,
  z.ZodTypeDef,
  ContractorPaymentGroupPreview
> = z.object({
  uuid: z.nullable(z.string()).optional(),
  companyUuid: z.string().optional(),
  checkDate: z.string().optional(),
  debitDate: z.string().optional(),
  status: ContractorPaymentGroupPreviewStatus$outboundSchema.optional(),
  creationToken: z.nullable(z.string()).optional(),
  partnerOwnedDisbursement: z.nullable(z.boolean()).optional(),
  submissionBlockers: z.array(
    z.array(PayrollSubmissionBlockersType$outboundSchema),
  ).optional(),
  creditBlockers: z.array(z.array(PayrollCreditBlockersType$outboundSchema))
    .optional(),
  totals: z.lazy(() => ContractorPaymentGroupPreviewTotals$outboundSchema)
    .optional(),
  contractorPayments: z.array(ContractorPaymentForGroupPreview$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    checkDate: "check_date",
    debitDate: "debit_date",
    creationToken: "creation_token",
    partnerOwnedDisbursement: "partner_owned_disbursement",
    submissionBlockers: "submission_blockers",
    creditBlockers: "credit_blockers",
    contractorPayments: "contractor_payments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupPreview$ {
  /** @deprecated use `ContractorPaymentGroupPreview$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentGroupPreview$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupPreview$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentGroupPreview$outboundSchema;
  /** @deprecated use `ContractorPaymentGroupPreview$Outbound` instead. */
  export type Outbound = ContractorPaymentGroupPreview$Outbound;
}

export function contractorPaymentGroupPreviewToJSON(
  contractorPaymentGroupPreview: ContractorPaymentGroupPreview,
): string {
  return JSON.stringify(
    ContractorPaymentGroupPreview$outboundSchema.parse(
      contractorPaymentGroupPreview,
    ),
  );
}

export function contractorPaymentGroupPreviewFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentGroupPreview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPaymentGroupPreview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentGroupPreview' from JSON`,
  );
}
