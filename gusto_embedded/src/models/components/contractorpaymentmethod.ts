/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentMethodBankAccount,
  PaymentMethodBankAccount$inboundSchema,
  PaymentMethodBankAccount$Outbound,
  PaymentMethodBankAccount$outboundSchema,
} from "./paymentmethodbankaccount.js";

/**
 * The payment method type. If type is Check, then `split_by` and `splits` do not need to be populated. If type is Direct Deposit, `split_by` and `splits` are required.
 */
export const ContractorPaymentMethodType = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The payment method type. If type is Check, then `split_by` and `splits` do not need to be populated. If type is Direct Deposit, `split_by` and `splits` are required.
 */
export type ContractorPaymentMethodType = ClosedEnum<
  typeof ContractorPaymentMethodType
>;

/**
 * Describes how the payment will be split. If `split_by` is Percentage, then the `split` amounts must add up to exactly 100. If `split_by` is Amount, then the last split amount must be nil to capture the remainder.
 */
export const ContractorPaymentMethodSplitBy = {
  Amount: "Amount",
  Percentage: "Percentage",
} as const;
/**
 * Describes how the payment will be split. If `split_by` is Percentage, then the `split` amounts must add up to exactly 100. If `split_by` is Amount, then the last split amount must be nil to capture the remainder.
 */
export type ContractorPaymentMethodSplitBy = ClosedEnum<
  typeof ContractorPaymentMethodSplitBy
>;

/**
 * Example response
 */
export type ContractorPaymentMethod = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The payment method type. If type is Check, then `split_by` and `splits` do not need to be populated. If type is Direct Deposit, `split_by` and `splits` are required.
   */
  type?: ContractorPaymentMethodType | undefined;
  /**
   * Describes how the payment will be split. If `split_by` is Percentage, then the `split` amounts must add up to exactly 100. If `split_by` is Amount, then the last split amount must be nil to capture the remainder.
   */
  splitBy?: ContractorPaymentMethodSplitBy | null | undefined;
  splits?: Array<PaymentMethodBankAccount> | null | undefined;
};

/** @internal */
export const ContractorPaymentMethodType$inboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentMethodType
> = z.nativeEnum(ContractorPaymentMethodType);

/** @internal */
export const ContractorPaymentMethodType$outboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentMethodType
> = ContractorPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentMethodType$ {
  /** @deprecated use `ContractorPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentMethodType$inboundSchema;
  /** @deprecated use `ContractorPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentMethodType$outboundSchema;
}

/** @internal */
export const ContractorPaymentMethodSplitBy$inboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentMethodSplitBy
> = z.nativeEnum(ContractorPaymentMethodSplitBy);

/** @internal */
export const ContractorPaymentMethodSplitBy$outboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentMethodSplitBy
> = ContractorPaymentMethodSplitBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentMethodSplitBy$ {
  /** @deprecated use `ContractorPaymentMethodSplitBy$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentMethodSplitBy$inboundSchema;
  /** @deprecated use `ContractorPaymentMethodSplitBy$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentMethodSplitBy$outboundSchema;
}

/** @internal */
export const ContractorPaymentMethod$inboundSchema: z.ZodType<
  ContractorPaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
  type: ContractorPaymentMethodType$inboundSchema.optional(),
  split_by: z.nullable(ContractorPaymentMethodSplitBy$inboundSchema).optional(),
  splits: z.nullable(z.array(PaymentMethodBankAccount$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "split_by": "splitBy",
  });
});

/** @internal */
export type ContractorPaymentMethod$Outbound = {
  version?: string | undefined;
  type?: string | undefined;
  split_by?: string | null | undefined;
  splits?: Array<PaymentMethodBankAccount$Outbound> | null | undefined;
};

/** @internal */
export const ContractorPaymentMethod$outboundSchema: z.ZodType<
  ContractorPaymentMethod$Outbound,
  z.ZodTypeDef,
  ContractorPaymentMethod
> = z.object({
  version: z.string().optional(),
  type: ContractorPaymentMethodType$outboundSchema.optional(),
  splitBy: z.nullable(ContractorPaymentMethodSplitBy$outboundSchema).optional(),
  splits: z.nullable(z.array(PaymentMethodBankAccount$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    splitBy: "split_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentMethod$ {
  /** @deprecated use `ContractorPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentMethod$inboundSchema;
  /** @deprecated use `ContractorPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentMethod$outboundSchema;
  /** @deprecated use `ContractorPaymentMethod$Outbound` instead. */
  export type Outbound = ContractorPaymentMethod$Outbound;
}

export function contractorPaymentMethodToJSON(
  contractorPaymentMethod: ContractorPaymentMethod,
): string {
  return JSON.stringify(
    ContractorPaymentMethod$outboundSchema.parse(contractorPaymentMethod),
  );
}

export function contractorPaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentMethod' from JSON`,
  );
}
