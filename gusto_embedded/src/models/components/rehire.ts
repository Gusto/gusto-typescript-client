/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
 */
export const RehireEmploymentStatus = {
  PartTime: "part_time",
  FullTime: "full_time",
  PartTimeEligible: "part_time_eligible",
  Variable: "variable",
  Seasonal: "seasonal",
  NotSet: "not_set",
} as const;
/**
 * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
 */
export type RehireEmploymentStatus = ClosedEnum<typeof RehireEmploymentStatus>;

/**
 * Example response
 */
export type Rehire = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The day when the employee returns to work.
   */
  effectiveDate?: string | undefined;
  /**
   * The boolean flag indicating whether Gusto will file a new hire report for the employee.
   */
  fileNewHireReport?: boolean | undefined;
  /**
   * The uuid of the employee's work location.
   */
  workLocationUuid?: string | undefined;
  /**
   * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
   */
  employmentStatus?: RehireEmploymentStatus | undefined;
  /**
   * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
   */
  twoPercentShareholder?: boolean | undefined;
  /**
   * The UUID of the employee.
   */
  employeeUuid?: string | undefined;
  /**
   * Whether the employee's rehire has gone into effect.
   */
  active?: boolean | undefined;
};

/** @internal */
export const RehireEmploymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof RehireEmploymentStatus
> = z.nativeEnum(RehireEmploymentStatus);

/** @internal */
export const RehireEmploymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof RehireEmploymentStatus
> = RehireEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RehireEmploymentStatus$ {
  /** @deprecated use `RehireEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema = RehireEmploymentStatus$inboundSchema;
  /** @deprecated use `RehireEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema = RehireEmploymentStatus$outboundSchema;
}

/** @internal */
export const Rehire$inboundSchema: z.ZodType<Rehire, z.ZodTypeDef, unknown> = z
  .object({
    version: z.string().optional(),
    effective_date: z.string().optional(),
    file_new_hire_report: z.boolean().optional(),
    work_location_uuid: z.string().optional(),
    employment_status: RehireEmploymentStatus$inboundSchema.optional(),
    two_percent_shareholder: z.boolean().optional(),
    employee_uuid: z.string().optional(),
    active: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "effective_date": "effectiveDate",
      "file_new_hire_report": "fileNewHireReport",
      "work_location_uuid": "workLocationUuid",
      "employment_status": "employmentStatus",
      "two_percent_shareholder": "twoPercentShareholder",
      "employee_uuid": "employeeUuid",
    });
  });

/** @internal */
export type Rehire$Outbound = {
  version?: string | undefined;
  effective_date?: string | undefined;
  file_new_hire_report?: boolean | undefined;
  work_location_uuid?: string | undefined;
  employment_status?: string | undefined;
  two_percent_shareholder?: boolean | undefined;
  employee_uuid?: string | undefined;
  active?: boolean | undefined;
};

/** @internal */
export const Rehire$outboundSchema: z.ZodType<
  Rehire$Outbound,
  z.ZodTypeDef,
  Rehire
> = z.object({
  version: z.string().optional(),
  effectiveDate: z.string().optional(),
  fileNewHireReport: z.boolean().optional(),
  workLocationUuid: z.string().optional(),
  employmentStatus: RehireEmploymentStatus$outboundSchema.optional(),
  twoPercentShareholder: z.boolean().optional(),
  employeeUuid: z.string().optional(),
  active: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    effectiveDate: "effective_date",
    fileNewHireReport: "file_new_hire_report",
    workLocationUuid: "work_location_uuid",
    employmentStatus: "employment_status",
    twoPercentShareholder: "two_percent_shareholder",
    employeeUuid: "employee_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rehire$ {
  /** @deprecated use `Rehire$inboundSchema` instead. */
  export const inboundSchema = Rehire$inboundSchema;
  /** @deprecated use `Rehire$outboundSchema` instead. */
  export const outboundSchema = Rehire$outboundSchema;
  /** @deprecated use `Rehire$Outbound` instead. */
  export type Outbound = Rehire$Outbound;
}

export function rehireToJSON(rehire: Rehire): string {
  return JSON.stringify(Rehire$outboundSchema.parse(rehire));
}

export function rehireFromJSON(
  jsonString: string,
): SafeParseResult<Rehire, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Rehire$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Rehire' from JSON`,
  );
}
