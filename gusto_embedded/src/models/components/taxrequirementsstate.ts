/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaxRequirementSet,
  TaxRequirementSet$inboundSchema,
  TaxRequirementSet$Outbound,
  TaxRequirementSet$outboundSchema,
} from "./taxrequirementset.js";

export type TaxRequirementsState = {
  companyUuid?: string | undefined;
  /**
   * One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
   */
  state?: string | undefined;
  requirementSets?: Array<TaxRequirementSet> | undefined;
};

/** @internal */
export const TaxRequirementsState$inboundSchema: z.ZodType<
  TaxRequirementsState,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string().optional(),
  state: z.string().optional(),
  requirement_sets: z.array(TaxRequirementSet$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "requirement_sets": "requirementSets",
  });
});

/** @internal */
export type TaxRequirementsState$Outbound = {
  company_uuid?: string | undefined;
  state?: string | undefined;
  requirement_sets?: Array<TaxRequirementSet$Outbound> | undefined;
};

/** @internal */
export const TaxRequirementsState$outboundSchema: z.ZodType<
  TaxRequirementsState$Outbound,
  z.ZodTypeDef,
  TaxRequirementsState
> = z.object({
  companyUuid: z.string().optional(),
  state: z.string().optional(),
  requirementSets: z.array(TaxRequirementSet$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    requirementSets: "requirement_sets",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRequirementsState$ {
  /** @deprecated use `TaxRequirementsState$inboundSchema` instead. */
  export const inboundSchema = TaxRequirementsState$inboundSchema;
  /** @deprecated use `TaxRequirementsState$outboundSchema` instead. */
  export const outboundSchema = TaxRequirementsState$outboundSchema;
  /** @deprecated use `TaxRequirementsState$Outbound` instead. */
  export type Outbound = TaxRequirementsState$Outbound;
}

export function taxRequirementsStateToJSON(
  taxRequirementsState: TaxRequirementsState,
): string {
  return JSON.stringify(
    TaxRequirementsState$outboundSchema.parse(taxRequirementsState),
  );
}

export function taxRequirementsStateFromJSON(
  jsonString: string,
): SafeParseResult<TaxRequirementsState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRequirementsState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRequirementsState' from JSON`,
  );
}
