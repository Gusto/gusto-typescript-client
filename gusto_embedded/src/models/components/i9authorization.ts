/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The employee's authorization status
 */
export const AuthorizationStatus = {
  Citizen: "citizen",
  Noncitizen: "noncitizen",
  PermanentResident: "permanent_resident",
  Alien: "alien",
} as const;
/**
 * The employee's authorization status
 */
export type AuthorizationStatus = ClosedEnum<typeof AuthorizationStatus>;

/**
 * The document's document type
 */
export const I9AuthorizationDocumentType = {
  UscisAlienRegistrationNumber: "uscis_alien_registration_number",
  FormI94: "form_i94",
  ForeignPassport: "foreign_passport",
} as const;
/**
 * The document's document type
 */
export type I9AuthorizationDocumentType = ClosedEnum<
  typeof I9AuthorizationDocumentType
>;

/**
 * An employee's I-9 authorization
 */
export type I9Authorization = {
  /**
   * The UUID of the I-9 authorization
   */
  uuid: string;
  /**
   * The UUID of the Form associated with this I-9 authorization. Use this with "Employee Forms" API endpoints.
   */
  formUuid?: string | undefined;
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  /**
   * The employee's authorization status
   */
  authorizationStatus: AuthorizationStatus;
  /**
   * The document's document type
   */
  documentType?: I9AuthorizationDocumentType | undefined;
  /**
   * Whether or not a `document_number` exists for this document.
   */
  hasDocumentNumber?: boolean | undefined;
  /**
   * The document's expiration date
   */
  expirationDate?: string | undefined;
  /**
   * The document's country of issuance
   */
  country?: string | undefined;
  /**
   * Whether the employer has signed the Form I-9
   */
  employerSigned: boolean;
  /**
   * Whether the employee has signed the Form I-9
   */
  employeeSigned: boolean;
  /**
   * Any additional notes
   */
  additionalInfo?: string | undefined;
  /**
   * Whether an alternative procedure authorized by DHS to examine documents was used
   */
  altProcedure?: boolean | undefined;
};

/** @internal */
export const AuthorizationStatus$inboundSchema: z.ZodNativeEnum<
  typeof AuthorizationStatus
> = z.nativeEnum(AuthorizationStatus);

/** @internal */
export const AuthorizationStatus$outboundSchema: z.ZodNativeEnum<
  typeof AuthorizationStatus
> = AuthorizationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationStatus$ {
  /** @deprecated use `AuthorizationStatus$inboundSchema` instead. */
  export const inboundSchema = AuthorizationStatus$inboundSchema;
  /** @deprecated use `AuthorizationStatus$outboundSchema` instead. */
  export const outboundSchema = AuthorizationStatus$outboundSchema;
}

/** @internal */
export const I9AuthorizationDocumentType$inboundSchema: z.ZodNativeEnum<
  typeof I9AuthorizationDocumentType
> = z.nativeEnum(I9AuthorizationDocumentType);

/** @internal */
export const I9AuthorizationDocumentType$outboundSchema: z.ZodNativeEnum<
  typeof I9AuthorizationDocumentType
> = I9AuthorizationDocumentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace I9AuthorizationDocumentType$ {
  /** @deprecated use `I9AuthorizationDocumentType$inboundSchema` instead. */
  export const inboundSchema = I9AuthorizationDocumentType$inboundSchema;
  /** @deprecated use `I9AuthorizationDocumentType$outboundSchema` instead. */
  export const outboundSchema = I9AuthorizationDocumentType$outboundSchema;
}

/** @internal */
export const I9Authorization$inboundSchema: z.ZodType<
  I9Authorization,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  form_uuid: z.string().optional(),
  version: z.string(),
  authorization_status: AuthorizationStatus$inboundSchema,
  document_type: I9AuthorizationDocumentType$inboundSchema.optional(),
  has_document_number: z.boolean().optional(),
  expiration_date: z.string().optional(),
  country: z.string().optional(),
  employer_signed: z.boolean(),
  employee_signed: z.boolean(),
  additional_info: z.string().optional(),
  alt_procedure: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "form_uuid": "formUuid",
    "authorization_status": "authorizationStatus",
    "document_type": "documentType",
    "has_document_number": "hasDocumentNumber",
    "expiration_date": "expirationDate",
    "employer_signed": "employerSigned",
    "employee_signed": "employeeSigned",
    "additional_info": "additionalInfo",
    "alt_procedure": "altProcedure",
  });
});

/** @internal */
export type I9Authorization$Outbound = {
  uuid: string;
  form_uuid?: string | undefined;
  version: string;
  authorization_status: string;
  document_type?: string | undefined;
  has_document_number?: boolean | undefined;
  expiration_date?: string | undefined;
  country?: string | undefined;
  employer_signed: boolean;
  employee_signed: boolean;
  additional_info?: string | undefined;
  alt_procedure?: boolean | undefined;
};

/** @internal */
export const I9Authorization$outboundSchema: z.ZodType<
  I9Authorization$Outbound,
  z.ZodTypeDef,
  I9Authorization
> = z.object({
  uuid: z.string(),
  formUuid: z.string().optional(),
  version: z.string(),
  authorizationStatus: AuthorizationStatus$outboundSchema,
  documentType: I9AuthorizationDocumentType$outboundSchema.optional(),
  hasDocumentNumber: z.boolean().optional(),
  expirationDate: z.string().optional(),
  country: z.string().optional(),
  employerSigned: z.boolean(),
  employeeSigned: z.boolean(),
  additionalInfo: z.string().optional(),
  altProcedure: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    formUuid: "form_uuid",
    authorizationStatus: "authorization_status",
    documentType: "document_type",
    hasDocumentNumber: "has_document_number",
    expirationDate: "expiration_date",
    employerSigned: "employer_signed",
    employeeSigned: "employee_signed",
    additionalInfo: "additional_info",
    altProcedure: "alt_procedure",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace I9Authorization$ {
  /** @deprecated use `I9Authorization$inboundSchema` instead. */
  export const inboundSchema = I9Authorization$inboundSchema;
  /** @deprecated use `I9Authorization$outboundSchema` instead. */
  export const outboundSchema = I9Authorization$outboundSchema;
  /** @deprecated use `I9Authorization$Outbound` instead. */
  export type Outbound = I9Authorization$Outbound;
}

export function i9AuthorizationToJSON(
  i9Authorization: I9Authorization,
): string {
  return JSON.stringify(I9Authorization$outboundSchema.parse(i9Authorization));
}

export function i9AuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<I9Authorization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => I9Authorization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'I9Authorization' from JSON`,
  );
}
