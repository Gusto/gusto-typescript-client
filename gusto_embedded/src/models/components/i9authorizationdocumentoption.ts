/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The document option's section in the list of acceptable documents on the Form I-9
 */
export const Section = {
  A: "A",
  A1: "A1",
  A2: "A2",
  A3: "A3",
  B: "B",
  C: "C",
} as const;
/**
 * The document option's section in the list of acceptable documents on the Form I-9
 */
export type Section = ClosedEnum<typeof Section>;

/**
 * An employee's I-9 verification document option based on the authorization status
 */
export type I9AuthorizationDocumentOption = {
  /**
   * The document option's section in the list of acceptable documents on the Form I-9
   */
  section: Section;
  /**
   * The document option's description
   */
  description: string;
  /**
   * The document option's document type
   */
  documentType: string;
  /**
   * The document option's document titles
   */
  documentTitle: Array<string>;
  /**
   * Whether the document is a common choice for I-9 verification
   */
  commonChoice: boolean;
};

/** @internal */
export const Section$inboundSchema: z.ZodNativeEnum<typeof Section> = z
  .nativeEnum(Section);

/** @internal */
export const Section$outboundSchema: z.ZodNativeEnum<typeof Section> =
  Section$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Section$ {
  /** @deprecated use `Section$inboundSchema` instead. */
  export const inboundSchema = Section$inboundSchema;
  /** @deprecated use `Section$outboundSchema` instead. */
  export const outboundSchema = Section$outboundSchema;
}

/** @internal */
export const I9AuthorizationDocumentOption$inboundSchema: z.ZodType<
  I9AuthorizationDocumentOption,
  z.ZodTypeDef,
  unknown
> = z.object({
  section: Section$inboundSchema,
  description: z.string(),
  document_type: z.string(),
  document_title: z.array(z.string()),
  common_choice: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "document_type": "documentType",
    "document_title": "documentTitle",
    "common_choice": "commonChoice",
  });
});

/** @internal */
export type I9AuthorizationDocumentOption$Outbound = {
  section: string;
  description: string;
  document_type: string;
  document_title: Array<string>;
  common_choice: boolean;
};

/** @internal */
export const I9AuthorizationDocumentOption$outboundSchema: z.ZodType<
  I9AuthorizationDocumentOption$Outbound,
  z.ZodTypeDef,
  I9AuthorizationDocumentOption
> = z.object({
  section: Section$outboundSchema,
  description: z.string(),
  documentType: z.string(),
  documentTitle: z.array(z.string()),
  commonChoice: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    documentType: "document_type",
    documentTitle: "document_title",
    commonChoice: "common_choice",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace I9AuthorizationDocumentOption$ {
  /** @deprecated use `I9AuthorizationDocumentOption$inboundSchema` instead. */
  export const inboundSchema = I9AuthorizationDocumentOption$inboundSchema;
  /** @deprecated use `I9AuthorizationDocumentOption$outboundSchema` instead. */
  export const outboundSchema = I9AuthorizationDocumentOption$outboundSchema;
  /** @deprecated use `I9AuthorizationDocumentOption$Outbound` instead. */
  export type Outbound = I9AuthorizationDocumentOption$Outbound;
}

export function i9AuthorizationDocumentOptionToJSON(
  i9AuthorizationDocumentOption: I9AuthorizationDocumentOption,
): string {
  return JSON.stringify(
    I9AuthorizationDocumentOption$outboundSchema.parse(
      i9AuthorizationDocumentOption,
    ),
  );
}

export function i9AuthorizationDocumentOptionFromJSON(
  jsonString: string,
): SafeParseResult<I9AuthorizationDocumentOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => I9AuthorizationDocumentOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'I9AuthorizationDocumentOption' from JSON`,
  );
}
