/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PayScheduleAssignmentEmployeeChange,
  PayScheduleAssignmentEmployeeChange$inboundSchema,
  PayScheduleAssignmentEmployeeChange$Outbound,
  PayScheduleAssignmentEmployeeChange$outboundSchema,
} from "./payscheduleassignmentemployeechange.js";

/**
 * The pay schedule assignment type.
 */
export const PayScheduleAssignmentPreviewType = {
  Single: "single",
  HourlySalaried: "hourly_salaried",
  ByEmployee: "by_employee",
  ByDepartment: "by_department",
} as const;
/**
 * The pay schedule assignment type.
 */
export type PayScheduleAssignmentPreviewType = ClosedEnum<
  typeof PayScheduleAssignmentPreviewType
>;

/**
 * The representation of a pay schedule assignment preview.
 */
export type PayScheduleAssignmentPreview = {
  /**
   * The pay schedule assignment type.
   */
  type?: PayScheduleAssignmentPreviewType | null | undefined;
  /**
   * A list of pay schedule changes including pay period and transition pay period.
   */
  employeeChanges?: Array<PayScheduleAssignmentEmployeeChange> | undefined;
};

/** @internal */
export const PayScheduleAssignmentPreviewType$inboundSchema: z.ZodNativeEnum<
  typeof PayScheduleAssignmentPreviewType
> = z.nativeEnum(PayScheduleAssignmentPreviewType);

/** @internal */
export const PayScheduleAssignmentPreviewType$outboundSchema: z.ZodNativeEnum<
  typeof PayScheduleAssignmentPreviewType
> = PayScheduleAssignmentPreviewType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayScheduleAssignmentPreviewType$ {
  /** @deprecated use `PayScheduleAssignmentPreviewType$inboundSchema` instead. */
  export const inboundSchema = PayScheduleAssignmentPreviewType$inboundSchema;
  /** @deprecated use `PayScheduleAssignmentPreviewType$outboundSchema` instead. */
  export const outboundSchema = PayScheduleAssignmentPreviewType$outboundSchema;
}

/** @internal */
export const PayScheduleAssignmentPreview$inboundSchema: z.ZodType<
  PayScheduleAssignmentPreview,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(PayScheduleAssignmentPreviewType$inboundSchema).optional(),
  employee_changes: z.array(PayScheduleAssignmentEmployeeChange$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_changes": "employeeChanges",
  });
});

/** @internal */
export type PayScheduleAssignmentPreview$Outbound = {
  type?: string | null | undefined;
  employee_changes?:
    | Array<PayScheduleAssignmentEmployeeChange$Outbound>
    | undefined;
};

/** @internal */
export const PayScheduleAssignmentPreview$outboundSchema: z.ZodType<
  PayScheduleAssignmentPreview$Outbound,
  z.ZodTypeDef,
  PayScheduleAssignmentPreview
> = z.object({
  type: z.nullable(PayScheduleAssignmentPreviewType$outboundSchema).optional(),
  employeeChanges: z.array(PayScheduleAssignmentEmployeeChange$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    employeeChanges: "employee_changes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayScheduleAssignmentPreview$ {
  /** @deprecated use `PayScheduleAssignmentPreview$inboundSchema` instead. */
  export const inboundSchema = PayScheduleAssignmentPreview$inboundSchema;
  /** @deprecated use `PayScheduleAssignmentPreview$outboundSchema` instead. */
  export const outboundSchema = PayScheduleAssignmentPreview$outboundSchema;
  /** @deprecated use `PayScheduleAssignmentPreview$Outbound` instead. */
  export type Outbound = PayScheduleAssignmentPreview$Outbound;
}

export function payScheduleAssignmentPreviewToJSON(
  payScheduleAssignmentPreview: PayScheduleAssignmentPreview,
): string {
  return JSON.stringify(
    PayScheduleAssignmentPreview$outboundSchema.parse(
      payScheduleAssignmentPreview,
    ),
  );
}

export function payScheduleAssignmentPreviewFromJSON(
  jsonString: string,
): SafeParseResult<PayScheduleAssignmentPreview, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayScheduleAssignmentPreview$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayScheduleAssignmentPreview' from JSON`,
  );
}
