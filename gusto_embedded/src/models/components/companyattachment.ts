/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The category of the company attachment
 */
export const Category = {
  GepNotice: "gep_notice",
  Compliance: "compliance",
  Other: "other",
} as const;
/**
 * The category of the company attachment
 */
export type Category = ClosedEnum<typeof Category>;

/**
 * The company attachment
 */
export type CompanyAttachment = {
  /**
   * UUID of the company attachment
   */
  uuid?: string | undefined;
  /**
   * name of the file uploaded
   */
  name?: string | undefined;
  /**
   * The category of the company attachment
   */
  category?: Category | undefined;
  /**
   * The ISO 8601 timestamp of when an attachment was uploaded
   */
  uploadTime?: string | undefined;
};

/** @internal */
export const Category$inboundSchema: z.ZodNativeEnum<typeof Category> = z
  .nativeEnum(Category);

/** @internal */
export const Category$outboundSchema: z.ZodNativeEnum<typeof Category> =
  Category$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Category$ {
  /** @deprecated use `Category$inboundSchema` instead. */
  export const inboundSchema = Category$inboundSchema;
  /** @deprecated use `Category$outboundSchema` instead. */
  export const outboundSchema = Category$outboundSchema;
}

/** @internal */
export const CompanyAttachment$inboundSchema: z.ZodType<
  CompanyAttachment,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  name: z.string().optional(),
  category: Category$inboundSchema.optional(),
  upload_time: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "upload_time": "uploadTime",
  });
});

/** @internal */
export type CompanyAttachment$Outbound = {
  uuid?: string | undefined;
  name?: string | undefined;
  category?: string | undefined;
  upload_time?: string | undefined;
};

/** @internal */
export const CompanyAttachment$outboundSchema: z.ZodType<
  CompanyAttachment$Outbound,
  z.ZodTypeDef,
  CompanyAttachment
> = z.object({
  uuid: z.string().optional(),
  name: z.string().optional(),
  category: Category$outboundSchema.optional(),
  uploadTime: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    uploadTime: "upload_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyAttachment$ {
  /** @deprecated use `CompanyAttachment$inboundSchema` instead. */
  export const inboundSchema = CompanyAttachment$inboundSchema;
  /** @deprecated use `CompanyAttachment$outboundSchema` instead. */
  export const outboundSchema = CompanyAttachment$outboundSchema;
  /** @deprecated use `CompanyAttachment$Outbound` instead. */
  export type Outbound = CompanyAttachment$Outbound;
}

export function companyAttachmentToJSON(
  companyAttachment: CompanyAttachment,
): string {
  return JSON.stringify(
    CompanyAttachment$outboundSchema.parse(companyAttachment),
  );
}

export function companyAttachmentFromJSON(
  jsonString: string,
): SafeParseResult<CompanyAttachment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyAttachment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyAttachment' from JSON`,
  );
}
