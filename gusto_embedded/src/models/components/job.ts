/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Compensation,
  Compensation$inboundSchema,
  Compensation$Outbound,
  Compensation$outboundSchema,
} from "./compensation.js";

/**
 * The representation of a job in Gusto.
 */
export type Job = {
  /**
   * The UUID of the job.
   */
  uuid: string;
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The UUID of the employee to which the job belongs.
   */
  employeeUuid?: string | undefined;
  /**
   * The date when the employee was hired or rehired for the job.
   */
  hireDate?: string | undefined;
  /**
   * The title for the job.
   */
  title?: string | null | undefined;
  /**
   * Whether this is the employee's primary job. The value will be set to true unless an existing job exists for the employee.
   */
  primary?: boolean | undefined;
  /**
   * The current compensation rate of the job.
   */
  rate?: string | undefined;
  /**
   * The payment unit of the current compensation for the job.
   */
  paymentUnit?: string | undefined;
  /**
   * The UUID of the current compensation of the job.
   */
  currentCompensationUuid?: string | undefined;
  /**
   * Whether the employee owns at least 2% of the company.
   */
  twoPercentShareholder?: boolean | undefined;
  /**
   * Whether this job is eligible for workers' compensation coverage in the state of Washington (WA).
   */
  stateWcCovered?: boolean | null | undefined;
  /**
   * The risk class code for workers' compensation in Washington state. Please visit [Washington state's Risk Class page](https://www.lni.wa.gov/insurance/rates-risk-classes/risk-classes-for-workers-compensation/risk-class-lookup#/) to learn more.
   */
  stateWcClassCode?: string | null | undefined;
  compensations?: Array<Compensation> | undefined;
};

/** @internal */
export const Job$inboundSchema: z.ZodType<Job, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string(),
    version: z.string().optional(),
    employee_uuid: z.string().optional(),
    hire_date: z.string().optional(),
    title: z.nullable(z.string()).default(null),
    primary: z.boolean().optional(),
    rate: z.string().optional(),
    payment_unit: z.string().optional(),
    current_compensation_uuid: z.string().optional(),
    two_percent_shareholder: z.boolean().optional(),
    state_wc_covered: z.nullable(z.boolean()).optional(),
    state_wc_class_code: z.nullable(z.string()).optional(),
    compensations: z.array(Compensation$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "employee_uuid": "employeeUuid",
      "hire_date": "hireDate",
      "payment_unit": "paymentUnit",
      "current_compensation_uuid": "currentCompensationUuid",
      "two_percent_shareholder": "twoPercentShareholder",
      "state_wc_covered": "stateWcCovered",
      "state_wc_class_code": "stateWcClassCode",
    });
  });

/** @internal */
export type Job$Outbound = {
  uuid: string;
  version?: string | undefined;
  employee_uuid?: string | undefined;
  hire_date?: string | undefined;
  title: string | null;
  primary?: boolean | undefined;
  rate?: string | undefined;
  payment_unit?: string | undefined;
  current_compensation_uuid?: string | undefined;
  two_percent_shareholder?: boolean | undefined;
  state_wc_covered?: boolean | null | undefined;
  state_wc_class_code?: string | null | undefined;
  compensations?: Array<Compensation$Outbound> | undefined;
};

/** @internal */
export const Job$outboundSchema: z.ZodType<Job$Outbound, z.ZodTypeDef, Job> = z
  .object({
    uuid: z.string(),
    version: z.string().optional(),
    employeeUuid: z.string().optional(),
    hireDate: z.string().optional(),
    title: z.nullable(z.string()).default(null),
    primary: z.boolean().optional(),
    rate: z.string().optional(),
    paymentUnit: z.string().optional(),
    currentCompensationUuid: z.string().optional(),
    twoPercentShareholder: z.boolean().optional(),
    stateWcCovered: z.nullable(z.boolean()).optional(),
    stateWcClassCode: z.nullable(z.string()).optional(),
    compensations: z.array(Compensation$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      employeeUuid: "employee_uuid",
      hireDate: "hire_date",
      paymentUnit: "payment_unit",
      currentCompensationUuid: "current_compensation_uuid",
      twoPercentShareholder: "two_percent_shareholder",
      stateWcCovered: "state_wc_covered",
      stateWcClassCode: "state_wc_class_code",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Job$ {
  /** @deprecated use `Job$inboundSchema` instead. */
  export const inboundSchema = Job$inboundSchema;
  /** @deprecated use `Job$outboundSchema` instead. */
  export const outboundSchema = Job$outboundSchema;
  /** @deprecated use `Job$Outbound` instead. */
  export type Outbound = Job$Outbound;
}

export function jobToJSON(job: Job): string {
  return JSON.stringify(Job$outboundSchema.parse(job));
}

export function jobFromJSON(
  jsonString: string,
): SafeParseResult<Job, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Job$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Job' from JSON`,
  );
}
