/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EmployeeCheckNumberMapping = {
  /**
   * The UUID for an employee
   */
  employeeUuid?: string | undefined;
  /**
   * The check number for the relevant employee
   */
  checkNumber?: number | undefined;
};

/**
 * Example response
 */
export type PayrollCheck = {
  /**
   * A unique identifier of the payroll.
   */
  payrollUuid?: string | undefined;
  /**
   * The format the checks will be printed.
   */
  printingFormat?: string | undefined;
  /**
   * The starting check number for the checks being printed.
   */
  startingCheckNumber?: string | null | undefined;
  /**
   * A unique identifier of the Generated Document request
   */
  requestUuid?: string | undefined;
  /**
   * Current status of the Generated Document
   */
  status?: string | undefined;
  /**
   * An array of mapping employee uuids to their check numbers
   */
  employeeCheckNumberMapping?: Array<EmployeeCheckNumberMapping> | undefined;
};

/** @internal */
export const EmployeeCheckNumberMapping$inboundSchema: z.ZodType<
  EmployeeCheckNumberMapping,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_uuid: z.string().optional(),
  check_number: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
    "check_number": "checkNumber",
  });
});

/** @internal */
export type EmployeeCheckNumberMapping$Outbound = {
  employee_uuid?: string | undefined;
  check_number?: number | undefined;
};

/** @internal */
export const EmployeeCheckNumberMapping$outboundSchema: z.ZodType<
  EmployeeCheckNumberMapping$Outbound,
  z.ZodTypeDef,
  EmployeeCheckNumberMapping
> = z.object({
  employeeUuid: z.string().optional(),
  checkNumber: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
    checkNumber: "check_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeCheckNumberMapping$ {
  /** @deprecated use `EmployeeCheckNumberMapping$inboundSchema` instead. */
  export const inboundSchema = EmployeeCheckNumberMapping$inboundSchema;
  /** @deprecated use `EmployeeCheckNumberMapping$outboundSchema` instead. */
  export const outboundSchema = EmployeeCheckNumberMapping$outboundSchema;
  /** @deprecated use `EmployeeCheckNumberMapping$Outbound` instead. */
  export type Outbound = EmployeeCheckNumberMapping$Outbound;
}

export function employeeCheckNumberMappingToJSON(
  employeeCheckNumberMapping: EmployeeCheckNumberMapping,
): string {
  return JSON.stringify(
    EmployeeCheckNumberMapping$outboundSchema.parse(employeeCheckNumberMapping),
  );
}

export function employeeCheckNumberMappingFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeCheckNumberMapping, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeCheckNumberMapping$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeCheckNumberMapping' from JSON`,
  );
}

/** @internal */
export const PayrollCheck$inboundSchema: z.ZodType<
  PayrollCheck,
  z.ZodTypeDef,
  unknown
> = z.object({
  payroll_uuid: z.string().optional(),
  printing_format: z.string().optional(),
  starting_check_number: z.nullable(z.string()).optional(),
  request_uuid: z.string().optional(),
  status: z.string().optional(),
  employee_check_number_mapping: z.array(
    z.lazy(() => EmployeeCheckNumberMapping$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "payroll_uuid": "payrollUuid",
    "printing_format": "printingFormat",
    "starting_check_number": "startingCheckNumber",
    "request_uuid": "requestUuid",
    "employee_check_number_mapping": "employeeCheckNumberMapping",
  });
});

/** @internal */
export type PayrollCheck$Outbound = {
  payroll_uuid?: string | undefined;
  printing_format?: string | undefined;
  starting_check_number?: string | null | undefined;
  request_uuid?: string | undefined;
  status?: string | undefined;
  employee_check_number_mapping?:
    | Array<EmployeeCheckNumberMapping$Outbound>
    | undefined;
};

/** @internal */
export const PayrollCheck$outboundSchema: z.ZodType<
  PayrollCheck$Outbound,
  z.ZodTypeDef,
  PayrollCheck
> = z.object({
  payrollUuid: z.string().optional(),
  printingFormat: z.string().optional(),
  startingCheckNumber: z.nullable(z.string()).optional(),
  requestUuid: z.string().optional(),
  status: z.string().optional(),
  employeeCheckNumberMapping: z.array(
    z.lazy(() => EmployeeCheckNumberMapping$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    payrollUuid: "payroll_uuid",
    printingFormat: "printing_format",
    startingCheckNumber: "starting_check_number",
    requestUuid: "request_uuid",
    employeeCheckNumberMapping: "employee_check_number_mapping",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollCheck$ {
  /** @deprecated use `PayrollCheck$inboundSchema` instead. */
  export const inboundSchema = PayrollCheck$inboundSchema;
  /** @deprecated use `PayrollCheck$outboundSchema` instead. */
  export const outboundSchema = PayrollCheck$outboundSchema;
  /** @deprecated use `PayrollCheck$Outbound` instead. */
  export type Outbound = PayrollCheck$Outbound;
}

export function payrollCheckToJSON(payrollCheck: PayrollCheck): string {
  return JSON.stringify(PayrollCheck$outboundSchema.parse(payrollCheck));
}

export function payrollCheckFromJSON(
  jsonString: string,
): SafeParseResult<PayrollCheck, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollCheck$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollCheck' from JSON`,
  );
}
