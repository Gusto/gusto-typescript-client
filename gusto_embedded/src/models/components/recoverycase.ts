/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of the recovery case
 */
export const RecoveryCaseStatus = {
  Open: "open",
  RedebitInitiated: "redebit_initiated",
  WireInitiated: "wire_initiated",
  Recovered: "recovered",
  Lost: "lost",
} as const;
/**
 * Status of the recovery case
 */
export type RecoveryCaseStatus = ClosedEnum<typeof RecoveryCaseStatus>;

/**
 * Representation of a recovery case
 */
export type RecoveryCase = {
  /**
   * Unique identifier of an recovery case
   */
  uuid: string;
  /**
   * Unique identifier of the company to which the recovery case belongs
   */
  companyUuid?: string | undefined;
  /**
   * Status of the recovery case
   */
  status?: RecoveryCaseStatus | undefined;
  /**
   * The latest bank error code for the recovery case. See [this doc](https://docs.gusto.com/embedded-payroll/docs/ach-codes-and-transaction-types) for a list of common ACH return codes.
   */
  latestErrorCode?: string | undefined;
  /**
   * Date when funds were originally debited from the company's bank account
   */
  originalDebitDate?: string | undefined;
  /**
   * Check date for the associated payroll or contractor payments
   */
  checkDate?: string | undefined;
  /**
   * The uuid of the associated payroll for which the recovery case was created. If the recovery case was created for a contractor payment, this field will be null.
   */
  payrollUuid?: string | undefined;
  /**
   * The uuids of the associated contractor payments for which the recovery case was created. If the recovery case was created for a payroll, this field will be null.
   */
  contractorPaymentUuids?: Array<string> | null | undefined;
  /**
   * Amount outstanding for the recovery case
   */
  amountOutstanding?: string | undefined;
  /**
   * Total amount to be debited from the payroll or contractor payments
   */
  eventTotalAmount?: string | undefined;
};

/** @internal */
export const RecoveryCaseStatus$inboundSchema: z.ZodNativeEnum<
  typeof RecoveryCaseStatus
> = z.nativeEnum(RecoveryCaseStatus);

/** @internal */
export const RecoveryCaseStatus$outboundSchema: z.ZodNativeEnum<
  typeof RecoveryCaseStatus
> = RecoveryCaseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecoveryCaseStatus$ {
  /** @deprecated use `RecoveryCaseStatus$inboundSchema` instead. */
  export const inboundSchema = RecoveryCaseStatus$inboundSchema;
  /** @deprecated use `RecoveryCaseStatus$outboundSchema` instead. */
  export const outboundSchema = RecoveryCaseStatus$outboundSchema;
}

/** @internal */
export const RecoveryCase$inboundSchema: z.ZodType<
  RecoveryCase,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  company_uuid: z.string().optional(),
  status: RecoveryCaseStatus$inboundSchema.optional(),
  latest_error_code: z.string().optional(),
  original_debit_date: z.string().optional(),
  check_date: z.string().optional(),
  payroll_uuid: z.string().optional(),
  contractor_payment_uuids: z.nullable(z.array(z.string())).optional(),
  amount_outstanding: z.string().optional(),
  event_total_amount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "latest_error_code": "latestErrorCode",
    "original_debit_date": "originalDebitDate",
    "check_date": "checkDate",
    "payroll_uuid": "payrollUuid",
    "contractor_payment_uuids": "contractorPaymentUuids",
    "amount_outstanding": "amountOutstanding",
    "event_total_amount": "eventTotalAmount",
  });
});

/** @internal */
export type RecoveryCase$Outbound = {
  uuid: string;
  company_uuid?: string | undefined;
  status?: string | undefined;
  latest_error_code?: string | undefined;
  original_debit_date?: string | undefined;
  check_date?: string | undefined;
  payroll_uuid?: string | undefined;
  contractor_payment_uuids?: Array<string> | null | undefined;
  amount_outstanding?: string | undefined;
  event_total_amount?: string | undefined;
};

/** @internal */
export const RecoveryCase$outboundSchema: z.ZodType<
  RecoveryCase$Outbound,
  z.ZodTypeDef,
  RecoveryCase
> = z.object({
  uuid: z.string(),
  companyUuid: z.string().optional(),
  status: RecoveryCaseStatus$outboundSchema.optional(),
  latestErrorCode: z.string().optional(),
  originalDebitDate: z.string().optional(),
  checkDate: z.string().optional(),
  payrollUuid: z.string().optional(),
  contractorPaymentUuids: z.nullable(z.array(z.string())).optional(),
  amountOutstanding: z.string().optional(),
  eventTotalAmount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    latestErrorCode: "latest_error_code",
    originalDebitDate: "original_debit_date",
    checkDate: "check_date",
    payrollUuid: "payroll_uuid",
    contractorPaymentUuids: "contractor_payment_uuids",
    amountOutstanding: "amount_outstanding",
    eventTotalAmount: "event_total_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecoveryCase$ {
  /** @deprecated use `RecoveryCase$inboundSchema` instead. */
  export const inboundSchema = RecoveryCase$inboundSchema;
  /** @deprecated use `RecoveryCase$outboundSchema` instead. */
  export const outboundSchema = RecoveryCase$outboundSchema;
  /** @deprecated use `RecoveryCase$Outbound` instead. */
  export type Outbound = RecoveryCase$Outbound;
}

export function recoveryCaseToJSON(recoveryCase: RecoveryCase): string {
  return JSON.stringify(RecoveryCase$outboundSchema.parse(recoveryCase));
}

export function recoveryCaseFromJSON(
  jsonString: string,
): SafeParseResult<RecoveryCase, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RecoveryCase$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RecoveryCase' from JSON`,
  );
}
