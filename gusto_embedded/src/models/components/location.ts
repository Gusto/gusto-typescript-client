/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The representation of an address in Gusto.
 */
export type Location = {
  /**
   * The UUID of the location object.
   */
  uuid: string;
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The UUID for the company to which the location belongs. Only included if the location belongs to a company.
   */
  companyUuid?: string | undefined;
  /**
   * The phone number for the location. Required for company locations. Optional for employee locations.
   */
  phoneNumber?: string | undefined;
  street1?: string | undefined;
  street2?: string | null | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
  country?: string | undefined;
  /**
   * The status of the location. Inactive locations have been deleted, but may still have historical data associated with them.
   */
  active?: boolean | undefined;
  /**
   * Specifies if the location is the company's mailing address. Only included if the location belongs to a company.
   */
  mailingAddress?: boolean | undefined;
  /**
   * Specifies if the location is the company's filing address. Only included if the location belongs to a company.
   */
  filingAddress?: boolean | undefined;
  /**
   * Datetime for when location is created
   */
  createdAt?: string | undefined;
  /**
   * Datetime for when location is updated
   */
  updatedAt?: string | undefined;
};

/** @internal */
export const Location$inboundSchema: z.ZodType<
  Location,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  version: z.string().optional(),
  company_uuid: z.string().optional(),
  phone_number: z.string().optional(),
  street_1: z.string().optional(),
  street_2: z.nullable(z.string()).optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zip: z.string().optional(),
  country: z.string().default("USA"),
  active: z.boolean().optional(),
  mailing_address: z.boolean().optional(),
  filing_address: z.boolean().optional(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "phone_number": "phoneNumber",
    "street_1": "street1",
    "street_2": "street2",
    "mailing_address": "mailingAddress",
    "filing_address": "filingAddress",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type Location$Outbound = {
  uuid: string;
  version?: string | undefined;
  company_uuid?: string | undefined;
  phone_number?: string | undefined;
  street_1?: string | undefined;
  street_2?: string | null | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
  country: string;
  active?: boolean | undefined;
  mailing_address?: boolean | undefined;
  filing_address?: boolean | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const Location$outboundSchema: z.ZodType<
  Location$Outbound,
  z.ZodTypeDef,
  Location
> = z.object({
  uuid: z.string(),
  version: z.string().optional(),
  companyUuid: z.string().optional(),
  phoneNumber: z.string().optional(),
  street1: z.string().optional(),
  street2: z.nullable(z.string()).optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zip: z.string().optional(),
  country: z.string().default("USA"),
  active: z.boolean().optional(),
  mailingAddress: z.boolean().optional(),
  filingAddress: z.boolean().optional(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    phoneNumber: "phone_number",
    street1: "street_1",
    street2: "street_2",
    mailingAddress: "mailing_address",
    filingAddress: "filing_address",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Location$ {
  /** @deprecated use `Location$inboundSchema` instead. */
  export const inboundSchema = Location$inboundSchema;
  /** @deprecated use `Location$outboundSchema` instead. */
  export const outboundSchema = Location$outboundSchema;
  /** @deprecated use `Location$Outbound` instead. */
  export type Outbound = Location$Outbound;
}

export function locationToJSON(location: Location): string {
  return JSON.stringify(Location$outboundSchema.parse(location));
}

export function locationFromJSON(
  jsonString: string,
): SafeParseResult<Location, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Location$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Location' from JSON`,
  );
}
