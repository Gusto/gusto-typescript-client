/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * One of the "onboarding_status" enum values.
 */
export const ContractorOnboardingStatusOnboardingStatus = {
  OnboardingCompleted: "onboarding_completed",
  AdminOnboardingReview: "admin_onboarding_review",
  AdminOnboardingIncomplete: "admin_onboarding_incomplete",
  SelfOnboardingNotInvited: "self_onboarding_not_invited",
  SelfOnboardingInvited: "self_onboarding_invited",
  SelfOnboardingStarted: "self_onboarding_started",
  SelfOnboardingReview: "self_onboarding_review",
} as const;
/**
 * One of the "onboarding_status" enum values.
 */
export type ContractorOnboardingStatusOnboardingStatus = ClosedEnum<
  typeof ContractorOnboardingStatusOnboardingStatus
>;

export type ContractorOnboardingStatusOnboardingStep = {
  /**
   * User-friendly description of the onboarding step.
   */
  title?: string | undefined;
  /**
   * String identifier for the onboarding step.
   */
  id?: string | undefined;
  /**
   * When true, this step is required.
   */
  required?: boolean | undefined;
  /**
   * When true, this step has been completed.
   */
  completed?: boolean | undefined;
  /**
   * A list of onboarding steps required to begin this step.
   */
  requirements?: Array<string> | undefined;
};

/**
 * The representation of an contractor's onboarding status.
 */
export type ContractorOnboardingStatus = {
  /**
   * Unique identifier for this contractor.
   */
  uuid: string;
  /**
   * One of the "onboarding_status" enum values.
   */
  onboardingStatus?: ContractorOnboardingStatusOnboardingStatus | undefined;
  /**
   * List of steps required to onboard a contractor.
   */
  onboardingSteps?: Array<ContractorOnboardingStatusOnboardingStep> | undefined;
};

/** @internal */
export const ContractorOnboardingStatusOnboardingStatus$inboundSchema:
  z.ZodNativeEnum<typeof ContractorOnboardingStatusOnboardingStatus> = z
    .nativeEnum(ContractorOnboardingStatusOnboardingStatus);

/** @internal */
export const ContractorOnboardingStatusOnboardingStatus$outboundSchema:
  z.ZodNativeEnum<typeof ContractorOnboardingStatusOnboardingStatus> =
    ContractorOnboardingStatusOnboardingStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorOnboardingStatusOnboardingStatus$ {
  /** @deprecated use `ContractorOnboardingStatusOnboardingStatus$inboundSchema` instead. */
  export const inboundSchema =
    ContractorOnboardingStatusOnboardingStatus$inboundSchema;
  /** @deprecated use `ContractorOnboardingStatusOnboardingStatus$outboundSchema` instead. */
  export const outboundSchema =
    ContractorOnboardingStatusOnboardingStatus$outboundSchema;
}

/** @internal */
export const ContractorOnboardingStatusOnboardingStep$inboundSchema: z.ZodType<
  ContractorOnboardingStatusOnboardingStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  id: z.string().optional(),
  required: z.boolean().optional(),
  completed: z.boolean().optional(),
  requirements: z.array(z.string()).optional(),
});

/** @internal */
export type ContractorOnboardingStatusOnboardingStep$Outbound = {
  title?: string | undefined;
  id?: string | undefined;
  required?: boolean | undefined;
  completed?: boolean | undefined;
  requirements?: Array<string> | undefined;
};

/** @internal */
export const ContractorOnboardingStatusOnboardingStep$outboundSchema: z.ZodType<
  ContractorOnboardingStatusOnboardingStep$Outbound,
  z.ZodTypeDef,
  ContractorOnboardingStatusOnboardingStep
> = z.object({
  title: z.string().optional(),
  id: z.string().optional(),
  required: z.boolean().optional(),
  completed: z.boolean().optional(),
  requirements: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorOnboardingStatusOnboardingStep$ {
  /** @deprecated use `ContractorOnboardingStatusOnboardingStep$inboundSchema` instead. */
  export const inboundSchema =
    ContractorOnboardingStatusOnboardingStep$inboundSchema;
  /** @deprecated use `ContractorOnboardingStatusOnboardingStep$outboundSchema` instead. */
  export const outboundSchema =
    ContractorOnboardingStatusOnboardingStep$outboundSchema;
  /** @deprecated use `ContractorOnboardingStatusOnboardingStep$Outbound` instead. */
  export type Outbound = ContractorOnboardingStatusOnboardingStep$Outbound;
}

export function contractorOnboardingStatusOnboardingStepToJSON(
  contractorOnboardingStatusOnboardingStep:
    ContractorOnboardingStatusOnboardingStep,
): string {
  return JSON.stringify(
    ContractorOnboardingStatusOnboardingStep$outboundSchema.parse(
      contractorOnboardingStatusOnboardingStep,
    ),
  );
}

export function contractorOnboardingStatusOnboardingStepFromJSON(
  jsonString: string,
): SafeParseResult<
  ContractorOnboardingStatusOnboardingStep,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ContractorOnboardingStatusOnboardingStep$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ContractorOnboardingStatusOnboardingStep' from JSON`,
  );
}

/** @internal */
export const ContractorOnboardingStatus$inboundSchema: z.ZodType<
  ContractorOnboardingStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  onboarding_status: ContractorOnboardingStatusOnboardingStatus$inboundSchema
    .optional(),
  onboarding_steps: z.array(
    z.lazy(() => ContractorOnboardingStatusOnboardingStep$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "onboarding_status": "onboardingStatus",
    "onboarding_steps": "onboardingSteps",
  });
});

/** @internal */
export type ContractorOnboardingStatus$Outbound = {
  uuid: string;
  onboarding_status?: string | undefined;
  onboarding_steps?:
    | Array<ContractorOnboardingStatusOnboardingStep$Outbound>
    | undefined;
};

/** @internal */
export const ContractorOnboardingStatus$outboundSchema: z.ZodType<
  ContractorOnboardingStatus$Outbound,
  z.ZodTypeDef,
  ContractorOnboardingStatus
> = z.object({
  uuid: z.string(),
  onboardingStatus: ContractorOnboardingStatusOnboardingStatus$outboundSchema
    .optional(),
  onboardingSteps: z.array(
    z.lazy(() => ContractorOnboardingStatusOnboardingStep$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    onboardingStatus: "onboarding_status",
    onboardingSteps: "onboarding_steps",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorOnboardingStatus$ {
  /** @deprecated use `ContractorOnboardingStatus$inboundSchema` instead. */
  export const inboundSchema = ContractorOnboardingStatus$inboundSchema;
  /** @deprecated use `ContractorOnboardingStatus$outboundSchema` instead. */
  export const outboundSchema = ContractorOnboardingStatus$outboundSchema;
  /** @deprecated use `ContractorOnboardingStatus$Outbound` instead. */
  export type Outbound = ContractorOnboardingStatus$Outbound;
}

export function contractorOnboardingStatusToJSON(
  contractorOnboardingStatus: ContractorOnboardingStatus,
): string {
  return JSON.stringify(
    ContractorOnboardingStatus$outboundSchema.parse(contractorOnboardingStatus),
  );
}

export function contractorOnboardingStatusFromJSON(
  jsonString: string,
): SafeParseResult<ContractorOnboardingStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorOnboardingStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorOnboardingStatus' from JSON`,
  );
}
