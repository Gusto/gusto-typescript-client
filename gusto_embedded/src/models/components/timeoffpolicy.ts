/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of the time off policy
 */
export const PolicyType = {
  Vacation: "vacation",
  Sick: "sick",
} as const;
/**
 * Type of the time off policy
 */
export type PolicyType = ClosedEnum<typeof PolicyType>;

export type TimeOffPolicyEmployees = {
  uuid?: string | undefined;
};

/**
 * Representation of a Time Off Policy
 */
export type TimeOffPolicy = {
  /**
   * Unique identifier of a time off policy
   */
  uuid: string;
  /**
   * Unique identifier for the company owning the time off policy
   */
  companyUuid: string;
  /**
   * Name of the time off policy
   */
  name: string;
  /**
   * Type of the time off policy
   */
  policyType: PolicyType;
  /**
   * Policy time off accrual method
   */
  accrualMethod: string;
  /**
   * The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. "40.0".
   */
  accrualRate?: string | null | undefined;
  /**
   * The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. "40.0".
   */
  accrualRateUnit?: string | null | undefined;
  /**
   * Boolean representing if an employee's accrued time off hours will be paid out on termination
   */
  paidOutOnTermination?: boolean | undefined;
  /**
   * Number of days before an employee on the policy will begin accruing time off hours
   */
  accrualWaitingPeriodDays?: number | null | undefined;
  /**
   * The max number of hours an employee can carryover from one year to the next
   */
  carryoverLimitHours?: string | undefined;
  /**
   * The max number of hours an employee can accrue in a year
   */
  maxAccrualHoursPerYear?: string | undefined;
  /**
   * The max number of hours an employee can accrue
   */
  maxHours?: string | undefined;
  /**
   * boolean representing if a policy has completed configuration
   */
  complete?: boolean | undefined;
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * boolean representing if a policy is active or not
   */
  isActive: boolean;
  /**
   * List of employee UUIDs under a time off policy
   */
  employees: Array<TimeOffPolicyEmployees>;
};

/** @internal */
export const PolicyType$inboundSchema: z.ZodNativeEnum<typeof PolicyType> = z
  .nativeEnum(PolicyType);

/** @internal */
export const PolicyType$outboundSchema: z.ZodNativeEnum<typeof PolicyType> =
  PolicyType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PolicyType$ {
  /** @deprecated use `PolicyType$inboundSchema` instead. */
  export const inboundSchema = PolicyType$inboundSchema;
  /** @deprecated use `PolicyType$outboundSchema` instead. */
  export const outboundSchema = PolicyType$outboundSchema;
}

/** @internal */
export const TimeOffPolicyEmployees$inboundSchema: z.ZodType<
  TimeOffPolicyEmployees,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type TimeOffPolicyEmployees$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const TimeOffPolicyEmployees$outboundSchema: z.ZodType<
  TimeOffPolicyEmployees$Outbound,
  z.ZodTypeDef,
  TimeOffPolicyEmployees
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffPolicyEmployees$ {
  /** @deprecated use `TimeOffPolicyEmployees$inboundSchema` instead. */
  export const inboundSchema = TimeOffPolicyEmployees$inboundSchema;
  /** @deprecated use `TimeOffPolicyEmployees$outboundSchema` instead. */
  export const outboundSchema = TimeOffPolicyEmployees$outboundSchema;
  /** @deprecated use `TimeOffPolicyEmployees$Outbound` instead. */
  export type Outbound = TimeOffPolicyEmployees$Outbound;
}

export function timeOffPolicyEmployeesToJSON(
  timeOffPolicyEmployees: TimeOffPolicyEmployees,
): string {
  return JSON.stringify(
    TimeOffPolicyEmployees$outboundSchema.parse(timeOffPolicyEmployees),
  );
}

export function timeOffPolicyEmployeesFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffPolicyEmployees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffPolicyEmployees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffPolicyEmployees' from JSON`,
  );
}

/** @internal */
export const TimeOffPolicy$inboundSchema: z.ZodType<
  TimeOffPolicy,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  company_uuid: z.string(),
  name: z.string(),
  policy_type: PolicyType$inboundSchema,
  accrual_method: z.string(),
  accrual_rate: z.nullable(z.string()).optional(),
  accrual_rate_unit: z.nullable(z.string()).optional(),
  paid_out_on_termination: z.boolean().optional(),
  accrual_waiting_period_days: z.nullable(z.number().int()).optional(),
  carryover_limit_hours: z.string().optional(),
  max_accrual_hours_per_year: z.string().optional(),
  max_hours: z.string().optional(),
  complete: z.boolean().optional(),
  version: z.string().optional(),
  is_active: z.boolean(),
  employees: z.array(z.lazy(() => TimeOffPolicyEmployees$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "policy_type": "policyType",
    "accrual_method": "accrualMethod",
    "accrual_rate": "accrualRate",
    "accrual_rate_unit": "accrualRateUnit",
    "paid_out_on_termination": "paidOutOnTermination",
    "accrual_waiting_period_days": "accrualWaitingPeriodDays",
    "carryover_limit_hours": "carryoverLimitHours",
    "max_accrual_hours_per_year": "maxAccrualHoursPerYear",
    "max_hours": "maxHours",
    "is_active": "isActive",
  });
});

/** @internal */
export type TimeOffPolicy$Outbound = {
  uuid: string;
  company_uuid: string;
  name: string;
  policy_type: string;
  accrual_method: string;
  accrual_rate?: string | null | undefined;
  accrual_rate_unit?: string | null | undefined;
  paid_out_on_termination?: boolean | undefined;
  accrual_waiting_period_days?: number | null | undefined;
  carryover_limit_hours?: string | undefined;
  max_accrual_hours_per_year?: string | undefined;
  max_hours?: string | undefined;
  complete?: boolean | undefined;
  version?: string | undefined;
  is_active: boolean;
  employees: Array<TimeOffPolicyEmployees$Outbound>;
};

/** @internal */
export const TimeOffPolicy$outboundSchema: z.ZodType<
  TimeOffPolicy$Outbound,
  z.ZodTypeDef,
  TimeOffPolicy
> = z.object({
  uuid: z.string(),
  companyUuid: z.string(),
  name: z.string(),
  policyType: PolicyType$outboundSchema,
  accrualMethod: z.string(),
  accrualRate: z.nullable(z.string()).optional(),
  accrualRateUnit: z.nullable(z.string()).optional(),
  paidOutOnTermination: z.boolean().optional(),
  accrualWaitingPeriodDays: z.nullable(z.number().int()).optional(),
  carryoverLimitHours: z.string().optional(),
  maxAccrualHoursPerYear: z.string().optional(),
  maxHours: z.string().optional(),
  complete: z.boolean().optional(),
  version: z.string().optional(),
  isActive: z.boolean(),
  employees: z.array(z.lazy(() => TimeOffPolicyEmployees$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    policyType: "policy_type",
    accrualMethod: "accrual_method",
    accrualRate: "accrual_rate",
    accrualRateUnit: "accrual_rate_unit",
    paidOutOnTermination: "paid_out_on_termination",
    accrualWaitingPeriodDays: "accrual_waiting_period_days",
    carryoverLimitHours: "carryover_limit_hours",
    maxAccrualHoursPerYear: "max_accrual_hours_per_year",
    maxHours: "max_hours",
    isActive: "is_active",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffPolicy$ {
  /** @deprecated use `TimeOffPolicy$inboundSchema` instead. */
  export const inboundSchema = TimeOffPolicy$inboundSchema;
  /** @deprecated use `TimeOffPolicy$outboundSchema` instead. */
  export const outboundSchema = TimeOffPolicy$outboundSchema;
  /** @deprecated use `TimeOffPolicy$Outbound` instead. */
  export type Outbound = TimeOffPolicy$Outbound;
}

export function timeOffPolicyToJSON(timeOffPolicy: TimeOffPolicy): string {
  return JSON.stringify(TimeOffPolicy$outboundSchema.parse(timeOffPolicy));
}

export function timeOffPolicyFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffPolicy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffPolicy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffPolicy' from JSON`,
  );
}
