/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The representation of an unprocessed termination pay period.
 */
export type UnprocessedTerminationPayPeriod = {
  /**
   * The start date of the pay period.
   */
  startDate?: string | undefined;
  /**
   * The end date of the pay period.
   */
  endDate?: string | undefined;
  /**
   * The check date of the pay period.
   */
  checkDate?: string | undefined;
  /**
   * The debit date of the pay period.
   */
  debitDate?: string | undefined;
  /**
   * The full name of the employee.
   */
  employeeName?: string | undefined;
  /**
   * A unique identifier of the employee.
   */
  employeeUuid?: string | undefined;
  /**
   * A unique identifier of the pay schedule to which the pay period belongs.
   */
  payScheduleUuid?: string | undefined;
};

/** @internal */
export const UnprocessedTerminationPayPeriod$inboundSchema: z.ZodType<
  UnprocessedTerminationPayPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().optional(),
  end_date: z.string().optional(),
  check_date: z.string().optional(),
  debit_date: z.string().optional(),
  employee_name: z.string().optional(),
  employee_uuid: z.string().optional(),
  pay_schedule_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "check_date": "checkDate",
    "debit_date": "debitDate",
    "employee_name": "employeeName",
    "employee_uuid": "employeeUuid",
    "pay_schedule_uuid": "payScheduleUuid",
  });
});

/** @internal */
export type UnprocessedTerminationPayPeriod$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
  check_date?: string | undefined;
  debit_date?: string | undefined;
  employee_name?: string | undefined;
  employee_uuid?: string | undefined;
  pay_schedule_uuid?: string | undefined;
};

/** @internal */
export const UnprocessedTerminationPayPeriod$outboundSchema: z.ZodType<
  UnprocessedTerminationPayPeriod$Outbound,
  z.ZodTypeDef,
  UnprocessedTerminationPayPeriod
> = z.object({
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  checkDate: z.string().optional(),
  debitDate: z.string().optional(),
  employeeName: z.string().optional(),
  employeeUuid: z.string().optional(),
  payScheduleUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    checkDate: "check_date",
    debitDate: "debit_date",
    employeeName: "employee_name",
    employeeUuid: "employee_uuid",
    payScheduleUuid: "pay_schedule_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessedTerminationPayPeriod$ {
  /** @deprecated use `UnprocessedTerminationPayPeriod$inboundSchema` instead. */
  export const inboundSchema = UnprocessedTerminationPayPeriod$inboundSchema;
  /** @deprecated use `UnprocessedTerminationPayPeriod$outboundSchema` instead. */
  export const outboundSchema = UnprocessedTerminationPayPeriod$outboundSchema;
  /** @deprecated use `UnprocessedTerminationPayPeriod$Outbound` instead. */
  export type Outbound = UnprocessedTerminationPayPeriod$Outbound;
}

export function unprocessedTerminationPayPeriodToJSON(
  unprocessedTerminationPayPeriod: UnprocessedTerminationPayPeriod,
): string {
  return JSON.stringify(
    UnprocessedTerminationPayPeriod$outboundSchema.parse(
      unprocessedTerminationPayPeriod,
    ),
  );
}

export function unprocessedTerminationPayPeriodFromJSON(
  jsonString: string,
): SafeParseResult<UnprocessedTerminationPayPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnprocessedTerminationPayPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnprocessedTerminationPayPeriod' from JSON`,
  );
}
