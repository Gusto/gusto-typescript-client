/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PayScheduleAssignmentEmployee = {
  /**
   * The UUID of the employee.
   */
  employeeUuid?: string | undefined;
  /**
   * The employee's pay schedule UUID.
   */
  payScheduleUuid?: string | null | undefined;
};

/** @internal */
export const PayScheduleAssignmentEmployee$inboundSchema: z.ZodType<
  PayScheduleAssignmentEmployee,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_uuid: z.string().optional(),
  pay_schedule_uuid: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
    "pay_schedule_uuid": "payScheduleUuid",
  });
});

/** @internal */
export type PayScheduleAssignmentEmployee$Outbound = {
  employee_uuid?: string | undefined;
  pay_schedule_uuid?: string | null | undefined;
};

/** @internal */
export const PayScheduleAssignmentEmployee$outboundSchema: z.ZodType<
  PayScheduleAssignmentEmployee$Outbound,
  z.ZodTypeDef,
  PayScheduleAssignmentEmployee
> = z.object({
  employeeUuid: z.string().optional(),
  payScheduleUuid: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
    payScheduleUuid: "pay_schedule_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayScheduleAssignmentEmployee$ {
  /** @deprecated use `PayScheduleAssignmentEmployee$inboundSchema` instead. */
  export const inboundSchema = PayScheduleAssignmentEmployee$inboundSchema;
  /** @deprecated use `PayScheduleAssignmentEmployee$outboundSchema` instead. */
  export const outboundSchema = PayScheduleAssignmentEmployee$outboundSchema;
  /** @deprecated use `PayScheduleAssignmentEmployee$Outbound` instead. */
  export type Outbound = PayScheduleAssignmentEmployee$Outbound;
}

export function payScheduleAssignmentEmployeeToJSON(
  payScheduleAssignmentEmployee: PayScheduleAssignmentEmployee,
): string {
  return JSON.stringify(
    PayScheduleAssignmentEmployee$outboundSchema.parse(
      payScheduleAssignmentEmployee,
    ),
  );
}

export function payScheduleAssignmentEmployeeFromJSON(
  jsonString: string,
): SafeParseResult<PayScheduleAssignmentEmployee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayScheduleAssignmentEmployee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayScheduleAssignmentEmployee' from JSON`,
  );
}
