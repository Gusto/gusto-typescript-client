/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FlsaStatusType,
  FlsaStatusType$inboundSchema,
  FlsaStatusType$outboundSchema,
} from "./flsastatustype.js";

/**
 * The unit accompanying the compensation rate. If the employee is an owner, rate should be 'Paycheck'.
 */
export const PaymentUnit = {
  Hour: "Hour",
  Week: "Week",
  Month: "Month",
  Year: "Year",
  Paycheck: "Paycheck",
} as const;
/**
 * The unit accompanying the compensation rate. If the employee is an owner, rate should be 'Paycheck'.
 */
export type PaymentUnit = ClosedEnum<typeof PaymentUnit>;

export type MinimumWages = {
  /**
   * The UUID of the minimum wage.
   */
  uuid?: string | undefined;
  /**
   * The wage amount.
   */
  wage?: string | undefined;
  /**
   * The effective date of the minimum wage.
   */
  effectiveDate?: string | undefined;
};

/**
 * The representation of compensation in Gusto.
 */
export type Compensation = {
  /**
   * The UUID of the compensation in Gusto.
   */
  uuid: string;
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The UUID of the job to which the compensation belongs.
   */
  jobUuid?: string | undefined;
  /**
   * The UUID of the employee to which the compensation belongs.
   */
  employeeUuid?: string | undefined;
  /**
   * The dollar amount paid per payment unit.
   */
  rate?: string | undefined;
  /**
   * The unit accompanying the compensation rate. If the employee is an owner, rate should be 'Paycheck'.
   */
  paymentUnit?: PaymentUnit | undefined;
  /**
   * The FLSA status for this compensation. Salaried ('Exempt') employees are paid a fixed salary every pay period. Salaried with overtime ('Salaried Nonexempt') employees are paid a fixed salary every pay period, and receive overtime pay when applicable. Hourly ('Nonexempt') employees are paid for the hours they work, and receive overtime pay when applicable. Commissioned employees ('Commission Only Exempt') earn wages based only on commission. Commissioned with overtime ('Commission Only Nonexempt') earn wages based on commission, and receive overtime pay when applicable. Owners ('Owner') are employees that own at least twenty percent of the company.
   */
  flsaStatus?: FlsaStatusType | undefined;
  /**
   * The effective date for this compensation. For the first compensation, this defaults to the job's hire date.
   */
  effectiveDate?: string | undefined;
  /**
   * Indicates if the compensation could be adjusted to minimum wage during payroll calculation.
   */
  adjustForMinimumWage?: boolean | undefined;
  /**
   * The minimum wages associated with the compensation.
   */
  minimumWages?: Array<MinimumWages> | undefined;
};

/** @internal */
export const PaymentUnit$inboundSchema: z.ZodNativeEnum<typeof PaymentUnit> = z
  .nativeEnum(PaymentUnit);

/** @internal */
export const PaymentUnit$outboundSchema: z.ZodNativeEnum<typeof PaymentUnit> =
  PaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentUnit$ {
  /** @deprecated use `PaymentUnit$inboundSchema` instead. */
  export const inboundSchema = PaymentUnit$inboundSchema;
  /** @deprecated use `PaymentUnit$outboundSchema` instead. */
  export const outboundSchema = PaymentUnit$outboundSchema;
}

/** @internal */
export const MinimumWages$inboundSchema: z.ZodType<
  MinimumWages,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  wage: z.string().optional(),
  effective_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "effective_date": "effectiveDate",
  });
});

/** @internal */
export type MinimumWages$Outbound = {
  uuid?: string | undefined;
  wage?: string | undefined;
  effective_date?: string | undefined;
};

/** @internal */
export const MinimumWages$outboundSchema: z.ZodType<
  MinimumWages$Outbound,
  z.ZodTypeDef,
  MinimumWages
> = z.object({
  uuid: z.string().optional(),
  wage: z.string().optional(),
  effectiveDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    effectiveDate: "effective_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MinimumWages$ {
  /** @deprecated use `MinimumWages$inboundSchema` instead. */
  export const inboundSchema = MinimumWages$inboundSchema;
  /** @deprecated use `MinimumWages$outboundSchema` instead. */
  export const outboundSchema = MinimumWages$outboundSchema;
  /** @deprecated use `MinimumWages$Outbound` instead. */
  export type Outbound = MinimumWages$Outbound;
}

export function minimumWagesToJSON(minimumWages: MinimumWages): string {
  return JSON.stringify(MinimumWages$outboundSchema.parse(minimumWages));
}

export function minimumWagesFromJSON(
  jsonString: string,
): SafeParseResult<MinimumWages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MinimumWages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MinimumWages' from JSON`,
  );
}

/** @internal */
export const Compensation$inboundSchema: z.ZodType<
  Compensation,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  version: z.string().optional(),
  job_uuid: z.string().optional(),
  employee_uuid: z.string().optional(),
  rate: z.string().optional(),
  payment_unit: PaymentUnit$inboundSchema.optional(),
  flsa_status: FlsaStatusType$inboundSchema.optional(),
  effective_date: z.string().optional(),
  adjust_for_minimum_wage: z.boolean().optional(),
  minimum_wages: z.array(z.lazy(() => MinimumWages$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "employee_uuid": "employeeUuid",
    "payment_unit": "paymentUnit",
    "flsa_status": "flsaStatus",
    "effective_date": "effectiveDate",
    "adjust_for_minimum_wage": "adjustForMinimumWage",
    "minimum_wages": "minimumWages",
  });
});

/** @internal */
export type Compensation$Outbound = {
  uuid: string;
  version?: string | undefined;
  job_uuid?: string | undefined;
  employee_uuid?: string | undefined;
  rate?: string | undefined;
  payment_unit?: string | undefined;
  flsa_status?: string | undefined;
  effective_date?: string | undefined;
  adjust_for_minimum_wage?: boolean | undefined;
  minimum_wages?: Array<MinimumWages$Outbound> | undefined;
};

/** @internal */
export const Compensation$outboundSchema: z.ZodType<
  Compensation$Outbound,
  z.ZodTypeDef,
  Compensation
> = z.object({
  uuid: z.string(),
  version: z.string().optional(),
  jobUuid: z.string().optional(),
  employeeUuid: z.string().optional(),
  rate: z.string().optional(),
  paymentUnit: PaymentUnit$outboundSchema.optional(),
  flsaStatus: FlsaStatusType$outboundSchema.optional(),
  effectiveDate: z.string().optional(),
  adjustForMinimumWage: z.boolean().optional(),
  minimumWages: z.array(z.lazy(() => MinimumWages$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    employeeUuid: "employee_uuid",
    paymentUnit: "payment_unit",
    flsaStatus: "flsa_status",
    effectiveDate: "effective_date",
    adjustForMinimumWage: "adjust_for_minimum_wage",
    minimumWages: "minimum_wages",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Compensation$ {
  /** @deprecated use `Compensation$inboundSchema` instead. */
  export const inboundSchema = Compensation$inboundSchema;
  /** @deprecated use `Compensation$outboundSchema` instead. */
  export const outboundSchema = Compensation$outboundSchema;
  /** @deprecated use `Compensation$Outbound` instead. */
  export type Outbound = Compensation$Outbound;
}

export function compensationToJSON(compensation: Compensation): string {
  return JSON.stringify(Compensation$outboundSchema.parse(compensation));
}

export function compensationFromJSON(
  jsonString: string,
): SafeParseResult<Compensation, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Compensation$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Compensation' from JSON`,
  );
}
