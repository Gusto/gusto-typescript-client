/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Additional data associated with the unblock option.
 */
export type PayrollCreditBlockersTypeMetadata = {};

export type PayrollCreditBlockersTypeUnblockOptions = {
  /**
   * The type of unblock option for the credit blocker.
   */
  unblockType?: string | undefined;
  /**
   * The payment check date associated with the unblock option.
   */
  checkDate?: string | undefined;
  /**
   * Additional data associated with the unblock option.
   */
  metadata?: PayrollCreditBlockersTypeMetadata | undefined;
};

/**
 * The status of the credit blocker
 */
export const PayrollCreditBlockersTypeStatus = {
  Unresolved: "unresolved",
  PendingReview: "pending_review",
  Resolved: "resolved",
  Failed: "failed",
} as const;
/**
 * The status of the credit blocker
 */
export type PayrollCreditBlockersTypeStatus = ClosedEnum<
  typeof PayrollCreditBlockersTypeStatus
>;

export type PayrollCreditBlockersType = {
  /**
   * The type of blocker that's blocking the payment from being credited.
   */
  blockerType?: string | undefined;
  /**
   * The name of the credit blocker.
   */
  blockerName?: string | undefined;
  /**
   * The available options to unblock a credit blocker.
   */
  unblockOptions?: Array<PayrollCreditBlockersTypeUnblockOptions> | undefined;
  /**
   * The unblock option that's been selected to resolve the credit blocker.
   */
  selectedOption?: string | null | undefined;
  /**
   * The status of the credit blocker
   */
  status?: PayrollCreditBlockersTypeStatus | undefined;
};

/** @internal */
export const PayrollCreditBlockersTypeMetadata$inboundSchema: z.ZodType<
  PayrollCreditBlockersTypeMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PayrollCreditBlockersTypeMetadata$Outbound = {};

/** @internal */
export const PayrollCreditBlockersTypeMetadata$outboundSchema: z.ZodType<
  PayrollCreditBlockersTypeMetadata$Outbound,
  z.ZodTypeDef,
  PayrollCreditBlockersTypeMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollCreditBlockersTypeMetadata$ {
  /** @deprecated use `PayrollCreditBlockersTypeMetadata$inboundSchema` instead. */
  export const inboundSchema = PayrollCreditBlockersTypeMetadata$inboundSchema;
  /** @deprecated use `PayrollCreditBlockersTypeMetadata$outboundSchema` instead. */
  export const outboundSchema =
    PayrollCreditBlockersTypeMetadata$outboundSchema;
  /** @deprecated use `PayrollCreditBlockersTypeMetadata$Outbound` instead. */
  export type Outbound = PayrollCreditBlockersTypeMetadata$Outbound;
}

export function payrollCreditBlockersTypeMetadataToJSON(
  payrollCreditBlockersTypeMetadata: PayrollCreditBlockersTypeMetadata,
): string {
  return JSON.stringify(
    PayrollCreditBlockersTypeMetadata$outboundSchema.parse(
      payrollCreditBlockersTypeMetadata,
    ),
  );
}

export function payrollCreditBlockersTypeMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PayrollCreditBlockersTypeMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollCreditBlockersTypeMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollCreditBlockersTypeMetadata' from JSON`,
  );
}

/** @internal */
export const PayrollCreditBlockersTypeUnblockOptions$inboundSchema: z.ZodType<
  PayrollCreditBlockersTypeUnblockOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  unblock_type: z.string().optional(),
  check_date: z.string().optional(),
  metadata: z.lazy(() => PayrollCreditBlockersTypeMetadata$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "unblock_type": "unblockType",
    "check_date": "checkDate",
  });
});

/** @internal */
export type PayrollCreditBlockersTypeUnblockOptions$Outbound = {
  unblock_type?: string | undefined;
  check_date?: string | undefined;
  metadata?: PayrollCreditBlockersTypeMetadata$Outbound | undefined;
};

/** @internal */
export const PayrollCreditBlockersTypeUnblockOptions$outboundSchema: z.ZodType<
  PayrollCreditBlockersTypeUnblockOptions$Outbound,
  z.ZodTypeDef,
  PayrollCreditBlockersTypeUnblockOptions
> = z.object({
  unblockType: z.string().optional(),
  checkDate: z.string().optional(),
  metadata: z.lazy(() => PayrollCreditBlockersTypeMetadata$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    unblockType: "unblock_type",
    checkDate: "check_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollCreditBlockersTypeUnblockOptions$ {
  /** @deprecated use `PayrollCreditBlockersTypeUnblockOptions$inboundSchema` instead. */
  export const inboundSchema =
    PayrollCreditBlockersTypeUnblockOptions$inboundSchema;
  /** @deprecated use `PayrollCreditBlockersTypeUnblockOptions$outboundSchema` instead. */
  export const outboundSchema =
    PayrollCreditBlockersTypeUnblockOptions$outboundSchema;
  /** @deprecated use `PayrollCreditBlockersTypeUnblockOptions$Outbound` instead. */
  export type Outbound = PayrollCreditBlockersTypeUnblockOptions$Outbound;
}

export function payrollCreditBlockersTypeUnblockOptionsToJSON(
  payrollCreditBlockersTypeUnblockOptions:
    PayrollCreditBlockersTypeUnblockOptions,
): string {
  return JSON.stringify(
    PayrollCreditBlockersTypeUnblockOptions$outboundSchema.parse(
      payrollCreditBlockersTypeUnblockOptions,
    ),
  );
}

export function payrollCreditBlockersTypeUnblockOptionsFromJSON(
  jsonString: string,
): SafeParseResult<
  PayrollCreditBlockersTypeUnblockOptions,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PayrollCreditBlockersTypeUnblockOptions$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PayrollCreditBlockersTypeUnblockOptions' from JSON`,
  );
}

/** @internal */
export const PayrollCreditBlockersTypeStatus$inboundSchema: z.ZodNativeEnum<
  typeof PayrollCreditBlockersTypeStatus
> = z.nativeEnum(PayrollCreditBlockersTypeStatus);

/** @internal */
export const PayrollCreditBlockersTypeStatus$outboundSchema: z.ZodNativeEnum<
  typeof PayrollCreditBlockersTypeStatus
> = PayrollCreditBlockersTypeStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollCreditBlockersTypeStatus$ {
  /** @deprecated use `PayrollCreditBlockersTypeStatus$inboundSchema` instead. */
  export const inboundSchema = PayrollCreditBlockersTypeStatus$inboundSchema;
  /** @deprecated use `PayrollCreditBlockersTypeStatus$outboundSchema` instead. */
  export const outboundSchema = PayrollCreditBlockersTypeStatus$outboundSchema;
}

/** @internal */
export const PayrollCreditBlockersType$inboundSchema: z.ZodType<
  PayrollCreditBlockersType,
  z.ZodTypeDef,
  unknown
> = z.object({
  blocker_type: z.string().optional(),
  blocker_name: z.string().optional(),
  unblock_options: z.array(
    z.lazy(() => PayrollCreditBlockersTypeUnblockOptions$inboundSchema),
  ).optional(),
  selected_option: z.nullable(z.string()).optional(),
  status: PayrollCreditBlockersTypeStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "blocker_type": "blockerType",
    "blocker_name": "blockerName",
    "unblock_options": "unblockOptions",
    "selected_option": "selectedOption",
  });
});

/** @internal */
export type PayrollCreditBlockersType$Outbound = {
  blocker_type?: string | undefined;
  blocker_name?: string | undefined;
  unblock_options?:
    | Array<PayrollCreditBlockersTypeUnblockOptions$Outbound>
    | undefined;
  selected_option?: string | null | undefined;
  status?: string | undefined;
};

/** @internal */
export const PayrollCreditBlockersType$outboundSchema: z.ZodType<
  PayrollCreditBlockersType$Outbound,
  z.ZodTypeDef,
  PayrollCreditBlockersType
> = z.object({
  blockerType: z.string().optional(),
  blockerName: z.string().optional(),
  unblockOptions: z.array(
    z.lazy(() => PayrollCreditBlockersTypeUnblockOptions$outboundSchema),
  ).optional(),
  selectedOption: z.nullable(z.string()).optional(),
  status: PayrollCreditBlockersTypeStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    blockerType: "blocker_type",
    blockerName: "blocker_name",
    unblockOptions: "unblock_options",
    selectedOption: "selected_option",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollCreditBlockersType$ {
  /** @deprecated use `PayrollCreditBlockersType$inboundSchema` instead. */
  export const inboundSchema = PayrollCreditBlockersType$inboundSchema;
  /** @deprecated use `PayrollCreditBlockersType$outboundSchema` instead. */
  export const outboundSchema = PayrollCreditBlockersType$outboundSchema;
  /** @deprecated use `PayrollCreditBlockersType$Outbound` instead. */
  export type Outbound = PayrollCreditBlockersType$Outbound;
}

export function payrollCreditBlockersTypeToJSON(
  payrollCreditBlockersType: PayrollCreditBlockersType,
): string {
  return JSON.stringify(
    PayrollCreditBlockersType$outboundSchema.parse(payrollCreditBlockersType),
  );
}

export function payrollCreditBlockersTypeFromJSON(
  jsonString: string,
): SafeParseResult<PayrollCreditBlockersType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollCreditBlockersType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollCreditBlockersType' from JSON`,
  );
}
