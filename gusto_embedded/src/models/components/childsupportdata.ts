/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type FipsCodes = {
  /**
   * FIPS code for state or county
   */
  code?: string | undefined;
  /**
   * Name of county in the state for the corresponding FIPS code. When `null` the FIPS code applies state wide.
   */
  county?: string | null | undefined;
};

/**
 * A required attribute when creating a garnishment for this state agency. The current values are listed as an enum; though unlikely, values could be added if state agency requirements change in the future.
 */
export const Key = {
  CaseNumber: "case_number",
  OrderNumber: "order_number",
  RemittanceNumber: "remittance_number",
} as const;
/**
 * A required attribute when creating a garnishment for this state agency. The current values are listed as an enum; though unlikely, values could be added if state agency requirements change in the future.
 */
export type Key = ClosedEnum<typeof Key>;

export type RequiredAttributes = {
  /**
   * A required attribute when creating a garnishment for this state agency. The current values are listed as an enum; though unlikely, values could be added if state agency requirements change in the future.
   */
  key?: Key | undefined;
  /**
   * A human readable name of the attribute, e.g. CSE Case Number
   */
  label?: string | undefined;
};

export type Agencies = {
  /**
   * Two letter state abbreviation
   */
  state?: string | undefined;
  /**
   * Name of state child support agency
   */
  name?: string | undefined;
  /**
   * Specifies if remitting payment to the agency is required outside of Gusto. If true, Gusto includes garnishment amounts for this agency in payroll calculation, but does not debit for or remit payment to the agency automatically. As of September 2024, only garnishments for South Carolina Integrated Child Support Services require manual payment.
   */
  manualPaymentRequired?: boolean | undefined;
  /**
   * FIPS codes for state or county child support orders
   */
  fipsCodes?: Array<FipsCodes> | undefined;
  /**
   * Describes which child support case identifying attributes are required for this agency. While most agencies only require a single identifier, some (e.g. OH) require multiple identifiers.
   */
  requiredAttributes?: Array<RequiredAttributes> | undefined;
};

/**
 * Child Support agency data
 */
export type ChildSupportData = {
  /**
   * State child support agencies
   */
  agencies?: Array<Agencies> | undefined;
};

/** @internal */
export const FipsCodes$inboundSchema: z.ZodType<
  FipsCodes,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string().optional(),
  county: z.nullable(z.string()).optional(),
});

/** @internal */
export type FipsCodes$Outbound = {
  code?: string | undefined;
  county?: string | null | undefined;
};

/** @internal */
export const FipsCodes$outboundSchema: z.ZodType<
  FipsCodes$Outbound,
  z.ZodTypeDef,
  FipsCodes
> = z.object({
  code: z.string().optional(),
  county: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FipsCodes$ {
  /** @deprecated use `FipsCodes$inboundSchema` instead. */
  export const inboundSchema = FipsCodes$inboundSchema;
  /** @deprecated use `FipsCodes$outboundSchema` instead. */
  export const outboundSchema = FipsCodes$outboundSchema;
  /** @deprecated use `FipsCodes$Outbound` instead. */
  export type Outbound = FipsCodes$Outbound;
}

export function fipsCodesToJSON(fipsCodes: FipsCodes): string {
  return JSON.stringify(FipsCodes$outboundSchema.parse(fipsCodes));
}

export function fipsCodesFromJSON(
  jsonString: string,
): SafeParseResult<FipsCodes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FipsCodes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FipsCodes' from JSON`,
  );
}

/** @internal */
export const Key$inboundSchema: z.ZodNativeEnum<typeof Key> = z.nativeEnum(Key);

/** @internal */
export const Key$outboundSchema: z.ZodNativeEnum<typeof Key> =
  Key$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Key$ {
  /** @deprecated use `Key$inboundSchema` instead. */
  export const inboundSchema = Key$inboundSchema;
  /** @deprecated use `Key$outboundSchema` instead. */
  export const outboundSchema = Key$outboundSchema;
}

/** @internal */
export const RequiredAttributes$inboundSchema: z.ZodType<
  RequiredAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: Key$inboundSchema.optional(),
  label: z.string().optional(),
});

/** @internal */
export type RequiredAttributes$Outbound = {
  key?: string | undefined;
  label?: string | undefined;
};

/** @internal */
export const RequiredAttributes$outboundSchema: z.ZodType<
  RequiredAttributes$Outbound,
  z.ZodTypeDef,
  RequiredAttributes
> = z.object({
  key: Key$outboundSchema.optional(),
  label: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequiredAttributes$ {
  /** @deprecated use `RequiredAttributes$inboundSchema` instead. */
  export const inboundSchema = RequiredAttributes$inboundSchema;
  /** @deprecated use `RequiredAttributes$outboundSchema` instead. */
  export const outboundSchema = RequiredAttributes$outboundSchema;
  /** @deprecated use `RequiredAttributes$Outbound` instead. */
  export type Outbound = RequiredAttributes$Outbound;
}

export function requiredAttributesToJSON(
  requiredAttributes: RequiredAttributes,
): string {
  return JSON.stringify(
    RequiredAttributes$outboundSchema.parse(requiredAttributes),
  );
}

export function requiredAttributesFromJSON(
  jsonString: string,
): SafeParseResult<RequiredAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequiredAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequiredAttributes' from JSON`,
  );
}

/** @internal */
export const Agencies$inboundSchema: z.ZodType<
  Agencies,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: z.string().optional(),
  name: z.string().optional(),
  manual_payment_required: z.boolean().optional(),
  fips_codes: z.array(z.lazy(() => FipsCodes$inboundSchema)).optional(),
  required_attributes: z.array(z.lazy(() => RequiredAttributes$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "manual_payment_required": "manualPaymentRequired",
    "fips_codes": "fipsCodes",
    "required_attributes": "requiredAttributes",
  });
});

/** @internal */
export type Agencies$Outbound = {
  state?: string | undefined;
  name?: string | undefined;
  manual_payment_required?: boolean | undefined;
  fips_codes?: Array<FipsCodes$Outbound> | undefined;
  required_attributes?: Array<RequiredAttributes$Outbound> | undefined;
};

/** @internal */
export const Agencies$outboundSchema: z.ZodType<
  Agencies$Outbound,
  z.ZodTypeDef,
  Agencies
> = z.object({
  state: z.string().optional(),
  name: z.string().optional(),
  manualPaymentRequired: z.boolean().optional(),
  fipsCodes: z.array(z.lazy(() => FipsCodes$outboundSchema)).optional(),
  requiredAttributes: z.array(z.lazy(() => RequiredAttributes$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    manualPaymentRequired: "manual_payment_required",
    fipsCodes: "fips_codes",
    requiredAttributes: "required_attributes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Agencies$ {
  /** @deprecated use `Agencies$inboundSchema` instead. */
  export const inboundSchema = Agencies$inboundSchema;
  /** @deprecated use `Agencies$outboundSchema` instead. */
  export const outboundSchema = Agencies$outboundSchema;
  /** @deprecated use `Agencies$Outbound` instead. */
  export type Outbound = Agencies$Outbound;
}

export function agenciesToJSON(agencies: Agencies): string {
  return JSON.stringify(Agencies$outboundSchema.parse(agencies));
}

export function agenciesFromJSON(
  jsonString: string,
): SafeParseResult<Agencies, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Agencies$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Agencies' from JSON`,
  );
}

/** @internal */
export const ChildSupportData$inboundSchema: z.ZodType<
  ChildSupportData,
  z.ZodTypeDef,
  unknown
> = z.object({
  agencies: z.array(z.lazy(() => Agencies$inboundSchema)).optional(),
});

/** @internal */
export type ChildSupportData$Outbound = {
  agencies?: Array<Agencies$Outbound> | undefined;
};

/** @internal */
export const ChildSupportData$outboundSchema: z.ZodType<
  ChildSupportData$Outbound,
  z.ZodTypeDef,
  ChildSupportData
> = z.object({
  agencies: z.array(z.lazy(() => Agencies$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChildSupportData$ {
  /** @deprecated use `ChildSupportData$inboundSchema` instead. */
  export const inboundSchema = ChildSupportData$inboundSchema;
  /** @deprecated use `ChildSupportData$outboundSchema` instead. */
  export const outboundSchema = ChildSupportData$outboundSchema;
  /** @deprecated use `ChildSupportData$Outbound` instead. */
  export type Outbound = ChildSupportData$Outbound;
}

export function childSupportDataToJSON(
  childSupportData: ChildSupportData,
): string {
  return JSON.stringify(
    ChildSupportData$outboundSchema.parse(childSupportData),
  );
}

export function childSupportDataFromJSON(
  jsonString: string,
): SafeParseResult<ChildSupportData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChildSupportData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChildSupportData' from JSON`,
  );
}
