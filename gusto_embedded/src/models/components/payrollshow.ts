/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OffCycleReasonType,
  OffCycleReasonType$inboundSchema,
  OffCycleReasonType$outboundSchema,
} from "./offcyclereasontype.js";
import {
  PayrollCompanyTaxesType,
  PayrollCompanyTaxesType$inboundSchema,
  PayrollCompanyTaxesType$Outbound,
  PayrollCompanyTaxesType$outboundSchema,
} from "./payrollcompanytaxestype.js";
import {
  PayrollCreditBlockersType,
  PayrollCreditBlockersType$inboundSchema,
  PayrollCreditBlockersType$Outbound,
  PayrollCreditBlockersType$outboundSchema,
} from "./payrollcreditblockerstype.js";
import {
  PayrollPaymentSpeedChangedType,
  PayrollPaymentSpeedChangedType$inboundSchema,
  PayrollPaymentSpeedChangedType$Outbound,
  PayrollPaymentSpeedChangedType$outboundSchema,
} from "./payrollpaymentspeedchangedtype.js";
import {
  PayrollPayPeriodType,
  PayrollPayPeriodType$inboundSchema,
  PayrollPayPeriodType$Outbound,
  PayrollPayPeriodType$outboundSchema,
} from "./payrollpayperiodtype.js";
import {
  PayrollPayrollStatusMetaType,
  PayrollPayrollStatusMetaType$inboundSchema,
  PayrollPayrollStatusMetaType$Outbound,
  PayrollPayrollStatusMetaType$outboundSchema,
} from "./payrollpayrollstatusmetatype.js";
import {
  PayrollProcessingRequest,
  PayrollProcessingRequest$inboundSchema,
  PayrollProcessingRequest$Outbound,
  PayrollProcessingRequest$outboundSchema,
} from "./payrollprocessingrequest.js";
import {
  PayrollSubmissionBlockersType,
  PayrollSubmissionBlockersType$inboundSchema,
  PayrollSubmissionBlockersType$Outbound,
  PayrollSubmissionBlockersType$outboundSchema,
} from "./payrollsubmissionblockerstype.js";
import {
  PayrollTotalsType,
  PayrollTotalsType$inboundSchema,
  PayrollTotalsType$Outbound,
  PayrollTotalsType$outboundSchema,
} from "./payrolltotalstype.js";
import {
  PayrollWithholdingPayPeriodType,
  PayrollWithholdingPayPeriodType$inboundSchema,
  PayrollWithholdingPayPeriodType$outboundSchema,
} from "./payrollwithholdingpayperiodtype.js";

/**
 * The employee's compensation payment method. Is *only* `Historical` when retrieving external payrolls initially run outside of Gusto, then put into Gusto.
 */
export const PayrollShowPaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
  Historical: "Historical",
} as const;
/**
 * The employee's compensation payment method. Is *only* `Historical` when retrieving external payrolls initially run outside of Gusto, then put into Gusto.
 */
export type PayrollShowPaymentMethod = ClosedEnum<
  typeof PayrollShowPaymentMethod
>;

export type PayrollShowFixedCompensations = {
  /**
   * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
   */
  name?: string | undefined;
  /**
   * The amount of the compensation for the pay period.
   */
  amount?: string | undefined;
  /**
   * The UUID of the job for the compensation.
   */
  jobUuid?: string | undefined;
};

export type PayrollShowHourlyCompensations = {
  /**
   * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
   */
  name?: string | undefined;
  /**
   * The number of hours to be compensated for this pay period.
   */
  hours?: string | undefined;
  /**
   * The amount of the compensation. This field is only available after the payroll is calculated and cannot be used for updating hourly compensations.
   */
  amount?: string | undefined;
  /**
   * The UUID of the job for the compensation.
   */
  jobUuid?: string | undefined;
  /**
   * The amount multiplied by the base rate to calculate total compensation per hour worked.
   */
  compensationMultiplier?: number | undefined;
  /**
   * The FLSA Status of the employee's primary job compensation
   */
  flsaStatus?: string | undefined;
};

export type PayrollShowPaidTimeOff = {
  /**
   * The name of the PTO. This also serves as the unique, immutable identifier for the PTO.
   */
  name?: string | undefined;
  /**
   * The hours of this PTO taken during the pay period.
   */
  hours?: string | undefined;
  /**
   * The outstanding hours paid upon termination. This field is only applicable for termination payrolls.
   */
  finalPayoutUnusedHoursInput?: string | undefined;
};

export type PayrollShowTaxes = {
  name: string;
  employer: boolean;
  amount: number;
};

export type PayrollShowBenefits = {
  name?: string | undefined;
  employeeDeduction?: number | undefined;
  companyContribution?: number | undefined;
  imputed?: boolean | undefined;
};

export type Deductions = {
  name?: string | undefined;
  amount?: number | undefined;
};

export type EmployeeCompensations = {
  /**
   * The UUID of the employee.
   */
  employeeUuid?: string | undefined;
  /**
   * This employee will be excluded (skipped) from payroll calculation and will not be paid for the payroll. Cancelling a payroll would reset all employees' excluded back to false.
   */
  excluded?: boolean | undefined;
  /**
   * The current version of this employee compensation. This field is only available for prepared payrolls. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The employee's gross pay, equal to regular wages + cash tips + payroll tips + any other additional earnings, excluding imputed income. This value is only available for processed payrolls.
   */
  grossPay?: number | null | undefined;
  /**
   * The employee's net pay, equal to gross_pay - employee taxes - employee deductions or garnishments - cash tips. This value is only available for processed payrolls.
   */
  netPay?: number | null | undefined;
  /**
   * The employee's check amount, equal to net_pay + reimbursements. This value is only available for processed payrolls.
   */
  checkAmount?: number | null | undefined;
  /**
   * The employee's compensation payment method. Is *only* `Historical` when retrieving external payrolls initially run outside of Gusto, then put into Gusto.
   */
  paymentMethod?: PayrollShowPaymentMethod | null | undefined;
  /**
   * Custom text that will be printed as a personal note to the employee on a paystub.
   */
  memo?: string | null | undefined;
  /**
   * An array of fixed compensations for the employee. Fixed compensations include tips, bonuses, and one time reimbursements. If this payroll has been processed, only fixed compensations with a value greater than 0.00 are returned. For an unprocessed payroll, all active fixed compensations are returned.
   */
  fixedCompensations?: Array<PayrollShowFixedCompensations> | undefined;
  /**
   * An array of hourly compensations for the employee. Hourly compensations include regular, overtime, and double overtime hours. If this payroll has been processed, only hourly compensations with a value greater than 0.00 are returned. For an unprocessed payroll, all active hourly compensations are returned.
   */
  hourlyCompensations?: Array<PayrollShowHourlyCompensations> | undefined;
  /**
   * An array of all paid time off the employee is eligible for this pay period.
   */
  paidTimeOff?: Array<PayrollShowPaidTimeOff> | undefined;
  /**
   * An array of employer and employee taxes for the pay period. Only included for processed or calculated payrolls when `taxes` is present in the `include` parameter.
   */
  taxes?: Array<PayrollShowTaxes> | undefined;
  /**
   * An array of employee benefits for the pay period. Benefits are only included for processed payroll when the include parameter is present.
   */
  benefits?: Array<PayrollShowBenefits> | undefined;
  /**
   * An array of employee deductions for the pay period. Deductions are only included for processed payroll when the include parameter is present.
   */
  deductions?: Array<Deductions> | undefined;
};

export type PayrollShow = {
  /**
   * A timestamp that is the deadline for the payroll to be run in order for employees to be paid on time.  If payroll has not been run by the deadline, a prepare request will update both the check date and deadline to reflect the soonest employees can be paid and the deadline by which the payroll must be run in order for said check date to be met.
   */
  payrollDeadline?: RFCDate | undefined;
  /**
   * The date on which employees will be paid for the payroll.
   */
  checkDate?: string | undefined;
  /**
   * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
   */
  processed?: boolean | undefined;
  /**
   * The date at which the payroll was processed. Null if the payroll isn't processed yet.
   */
  processedDate?: string | null | undefined;
  /**
   * A timestamp of the last valid payroll calculation. Null if there isn't a valid calculation.
   */
  calculatedAt?: string | null | undefined;
  /**
   * The UUID of the payroll.
   */
  uuid?: string | undefined;
  /**
   * The UUID of the payroll.
   */
  payrollUuid?: string | undefined;
  /**
   * The UUID of the company for the payroll.
   */
  companyUuid?: string | undefined;
  /**
   * Indicates whether the payroll is an off-cycle payroll
   */
  offCycle?: boolean | undefined;
  /**
   * The off-cycle reason. Only included for off-cycle payrolls.
   */
  offCycleReason?: OffCycleReasonType | null | undefined;
  /**
   * Indicates whether the payroll is an auto pilot payroll
   */
  autoPilot?: boolean | undefined;
  /**
   * Indicates whether the payroll is an external payroll
   */
  external?: boolean | undefined;
  /**
   * Indicates whether the payroll is the final payroll for a terminated employee. Only included for off-cycle payrolls.
   */
  finalTerminationPayroll?: boolean | undefined;
  /**
   * The payment schedule tax rate the payroll is based on. Only included for off-cycle payrolls.
   */
  withholdingPayPeriod?: PayrollWithholdingPayPeriodType | undefined;
  /**
   * Block regular deductions and contributions for this payroll.  Only included for off-cycle payrolls.
   */
  skipRegularDeductions?: boolean | undefined;
  /**
   * Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages. Only included for off-cycle payrolls.
   */
  fixedWithholdingRate?: boolean | undefined;
  payPeriod?: PayrollPayPeriodType | undefined;
  /**
   * Information about the payroll's status and expected dates
   */
  payrollStatusMeta?: PayrollPayrollStatusMetaType | undefined;
  /**
   * The subtotals for the payroll.
   */
  totals?: PayrollTotalsType | undefined;
  /**
   * An array of taxes applicable to this payroll in addition to taxes included in `employee_compensations`. Only included for processed or calculated payrolls when `taxes` is present in the `include` parameter.
   */
  companyTaxes?: Array<PayrollCompanyTaxesType> | undefined;
  /**
   * Only applicable when a payroll is moved to four day processing instead of fast ach.
   */
  paymentSpeedChanged?: PayrollPaymentSpeedChangedType | undefined;
  /**
   * Datetime for when the resource was created.
   */
  createdAt?: Date | undefined;
  /**
   * Only included for processed or calculated payrolls
   */
  submissionBlockers?: Array<PayrollSubmissionBlockersType> | undefined;
  /**
   * Only included for processed payrolls
   */
  creditBlockers?: Array<PayrollCreditBlockersType> | undefined;
  processingRequest?: PayrollProcessingRequest | null | undefined;
  /**
   * Will money movement for the payroll be performed by the partner rather than by Gusto?
   */
  partnerOwnedDisbursement?: boolean | null | undefined;
  employeeCompensations?: Array<EmployeeCompensations> | undefined;
};

/** @internal */
export const PayrollShowPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof PayrollShowPaymentMethod
> = z.nativeEnum(PayrollShowPaymentMethod);

/** @internal */
export const PayrollShowPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof PayrollShowPaymentMethod
> = PayrollShowPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollShowPaymentMethod$ {
  /** @deprecated use `PayrollShowPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PayrollShowPaymentMethod$inboundSchema;
  /** @deprecated use `PayrollShowPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PayrollShowPaymentMethod$outboundSchema;
}

/** @internal */
export const PayrollShowFixedCompensations$inboundSchema: z.ZodType<
  PayrollShowFixedCompensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  amount: z.string().optional(),
  job_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
  });
});

/** @internal */
export type PayrollShowFixedCompensations$Outbound = {
  name?: string | undefined;
  amount?: string | undefined;
  job_uuid?: string | undefined;
};

/** @internal */
export const PayrollShowFixedCompensations$outboundSchema: z.ZodType<
  PayrollShowFixedCompensations$Outbound,
  z.ZodTypeDef,
  PayrollShowFixedCompensations
> = z.object({
  name: z.string().optional(),
  amount: z.string().optional(),
  jobUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollShowFixedCompensations$ {
  /** @deprecated use `PayrollShowFixedCompensations$inboundSchema` instead. */
  export const inboundSchema = PayrollShowFixedCompensations$inboundSchema;
  /** @deprecated use `PayrollShowFixedCompensations$outboundSchema` instead. */
  export const outboundSchema = PayrollShowFixedCompensations$outboundSchema;
  /** @deprecated use `PayrollShowFixedCompensations$Outbound` instead. */
  export type Outbound = PayrollShowFixedCompensations$Outbound;
}

export function payrollShowFixedCompensationsToJSON(
  payrollShowFixedCompensations: PayrollShowFixedCompensations,
): string {
  return JSON.stringify(
    PayrollShowFixedCompensations$outboundSchema.parse(
      payrollShowFixedCompensations,
    ),
  );
}

export function payrollShowFixedCompensationsFromJSON(
  jsonString: string,
): SafeParseResult<PayrollShowFixedCompensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollShowFixedCompensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollShowFixedCompensations' from JSON`,
  );
}

/** @internal */
export const PayrollShowHourlyCompensations$inboundSchema: z.ZodType<
  PayrollShowHourlyCompensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  hours: z.string().optional(),
  amount: z.string().optional(),
  job_uuid: z.string().optional(),
  compensation_multiplier: z.number().optional(),
  flsa_status: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
    "compensation_multiplier": "compensationMultiplier",
    "flsa_status": "flsaStatus",
  });
});

/** @internal */
export type PayrollShowHourlyCompensations$Outbound = {
  name?: string | undefined;
  hours?: string | undefined;
  amount?: string | undefined;
  job_uuid?: string | undefined;
  compensation_multiplier?: number | undefined;
  flsa_status?: string | undefined;
};

/** @internal */
export const PayrollShowHourlyCompensations$outboundSchema: z.ZodType<
  PayrollShowHourlyCompensations$Outbound,
  z.ZodTypeDef,
  PayrollShowHourlyCompensations
> = z.object({
  name: z.string().optional(),
  hours: z.string().optional(),
  amount: z.string().optional(),
  jobUuid: z.string().optional(),
  compensationMultiplier: z.number().optional(),
  flsaStatus: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
    compensationMultiplier: "compensation_multiplier",
    flsaStatus: "flsa_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollShowHourlyCompensations$ {
  /** @deprecated use `PayrollShowHourlyCompensations$inboundSchema` instead. */
  export const inboundSchema = PayrollShowHourlyCompensations$inboundSchema;
  /** @deprecated use `PayrollShowHourlyCompensations$outboundSchema` instead. */
  export const outboundSchema = PayrollShowHourlyCompensations$outboundSchema;
  /** @deprecated use `PayrollShowHourlyCompensations$Outbound` instead. */
  export type Outbound = PayrollShowHourlyCompensations$Outbound;
}

export function payrollShowHourlyCompensationsToJSON(
  payrollShowHourlyCompensations: PayrollShowHourlyCompensations,
): string {
  return JSON.stringify(
    PayrollShowHourlyCompensations$outboundSchema.parse(
      payrollShowHourlyCompensations,
    ),
  );
}

export function payrollShowHourlyCompensationsFromJSON(
  jsonString: string,
): SafeParseResult<PayrollShowHourlyCompensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollShowHourlyCompensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollShowHourlyCompensations' from JSON`,
  );
}

/** @internal */
export const PayrollShowPaidTimeOff$inboundSchema: z.ZodType<
  PayrollShowPaidTimeOff,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  hours: z.string().optional(),
  final_payout_unused_hours_input: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "final_payout_unused_hours_input": "finalPayoutUnusedHoursInput",
  });
});

/** @internal */
export type PayrollShowPaidTimeOff$Outbound = {
  name?: string | undefined;
  hours?: string | undefined;
  final_payout_unused_hours_input?: string | undefined;
};

/** @internal */
export const PayrollShowPaidTimeOff$outboundSchema: z.ZodType<
  PayrollShowPaidTimeOff$Outbound,
  z.ZodTypeDef,
  PayrollShowPaidTimeOff
> = z.object({
  name: z.string().optional(),
  hours: z.string().optional(),
  finalPayoutUnusedHoursInput: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    finalPayoutUnusedHoursInput: "final_payout_unused_hours_input",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollShowPaidTimeOff$ {
  /** @deprecated use `PayrollShowPaidTimeOff$inboundSchema` instead. */
  export const inboundSchema = PayrollShowPaidTimeOff$inboundSchema;
  /** @deprecated use `PayrollShowPaidTimeOff$outboundSchema` instead. */
  export const outboundSchema = PayrollShowPaidTimeOff$outboundSchema;
  /** @deprecated use `PayrollShowPaidTimeOff$Outbound` instead. */
  export type Outbound = PayrollShowPaidTimeOff$Outbound;
}

export function payrollShowPaidTimeOffToJSON(
  payrollShowPaidTimeOff: PayrollShowPaidTimeOff,
): string {
  return JSON.stringify(
    PayrollShowPaidTimeOff$outboundSchema.parse(payrollShowPaidTimeOff),
  );
}

export function payrollShowPaidTimeOffFromJSON(
  jsonString: string,
): SafeParseResult<PayrollShowPaidTimeOff, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollShowPaidTimeOff$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollShowPaidTimeOff' from JSON`,
  );
}

/** @internal */
export const PayrollShowTaxes$inboundSchema: z.ZodType<
  PayrollShowTaxes,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  employer: z.boolean(),
  amount: z.number(),
});

/** @internal */
export type PayrollShowTaxes$Outbound = {
  name: string;
  employer: boolean;
  amount: number;
};

/** @internal */
export const PayrollShowTaxes$outboundSchema: z.ZodType<
  PayrollShowTaxes$Outbound,
  z.ZodTypeDef,
  PayrollShowTaxes
> = z.object({
  name: z.string(),
  employer: z.boolean(),
  amount: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollShowTaxes$ {
  /** @deprecated use `PayrollShowTaxes$inboundSchema` instead. */
  export const inboundSchema = PayrollShowTaxes$inboundSchema;
  /** @deprecated use `PayrollShowTaxes$outboundSchema` instead. */
  export const outboundSchema = PayrollShowTaxes$outboundSchema;
  /** @deprecated use `PayrollShowTaxes$Outbound` instead. */
  export type Outbound = PayrollShowTaxes$Outbound;
}

export function payrollShowTaxesToJSON(
  payrollShowTaxes: PayrollShowTaxes,
): string {
  return JSON.stringify(
    PayrollShowTaxes$outboundSchema.parse(payrollShowTaxes),
  );
}

export function payrollShowTaxesFromJSON(
  jsonString: string,
): SafeParseResult<PayrollShowTaxes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollShowTaxes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollShowTaxes' from JSON`,
  );
}

/** @internal */
export const PayrollShowBenefits$inboundSchema: z.ZodType<
  PayrollShowBenefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  employee_deduction: z.number().optional(),
  company_contribution: z.number().optional(),
  imputed: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_deduction": "employeeDeduction",
    "company_contribution": "companyContribution",
  });
});

/** @internal */
export type PayrollShowBenefits$Outbound = {
  name?: string | undefined;
  employee_deduction?: number | undefined;
  company_contribution?: number | undefined;
  imputed?: boolean | undefined;
};

/** @internal */
export const PayrollShowBenefits$outboundSchema: z.ZodType<
  PayrollShowBenefits$Outbound,
  z.ZodTypeDef,
  PayrollShowBenefits
> = z.object({
  name: z.string().optional(),
  employeeDeduction: z.number().optional(),
  companyContribution: z.number().optional(),
  imputed: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    employeeDeduction: "employee_deduction",
    companyContribution: "company_contribution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollShowBenefits$ {
  /** @deprecated use `PayrollShowBenefits$inboundSchema` instead. */
  export const inboundSchema = PayrollShowBenefits$inboundSchema;
  /** @deprecated use `PayrollShowBenefits$outboundSchema` instead. */
  export const outboundSchema = PayrollShowBenefits$outboundSchema;
  /** @deprecated use `PayrollShowBenefits$Outbound` instead. */
  export type Outbound = PayrollShowBenefits$Outbound;
}

export function payrollShowBenefitsToJSON(
  payrollShowBenefits: PayrollShowBenefits,
): string {
  return JSON.stringify(
    PayrollShowBenefits$outboundSchema.parse(payrollShowBenefits),
  );
}

export function payrollShowBenefitsFromJSON(
  jsonString: string,
): SafeParseResult<PayrollShowBenefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollShowBenefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollShowBenefits' from JSON`,
  );
}

/** @internal */
export const Deductions$inboundSchema: z.ZodType<
  Deductions,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  amount: z.number().optional(),
});

/** @internal */
export type Deductions$Outbound = {
  name?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const Deductions$outboundSchema: z.ZodType<
  Deductions$Outbound,
  z.ZodTypeDef,
  Deductions
> = z.object({
  name: z.string().optional(),
  amount: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Deductions$ {
  /** @deprecated use `Deductions$inboundSchema` instead. */
  export const inboundSchema = Deductions$inboundSchema;
  /** @deprecated use `Deductions$outboundSchema` instead. */
  export const outboundSchema = Deductions$outboundSchema;
  /** @deprecated use `Deductions$Outbound` instead. */
  export type Outbound = Deductions$Outbound;
}

export function deductionsToJSON(deductions: Deductions): string {
  return JSON.stringify(Deductions$outboundSchema.parse(deductions));
}

export function deductionsFromJSON(
  jsonString: string,
): SafeParseResult<Deductions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Deductions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Deductions' from JSON`,
  );
}

/** @internal */
export const EmployeeCompensations$inboundSchema: z.ZodType<
  EmployeeCompensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_uuid: z.string().optional(),
  excluded: z.boolean().optional(),
  version: z.string().optional(),
  gross_pay: z.nullable(z.number()).optional(),
  net_pay: z.nullable(z.number()).optional(),
  check_amount: z.nullable(z.number()).optional(),
  payment_method: z.nullable(PayrollShowPaymentMethod$inboundSchema).optional(),
  memo: z.nullable(z.string()).optional(),
  fixed_compensations: z.array(
    z.lazy(() => PayrollShowFixedCompensations$inboundSchema),
  ).optional(),
  hourly_compensations: z.array(
    z.lazy(() => PayrollShowHourlyCompensations$inboundSchema),
  ).optional(),
  paid_time_off: z.array(z.lazy(() => PayrollShowPaidTimeOff$inboundSchema))
    .optional(),
  taxes: z.array(z.lazy(() => PayrollShowTaxes$inboundSchema)).optional(),
  benefits: z.array(z.lazy(() => PayrollShowBenefits$inboundSchema)).optional(),
  deductions: z.array(z.lazy(() => Deductions$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
    "gross_pay": "grossPay",
    "net_pay": "netPay",
    "check_amount": "checkAmount",
    "payment_method": "paymentMethod",
    "fixed_compensations": "fixedCompensations",
    "hourly_compensations": "hourlyCompensations",
    "paid_time_off": "paidTimeOff",
  });
});

/** @internal */
export type EmployeeCompensations$Outbound = {
  employee_uuid?: string | undefined;
  excluded?: boolean | undefined;
  version?: string | undefined;
  gross_pay?: number | null | undefined;
  net_pay?: number | null | undefined;
  check_amount?: number | null | undefined;
  payment_method?: string | null | undefined;
  memo?: string | null | undefined;
  fixed_compensations?:
    | Array<PayrollShowFixedCompensations$Outbound>
    | undefined;
  hourly_compensations?:
    | Array<PayrollShowHourlyCompensations$Outbound>
    | undefined;
  paid_time_off?: Array<PayrollShowPaidTimeOff$Outbound> | undefined;
  taxes?: Array<PayrollShowTaxes$Outbound> | undefined;
  benefits?: Array<PayrollShowBenefits$Outbound> | undefined;
  deductions?: Array<Deductions$Outbound> | undefined;
};

/** @internal */
export const EmployeeCompensations$outboundSchema: z.ZodType<
  EmployeeCompensations$Outbound,
  z.ZodTypeDef,
  EmployeeCompensations
> = z.object({
  employeeUuid: z.string().optional(),
  excluded: z.boolean().optional(),
  version: z.string().optional(),
  grossPay: z.nullable(z.number()).optional(),
  netPay: z.nullable(z.number()).optional(),
  checkAmount: z.nullable(z.number()).optional(),
  paymentMethod: z.nullable(PayrollShowPaymentMethod$outboundSchema).optional(),
  memo: z.nullable(z.string()).optional(),
  fixedCompensations: z.array(
    z.lazy(() => PayrollShowFixedCompensations$outboundSchema),
  ).optional(),
  hourlyCompensations: z.array(
    z.lazy(() => PayrollShowHourlyCompensations$outboundSchema),
  ).optional(),
  paidTimeOff: z.array(z.lazy(() => PayrollShowPaidTimeOff$outboundSchema))
    .optional(),
  taxes: z.array(z.lazy(() => PayrollShowTaxes$outboundSchema)).optional(),
  benefits: z.array(z.lazy(() => PayrollShowBenefits$outboundSchema))
    .optional(),
  deductions: z.array(z.lazy(() => Deductions$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
    grossPay: "gross_pay",
    netPay: "net_pay",
    checkAmount: "check_amount",
    paymentMethod: "payment_method",
    fixedCompensations: "fixed_compensations",
    hourlyCompensations: "hourly_compensations",
    paidTimeOff: "paid_time_off",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeCompensations$ {
  /** @deprecated use `EmployeeCompensations$inboundSchema` instead. */
  export const inboundSchema = EmployeeCompensations$inboundSchema;
  /** @deprecated use `EmployeeCompensations$outboundSchema` instead. */
  export const outboundSchema = EmployeeCompensations$outboundSchema;
  /** @deprecated use `EmployeeCompensations$Outbound` instead. */
  export type Outbound = EmployeeCompensations$Outbound;
}

export function employeeCompensationsToJSON(
  employeeCompensations: EmployeeCompensations,
): string {
  return JSON.stringify(
    EmployeeCompensations$outboundSchema.parse(employeeCompensations),
  );
}

export function employeeCompensationsFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeCompensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeCompensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeCompensations' from JSON`,
  );
}

/** @internal */
export const PayrollShow$inboundSchema: z.ZodType<
  PayrollShow,
  z.ZodTypeDef,
  unknown
> = z.object({
  payroll_deadline: z.string().transform(v => new RFCDate(v)).optional(),
  check_date: z.string().optional(),
  processed: z.boolean().optional(),
  processed_date: z.nullable(z.string()).optional(),
  calculated_at: z.nullable(z.string()).optional(),
  uuid: z.string().optional(),
  payroll_uuid: z.string().optional(),
  company_uuid: z.string().optional(),
  off_cycle: z.boolean().optional(),
  off_cycle_reason: z.nullable(OffCycleReasonType$inboundSchema).optional(),
  auto_pilot: z.boolean().optional(),
  external: z.boolean().optional(),
  final_termination_payroll: z.boolean().optional(),
  withholding_pay_period: PayrollWithholdingPayPeriodType$inboundSchema
    .optional(),
  skip_regular_deductions: z.boolean().optional(),
  fixed_withholding_rate: z.boolean().optional(),
  pay_period: PayrollPayPeriodType$inboundSchema.optional(),
  payroll_status_meta: PayrollPayrollStatusMetaType$inboundSchema.optional(),
  totals: PayrollTotalsType$inboundSchema.optional(),
  company_taxes: z.array(PayrollCompanyTaxesType$inboundSchema).optional(),
  payment_speed_changed: PayrollPaymentSpeedChangedType$inboundSchema
    .optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  submission_blockers: z.array(PayrollSubmissionBlockersType$inboundSchema)
    .optional(),
  credit_blockers: z.array(PayrollCreditBlockersType$inboundSchema).optional(),
  processing_request: z.nullable(PayrollProcessingRequest$inboundSchema)
    .optional(),
  partner_owned_disbursement: z.nullable(z.boolean()).optional(),
  employee_compensations: z.array(
    z.lazy(() => EmployeeCompensations$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "payroll_deadline": "payrollDeadline",
    "check_date": "checkDate",
    "processed_date": "processedDate",
    "calculated_at": "calculatedAt",
    "payroll_uuid": "payrollUuid",
    "company_uuid": "companyUuid",
    "off_cycle": "offCycle",
    "off_cycle_reason": "offCycleReason",
    "auto_pilot": "autoPilot",
    "final_termination_payroll": "finalTerminationPayroll",
    "withholding_pay_period": "withholdingPayPeriod",
    "skip_regular_deductions": "skipRegularDeductions",
    "fixed_withholding_rate": "fixedWithholdingRate",
    "pay_period": "payPeriod",
    "payroll_status_meta": "payrollStatusMeta",
    "company_taxes": "companyTaxes",
    "payment_speed_changed": "paymentSpeedChanged",
    "created_at": "createdAt",
    "submission_blockers": "submissionBlockers",
    "credit_blockers": "creditBlockers",
    "processing_request": "processingRequest",
    "partner_owned_disbursement": "partnerOwnedDisbursement",
    "employee_compensations": "employeeCompensations",
  });
});

/** @internal */
export type PayrollShow$Outbound = {
  payroll_deadline?: string | undefined;
  check_date?: string | undefined;
  processed?: boolean | undefined;
  processed_date?: string | null | undefined;
  calculated_at?: string | null | undefined;
  uuid?: string | undefined;
  payroll_uuid?: string | undefined;
  company_uuid?: string | undefined;
  off_cycle?: boolean | undefined;
  off_cycle_reason?: string | null | undefined;
  auto_pilot?: boolean | undefined;
  external?: boolean | undefined;
  final_termination_payroll?: boolean | undefined;
  withholding_pay_period?: string | undefined;
  skip_regular_deductions?: boolean | undefined;
  fixed_withholding_rate?: boolean | undefined;
  pay_period?: PayrollPayPeriodType$Outbound | undefined;
  payroll_status_meta?: PayrollPayrollStatusMetaType$Outbound | undefined;
  totals?: PayrollTotalsType$Outbound | undefined;
  company_taxes?: Array<PayrollCompanyTaxesType$Outbound> | undefined;
  payment_speed_changed?: PayrollPaymentSpeedChangedType$Outbound | undefined;
  created_at?: string | undefined;
  submission_blockers?:
    | Array<PayrollSubmissionBlockersType$Outbound>
    | undefined;
  credit_blockers?: Array<PayrollCreditBlockersType$Outbound> | undefined;
  processing_request?: PayrollProcessingRequest$Outbound | null | undefined;
  partner_owned_disbursement?: boolean | null | undefined;
  employee_compensations?: Array<EmployeeCompensations$Outbound> | undefined;
};

/** @internal */
export const PayrollShow$outboundSchema: z.ZodType<
  PayrollShow$Outbound,
  z.ZodTypeDef,
  PayrollShow
> = z.object({
  payrollDeadline: z.instanceof(RFCDate).transform(v => v.toString())
    .optional(),
  checkDate: z.string().optional(),
  processed: z.boolean().optional(),
  processedDate: z.nullable(z.string()).optional(),
  calculatedAt: z.nullable(z.string()).optional(),
  uuid: z.string().optional(),
  payrollUuid: z.string().optional(),
  companyUuid: z.string().optional(),
  offCycle: z.boolean().optional(),
  offCycleReason: z.nullable(OffCycleReasonType$outboundSchema).optional(),
  autoPilot: z.boolean().optional(),
  external: z.boolean().optional(),
  finalTerminationPayroll: z.boolean().optional(),
  withholdingPayPeriod: PayrollWithholdingPayPeriodType$outboundSchema
    .optional(),
  skipRegularDeductions: z.boolean().optional(),
  fixedWithholdingRate: z.boolean().optional(),
  payPeriod: PayrollPayPeriodType$outboundSchema.optional(),
  payrollStatusMeta: PayrollPayrollStatusMetaType$outboundSchema.optional(),
  totals: PayrollTotalsType$outboundSchema.optional(),
  companyTaxes: z.array(PayrollCompanyTaxesType$outboundSchema).optional(),
  paymentSpeedChanged: PayrollPaymentSpeedChangedType$outboundSchema.optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  submissionBlockers: z.array(PayrollSubmissionBlockersType$outboundSchema)
    .optional(),
  creditBlockers: z.array(PayrollCreditBlockersType$outboundSchema).optional(),
  processingRequest: z.nullable(PayrollProcessingRequest$outboundSchema)
    .optional(),
  partnerOwnedDisbursement: z.nullable(z.boolean()).optional(),
  employeeCompensations: z.array(
    z.lazy(() => EmployeeCompensations$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    payrollDeadline: "payroll_deadline",
    checkDate: "check_date",
    processedDate: "processed_date",
    calculatedAt: "calculated_at",
    payrollUuid: "payroll_uuid",
    companyUuid: "company_uuid",
    offCycle: "off_cycle",
    offCycleReason: "off_cycle_reason",
    autoPilot: "auto_pilot",
    finalTerminationPayroll: "final_termination_payroll",
    withholdingPayPeriod: "withholding_pay_period",
    skipRegularDeductions: "skip_regular_deductions",
    fixedWithholdingRate: "fixed_withholding_rate",
    payPeriod: "pay_period",
    payrollStatusMeta: "payroll_status_meta",
    companyTaxes: "company_taxes",
    paymentSpeedChanged: "payment_speed_changed",
    createdAt: "created_at",
    submissionBlockers: "submission_blockers",
    creditBlockers: "credit_blockers",
    processingRequest: "processing_request",
    partnerOwnedDisbursement: "partner_owned_disbursement",
    employeeCompensations: "employee_compensations",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollShow$ {
  /** @deprecated use `PayrollShow$inboundSchema` instead. */
  export const inboundSchema = PayrollShow$inboundSchema;
  /** @deprecated use `PayrollShow$outboundSchema` instead. */
  export const outboundSchema = PayrollShow$outboundSchema;
  /** @deprecated use `PayrollShow$Outbound` instead. */
  export type Outbound = PayrollShow$Outbound;
}

export function payrollShowToJSON(payrollShow: PayrollShow): string {
  return JSON.stringify(PayrollShow$outboundSchema.parse(payrollShow));
}

export function payrollShowFromJSON(
  jsonString: string,
): SafeParseResult<PayrollShow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollShow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollShow' from JSON`,
  );
}
