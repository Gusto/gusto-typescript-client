/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The subtotals for the payroll.
 */
export type PayrollTotalsType = {
  /**
   * The total company debit for the payroll.
   */
  companyDebit?: string | undefined;
  /**
   * The total company net pay for the payroll.
   */
  netPayDebit?: string | undefined;
  /**
   * The total tax debit for the payroll.
   */
  taxDebit?: string | undefined;
  /**
   * The total reimbursement debit for the payroll.
   */
  reimbursementDebit?: string | undefined;
  /**
   * The total child support debit for the payroll.
   */
  childSupportDebit?: string | undefined;
  /**
   * The total reimbursements for the payroll.
   */
  reimbursements?: string | undefined;
  /**
   * The net pay amount for the payroll.
   */
  netPay?: string | undefined;
  /**
   * The gross pay amount for the payroll.
   */
  grossPay?: string | undefined;
  /**
   * The total employee bonuses amount for the payroll.
   */
  employeeBonuses?: string | undefined;
  /**
   * The total employee commissions amount for the payroll.
   */
  employeeCommissions?: string | undefined;
  /**
   * The total employee cash tips amount for the payroll.
   */
  employeeCashTips?: string | undefined;
  /**
   * The total employee paycheck tips amount for the payroll.
   */
  employeePaycheckTips?: string | undefined;
  /**
   * The total additional earnings amount for the payroll.
   */
  additionalEarnings?: string | undefined;
  /**
   * The total owner's draw for the payroll.
   */
  ownersDraw?: string | undefined;
  /**
   * The total check amount for the payroll.
   */
  checkAmount?: string | undefined;
  /**
   * The total amount of employer paid taxes for the payroll.
   */
  employerTaxes?: string | undefined;
  /**
   * The total amount of employee paid taxes for the payroll.
   */
  employeeTaxes?: string | undefined;
  /**
   * The total amount of company contributed benefits for the payroll.
   */
  benefits?: string | undefined;
  /**
   * The total amount of employee deducted benefits for the payroll.
   */
  employeeBenefitsDeductions?: string | undefined;
  /**
   * The total amount of imputed pay for the payroll.
   */
  imputedPay?: string | undefined;
  /**
   * The total amount of payroll taxes deferred for the payroll, such as allowed by the CARES act.
   */
  deferredPayrollTaxes?: string | undefined;
  /**
   * The total amount of deductions for the payroll.
   */
  otherDeductions?: string | undefined;
};

/** @internal */
export const PayrollTotalsType$inboundSchema: z.ZodType<
  PayrollTotalsType,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_debit: z.string().optional(),
  net_pay_debit: z.string().optional(),
  tax_debit: z.string().optional(),
  reimbursement_debit: z.string().optional(),
  child_support_debit: z.string().optional(),
  reimbursements: z.string().optional(),
  net_pay: z.string().optional(),
  gross_pay: z.string().optional(),
  employee_bonuses: z.string().optional(),
  employee_commissions: z.string().optional(),
  employee_cash_tips: z.string().optional(),
  employee_paycheck_tips: z.string().optional(),
  additional_earnings: z.string().optional(),
  owners_draw: z.string().optional(),
  check_amount: z.string().optional(),
  employer_taxes: z.string().optional(),
  employee_taxes: z.string().optional(),
  benefits: z.string().optional(),
  employee_benefits_deductions: z.string().optional(),
  imputed_pay: z.string().optional(),
  deferred_payroll_taxes: z.string().optional(),
  other_deductions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_debit": "companyDebit",
    "net_pay_debit": "netPayDebit",
    "tax_debit": "taxDebit",
    "reimbursement_debit": "reimbursementDebit",
    "child_support_debit": "childSupportDebit",
    "net_pay": "netPay",
    "gross_pay": "grossPay",
    "employee_bonuses": "employeeBonuses",
    "employee_commissions": "employeeCommissions",
    "employee_cash_tips": "employeeCashTips",
    "employee_paycheck_tips": "employeePaycheckTips",
    "additional_earnings": "additionalEarnings",
    "owners_draw": "ownersDraw",
    "check_amount": "checkAmount",
    "employer_taxes": "employerTaxes",
    "employee_taxes": "employeeTaxes",
    "employee_benefits_deductions": "employeeBenefitsDeductions",
    "imputed_pay": "imputedPay",
    "deferred_payroll_taxes": "deferredPayrollTaxes",
    "other_deductions": "otherDeductions",
  });
});

/** @internal */
export type PayrollTotalsType$Outbound = {
  company_debit?: string | undefined;
  net_pay_debit?: string | undefined;
  tax_debit?: string | undefined;
  reimbursement_debit?: string | undefined;
  child_support_debit?: string | undefined;
  reimbursements?: string | undefined;
  net_pay?: string | undefined;
  gross_pay?: string | undefined;
  employee_bonuses?: string | undefined;
  employee_commissions?: string | undefined;
  employee_cash_tips?: string | undefined;
  employee_paycheck_tips?: string | undefined;
  additional_earnings?: string | undefined;
  owners_draw?: string | undefined;
  check_amount?: string | undefined;
  employer_taxes?: string | undefined;
  employee_taxes?: string | undefined;
  benefits?: string | undefined;
  employee_benefits_deductions?: string | undefined;
  imputed_pay?: string | undefined;
  deferred_payroll_taxes?: string | undefined;
  other_deductions?: string | undefined;
};

/** @internal */
export const PayrollTotalsType$outboundSchema: z.ZodType<
  PayrollTotalsType$Outbound,
  z.ZodTypeDef,
  PayrollTotalsType
> = z.object({
  companyDebit: z.string().optional(),
  netPayDebit: z.string().optional(),
  taxDebit: z.string().optional(),
  reimbursementDebit: z.string().optional(),
  childSupportDebit: z.string().optional(),
  reimbursements: z.string().optional(),
  netPay: z.string().optional(),
  grossPay: z.string().optional(),
  employeeBonuses: z.string().optional(),
  employeeCommissions: z.string().optional(),
  employeeCashTips: z.string().optional(),
  employeePaycheckTips: z.string().optional(),
  additionalEarnings: z.string().optional(),
  ownersDraw: z.string().optional(),
  checkAmount: z.string().optional(),
  employerTaxes: z.string().optional(),
  employeeTaxes: z.string().optional(),
  benefits: z.string().optional(),
  employeeBenefitsDeductions: z.string().optional(),
  imputedPay: z.string().optional(),
  deferredPayrollTaxes: z.string().optional(),
  otherDeductions: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyDebit: "company_debit",
    netPayDebit: "net_pay_debit",
    taxDebit: "tax_debit",
    reimbursementDebit: "reimbursement_debit",
    childSupportDebit: "child_support_debit",
    netPay: "net_pay",
    grossPay: "gross_pay",
    employeeBonuses: "employee_bonuses",
    employeeCommissions: "employee_commissions",
    employeeCashTips: "employee_cash_tips",
    employeePaycheckTips: "employee_paycheck_tips",
    additionalEarnings: "additional_earnings",
    ownersDraw: "owners_draw",
    checkAmount: "check_amount",
    employerTaxes: "employer_taxes",
    employeeTaxes: "employee_taxes",
    employeeBenefitsDeductions: "employee_benefits_deductions",
    imputedPay: "imputed_pay",
    deferredPayrollTaxes: "deferred_payroll_taxes",
    otherDeductions: "other_deductions",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollTotalsType$ {
  /** @deprecated use `PayrollTotalsType$inboundSchema` instead. */
  export const inboundSchema = PayrollTotalsType$inboundSchema;
  /** @deprecated use `PayrollTotalsType$outboundSchema` instead. */
  export const outboundSchema = PayrollTotalsType$outboundSchema;
  /** @deprecated use `PayrollTotalsType$Outbound` instead. */
  export type Outbound = PayrollTotalsType$Outbound;
}

export function payrollTotalsTypeToJSON(
  payrollTotalsType: PayrollTotalsType,
): string {
  return JSON.stringify(
    PayrollTotalsType$outboundSchema.parse(payrollTotalsType),
  );
}

export function payrollTotalsTypeFromJSON(
  jsonString: string,
): SafeParseResult<PayrollTotalsType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollTotalsType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollTotalsType' from JSON`,
  );
}
