/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The payment method for the pay stub.
 */
export const EmployeePayStubsListPaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The payment method for the pay stub.
 */
export type EmployeePayStubsListPaymentMethod = ClosedEnum<
  typeof EmployeePayStubsListPaymentMethod
>;

/**
 * The representation of an employee pay stub information.
 */
export type EmployeePayStubsList = {
  /**
   * The UUID of the employee pay stub.
   */
  uuid: string;
  /**
   * The check date of the pay stub.
   */
  checkDate?: string | undefined;
  /**
   * The gross pay amount for the pay stub.
   */
  grossPay?: string | undefined;
  /**
   * The net pay amount for the pay stub.
   */
  netPay?: string | undefined;
  /**
   * A unique identifier of the payroll to which the pay stub belongs.
   */
  payrollUuid?: string | undefined;
  /**
   * The check amount for the pay stub.
   */
  checkAmount?: string | undefined;
  /**
   * The payment method for the pay stub.
   */
  paymentMethod?: EmployeePayStubsListPaymentMethod | undefined;
};

/** @internal */
export const EmployeePayStubsListPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof EmployeePayStubsListPaymentMethod
> = z.nativeEnum(EmployeePayStubsListPaymentMethod);

/** @internal */
export const EmployeePayStubsListPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof EmployeePayStubsListPaymentMethod
> = EmployeePayStubsListPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeePayStubsListPaymentMethod$ {
  /** @deprecated use `EmployeePayStubsListPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = EmployeePayStubsListPaymentMethod$inboundSchema;
  /** @deprecated use `EmployeePayStubsListPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    EmployeePayStubsListPaymentMethod$outboundSchema;
}

/** @internal */
export const EmployeePayStubsList$inboundSchema: z.ZodType<
  EmployeePayStubsList,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  check_date: z.string().optional(),
  gross_pay: z.string().optional(),
  net_pay: z.string().optional(),
  payroll_uuid: z.string().optional(),
  check_amount: z.string().optional(),
  payment_method: EmployeePayStubsListPaymentMethod$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "check_date": "checkDate",
    "gross_pay": "grossPay",
    "net_pay": "netPay",
    "payroll_uuid": "payrollUuid",
    "check_amount": "checkAmount",
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type EmployeePayStubsList$Outbound = {
  uuid: string;
  check_date?: string | undefined;
  gross_pay?: string | undefined;
  net_pay?: string | undefined;
  payroll_uuid?: string | undefined;
  check_amount?: string | undefined;
  payment_method?: string | undefined;
};

/** @internal */
export const EmployeePayStubsList$outboundSchema: z.ZodType<
  EmployeePayStubsList$Outbound,
  z.ZodTypeDef,
  EmployeePayStubsList
> = z.object({
  uuid: z.string(),
  checkDate: z.string().optional(),
  grossPay: z.string().optional(),
  netPay: z.string().optional(),
  payrollUuid: z.string().optional(),
  checkAmount: z.string().optional(),
  paymentMethod: EmployeePayStubsListPaymentMethod$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    checkDate: "check_date",
    grossPay: "gross_pay",
    netPay: "net_pay",
    payrollUuid: "payroll_uuid",
    checkAmount: "check_amount",
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeePayStubsList$ {
  /** @deprecated use `EmployeePayStubsList$inboundSchema` instead. */
  export const inboundSchema = EmployeePayStubsList$inboundSchema;
  /** @deprecated use `EmployeePayStubsList$outboundSchema` instead. */
  export const outboundSchema = EmployeePayStubsList$outboundSchema;
  /** @deprecated use `EmployeePayStubsList$Outbound` instead. */
  export type Outbound = EmployeePayStubsList$Outbound;
}

export function employeePayStubsListToJSON(
  employeePayStubsList: EmployeePayStubsList,
): string {
  return JSON.stringify(
    EmployeePayStubsList$outboundSchema.parse(employeePayStubsList),
  );
}

export function employeePayStubsListFromJSON(
  jsonString: string,
): SafeParseResult<EmployeePayStubsList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeePayStubsList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeePayStubsList' from JSON`,
  );
}
