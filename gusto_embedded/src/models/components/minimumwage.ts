/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Representation of a Minimum Wage
 */
export type MinimumWage = {
  /**
   * unique identifier of a minimum wage
   */
  uuid: string;
  /**
   * The wage rate for a minimum wage record. Represented as a float, e.g. "15.0".
   */
  wage: string;
  /**
   * The type of wage the minimum wage applies to, e.g. "Regular", "Regular-Industry-Specific".
   */
  wageType: string;
  /**
   * The date the minimum wage rule is effective on.
   */
  effectiveDate: RFCDate;
  /**
   * The governing authority that created the minimum wage, e.g. "City", "State", or "Federal".
   */
  authority: string;
  /**
   * Description of parties the minimum wage applies to.
   */
  notes?: string | undefined;
};

/** @internal */
export const MinimumWage$inboundSchema: z.ZodType<
  MinimumWage,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  wage: z.string(),
  wage_type: z.string(),
  effective_date: z.string().transform(v => new RFCDate(v)),
  authority: z.string(),
  notes: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "wage_type": "wageType",
    "effective_date": "effectiveDate",
  });
});

/** @internal */
export type MinimumWage$Outbound = {
  uuid: string;
  wage: string;
  wage_type: string;
  effective_date: string;
  authority: string;
  notes?: string | undefined;
};

/** @internal */
export const MinimumWage$outboundSchema: z.ZodType<
  MinimumWage$Outbound,
  z.ZodTypeDef,
  MinimumWage
> = z.object({
  uuid: z.string(),
  wage: z.string(),
  wageType: z.string(),
  effectiveDate: z.instanceof(RFCDate).transform(v => v.toString()),
  authority: z.string(),
  notes: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    wageType: "wage_type",
    effectiveDate: "effective_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MinimumWage$ {
  /** @deprecated use `MinimumWage$inboundSchema` instead. */
  export const inboundSchema = MinimumWage$inboundSchema;
  /** @deprecated use `MinimumWage$outboundSchema` instead. */
  export const outboundSchema = MinimumWage$outboundSchema;
  /** @deprecated use `MinimumWage$Outbound` instead. */
  export type Outbound = MinimumWage$Outbound;
}

export function minimumWageToJSON(minimumWage: MinimumWage): string {
  return JSON.stringify(MinimumWage$outboundSchema.parse(minimumWage));
}

export function minimumWageFromJSON(
  jsonString: string,
): SafeParseResult<MinimumWage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MinimumWage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MinimumWage' from JSON`,
  );
}
