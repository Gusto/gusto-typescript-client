/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A single tier of a tiered matching scheme.
 */
export type ValueTiers = {
  /**
   * The percentage of employee deduction within this tier the company contribution will match.
   */
  rate?: string | undefined;
  /**
   * Specifies the upper limit (inclusive) percentage of the employee contribution that this tier applies to.
   *
   * @remarks
   *
   * Use threshold to define each tier's end point, with tiers applied cumulatively from 0% upwards.
   *
   * For example:
   *
   * If the first tier has a threshold of "3", and `rate` of "100", the company will match 100% of employee contributions from 0% up to and including 3% of payroll.
   *
   * If the next tier has a threshold of "5" and a rate of "50", the company will match 50% of contributions from above 3% up to and including 5% of payroll.
   */
  threshold?: string | undefined;
  /**
   * The step up difference between this tier's threshold and the previous tier's threshold. In the first tier, this is equivalent to threshold.
   */
  thresholdDelta?: string | undefined;
};

export type Value2 = {
  tiers?: Array<ValueTiers> | undefined;
};

/**
 * For the `amount` and `percentage` contribution types, the value of the corresponding amount or percentage.
 *
 * @remarks
 *
 * For the `tiered` contribution type, an array of tiers.
 */
export type EmployeeBenefitForCompanyBenefitValue = Value2 | string;

/**
 * An object representing the type and value of the company contribution.
 */
export type EmployeeBenefitForCompanyBenefitContribution = {
  /**
   * The company contribution scheme.
   *
   * @remarks
   *
   * "amount": The company contributes a fixed amount per payroll. If elective is true, the contribution is matching, dollar-for-dollar.
   *
   * "percentage": The company contributes a percentage of the payroll amount per payroll period. If elective is true, the contribution is matching, dollar-for-dollar.
   *
   * "tiered": The company contribution varies according to the size of the employee deduction.
   */
  type?: string | undefined;
  /**
   * For the `amount` and `percentage` contribution types, the value of the corresponding amount or percentage.
   *
   * @remarks
   *
   * For the `tiered` contribution type, an array of tiers.
   */
  value?: Value2 | string | undefined;
};

/**
 * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
 */
export const EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome = {
  Unset: "unset",
  ReducesTaxableIncome: "reduces_taxable_income",
  DoesNotReduceTaxableIncome: "does_not_reduce_taxable_income",
} as const;
/**
 * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
 */
export type EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome =
  ClosedEnum<
    typeof EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome
  >;

/**
 * The representation of an employee benefit for a company benefit.
 */
export type EmployeeBenefitForCompanyBenefit = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * Whether the employee benefit is active.
   */
  active?: boolean | undefined;
  /**
   * The amount to be deducted, per pay period, from the employee's pay.
   */
  employeeDeduction?: string | undefined;
  /**
   * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
   */
  deductAsPercentage?: boolean | undefined;
  /**
   * The maximum employee deduction amount per year. A null value signifies no limit.
   */
  employeeDeductionAnnualMaximum?: string | null | undefined;
  /**
   * An object representing the type and value of the company contribution.
   */
  contribution?: EmployeeBenefitForCompanyBenefitContribution | undefined;
  /**
   * Whether the company contribution is elective (aka matching). For "tiered" contribution types, this is always true.
   */
  elective?: boolean | undefined;
  /**
   * The maximum company contribution amount per year. A null value signifies no limit.
   */
  companyContributionAnnualMaximum?: string | null | undefined;
  /**
   * Some benefits require additional information to determine their limit.
   *
   * @remarks
   *
   * `Family` and `Individual` are applicable to HSA benefit.
   *
   * `Joint Filing or Single` and `Married and Filing Separately` are applicable to Dependent Care FSA benefit.
   */
  limitOption?: string | null | undefined;
  /**
   * Whether the employee should use a benefit’s "catch up" rate. Only Roth 401k and 401k benefits use this value for employees over 50.
   */
  catchUp?: boolean | undefined;
  /**
   * Identifier for a 401(k) loan assigned by the 401(k) provider
   */
  retirementLoanIdentifier?: string | undefined;
  /**
   * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
   */
  coverageAmount?: string | null | undefined;
  /**
   * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
   */
  deductionReducesTaxableIncome?:
    | EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome
    | null
    | undefined;
  /**
   * The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
   */
  coverageSalaryMultiplier?: string | undefined;
  /**
   * The amount to be paid, per pay period, by the company. This field will not appear for tiered contribution types.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  companyContribution?: string | undefined;
  /**
   * Whether the company_contribution value should be treated as a percentage to be added to each payroll. This field will not appear for tiered contribution types.
   *
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  contributeAsPercentage?: boolean | undefined;
  /**
   * The UUID of the employee to which the benefit belongs.
   */
  employeeUuid: string;
};

/** @internal */
export const ValueTiers$inboundSchema: z.ZodType<
  ValueTiers,
  z.ZodTypeDef,
  unknown
> = z.object({
  rate: z.string().optional(),
  threshold: z.string().optional(),
  threshold_delta: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "threshold_delta": "thresholdDelta",
  });
});

/** @internal */
export type ValueTiers$Outbound = {
  rate?: string | undefined;
  threshold?: string | undefined;
  threshold_delta?: string | undefined;
};

/** @internal */
export const ValueTiers$outboundSchema: z.ZodType<
  ValueTiers$Outbound,
  z.ZodTypeDef,
  ValueTiers
> = z.object({
  rate: z.string().optional(),
  threshold: z.string().optional(),
  thresholdDelta: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    thresholdDelta: "threshold_delta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ValueTiers$ {
  /** @deprecated use `ValueTiers$inboundSchema` instead. */
  export const inboundSchema = ValueTiers$inboundSchema;
  /** @deprecated use `ValueTiers$outboundSchema` instead. */
  export const outboundSchema = ValueTiers$outboundSchema;
  /** @deprecated use `ValueTiers$Outbound` instead. */
  export type Outbound = ValueTiers$Outbound;
}

export function valueTiersToJSON(valueTiers: ValueTiers): string {
  return JSON.stringify(ValueTiers$outboundSchema.parse(valueTiers));
}

export function valueTiersFromJSON(
  jsonString: string,
): SafeParseResult<ValueTiers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ValueTiers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ValueTiers' from JSON`,
  );
}

/** @internal */
export const Value2$inboundSchema: z.ZodType<Value2, z.ZodTypeDef, unknown> = z
  .object({
    tiers: z.array(z.lazy(() => ValueTiers$inboundSchema)).optional(),
  });

/** @internal */
export type Value2$Outbound = {
  tiers?: Array<ValueTiers$Outbound> | undefined;
};

/** @internal */
export const Value2$outboundSchema: z.ZodType<
  Value2$Outbound,
  z.ZodTypeDef,
  Value2
> = z.object({
  tiers: z.array(z.lazy(() => ValueTiers$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Value2$ {
  /** @deprecated use `Value2$inboundSchema` instead. */
  export const inboundSchema = Value2$inboundSchema;
  /** @deprecated use `Value2$outboundSchema` instead. */
  export const outboundSchema = Value2$outboundSchema;
  /** @deprecated use `Value2$Outbound` instead. */
  export type Outbound = Value2$Outbound;
}

export function value2ToJSON(value2: Value2): string {
  return JSON.stringify(Value2$outboundSchema.parse(value2));
}

export function value2FromJSON(
  jsonString: string,
): SafeParseResult<Value2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Value2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Value2' from JSON`,
  );
}

/** @internal */
export const EmployeeBenefitForCompanyBenefitValue$inboundSchema: z.ZodType<
  EmployeeBenefitForCompanyBenefitValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.lazy(() => Value2$inboundSchema), z.string()]);

/** @internal */
export type EmployeeBenefitForCompanyBenefitValue$Outbound =
  | Value2$Outbound
  | string;

/** @internal */
export const EmployeeBenefitForCompanyBenefitValue$outboundSchema: z.ZodType<
  EmployeeBenefitForCompanyBenefitValue$Outbound,
  z.ZodTypeDef,
  EmployeeBenefitForCompanyBenefitValue
> = z.union([z.lazy(() => Value2$outboundSchema), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeBenefitForCompanyBenefitValue$ {
  /** @deprecated use `EmployeeBenefitForCompanyBenefitValue$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeBenefitForCompanyBenefitValue$inboundSchema;
  /** @deprecated use `EmployeeBenefitForCompanyBenefitValue$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeBenefitForCompanyBenefitValue$outboundSchema;
  /** @deprecated use `EmployeeBenefitForCompanyBenefitValue$Outbound` instead. */
  export type Outbound = EmployeeBenefitForCompanyBenefitValue$Outbound;
}

export function employeeBenefitForCompanyBenefitValueToJSON(
  employeeBenefitForCompanyBenefitValue: EmployeeBenefitForCompanyBenefitValue,
): string {
  return JSON.stringify(
    EmployeeBenefitForCompanyBenefitValue$outboundSchema.parse(
      employeeBenefitForCompanyBenefitValue,
    ),
  );
}

export function employeeBenefitForCompanyBenefitValueFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeBenefitForCompanyBenefitValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeBenefitForCompanyBenefitValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeBenefitForCompanyBenefitValue' from JSON`,
  );
}

/** @internal */
export const EmployeeBenefitForCompanyBenefitContribution$inboundSchema:
  z.ZodType<
    EmployeeBenefitForCompanyBenefitContribution,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string().optional(),
    value: z.union([z.lazy(() => Value2$inboundSchema), z.string()]).optional(),
  });

/** @internal */
export type EmployeeBenefitForCompanyBenefitContribution$Outbound = {
  type?: string | undefined;
  value?: Value2$Outbound | string | undefined;
};

/** @internal */
export const EmployeeBenefitForCompanyBenefitContribution$outboundSchema:
  z.ZodType<
    EmployeeBenefitForCompanyBenefitContribution$Outbound,
    z.ZodTypeDef,
    EmployeeBenefitForCompanyBenefitContribution
  > = z.object({
    type: z.string().optional(),
    value: z.union([z.lazy(() => Value2$outboundSchema), z.string()])
      .optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeBenefitForCompanyBenefitContribution$ {
  /** @deprecated use `EmployeeBenefitForCompanyBenefitContribution$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeBenefitForCompanyBenefitContribution$inboundSchema;
  /** @deprecated use `EmployeeBenefitForCompanyBenefitContribution$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeBenefitForCompanyBenefitContribution$outboundSchema;
  /** @deprecated use `EmployeeBenefitForCompanyBenefitContribution$Outbound` instead. */
  export type Outbound = EmployeeBenefitForCompanyBenefitContribution$Outbound;
}

export function employeeBenefitForCompanyBenefitContributionToJSON(
  employeeBenefitForCompanyBenefitContribution:
    EmployeeBenefitForCompanyBenefitContribution,
): string {
  return JSON.stringify(
    EmployeeBenefitForCompanyBenefitContribution$outboundSchema.parse(
      employeeBenefitForCompanyBenefitContribution,
    ),
  );
}

export function employeeBenefitForCompanyBenefitContributionFromJSON(
  jsonString: string,
): SafeParseResult<
  EmployeeBenefitForCompanyBenefitContribution,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EmployeeBenefitForCompanyBenefitContribution$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EmployeeBenefitForCompanyBenefitContribution' from JSON`,
  );
}

/** @internal */
export const EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$inboundSchema:
  z.ZodNativeEnum<
    typeof EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome
  > = z.nativeEnum(
    EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome,
  );

/** @internal */
export const EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$outboundSchema:
  z.ZodNativeEnum<
    typeof EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome
  > =
    EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$ {
  /** @deprecated use `EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$inboundSchema` instead. */
  export const inboundSchema =
    EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$inboundSchema;
  /** @deprecated use `EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$outboundSchema` instead. */
  export const outboundSchema =
    EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$outboundSchema;
}

/** @internal */
export const EmployeeBenefitForCompanyBenefit$inboundSchema: z.ZodType<
  EmployeeBenefitForCompanyBenefit,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
  active: z.boolean().default(true),
  employee_deduction: z.string().default("0.00"),
  deduct_as_percentage: z.boolean().default(false),
  employee_deduction_annual_maximum: z.nullable(z.string()).optional(),
  contribution: z.lazy(() =>
    EmployeeBenefitForCompanyBenefitContribution$inboundSchema
  ).optional(),
  elective: z.boolean().default(false),
  company_contribution_annual_maximum: z.nullable(z.string()).optional(),
  limit_option: z.nullable(z.string()).optional(),
  catch_up: z.boolean().default(false),
  retirement_loan_identifier: z.string().optional(),
  coverage_amount: z.nullable(z.string()).optional(),
  deduction_reduces_taxable_income: z.nullable(
    EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$inboundSchema
      .default("unset"),
  ),
  coverage_salary_multiplier: z.string().default("0.00"),
  company_contribution: z.string().default("0.00"),
  contribute_as_percentage: z.boolean().default(false),
  employee_uuid: z.string(),
}).transform((v) => {
  return remap$(v, {
    "employee_deduction": "employeeDeduction",
    "deduct_as_percentage": "deductAsPercentage",
    "employee_deduction_annual_maximum": "employeeDeductionAnnualMaximum",
    "company_contribution_annual_maximum": "companyContributionAnnualMaximum",
    "limit_option": "limitOption",
    "catch_up": "catchUp",
    "retirement_loan_identifier": "retirementLoanIdentifier",
    "coverage_amount": "coverageAmount",
    "deduction_reduces_taxable_income": "deductionReducesTaxableIncome",
    "coverage_salary_multiplier": "coverageSalaryMultiplier",
    "company_contribution": "companyContribution",
    "contribute_as_percentage": "contributeAsPercentage",
    "employee_uuid": "employeeUuid",
  });
});

/** @internal */
export type EmployeeBenefitForCompanyBenefit$Outbound = {
  version?: string | undefined;
  active: boolean;
  employee_deduction: string;
  deduct_as_percentage: boolean;
  employee_deduction_annual_maximum?: string | null | undefined;
  contribution?:
    | EmployeeBenefitForCompanyBenefitContribution$Outbound
    | undefined;
  elective: boolean;
  company_contribution_annual_maximum?: string | null | undefined;
  limit_option?: string | null | undefined;
  catch_up: boolean;
  retirement_loan_identifier?: string | undefined;
  coverage_amount?: string | null | undefined;
  deduction_reduces_taxable_income: string | null;
  coverage_salary_multiplier: string;
  company_contribution: string;
  contribute_as_percentage: boolean;
  employee_uuid: string;
};

/** @internal */
export const EmployeeBenefitForCompanyBenefit$outboundSchema: z.ZodType<
  EmployeeBenefitForCompanyBenefit$Outbound,
  z.ZodTypeDef,
  EmployeeBenefitForCompanyBenefit
> = z.object({
  version: z.string().optional(),
  active: z.boolean().default(true),
  employeeDeduction: z.string().default("0.00"),
  deductAsPercentage: z.boolean().default(false),
  employeeDeductionAnnualMaximum: z.nullable(z.string()).optional(),
  contribution: z.lazy(() =>
    EmployeeBenefitForCompanyBenefitContribution$outboundSchema
  ).optional(),
  elective: z.boolean().default(false),
  companyContributionAnnualMaximum: z.nullable(z.string()).optional(),
  limitOption: z.nullable(z.string()).optional(),
  catchUp: z.boolean().default(false),
  retirementLoanIdentifier: z.string().optional(),
  coverageAmount: z.nullable(z.string()).optional(),
  deductionReducesTaxableIncome: z.nullable(
    EmployeeBenefitForCompanyBenefitDeductionReducesTaxableIncome$outboundSchema
      .default("unset"),
  ),
  coverageSalaryMultiplier: z.string().default("0.00"),
  companyContribution: z.string().default("0.00"),
  contributeAsPercentage: z.boolean().default(false),
  employeeUuid: z.string(),
}).transform((v) => {
  return remap$(v, {
    employeeDeduction: "employee_deduction",
    deductAsPercentage: "deduct_as_percentage",
    employeeDeductionAnnualMaximum: "employee_deduction_annual_maximum",
    companyContributionAnnualMaximum: "company_contribution_annual_maximum",
    limitOption: "limit_option",
    catchUp: "catch_up",
    retirementLoanIdentifier: "retirement_loan_identifier",
    coverageAmount: "coverage_amount",
    deductionReducesTaxableIncome: "deduction_reduces_taxable_income",
    coverageSalaryMultiplier: "coverage_salary_multiplier",
    companyContribution: "company_contribution",
    contributeAsPercentage: "contribute_as_percentage",
    employeeUuid: "employee_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeBenefitForCompanyBenefit$ {
  /** @deprecated use `EmployeeBenefitForCompanyBenefit$inboundSchema` instead. */
  export const inboundSchema = EmployeeBenefitForCompanyBenefit$inboundSchema;
  /** @deprecated use `EmployeeBenefitForCompanyBenefit$outboundSchema` instead. */
  export const outboundSchema = EmployeeBenefitForCompanyBenefit$outboundSchema;
  /** @deprecated use `EmployeeBenefitForCompanyBenefit$Outbound` instead. */
  export type Outbound = EmployeeBenefitForCompanyBenefit$Outbound;
}

export function employeeBenefitForCompanyBenefitToJSON(
  employeeBenefitForCompanyBenefit: EmployeeBenefitForCompanyBenefit,
): string {
  return JSON.stringify(
    EmployeeBenefitForCompanyBenefit$outboundSchema.parse(
      employeeBenefitForCompanyBenefit,
    ),
  );
}

export function employeeBenefitForCompanyBenefitFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeBenefitForCompanyBenefit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeBenefitForCompanyBenefit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeBenefitForCompanyBenefit' from JSON`,
  );
}
