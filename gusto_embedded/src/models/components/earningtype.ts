/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Example response
 */
export type EarningType = {
  /**
   * The name of the earning type.
   */
  name?: string | undefined;
  /**
   * The ID of the earning type.
   */
  uuid: string;
};

/** @internal */
export const EarningType$inboundSchema: z.ZodType<
  EarningType,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  uuid: z.string(),
});

/** @internal */
export type EarningType$Outbound = {
  name?: string | undefined;
  uuid: string;
};

/** @internal */
export const EarningType$outboundSchema: z.ZodType<
  EarningType$Outbound,
  z.ZodTypeDef,
  EarningType
> = z.object({
  name: z.string().optional(),
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EarningType$ {
  /** @deprecated use `EarningType$inboundSchema` instead. */
  export const inboundSchema = EarningType$inboundSchema;
  /** @deprecated use `EarningType$outboundSchema` instead. */
  export const outboundSchema = EarningType$outboundSchema;
  /** @deprecated use `EarningType$Outbound` instead. */
  export type Outbound = EarningType$Outbound;
}

export function earningTypeToJSON(earningType: EarningType): string {
  return JSON.stringify(EarningType$outboundSchema.parse(earningType));
}

export function earningTypeFromJSON(
  jsonString: string,
): SafeParseResult<EarningType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EarningType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EarningType' from JSON`,
  );
}
