/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The employee's compensation payment method. Invalid values will be ignored.
 */
export const PayrollUpdatePaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The employee's compensation payment method. Invalid values will be ignored.
 */
export type PayrollUpdatePaymentMethod = ClosedEnum<
  typeof PayrollUpdatePaymentMethod
>;

/**
 * An array of fixed compensations for the employee. Fixed compensations include tips, bonuses, and one time reimbursements.
 */
export type PayrollUpdateFixedCompensations = {
  /**
   * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
   */
  name?: string | undefined;
  /**
   * The amount of the compensation for the pay period.
   */
  amount?: string | undefined;
  /**
   * The UUID of the job for the compensation.
   */
  jobUuid?: string | undefined;
};

/**
 * An array of hourly compensations for the employee. Hourly compensations include regular, overtime, and double overtime hours.
 */
export type PayrollUpdateHourlyCompensations = {
  /**
   * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
   */
  name?: string | undefined;
  /**
   * The number of hours to be compensated for this pay period.
   */
  hours?: string | undefined;
  /**
   * The UUIDs of the job for the compensation.
   */
  jobUuid?: string | undefined;
};

export type PayrollUpdatePaidTimeOff = {
  /**
   * The name of the PTO. This also serves as the unique, immutable identifier for the PTO. Must pass in name or policy_uuid but not both.
   */
  name?: string | undefined;
  /**
   * The hours of this PTO taken during the pay period.
   */
  hours?: string | undefined;
  /**
   * The uuid of the PTO policy. Must pass in name or policy_uuid but not both.
   */
  policyUuid?: string | undefined;
  /**
   * The outstanding hours paid upon termination. This field is only applicable for termination payrolls.
   */
  finalPayoutUnusedHoursInput?: string | undefined;
};

export type EmployeeCompensations = {
  /**
   * The UUID of the employee.
   */
  employeeUuid?: string | undefined;
  /**
   * The current version of this employee compensation from the prepared payroll. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * This employee will be excluded from payroll calculation and will not be paid for the payroll.
   */
  excluded?: boolean | undefined;
  /**
   * The employee's compensation payment method. Invalid values will be ignored.
   */
  paymentMethod?: PayrollUpdatePaymentMethod | undefined;
  /**
   * Custom text that will be printed as a personal note to the employee on a paystub.
   */
  memo?: string | undefined;
  fixedCompensations?: Array<PayrollUpdateFixedCompensations> | undefined;
  hourlyCompensations?: Array<PayrollUpdateHourlyCompensations> | undefined;
  /**
   * An array of all paid time off the employee is eligible for this pay period. Each paid time off object can be the name or the specific policy_uuid.
   */
  paidTimeOff?: Array<PayrollUpdatePaidTimeOff> | undefined;
};

/**
 * The payment schedule tax rate the payroll is based on. Only relevant for off-cycle payrolls.
 */
export const WithholdingPayPeriod = {
  EveryWeek: "Every week",
  EveryOtherWeek: "Every other week",
  TwicePerMonth: "Twice per month",
  Monthly: "Monthly",
  Quarterly: "Quarterly",
  Semiannually: "Semiannually",
  Annually: "Annually",
} as const;
/**
 * The payment schedule tax rate the payroll is based on. Only relevant for off-cycle payrolls.
 */
export type WithholdingPayPeriod = ClosedEnum<typeof WithholdingPayPeriod>;

export type PayrollUpdate = {
  employeeCompensations: Array<EmployeeCompensations>;
  /**
   * The payment schedule tax rate the payroll is based on. Only relevant for off-cycle payrolls.
   */
  withholdingPayPeriod?: WithholdingPayPeriod | undefined;
  /**
   * Block regular deductions and contributions for this payroll. Only relevant for off-cycle payrolls.
   */
  skipRegularDeductions?: boolean | undefined;
  /**
   * Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages. Only relevant for off-cycle payrolls.
   */
  fixedWithholdingRate?: boolean | undefined;
};

/** @internal */
export const PayrollUpdatePaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof PayrollUpdatePaymentMethod
> = z.nativeEnum(PayrollUpdatePaymentMethod);

/** @internal */
export const PayrollUpdatePaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof PayrollUpdatePaymentMethod
> = PayrollUpdatePaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollUpdatePaymentMethod$ {
  /** @deprecated use `PayrollUpdatePaymentMethod$inboundSchema` instead. */
  export const inboundSchema = PayrollUpdatePaymentMethod$inboundSchema;
  /** @deprecated use `PayrollUpdatePaymentMethod$outboundSchema` instead. */
  export const outboundSchema = PayrollUpdatePaymentMethod$outboundSchema;
}

/** @internal */
export const PayrollUpdateFixedCompensations$inboundSchema: z.ZodType<
  PayrollUpdateFixedCompensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  amount: z.string().optional(),
  job_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
  });
});

/** @internal */
export type PayrollUpdateFixedCompensations$Outbound = {
  name?: string | undefined;
  amount?: string | undefined;
  job_uuid?: string | undefined;
};

/** @internal */
export const PayrollUpdateFixedCompensations$outboundSchema: z.ZodType<
  PayrollUpdateFixedCompensations$Outbound,
  z.ZodTypeDef,
  PayrollUpdateFixedCompensations
> = z.object({
  name: z.string().optional(),
  amount: z.string().optional(),
  jobUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollUpdateFixedCompensations$ {
  /** @deprecated use `PayrollUpdateFixedCompensations$inboundSchema` instead. */
  export const inboundSchema = PayrollUpdateFixedCompensations$inboundSchema;
  /** @deprecated use `PayrollUpdateFixedCompensations$outboundSchema` instead. */
  export const outboundSchema = PayrollUpdateFixedCompensations$outboundSchema;
  /** @deprecated use `PayrollUpdateFixedCompensations$Outbound` instead. */
  export type Outbound = PayrollUpdateFixedCompensations$Outbound;
}

export function payrollUpdateFixedCompensationsToJSON(
  payrollUpdateFixedCompensations: PayrollUpdateFixedCompensations,
): string {
  return JSON.stringify(
    PayrollUpdateFixedCompensations$outboundSchema.parse(
      payrollUpdateFixedCompensations,
    ),
  );
}

export function payrollUpdateFixedCompensationsFromJSON(
  jsonString: string,
): SafeParseResult<PayrollUpdateFixedCompensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollUpdateFixedCompensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollUpdateFixedCompensations' from JSON`,
  );
}

/** @internal */
export const PayrollUpdateHourlyCompensations$inboundSchema: z.ZodType<
  PayrollUpdateHourlyCompensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  hours: z.string().optional(),
  job_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "job_uuid": "jobUuid",
  });
});

/** @internal */
export type PayrollUpdateHourlyCompensations$Outbound = {
  name?: string | undefined;
  hours?: string | undefined;
  job_uuid?: string | undefined;
};

/** @internal */
export const PayrollUpdateHourlyCompensations$outboundSchema: z.ZodType<
  PayrollUpdateHourlyCompensations$Outbound,
  z.ZodTypeDef,
  PayrollUpdateHourlyCompensations
> = z.object({
  name: z.string().optional(),
  hours: z.string().optional(),
  jobUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    jobUuid: "job_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollUpdateHourlyCompensations$ {
  /** @deprecated use `PayrollUpdateHourlyCompensations$inboundSchema` instead. */
  export const inboundSchema = PayrollUpdateHourlyCompensations$inboundSchema;
  /** @deprecated use `PayrollUpdateHourlyCompensations$outboundSchema` instead. */
  export const outboundSchema = PayrollUpdateHourlyCompensations$outboundSchema;
  /** @deprecated use `PayrollUpdateHourlyCompensations$Outbound` instead. */
  export type Outbound = PayrollUpdateHourlyCompensations$Outbound;
}

export function payrollUpdateHourlyCompensationsToJSON(
  payrollUpdateHourlyCompensations: PayrollUpdateHourlyCompensations,
): string {
  return JSON.stringify(
    PayrollUpdateHourlyCompensations$outboundSchema.parse(
      payrollUpdateHourlyCompensations,
    ),
  );
}

export function payrollUpdateHourlyCompensationsFromJSON(
  jsonString: string,
): SafeParseResult<PayrollUpdateHourlyCompensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollUpdateHourlyCompensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollUpdateHourlyCompensations' from JSON`,
  );
}

/** @internal */
export const PayrollUpdatePaidTimeOff$inboundSchema: z.ZodType<
  PayrollUpdatePaidTimeOff,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  hours: z.string().optional(),
  policy_uuid: z.string().optional(),
  final_payout_unused_hours_input: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "policy_uuid": "policyUuid",
    "final_payout_unused_hours_input": "finalPayoutUnusedHoursInput",
  });
});

/** @internal */
export type PayrollUpdatePaidTimeOff$Outbound = {
  name?: string | undefined;
  hours?: string | undefined;
  policy_uuid?: string | undefined;
  final_payout_unused_hours_input?: string | undefined;
};

/** @internal */
export const PayrollUpdatePaidTimeOff$outboundSchema: z.ZodType<
  PayrollUpdatePaidTimeOff$Outbound,
  z.ZodTypeDef,
  PayrollUpdatePaidTimeOff
> = z.object({
  name: z.string().optional(),
  hours: z.string().optional(),
  policyUuid: z.string().optional(),
  finalPayoutUnusedHoursInput: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    policyUuid: "policy_uuid",
    finalPayoutUnusedHoursInput: "final_payout_unused_hours_input",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollUpdatePaidTimeOff$ {
  /** @deprecated use `PayrollUpdatePaidTimeOff$inboundSchema` instead. */
  export const inboundSchema = PayrollUpdatePaidTimeOff$inboundSchema;
  /** @deprecated use `PayrollUpdatePaidTimeOff$outboundSchema` instead. */
  export const outboundSchema = PayrollUpdatePaidTimeOff$outboundSchema;
  /** @deprecated use `PayrollUpdatePaidTimeOff$Outbound` instead. */
  export type Outbound = PayrollUpdatePaidTimeOff$Outbound;
}

export function payrollUpdatePaidTimeOffToJSON(
  payrollUpdatePaidTimeOff: PayrollUpdatePaidTimeOff,
): string {
  return JSON.stringify(
    PayrollUpdatePaidTimeOff$outboundSchema.parse(payrollUpdatePaidTimeOff),
  );
}

export function payrollUpdatePaidTimeOffFromJSON(
  jsonString: string,
): SafeParseResult<PayrollUpdatePaidTimeOff, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollUpdatePaidTimeOff$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollUpdatePaidTimeOff' from JSON`,
  );
}

/** @internal */
export const EmployeeCompensations$inboundSchema: z.ZodType<
  EmployeeCompensations,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_uuid: z.string().optional(),
  version: z.string().optional(),
  excluded: z.boolean().optional(),
  payment_method: PayrollUpdatePaymentMethod$inboundSchema.optional(),
  memo: z.string().optional(),
  fixed_compensations: z.array(
    z.lazy(() => PayrollUpdateFixedCompensations$inboundSchema),
  ).optional(),
  hourly_compensations: z.array(
    z.lazy(() => PayrollUpdateHourlyCompensations$inboundSchema),
  ).optional(),
  paid_time_off: z.array(z.lazy(() => PayrollUpdatePaidTimeOff$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
    "payment_method": "paymentMethod",
    "fixed_compensations": "fixedCompensations",
    "hourly_compensations": "hourlyCompensations",
    "paid_time_off": "paidTimeOff",
  });
});

/** @internal */
export type EmployeeCompensations$Outbound = {
  employee_uuid?: string | undefined;
  version?: string | undefined;
  excluded?: boolean | undefined;
  payment_method?: string | undefined;
  memo?: string | undefined;
  fixed_compensations?:
    | Array<PayrollUpdateFixedCompensations$Outbound>
    | undefined;
  hourly_compensations?:
    | Array<PayrollUpdateHourlyCompensations$Outbound>
    | undefined;
  paid_time_off?: Array<PayrollUpdatePaidTimeOff$Outbound> | undefined;
};

/** @internal */
export const EmployeeCompensations$outboundSchema: z.ZodType<
  EmployeeCompensations$Outbound,
  z.ZodTypeDef,
  EmployeeCompensations
> = z.object({
  employeeUuid: z.string().optional(),
  version: z.string().optional(),
  excluded: z.boolean().optional(),
  paymentMethod: PayrollUpdatePaymentMethod$outboundSchema.optional(),
  memo: z.string().optional(),
  fixedCompensations: z.array(
    z.lazy(() => PayrollUpdateFixedCompensations$outboundSchema),
  ).optional(),
  hourlyCompensations: z.array(
    z.lazy(() => PayrollUpdateHourlyCompensations$outboundSchema),
  ).optional(),
  paidTimeOff: z.array(z.lazy(() => PayrollUpdatePaidTimeOff$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
    paymentMethod: "payment_method",
    fixedCompensations: "fixed_compensations",
    hourlyCompensations: "hourly_compensations",
    paidTimeOff: "paid_time_off",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeCompensations$ {
  /** @deprecated use `EmployeeCompensations$inboundSchema` instead. */
  export const inboundSchema = EmployeeCompensations$inboundSchema;
  /** @deprecated use `EmployeeCompensations$outboundSchema` instead. */
  export const outboundSchema = EmployeeCompensations$outboundSchema;
  /** @deprecated use `EmployeeCompensations$Outbound` instead. */
  export type Outbound = EmployeeCompensations$Outbound;
}

export function employeeCompensationsToJSON(
  employeeCompensations: EmployeeCompensations,
): string {
  return JSON.stringify(
    EmployeeCompensations$outboundSchema.parse(employeeCompensations),
  );
}

export function employeeCompensationsFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeCompensations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeCompensations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeCompensations' from JSON`,
  );
}

/** @internal */
export const WithholdingPayPeriod$inboundSchema: z.ZodNativeEnum<
  typeof WithholdingPayPeriod
> = z.nativeEnum(WithholdingPayPeriod);

/** @internal */
export const WithholdingPayPeriod$outboundSchema: z.ZodNativeEnum<
  typeof WithholdingPayPeriod
> = WithholdingPayPeriod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WithholdingPayPeriod$ {
  /** @deprecated use `WithholdingPayPeriod$inboundSchema` instead. */
  export const inboundSchema = WithholdingPayPeriod$inboundSchema;
  /** @deprecated use `WithholdingPayPeriod$outboundSchema` instead. */
  export const outboundSchema = WithholdingPayPeriod$outboundSchema;
}

/** @internal */
export const PayrollUpdate$inboundSchema: z.ZodType<
  PayrollUpdate,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_compensations: z.array(
    z.lazy(() => EmployeeCompensations$inboundSchema),
  ),
  withholding_pay_period: WithholdingPayPeriod$inboundSchema.optional(),
  skip_regular_deductions: z.boolean().optional(),
  fixed_withholding_rate: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_compensations": "employeeCompensations",
    "withholding_pay_period": "withholdingPayPeriod",
    "skip_regular_deductions": "skipRegularDeductions",
    "fixed_withholding_rate": "fixedWithholdingRate",
  });
});

/** @internal */
export type PayrollUpdate$Outbound = {
  employee_compensations: Array<EmployeeCompensations$Outbound>;
  withholding_pay_period?: string | undefined;
  skip_regular_deductions?: boolean | undefined;
  fixed_withholding_rate?: boolean | undefined;
};

/** @internal */
export const PayrollUpdate$outboundSchema: z.ZodType<
  PayrollUpdate$Outbound,
  z.ZodTypeDef,
  PayrollUpdate
> = z.object({
  employeeCompensations: z.array(
    z.lazy(() => EmployeeCompensations$outboundSchema),
  ),
  withholdingPayPeriod: WithholdingPayPeriod$outboundSchema.optional(),
  skipRegularDeductions: z.boolean().optional(),
  fixedWithholdingRate: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    employeeCompensations: "employee_compensations",
    withholdingPayPeriod: "withholding_pay_period",
    skipRegularDeductions: "skip_regular_deductions",
    fixedWithholdingRate: "fixed_withholding_rate",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollUpdate$ {
  /** @deprecated use `PayrollUpdate$inboundSchema` instead. */
  export const inboundSchema = PayrollUpdate$inboundSchema;
  /** @deprecated use `PayrollUpdate$outboundSchema` instead. */
  export const outboundSchema = PayrollUpdate$outboundSchema;
  /** @deprecated use `PayrollUpdate$Outbound` instead. */
  export type Outbound = PayrollUpdate$Outbound;
}

export function payrollUpdateToJSON(payrollUpdate: PayrollUpdate): string {
  return JSON.stringify(PayrollUpdate$outboundSchema.parse(payrollUpdate));
}

export function payrollUpdateFromJSON(
  jsonString: string,
): SafeParseResult<PayrollUpdate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollUpdate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollUpdate' from JSON`,
  );
}
