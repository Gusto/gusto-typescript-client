/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PayrollCreditBlockersType,
  PayrollCreditBlockersType$inboundSchema,
  PayrollCreditBlockersType$Outbound,
  PayrollCreditBlockersType$outboundSchema,
} from "./payrollcreditblockerstype.js";
import {
  PayrollSubmissionBlockersType,
  PayrollSubmissionBlockersType$inboundSchema,
  PayrollSubmissionBlockersType$Outbound,
  PayrollSubmissionBlockersType$outboundSchema,
} from "./payrollsubmissionblockerstype.js";

/**
 * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
 */
export const ContractorPaymentGroupWithBlockersStatus = {
  Unfunded: "Unfunded",
  Funded: "Funded",
} as const;
/**
 * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
 */
export type ContractorPaymentGroupWithBlockersStatus = ClosedEnum<
  typeof ContractorPaymentGroupWithBlockersStatus
>;

export type ContractorPaymentGroupWithBlockersTotals = {
  /**
   * The total amount for the group of contractor payments.
   */
  amount?: string | undefined;
  /**
   * The total debit amount for the group of contractor payments. Sum of wage & reimbursement amount.
   */
  debitAmount?: string | undefined;
  /**
   * The total wage amount for the group of contractor payments.
   */
  wageAmount?: string | undefined;
  /**
   * The total reimbursement amount for the group of contractor payments.
   */
  reimbursementAmount?: string | undefined;
  /**
   * The total check amount for the group of contractor payments.
   */
  checkAmount?: string | undefined;
};

/**
 * Contractor payment group with submission and credit blockers, but without individual contractor payments.
 */
export type ContractorPaymentGroupWithBlockers = {
  /**
   * The unique identifier of the contractor payment group.
   */
  uuid?: string | undefined;
  /**
   * The UUID of the company.
   */
  companyUuid?: string | undefined;
  /**
   * The check date of the contractor payment group.
   */
  checkDate?: string | undefined;
  /**
   * The debit date of the contractor payment group.
   */
  debitDate?: string | undefined;
  /**
   * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
   */
  status?: ContractorPaymentGroupWithBlockersStatus | undefined;
  /**
   * Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
   */
  creationToken?: string | null | undefined;
  /**
   * Whether the disbursement is partner owned.
   */
  partnerOwnedDisbursement?: boolean | null | undefined;
  /**
   * List of submission blockers for the contractor payment group.
   */
  submissionBlockers?: Array<Array<PayrollSubmissionBlockersType>> | undefined;
  /**
   * List of credit blockers for the contractor payment group.
   */
  creditBlockers?: Array<Array<PayrollCreditBlockersType>> | undefined;
  totals?: ContractorPaymentGroupWithBlockersTotals | undefined;
};

/** @internal */
export const ContractorPaymentGroupWithBlockersStatus$inboundSchema:
  z.ZodNativeEnum<typeof ContractorPaymentGroupWithBlockersStatus> = z
    .nativeEnum(ContractorPaymentGroupWithBlockersStatus);

/** @internal */
export const ContractorPaymentGroupWithBlockersStatus$outboundSchema:
  z.ZodNativeEnum<typeof ContractorPaymentGroupWithBlockersStatus> =
    ContractorPaymentGroupWithBlockersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupWithBlockersStatus$ {
  /** @deprecated use `ContractorPaymentGroupWithBlockersStatus$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentGroupWithBlockersStatus$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupWithBlockersStatus$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupWithBlockersStatus$outboundSchema;
}

/** @internal */
export const ContractorPaymentGroupWithBlockersTotals$inboundSchema: z.ZodType<
  ContractorPaymentGroupWithBlockersTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  debit_amount: z.string().optional(),
  wage_amount: z.string().optional(),
  reimbursement_amount: z.string().optional(),
  check_amount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "debit_amount": "debitAmount",
    "wage_amount": "wageAmount",
    "reimbursement_amount": "reimbursementAmount",
    "check_amount": "checkAmount",
  });
});

/** @internal */
export type ContractorPaymentGroupWithBlockersTotals$Outbound = {
  amount?: string | undefined;
  debit_amount?: string | undefined;
  wage_amount?: string | undefined;
  reimbursement_amount?: string | undefined;
  check_amount?: string | undefined;
};

/** @internal */
export const ContractorPaymentGroupWithBlockersTotals$outboundSchema: z.ZodType<
  ContractorPaymentGroupWithBlockersTotals$Outbound,
  z.ZodTypeDef,
  ContractorPaymentGroupWithBlockersTotals
> = z.object({
  amount: z.string().optional(),
  debitAmount: z.string().optional(),
  wageAmount: z.string().optional(),
  reimbursementAmount: z.string().optional(),
  checkAmount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    debitAmount: "debit_amount",
    wageAmount: "wage_amount",
    reimbursementAmount: "reimbursement_amount",
    checkAmount: "check_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupWithBlockersTotals$ {
  /** @deprecated use `ContractorPaymentGroupWithBlockersTotals$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentGroupWithBlockersTotals$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupWithBlockersTotals$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupWithBlockersTotals$outboundSchema;
  /** @deprecated use `ContractorPaymentGroupWithBlockersTotals$Outbound` instead. */
  export type Outbound = ContractorPaymentGroupWithBlockersTotals$Outbound;
}

export function contractorPaymentGroupWithBlockersTotalsToJSON(
  contractorPaymentGroupWithBlockersTotals:
    ContractorPaymentGroupWithBlockersTotals,
): string {
  return JSON.stringify(
    ContractorPaymentGroupWithBlockersTotals$outboundSchema.parse(
      contractorPaymentGroupWithBlockersTotals,
    ),
  );
}

export function contractorPaymentGroupWithBlockersTotalsFromJSON(
  jsonString: string,
): SafeParseResult<
  ContractorPaymentGroupWithBlockersTotals,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ContractorPaymentGroupWithBlockersTotals$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ContractorPaymentGroupWithBlockersTotals' from JSON`,
  );
}

/** @internal */
export const ContractorPaymentGroupWithBlockers$inboundSchema: z.ZodType<
  ContractorPaymentGroupWithBlockers,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  company_uuid: z.string().optional(),
  check_date: z.string().optional(),
  debit_date: z.string().optional(),
  status: ContractorPaymentGroupWithBlockersStatus$inboundSchema.optional(),
  creation_token: z.nullable(z.string()).optional(),
  partner_owned_disbursement: z.nullable(z.boolean()).optional(),
  submission_blockers: z.array(
    z.array(PayrollSubmissionBlockersType$inboundSchema),
  ).optional(),
  credit_blockers: z.array(z.array(PayrollCreditBlockersType$inboundSchema))
    .optional(),
  totals: z.lazy(() => ContractorPaymentGroupWithBlockersTotals$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "check_date": "checkDate",
    "debit_date": "debitDate",
    "creation_token": "creationToken",
    "partner_owned_disbursement": "partnerOwnedDisbursement",
    "submission_blockers": "submissionBlockers",
    "credit_blockers": "creditBlockers",
  });
});

/** @internal */
export type ContractorPaymentGroupWithBlockers$Outbound = {
  uuid?: string | undefined;
  company_uuid?: string | undefined;
  check_date?: string | undefined;
  debit_date?: string | undefined;
  status?: string | undefined;
  creation_token?: string | null | undefined;
  partner_owned_disbursement?: boolean | null | undefined;
  submission_blockers?:
    | Array<Array<PayrollSubmissionBlockersType$Outbound>>
    | undefined;
  credit_blockers?:
    | Array<Array<PayrollCreditBlockersType$Outbound>>
    | undefined;
  totals?: ContractorPaymentGroupWithBlockersTotals$Outbound | undefined;
};

/** @internal */
export const ContractorPaymentGroupWithBlockers$outboundSchema: z.ZodType<
  ContractorPaymentGroupWithBlockers$Outbound,
  z.ZodTypeDef,
  ContractorPaymentGroupWithBlockers
> = z.object({
  uuid: z.string().optional(),
  companyUuid: z.string().optional(),
  checkDate: z.string().optional(),
  debitDate: z.string().optional(),
  status: ContractorPaymentGroupWithBlockersStatus$outboundSchema.optional(),
  creationToken: z.nullable(z.string()).optional(),
  partnerOwnedDisbursement: z.nullable(z.boolean()).optional(),
  submissionBlockers: z.array(
    z.array(PayrollSubmissionBlockersType$outboundSchema),
  ).optional(),
  creditBlockers: z.array(z.array(PayrollCreditBlockersType$outboundSchema))
    .optional(),
  totals: z.lazy(() => ContractorPaymentGroupWithBlockersTotals$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    checkDate: "check_date",
    debitDate: "debit_date",
    creationToken: "creation_token",
    partnerOwnedDisbursement: "partner_owned_disbursement",
    submissionBlockers: "submission_blockers",
    creditBlockers: "credit_blockers",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupWithBlockers$ {
  /** @deprecated use `ContractorPaymentGroupWithBlockers$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentGroupWithBlockers$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupWithBlockers$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupWithBlockers$outboundSchema;
  /** @deprecated use `ContractorPaymentGroupWithBlockers$Outbound` instead. */
  export type Outbound = ContractorPaymentGroupWithBlockers$Outbound;
}

export function contractorPaymentGroupWithBlockersToJSON(
  contractorPaymentGroupWithBlockers: ContractorPaymentGroupWithBlockers,
): string {
  return JSON.stringify(
    ContractorPaymentGroupWithBlockers$outboundSchema.parse(
      contractorPaymentGroupWithBlockers,
    ),
  );
}

export function contractorPaymentGroupWithBlockersFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentGroupWithBlockers, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContractorPaymentGroupWithBlockers$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentGroupWithBlockers' from JSON`,
  );
}
