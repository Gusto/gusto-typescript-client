/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * How Gusto will handle taxes already collected.
 */
export const ReconcileTaxMethod = {
  PayTaxes: "pay_taxes",
  RefundTaxes: "refund_taxes",
} as const;
/**
 * How Gusto will handle taxes already collected.
 */
export type ReconcileTaxMethod = ClosedEnum<typeof ReconcileTaxMethod>;

export type TaxRefunds = {
  /**
   * Dollar amount.
   */
  amount?: string | undefined;
  /**
   * What kind of tax this is.
   */
  description?: string | undefined;
};

/**
 * Record representing the suspension of a company's Gusto account.
 */
export type CompanySuspension = {
  /**
   * Unique identifier for this suspension.
   */
  uuid?: string | undefined;
  /**
   * Unique identifier for the company which is suspended.
   */
  companyUuid?: string | undefined;
  /**
   * Date that the suspension took effect.
   */
  effectiveDate?: string | undefined;
  /**
   * Which competitor the company is joining instead. Only required if `reason` is `'switching_provider'`.
   */
  leavingFor?: string | null | undefined;
  /**
   * Explanation for why the company's account was suspended.
   */
  reason?: string | undefined;
  /**
   * How Gusto will handle taxes already collected.
   */
  reconcileTaxMethod?: ReconcileTaxMethod | undefined;
  /**
   * Should Gusto file quarterly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
   *
   * @remarks
   */
  fileQuarterlyForms?: boolean | undefined;
  /**
   * Should Gusto file yearly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
   *
   * @remarks
   */
  fileYearlyForms?: boolean | undefined;
  /**
   * User-supplied comments describing why they are suspending their account.
   */
  comments?: string | null | undefined;
  /**
   * Describes the taxes which are refundable to the company for this suspension. These may be refunded or paid by Gusto depending on the value in `reconcile_tax_method`.
   *
   * @remarks
   */
  taxRefunds?: Array<TaxRefunds> | undefined;
};

/** @internal */
export const ReconcileTaxMethod$inboundSchema: z.ZodNativeEnum<
  typeof ReconcileTaxMethod
> = z.nativeEnum(ReconcileTaxMethod);

/** @internal */
export const ReconcileTaxMethod$outboundSchema: z.ZodNativeEnum<
  typeof ReconcileTaxMethod
> = ReconcileTaxMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconcileTaxMethod$ {
  /** @deprecated use `ReconcileTaxMethod$inboundSchema` instead. */
  export const inboundSchema = ReconcileTaxMethod$inboundSchema;
  /** @deprecated use `ReconcileTaxMethod$outboundSchema` instead. */
  export const outboundSchema = ReconcileTaxMethod$outboundSchema;
}

/** @internal */
export const TaxRefunds$inboundSchema: z.ZodType<
  TaxRefunds,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  description: z.string().optional(),
});

/** @internal */
export type TaxRefunds$Outbound = {
  amount?: string | undefined;
  description?: string | undefined;
};

/** @internal */
export const TaxRefunds$outboundSchema: z.ZodType<
  TaxRefunds$Outbound,
  z.ZodTypeDef,
  TaxRefunds
> = z.object({
  amount: z.string().optional(),
  description: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRefunds$ {
  /** @deprecated use `TaxRefunds$inboundSchema` instead. */
  export const inboundSchema = TaxRefunds$inboundSchema;
  /** @deprecated use `TaxRefunds$outboundSchema` instead. */
  export const outboundSchema = TaxRefunds$outboundSchema;
  /** @deprecated use `TaxRefunds$Outbound` instead. */
  export type Outbound = TaxRefunds$Outbound;
}

export function taxRefundsToJSON(taxRefunds: TaxRefunds): string {
  return JSON.stringify(TaxRefunds$outboundSchema.parse(taxRefunds));
}

export function taxRefundsFromJSON(
  jsonString: string,
): SafeParseResult<TaxRefunds, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRefunds$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRefunds' from JSON`,
  );
}

/** @internal */
export const CompanySuspension$inboundSchema: z.ZodType<
  CompanySuspension,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  company_uuid: z.string().optional(),
  effective_date: z.string().optional(),
  leaving_for: z.nullable(z.string()).optional(),
  reason: z.string().optional(),
  reconcile_tax_method: ReconcileTaxMethod$inboundSchema.optional(),
  file_quarterly_forms: z.boolean().optional(),
  file_yearly_forms: z.boolean().optional(),
  comments: z.nullable(z.string()).optional(),
  tax_refunds: z.array(z.lazy(() => TaxRefunds$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "effective_date": "effectiveDate",
    "leaving_for": "leavingFor",
    "reconcile_tax_method": "reconcileTaxMethod",
    "file_quarterly_forms": "fileQuarterlyForms",
    "file_yearly_forms": "fileYearlyForms",
    "tax_refunds": "taxRefunds",
  });
});

/** @internal */
export type CompanySuspension$Outbound = {
  uuid?: string | undefined;
  company_uuid?: string | undefined;
  effective_date?: string | undefined;
  leaving_for?: string | null | undefined;
  reason?: string | undefined;
  reconcile_tax_method?: string | undefined;
  file_quarterly_forms?: boolean | undefined;
  file_yearly_forms?: boolean | undefined;
  comments?: string | null | undefined;
  tax_refunds?: Array<TaxRefunds$Outbound> | undefined;
};

/** @internal */
export const CompanySuspension$outboundSchema: z.ZodType<
  CompanySuspension$Outbound,
  z.ZodTypeDef,
  CompanySuspension
> = z.object({
  uuid: z.string().optional(),
  companyUuid: z.string().optional(),
  effectiveDate: z.string().optional(),
  leavingFor: z.nullable(z.string()).optional(),
  reason: z.string().optional(),
  reconcileTaxMethod: ReconcileTaxMethod$outboundSchema.optional(),
  fileQuarterlyForms: z.boolean().optional(),
  fileYearlyForms: z.boolean().optional(),
  comments: z.nullable(z.string()).optional(),
  taxRefunds: z.array(z.lazy(() => TaxRefunds$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    effectiveDate: "effective_date",
    leavingFor: "leaving_for",
    reconcileTaxMethod: "reconcile_tax_method",
    fileQuarterlyForms: "file_quarterly_forms",
    fileYearlyForms: "file_yearly_forms",
    taxRefunds: "tax_refunds",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanySuspension$ {
  /** @deprecated use `CompanySuspension$inboundSchema` instead. */
  export const inboundSchema = CompanySuspension$inboundSchema;
  /** @deprecated use `CompanySuspension$outboundSchema` instead. */
  export const outboundSchema = CompanySuspension$outboundSchema;
  /** @deprecated use `CompanySuspension$Outbound` instead. */
  export type Outbound = CompanySuspension$Outbound;
}

export function companySuspensionToJSON(
  companySuspension: CompanySuspension,
): string {
  return JSON.stringify(
    CompanySuspension$outboundSchema.parse(companySuspension),
  );
}

export function companySuspensionFromJSON(
  jsonString: string,
): SafeParseResult<CompanySuspension, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanySuspension$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanySuspension' from JSON`,
  );
}
