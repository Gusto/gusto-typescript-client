/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The payment method for the disbursement
 */
export const ContractorPaymentGroupPartnerDisbursementsPaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The payment method for the disbursement
 */
export type ContractorPaymentGroupPartnerDisbursementsPaymentMethod =
  ClosedEnum<typeof ContractorPaymentGroupPartnerDisbursementsPaymentMethod>;

/**
 * The status of the payment
 */
export const ContractorPaymentGroupPartnerDisbursementsPaymentStatus = {
  Pending: "Pending",
  Paid: "Paid",
  NotPartnerManaged: "Not partner managed",
  ConvertedToCheck: "Converted to check",
} as const;
/**
 * The status of the payment
 */
export type ContractorPaymentGroupPartnerDisbursementsPaymentStatus =
  ClosedEnum<typeof ContractorPaymentGroupPartnerDisbursementsPaymentStatus>;

export type Disbursements = {
  /**
   * The UUID of the contractor payment
   */
  contractorPaymentUuid?: string | undefined;
  /**
   * The UUID of the contractor
   */
  contractorUuid?: string | undefined;
  /**
   * The payment method for the disbursement
   */
  paymentMethod?:
    | ContractorPaymentGroupPartnerDisbursementsPaymentMethod
    | undefined;
  /**
   * The status of the payment
   */
  paymentStatus?:
    | ContractorPaymentGroupPartnerDisbursementsPaymentStatus
    | undefined;
};

/**
 * Partner disbursements for a contractor payment group
 */
export type ContractorPaymentGroupPartnerDisbursements = {
  /**
   * The UUID of the contractor payment group
   */
  contractorPaymentGroupUuid?: string | undefined;
  /**
   * List of disbursements for the contractor payment group
   */
  disbursements?: Array<Disbursements> | undefined;
};

/** @internal */
export const ContractorPaymentGroupPartnerDisbursementsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof ContractorPaymentGroupPartnerDisbursementsPaymentMethod
  > = z.nativeEnum(ContractorPaymentGroupPartnerDisbursementsPaymentMethod);

/** @internal */
export const ContractorPaymentGroupPartnerDisbursementsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof ContractorPaymentGroupPartnerDisbursementsPaymentMethod
  > = ContractorPaymentGroupPartnerDisbursementsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupPartnerDisbursementsPaymentMethod$ {
  /** @deprecated use `ContractorPaymentGroupPartnerDisbursementsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentGroupPartnerDisbursementsPaymentMethod$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupPartnerDisbursementsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupPartnerDisbursementsPaymentMethod$outboundSchema;
}

/** @internal */
export const ContractorPaymentGroupPartnerDisbursementsPaymentStatus$inboundSchema:
  z.ZodNativeEnum<
    typeof ContractorPaymentGroupPartnerDisbursementsPaymentStatus
  > = z.nativeEnum(ContractorPaymentGroupPartnerDisbursementsPaymentStatus);

/** @internal */
export const ContractorPaymentGroupPartnerDisbursementsPaymentStatus$outboundSchema:
  z.ZodNativeEnum<
    typeof ContractorPaymentGroupPartnerDisbursementsPaymentStatus
  > = ContractorPaymentGroupPartnerDisbursementsPaymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupPartnerDisbursementsPaymentStatus$ {
  /** @deprecated use `ContractorPaymentGroupPartnerDisbursementsPaymentStatus$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentGroupPartnerDisbursementsPaymentStatus$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupPartnerDisbursementsPaymentStatus$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupPartnerDisbursementsPaymentStatus$outboundSchema;
}

/** @internal */
export const Disbursements$inboundSchema: z.ZodType<
  Disbursements,
  z.ZodTypeDef,
  unknown
> = z.object({
  contractor_payment_uuid: z.string().optional(),
  contractor_uuid: z.string().optional(),
  payment_method:
    ContractorPaymentGroupPartnerDisbursementsPaymentMethod$inboundSchema
      .optional(),
  payment_status:
    ContractorPaymentGroupPartnerDisbursementsPaymentStatus$inboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    "contractor_payment_uuid": "contractorPaymentUuid",
    "contractor_uuid": "contractorUuid",
    "payment_method": "paymentMethod",
    "payment_status": "paymentStatus",
  });
});

/** @internal */
export type Disbursements$Outbound = {
  contractor_payment_uuid?: string | undefined;
  contractor_uuid?: string | undefined;
  payment_method?: string | undefined;
  payment_status?: string | undefined;
};

/** @internal */
export const Disbursements$outboundSchema: z.ZodType<
  Disbursements$Outbound,
  z.ZodTypeDef,
  Disbursements
> = z.object({
  contractorPaymentUuid: z.string().optional(),
  contractorUuid: z.string().optional(),
  paymentMethod:
    ContractorPaymentGroupPartnerDisbursementsPaymentMethod$outboundSchema
      .optional(),
  paymentStatus:
    ContractorPaymentGroupPartnerDisbursementsPaymentStatus$outboundSchema
      .optional(),
}).transform((v) => {
  return remap$(v, {
    contractorPaymentUuid: "contractor_payment_uuid",
    contractorUuid: "contractor_uuid",
    paymentMethod: "payment_method",
    paymentStatus: "payment_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Disbursements$ {
  /** @deprecated use `Disbursements$inboundSchema` instead. */
  export const inboundSchema = Disbursements$inboundSchema;
  /** @deprecated use `Disbursements$outboundSchema` instead. */
  export const outboundSchema = Disbursements$outboundSchema;
  /** @deprecated use `Disbursements$Outbound` instead. */
  export type Outbound = Disbursements$Outbound;
}

export function disbursementsToJSON(disbursements: Disbursements): string {
  return JSON.stringify(Disbursements$outboundSchema.parse(disbursements));
}

export function disbursementsFromJSON(
  jsonString: string,
): SafeParseResult<Disbursements, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Disbursements$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Disbursements' from JSON`,
  );
}

/** @internal */
export const ContractorPaymentGroupPartnerDisbursements$inboundSchema:
  z.ZodType<ContractorPaymentGroupPartnerDisbursements, z.ZodTypeDef, unknown> =
    z.object({
      contractor_payment_group_uuid: z.string().optional(),
      disbursements: z.array(z.lazy(() => Disbursements$inboundSchema))
        .optional(),
    }).transform((v) => {
      return remap$(v, {
        "contractor_payment_group_uuid": "contractorPaymentGroupUuid",
      });
    });

/** @internal */
export type ContractorPaymentGroupPartnerDisbursements$Outbound = {
  contractor_payment_group_uuid?: string | undefined;
  disbursements?: Array<Disbursements$Outbound> | undefined;
};

/** @internal */
export const ContractorPaymentGroupPartnerDisbursements$outboundSchema:
  z.ZodType<
    ContractorPaymentGroupPartnerDisbursements$Outbound,
    z.ZodTypeDef,
    ContractorPaymentGroupPartnerDisbursements
  > = z.object({
    contractorPaymentGroupUuid: z.string().optional(),
    disbursements: z.array(z.lazy(() => Disbursements$outboundSchema))
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contractorPaymentGroupUuid: "contractor_payment_group_uuid",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupPartnerDisbursements$ {
  /** @deprecated use `ContractorPaymentGroupPartnerDisbursements$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentGroupPartnerDisbursements$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupPartnerDisbursements$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupPartnerDisbursements$outboundSchema;
  /** @deprecated use `ContractorPaymentGroupPartnerDisbursements$Outbound` instead. */
  export type Outbound = ContractorPaymentGroupPartnerDisbursements$Outbound;
}

export function contractorPaymentGroupPartnerDisbursementsToJSON(
  contractorPaymentGroupPartnerDisbursements:
    ContractorPaymentGroupPartnerDisbursements,
): string {
  return JSON.stringify(
    ContractorPaymentGroupPartnerDisbursements$outboundSchema.parse(
      contractorPaymentGroupPartnerDisbursements,
    ),
  );
}

export function contractorPaymentGroupPartnerDisbursementsFromJSON(
  jsonString: string,
): SafeParseResult<
  ContractorPaymentGroupPartnerDisbursements,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ContractorPaymentGroupPartnerDisbursements$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ContractorPaymentGroupPartnerDisbursements' from JSON`,
  );
}
