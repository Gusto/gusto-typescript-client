/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Example response
 */
export type GrossUpPay = {
  /**
   * Gross up earnings.
   */
  grossUp?: string | undefined;
};

/** @internal */
export const GrossUpPay$inboundSchema: z.ZodType<
  GrossUpPay,
  z.ZodTypeDef,
  unknown
> = z.object({
  gross_up: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "gross_up": "grossUp",
  });
});

/** @internal */
export type GrossUpPay$Outbound = {
  gross_up?: string | undefined;
};

/** @internal */
export const GrossUpPay$outboundSchema: z.ZodType<
  GrossUpPay$Outbound,
  z.ZodTypeDef,
  GrossUpPay
> = z.object({
  grossUp: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    grossUp: "gross_up",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrossUpPay$ {
  /** @deprecated use `GrossUpPay$inboundSchema` instead. */
  export const inboundSchema = GrossUpPay$inboundSchema;
  /** @deprecated use `GrossUpPay$outboundSchema` instead. */
  export const outboundSchema = GrossUpPay$outboundSchema;
  /** @deprecated use `GrossUpPay$Outbound` instead. */
  export type Outbound = GrossUpPay$Outbound;
}

export function grossUpPayToJSON(grossUpPay: GrossUpPay): string {
  return JSON.stringify(GrossUpPay$outboundSchema.parse(grossUpPay));
}

export function grossUpPayFromJSON(
  jsonString: string,
): SafeParseResult<GrossUpPay, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GrossUpPay$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GrossUpPay' from JSON`,
  );
}
