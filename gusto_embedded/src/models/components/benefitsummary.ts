/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type BenefitSummaryPayPeriod = {
  /**
   * The beginning of the payroll's pay period.
   */
  startDate?: string | null | undefined;
  /**
   * The end of the payroll's pay period.
   */
  endDate?: string | null | undefined;
};

export type PayrollBenefits = {
  payrollUuid?: string | undefined;
  /**
   * Whether it is regular or bonus payroll
   */
  payrollType?: string | undefined;
  /**
   * Check date of this payroll.
   */
  checkDate?: string | undefined;
  /**
   * Gross pay for this employee on the payroll.
   */
  grossPay?: string | undefined;
  /**
   * Total imputed pay for this employee on the payroll.
   */
  imputedPay?: string | undefined;
  /**
   * The employee benefit deduction amount for this employee on the payroll.
   */
  companyBenefitDeduction?: string | undefined;
  /**
   * The company contribution amount for this employee on the payroll.
   */
  companyBenefitContribution?: string | undefined;
  payPeriod?: BenefitSummaryPayPeriod | undefined;
};

export type BenefitSummaryEmployees = {
  /**
   * The UUID of the employee
   */
  uuid?: string | undefined;
  /**
   * The sum of employee deduction for this employee given the period of time and the specific company benefit.
   */
  companyBenefitDeduction?: string | undefined;
  /**
   * The sum of company contribution for this employee given the period of time and the specific company benefit.
   */
  companyBenefitContribution?: string | undefined;
  /**
   * The sum of employee benefit deduction for this employee given the period of time and the benefit type.
   */
  benefitDeduction?: string | undefined;
  /**
   * The sum of company contribution for this employee given the period of time and the benefit type.
   */
  benefitContribution?: string | undefined;
  /**
   * Gross pay for this employee given the period of time.
   */
  grossPay?: string | undefined;
  /**
   * Total imputed pay for this employee given the period of time (not scoped to a benefit type).
   */
  imputedPay?: string | undefined;
  payrollBenefits?: PayrollBenefits | undefined;
};

/**
 * Benefit summary response
 */
export type BenefitSummary = {
  /**
   * The start date of benefit summary.
   */
  startDate?: string | undefined;
  /**
   * The end date of benefit summary.
   */
  endDate?: string | undefined;
  /**
   * Description of the benefit.
   */
  description?: string | undefined;
  /**
   * The aggregate of employee deduction for all employees given the period of time and the specific company benefit.
   */
  companyBenefitDeduction?: string | undefined;
  /**
   * The aggregate of company contribution for all employees given the period of time and the specific company benefit.
   */
  companyBenefitContribution?: string | undefined;
  employees?: BenefitSummaryEmployees | undefined;
};

/** @internal */
export const BenefitSummaryPayPeriod$inboundSchema: z.ZodType<
  BenefitSummaryPayPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.nullable(z.string()).optional(),
  end_date: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type BenefitSummaryPayPeriod$Outbound = {
  start_date?: string | null | undefined;
  end_date?: string | null | undefined;
};

/** @internal */
export const BenefitSummaryPayPeriod$outboundSchema: z.ZodType<
  BenefitSummaryPayPeriod$Outbound,
  z.ZodTypeDef,
  BenefitSummaryPayPeriod
> = z.object({
  startDate: z.nullable(z.string()).optional(),
  endDate: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitSummaryPayPeriod$ {
  /** @deprecated use `BenefitSummaryPayPeriod$inboundSchema` instead. */
  export const inboundSchema = BenefitSummaryPayPeriod$inboundSchema;
  /** @deprecated use `BenefitSummaryPayPeriod$outboundSchema` instead. */
  export const outboundSchema = BenefitSummaryPayPeriod$outboundSchema;
  /** @deprecated use `BenefitSummaryPayPeriod$Outbound` instead. */
  export type Outbound = BenefitSummaryPayPeriod$Outbound;
}

export function benefitSummaryPayPeriodToJSON(
  benefitSummaryPayPeriod: BenefitSummaryPayPeriod,
): string {
  return JSON.stringify(
    BenefitSummaryPayPeriod$outboundSchema.parse(benefitSummaryPayPeriod),
  );
}

export function benefitSummaryPayPeriodFromJSON(
  jsonString: string,
): SafeParseResult<BenefitSummaryPayPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitSummaryPayPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitSummaryPayPeriod' from JSON`,
  );
}

/** @internal */
export const PayrollBenefits$inboundSchema: z.ZodType<
  PayrollBenefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  payroll_uuid: z.string().optional(),
  payroll_type: z.string().optional(),
  check_date: z.string().optional(),
  gross_pay: z.string().optional(),
  imputed_pay: z.string().optional(),
  company_benefit_deduction: z.string().optional(),
  company_benefit_contribution: z.string().optional(),
  pay_period: z.lazy(() => BenefitSummaryPayPeriod$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "payroll_uuid": "payrollUuid",
    "payroll_type": "payrollType",
    "check_date": "checkDate",
    "gross_pay": "grossPay",
    "imputed_pay": "imputedPay",
    "company_benefit_deduction": "companyBenefitDeduction",
    "company_benefit_contribution": "companyBenefitContribution",
    "pay_period": "payPeriod",
  });
});

/** @internal */
export type PayrollBenefits$Outbound = {
  payroll_uuid?: string | undefined;
  payroll_type?: string | undefined;
  check_date?: string | undefined;
  gross_pay?: string | undefined;
  imputed_pay?: string | undefined;
  company_benefit_deduction?: string | undefined;
  company_benefit_contribution?: string | undefined;
  pay_period?: BenefitSummaryPayPeriod$Outbound | undefined;
};

/** @internal */
export const PayrollBenefits$outboundSchema: z.ZodType<
  PayrollBenefits$Outbound,
  z.ZodTypeDef,
  PayrollBenefits
> = z.object({
  payrollUuid: z.string().optional(),
  payrollType: z.string().optional(),
  checkDate: z.string().optional(),
  grossPay: z.string().optional(),
  imputedPay: z.string().optional(),
  companyBenefitDeduction: z.string().optional(),
  companyBenefitContribution: z.string().optional(),
  payPeriod: z.lazy(() => BenefitSummaryPayPeriod$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    payrollUuid: "payroll_uuid",
    payrollType: "payroll_type",
    checkDate: "check_date",
    grossPay: "gross_pay",
    imputedPay: "imputed_pay",
    companyBenefitDeduction: "company_benefit_deduction",
    companyBenefitContribution: "company_benefit_contribution",
    payPeriod: "pay_period",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollBenefits$ {
  /** @deprecated use `PayrollBenefits$inboundSchema` instead. */
  export const inboundSchema = PayrollBenefits$inboundSchema;
  /** @deprecated use `PayrollBenefits$outboundSchema` instead. */
  export const outboundSchema = PayrollBenefits$outboundSchema;
  /** @deprecated use `PayrollBenefits$Outbound` instead. */
  export type Outbound = PayrollBenefits$Outbound;
}

export function payrollBenefitsToJSON(
  payrollBenefits: PayrollBenefits,
): string {
  return JSON.stringify(PayrollBenefits$outboundSchema.parse(payrollBenefits));
}

export function payrollBenefitsFromJSON(
  jsonString: string,
): SafeParseResult<PayrollBenefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollBenefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollBenefits' from JSON`,
  );
}

/** @internal */
export const BenefitSummaryEmployees$inboundSchema: z.ZodType<
  BenefitSummaryEmployees,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  company_benefit_deduction: z.string().optional(),
  company_benefit_contribution: z.string().optional(),
  benefit_deduction: z.string().optional(),
  benefit_contribution: z.string().optional(),
  gross_pay: z.string().optional(),
  imputed_pay: z.string().optional(),
  payroll_benefits: z.lazy(() => PayrollBenefits$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_benefit_deduction": "companyBenefitDeduction",
    "company_benefit_contribution": "companyBenefitContribution",
    "benefit_deduction": "benefitDeduction",
    "benefit_contribution": "benefitContribution",
    "gross_pay": "grossPay",
    "imputed_pay": "imputedPay",
    "payroll_benefits": "payrollBenefits",
  });
});

/** @internal */
export type BenefitSummaryEmployees$Outbound = {
  uuid?: string | undefined;
  company_benefit_deduction?: string | undefined;
  company_benefit_contribution?: string | undefined;
  benefit_deduction?: string | undefined;
  benefit_contribution?: string | undefined;
  gross_pay?: string | undefined;
  imputed_pay?: string | undefined;
  payroll_benefits?: PayrollBenefits$Outbound | undefined;
};

/** @internal */
export const BenefitSummaryEmployees$outboundSchema: z.ZodType<
  BenefitSummaryEmployees$Outbound,
  z.ZodTypeDef,
  BenefitSummaryEmployees
> = z.object({
  uuid: z.string().optional(),
  companyBenefitDeduction: z.string().optional(),
  companyBenefitContribution: z.string().optional(),
  benefitDeduction: z.string().optional(),
  benefitContribution: z.string().optional(),
  grossPay: z.string().optional(),
  imputedPay: z.string().optional(),
  payrollBenefits: z.lazy(() => PayrollBenefits$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    companyBenefitDeduction: "company_benefit_deduction",
    companyBenefitContribution: "company_benefit_contribution",
    benefitDeduction: "benefit_deduction",
    benefitContribution: "benefit_contribution",
    grossPay: "gross_pay",
    imputedPay: "imputed_pay",
    payrollBenefits: "payroll_benefits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitSummaryEmployees$ {
  /** @deprecated use `BenefitSummaryEmployees$inboundSchema` instead. */
  export const inboundSchema = BenefitSummaryEmployees$inboundSchema;
  /** @deprecated use `BenefitSummaryEmployees$outboundSchema` instead. */
  export const outboundSchema = BenefitSummaryEmployees$outboundSchema;
  /** @deprecated use `BenefitSummaryEmployees$Outbound` instead. */
  export type Outbound = BenefitSummaryEmployees$Outbound;
}

export function benefitSummaryEmployeesToJSON(
  benefitSummaryEmployees: BenefitSummaryEmployees,
): string {
  return JSON.stringify(
    BenefitSummaryEmployees$outboundSchema.parse(benefitSummaryEmployees),
  );
}

export function benefitSummaryEmployeesFromJSON(
  jsonString: string,
): SafeParseResult<BenefitSummaryEmployees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitSummaryEmployees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitSummaryEmployees' from JSON`,
  );
}

/** @internal */
export const BenefitSummary$inboundSchema: z.ZodType<
  BenefitSummary,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().optional(),
  end_date: z.string().optional(),
  description: z.string().optional(),
  company_benefit_deduction: z.string().optional(),
  company_benefit_contribution: z.string().optional(),
  employees: z.lazy(() => BenefitSummaryEmployees$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "company_benefit_deduction": "companyBenefitDeduction",
    "company_benefit_contribution": "companyBenefitContribution",
  });
});

/** @internal */
export type BenefitSummary$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
  description?: string | undefined;
  company_benefit_deduction?: string | undefined;
  company_benefit_contribution?: string | undefined;
  employees?: BenefitSummaryEmployees$Outbound | undefined;
};

/** @internal */
export const BenefitSummary$outboundSchema: z.ZodType<
  BenefitSummary$Outbound,
  z.ZodTypeDef,
  BenefitSummary
> = z.object({
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  description: z.string().optional(),
  companyBenefitDeduction: z.string().optional(),
  companyBenefitContribution: z.string().optional(),
  employees: z.lazy(() => BenefitSummaryEmployees$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    companyBenefitDeduction: "company_benefit_deduction",
    companyBenefitContribution: "company_benefit_contribution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitSummary$ {
  /** @deprecated use `BenefitSummary$inboundSchema` instead. */
  export const inboundSchema = BenefitSummary$inboundSchema;
  /** @deprecated use `BenefitSummary$outboundSchema` instead. */
  export const outboundSchema = BenefitSummary$outboundSchema;
  /** @deprecated use `BenefitSummary$Outbound` instead. */
  export type Outbound = BenefitSummary$Outbound;
}

export function benefitSummaryToJSON(benefitSummary: BenefitSummary): string {
  return JSON.stringify(BenefitSummary$outboundSchema.parse(benefitSummary));
}

export function benefitSummaryFromJSON(
  jsonString: string,
): SafeParseResult<BenefitSummary, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitSummary$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitSummary' from JSON`,
  );
}
