/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The subtotals for the contractor payment.
 */
export type ContractorPaymentReceiptTotals = {
  /**
   * The total company debit for the contractor payment.
   */
  companyDebit?: string | undefined;
};

/**
 * The payment method.
 */
export const ContractorPaymentReceiptPaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
  HistoricalPayment: "Historical Payment",
  CorrectionPayment: "Correction Payment",
} as const;
/**
 * The payment method.
 */
export type ContractorPaymentReceiptPaymentMethod = ClosedEnum<
  typeof ContractorPaymentReceiptPaymentMethod
>;

export type ContractorPayments = {
  /**
   * The UUID of the contractor.
   */
  contractorUuid?: string | undefined;
  /**
   * The first name of the contractor. Applies when `contractor_type` is `Individual`.
   */
  contractorFirstName?: string | undefined;
  /**
   * The last name of the contractor.  Applies when `contractor_type` is `Individual`.
   */
  contractorLastName?: string | undefined;
  /**
   * The business name of the contractor. Applies when `contractor_type` is `Business`.
   */
  contractorBusinessName?: string | undefined;
  /**
   * The type of contractor.
   *
   * @remarks
   *
   * `Individual` `Business`
   */
  contractorType?: string | undefined;
  /**
   * The payment method.
   */
  paymentMethod?: ContractorPaymentReceiptPaymentMethod | undefined;
  /**
   * The fixed wage of the payment, regardless of hours worked.
   */
  wage?: string | undefined;
  /**
   * The bonus amount in the payment.
   */
  bonus?: string | undefined;
  /**
   * The reimbursement amount in the payment.
   */
  reimbursement?: string | undefined;
};

/**
 * The licensed payroll processor
 */
export type ContractorPaymentReceiptLicensee = {
  /**
   * Always the fixed string "Gusto, Zenpayroll Inc."
   */
  name?: string | undefined;
  /**
   * Always the fixed string "525 20th St"
   */
  address?: string | undefined;
  /**
   * Always the fixed string "San Francisco"
   */
  city?: string | undefined;
  /**
   * Always the fixed string "CA"
   */
  state?: string | undefined;
  /**
   * Always the fixed string "94107"
   */
  postalCode?: string | undefined;
  /**
   * Always the fixed string "4157778888"
   */
  phoneNumber?: string | undefined;
};

/**
 * Example response
 */
export type ContractorPaymentReceipt = {
  /**
   * A unique identifier of the contractor payment receipt.
   */
  contractorPaymentUuid?: string | undefined;
  /**
   * A unique identifier of the company making the contractor payment.
   */
  companyUuid?: string | undefined;
  /**
   * The name of the company making the contractor payment.
   */
  nameOfSender?: string | undefined;
  /**
   * The individual or company name of the contractor receiving payment.
   */
  nameOfRecipient?: string | undefined;
  /**
   * The debit date for the contractor payment.
   */
  debitDate?: RFCDate | undefined;
  /**
   * Always the fixed string "Your payroll provider partners with Gusto Inc. for payments processing. Gusto Inc. is a licensed money transmitter. Learn more on our license page."
   */
  license?: string | undefined;
  /**
   * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
   */
  licenseUri?: string | undefined;
  /**
   * URL for information related to right to refund. Always the fixed string "https://gusto.com/about/licenses"
   */
  rightToRefund?: string | undefined;
  /**
   * URL for information related to right to liability of licensee. Always the fixed string "https://gusto.com/about/licenses"
   */
  liabilityOfLicensee?: string | undefined;
  /**
   * The subtotals for the contractor payment.
   */
  totals?: ContractorPaymentReceiptTotals | undefined;
  /**
   * An array of contractor payments for this contractor payment.
   */
  contractorPayments?: Array<ContractorPayments> | undefined;
  /**
   * The licensed payroll processor
   */
  licensee?: ContractorPaymentReceiptLicensee | undefined;
};

/** @internal */
export const ContractorPaymentReceiptTotals$inboundSchema: z.ZodType<
  ContractorPaymentReceiptTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_debit: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_debit": "companyDebit",
  });
});

/** @internal */
export type ContractorPaymentReceiptTotals$Outbound = {
  company_debit?: string | undefined;
};

/** @internal */
export const ContractorPaymentReceiptTotals$outboundSchema: z.ZodType<
  ContractorPaymentReceiptTotals$Outbound,
  z.ZodTypeDef,
  ContractorPaymentReceiptTotals
> = z.object({
  companyDebit: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyDebit: "company_debit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentReceiptTotals$ {
  /** @deprecated use `ContractorPaymentReceiptTotals$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentReceiptTotals$inboundSchema;
  /** @deprecated use `ContractorPaymentReceiptTotals$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentReceiptTotals$outboundSchema;
  /** @deprecated use `ContractorPaymentReceiptTotals$Outbound` instead. */
  export type Outbound = ContractorPaymentReceiptTotals$Outbound;
}

export function contractorPaymentReceiptTotalsToJSON(
  contractorPaymentReceiptTotals: ContractorPaymentReceiptTotals,
): string {
  return JSON.stringify(
    ContractorPaymentReceiptTotals$outboundSchema.parse(
      contractorPaymentReceiptTotals,
    ),
  );
}

export function contractorPaymentReceiptTotalsFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentReceiptTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPaymentReceiptTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentReceiptTotals' from JSON`,
  );
}

/** @internal */
export const ContractorPaymentReceiptPaymentMethod$inboundSchema:
  z.ZodNativeEnum<typeof ContractorPaymentReceiptPaymentMethod> = z.nativeEnum(
    ContractorPaymentReceiptPaymentMethod,
  );

/** @internal */
export const ContractorPaymentReceiptPaymentMethod$outboundSchema:
  z.ZodNativeEnum<typeof ContractorPaymentReceiptPaymentMethod> =
    ContractorPaymentReceiptPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentReceiptPaymentMethod$ {
  /** @deprecated use `ContractorPaymentReceiptPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentReceiptPaymentMethod$inboundSchema;
  /** @deprecated use `ContractorPaymentReceiptPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentReceiptPaymentMethod$outboundSchema;
}

/** @internal */
export const ContractorPayments$inboundSchema: z.ZodType<
  ContractorPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  contractor_uuid: z.string().optional(),
  contractor_first_name: z.string().optional(),
  contractor_last_name: z.string().optional(),
  contractor_business_name: z.string().optional(),
  contractor_type: z.string().optional(),
  payment_method: ContractorPaymentReceiptPaymentMethod$inboundSchema
    .optional(),
  wage: z.string().optional(),
  bonus: z.string().optional(),
  reimbursement: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "contractor_uuid": "contractorUuid",
    "contractor_first_name": "contractorFirstName",
    "contractor_last_name": "contractorLastName",
    "contractor_business_name": "contractorBusinessName",
    "contractor_type": "contractorType",
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type ContractorPayments$Outbound = {
  contractor_uuid?: string | undefined;
  contractor_first_name?: string | undefined;
  contractor_last_name?: string | undefined;
  contractor_business_name?: string | undefined;
  contractor_type?: string | undefined;
  payment_method?: string | undefined;
  wage?: string | undefined;
  bonus?: string | undefined;
  reimbursement?: string | undefined;
};

/** @internal */
export const ContractorPayments$outboundSchema: z.ZodType<
  ContractorPayments$Outbound,
  z.ZodTypeDef,
  ContractorPayments
> = z.object({
  contractorUuid: z.string().optional(),
  contractorFirstName: z.string().optional(),
  contractorLastName: z.string().optional(),
  contractorBusinessName: z.string().optional(),
  contractorType: z.string().optional(),
  paymentMethod: ContractorPaymentReceiptPaymentMethod$outboundSchema
    .optional(),
  wage: z.string().optional(),
  bonus: z.string().optional(),
  reimbursement: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    contractorUuid: "contractor_uuid",
    contractorFirstName: "contractor_first_name",
    contractorLastName: "contractor_last_name",
    contractorBusinessName: "contractor_business_name",
    contractorType: "contractor_type",
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPayments$ {
  /** @deprecated use `ContractorPayments$inboundSchema` instead. */
  export const inboundSchema = ContractorPayments$inboundSchema;
  /** @deprecated use `ContractorPayments$outboundSchema` instead. */
  export const outboundSchema = ContractorPayments$outboundSchema;
  /** @deprecated use `ContractorPayments$Outbound` instead. */
  export type Outbound = ContractorPayments$Outbound;
}

export function contractorPaymentsToJSON(
  contractorPayments: ContractorPayments,
): string {
  return JSON.stringify(
    ContractorPayments$outboundSchema.parse(contractorPayments),
  );
}

export function contractorPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPayments' from JSON`,
  );
}

/** @internal */
export const ContractorPaymentReceiptLicensee$inboundSchema: z.ZodType<
  ContractorPaymentReceiptLicensee,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  address: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  postal_code: z.string().optional(),
  phone_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "postal_code": "postalCode",
    "phone_number": "phoneNumber",
  });
});

/** @internal */
export type ContractorPaymentReceiptLicensee$Outbound = {
  name?: string | undefined;
  address?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  postal_code?: string | undefined;
  phone_number?: string | undefined;
};

/** @internal */
export const ContractorPaymentReceiptLicensee$outboundSchema: z.ZodType<
  ContractorPaymentReceiptLicensee$Outbound,
  z.ZodTypeDef,
  ContractorPaymentReceiptLicensee
> = z.object({
  name: z.string().optional(),
  address: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  postalCode: z.string().optional(),
  phoneNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    postalCode: "postal_code",
    phoneNumber: "phone_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentReceiptLicensee$ {
  /** @deprecated use `ContractorPaymentReceiptLicensee$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentReceiptLicensee$inboundSchema;
  /** @deprecated use `ContractorPaymentReceiptLicensee$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentReceiptLicensee$outboundSchema;
  /** @deprecated use `ContractorPaymentReceiptLicensee$Outbound` instead. */
  export type Outbound = ContractorPaymentReceiptLicensee$Outbound;
}

export function contractorPaymentReceiptLicenseeToJSON(
  contractorPaymentReceiptLicensee: ContractorPaymentReceiptLicensee,
): string {
  return JSON.stringify(
    ContractorPaymentReceiptLicensee$outboundSchema.parse(
      contractorPaymentReceiptLicensee,
    ),
  );
}

export function contractorPaymentReceiptLicenseeFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentReceiptLicensee, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPaymentReceiptLicensee$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentReceiptLicensee' from JSON`,
  );
}

/** @internal */
export const ContractorPaymentReceipt$inboundSchema: z.ZodType<
  ContractorPaymentReceipt,
  z.ZodTypeDef,
  unknown
> = z.object({
  contractor_payment_uuid: z.string().optional(),
  company_uuid: z.string().optional(),
  name_of_sender: z.string().optional(),
  name_of_recipient: z.string().optional(),
  debit_date: z.string().transform(v => new RFCDate(v)).optional(),
  license: z.string().optional(),
  license_uri: z.string().optional(),
  right_to_refund: z.string().optional(),
  liability_of_licensee: z.string().optional(),
  totals: z.lazy(() => ContractorPaymentReceiptTotals$inboundSchema).optional(),
  contractor_payments: z.array(z.lazy(() => ContractorPayments$inboundSchema))
    .optional(),
  licensee: z.lazy(() => ContractorPaymentReceiptLicensee$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "contractor_payment_uuid": "contractorPaymentUuid",
    "company_uuid": "companyUuid",
    "name_of_sender": "nameOfSender",
    "name_of_recipient": "nameOfRecipient",
    "debit_date": "debitDate",
    "license_uri": "licenseUri",
    "right_to_refund": "rightToRefund",
    "liability_of_licensee": "liabilityOfLicensee",
    "contractor_payments": "contractorPayments",
  });
});

/** @internal */
export type ContractorPaymentReceipt$Outbound = {
  contractor_payment_uuid?: string | undefined;
  company_uuid?: string | undefined;
  name_of_sender?: string | undefined;
  name_of_recipient?: string | undefined;
  debit_date?: string | undefined;
  license?: string | undefined;
  license_uri?: string | undefined;
  right_to_refund?: string | undefined;
  liability_of_licensee?: string | undefined;
  totals?: ContractorPaymentReceiptTotals$Outbound | undefined;
  contractor_payments?: Array<ContractorPayments$Outbound> | undefined;
  licensee?: ContractorPaymentReceiptLicensee$Outbound | undefined;
};

/** @internal */
export const ContractorPaymentReceipt$outboundSchema: z.ZodType<
  ContractorPaymentReceipt$Outbound,
  z.ZodTypeDef,
  ContractorPaymentReceipt
> = z.object({
  contractorPaymentUuid: z.string().optional(),
  companyUuid: z.string().optional(),
  nameOfSender: z.string().optional(),
  nameOfRecipient: z.string().optional(),
  debitDate: z.instanceof(RFCDate).transform(v => v.toString()).optional(),
  license: z.string().optional(),
  licenseUri: z.string().optional(),
  rightToRefund: z.string().optional(),
  liabilityOfLicensee: z.string().optional(),
  totals: z.lazy(() => ContractorPaymentReceiptTotals$outboundSchema)
    .optional(),
  contractorPayments: z.array(z.lazy(() => ContractorPayments$outboundSchema))
    .optional(),
  licensee: z.lazy(() => ContractorPaymentReceiptLicensee$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    contractorPaymentUuid: "contractor_payment_uuid",
    companyUuid: "company_uuid",
    nameOfSender: "name_of_sender",
    nameOfRecipient: "name_of_recipient",
    debitDate: "debit_date",
    licenseUri: "license_uri",
    rightToRefund: "right_to_refund",
    liabilityOfLicensee: "liability_of_licensee",
    contractorPayments: "contractor_payments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentReceipt$ {
  /** @deprecated use `ContractorPaymentReceipt$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentReceipt$inboundSchema;
  /** @deprecated use `ContractorPaymentReceipt$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentReceipt$outboundSchema;
  /** @deprecated use `ContractorPaymentReceipt$Outbound` instead. */
  export type Outbound = ContractorPaymentReceipt$Outbound;
}

export function contractorPaymentReceiptToJSON(
  contractorPaymentReceipt: ContractorPaymentReceipt,
): string {
  return JSON.stringify(
    ContractorPaymentReceipt$outboundSchema.parse(contractorPaymentReceipt),
  );
}

export function contractorPaymentReceiptFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentReceipt, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPaymentReceipt$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentReceipt' from JSON`,
  );
}
