/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The representation of an employee pay stub information.
 */
export type EmployeePayStub = {
  /**
   * The UUID of the employee pay stub.
   */
  uuid: string;
  /**
   * The check date of the pay stub.
   */
  checkDate?: string | undefined;
  /**
   * The gross pay amount for the pay stub.
   */
  grossPay?: string | undefined;
  /**
   * The net pay amount for the pay stub.
   */
  netPay?: string | undefined;
  /**
   * A unique identifier of the payroll to which the pay stub belongs.
   */
  payrollUuid?: string | undefined;
  /**
   * The check amount for the pay stub.
   */
  checkAmount?: string | undefined;
};

/** @internal */
export const EmployeePayStub$inboundSchema: z.ZodType<
  EmployeePayStub,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  check_date: z.string().optional(),
  gross_pay: z.string().optional(),
  net_pay: z.string().optional(),
  payroll_uuid: z.string().optional(),
  check_amount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "check_date": "checkDate",
    "gross_pay": "grossPay",
    "net_pay": "netPay",
    "payroll_uuid": "payrollUuid",
    "check_amount": "checkAmount",
  });
});

/** @internal */
export type EmployeePayStub$Outbound = {
  uuid: string;
  check_date?: string | undefined;
  gross_pay?: string | undefined;
  net_pay?: string | undefined;
  payroll_uuid?: string | undefined;
  check_amount?: string | undefined;
};

/** @internal */
export const EmployeePayStub$outboundSchema: z.ZodType<
  EmployeePayStub$Outbound,
  z.ZodTypeDef,
  EmployeePayStub
> = z.object({
  uuid: z.string(),
  checkDate: z.string().optional(),
  grossPay: z.string().optional(),
  netPay: z.string().optional(),
  payrollUuid: z.string().optional(),
  checkAmount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    checkDate: "check_date",
    grossPay: "gross_pay",
    netPay: "net_pay",
    payrollUuid: "payroll_uuid",
    checkAmount: "check_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeePayStub$ {
  /** @deprecated use `EmployeePayStub$inboundSchema` instead. */
  export const inboundSchema = EmployeePayStub$inboundSchema;
  /** @deprecated use `EmployeePayStub$outboundSchema` instead. */
  export const outboundSchema = EmployeePayStub$outboundSchema;
  /** @deprecated use `EmployeePayStub$Outbound` instead. */
  export type Outbound = EmployeePayStub$Outbound;
}

export function employeePayStubToJSON(
  employeePayStub: EmployeePayStub,
): string {
  return JSON.stringify(EmployeePayStub$outboundSchema.parse(employeePayStub));
}

export function employeePayStubFromJSON(
  jsonString: string,
): SafeParseResult<EmployeePayStub, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeePayStub$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeePayStub' from JSON`,
  );
}
