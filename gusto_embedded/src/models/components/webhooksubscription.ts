/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the webhook subscription.
 */
export const WebhookSubscriptionStatus = {
  Pending: "pending",
  Verified: "verified",
  Removed: "removed",
  Unreachable: "unreachable",
} as const;
/**
 * The status of the webhook subscription.
 */
export type WebhookSubscriptionStatus = ClosedEnum<
  typeof WebhookSubscriptionStatus
>;

export const SubscriptionTypes = {
  BankAccount: "BankAccount",
  Company: "Company",
  CompanyBenefit: "CompanyBenefit",
  Contractor: "Contractor",
  ContractorPayment: "ContractorPayment",
  Employee: "Employee",
  EmployeeBenefit: "EmployeeBenefit",
  EmployeeJobCompensation: "EmployeeJobCompensation",
  ExternalPayroll: "ExternalPayroll",
  Form: "Form",
  Location: "Location",
  Notification: "Notification",
  Payroll: "Payroll",
  PaySchedule: "PaySchedule",
  Signatory: "Signatory",
} as const;
export type SubscriptionTypes = ClosedEnum<typeof SubscriptionTypes>;

/**
 * The representation of webhook subscription.
 */
export type WebhookSubscription = {
  /**
   * The UUID of the webhook subscription.
   */
  uuid: string;
  /**
   * The webhook subscriber URL. Updates will be POSTed to this URL.
   */
  url?: string | undefined;
  /**
   * The status of the webhook subscription.
   */
  status?: WebhookSubscriptionStatus | undefined;
  /**
   * Receive updates for these types.
   */
  subscriptionTypes?: Array<SubscriptionTypes> | undefined;
};

/** @internal */
export const WebhookSubscriptionStatus$inboundSchema: z.ZodNativeEnum<
  typeof WebhookSubscriptionStatus
> = z.nativeEnum(WebhookSubscriptionStatus);

/** @internal */
export const WebhookSubscriptionStatus$outboundSchema: z.ZodNativeEnum<
  typeof WebhookSubscriptionStatus
> = WebhookSubscriptionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSubscriptionStatus$ {
  /** @deprecated use `WebhookSubscriptionStatus$inboundSchema` instead. */
  export const inboundSchema = WebhookSubscriptionStatus$inboundSchema;
  /** @deprecated use `WebhookSubscriptionStatus$outboundSchema` instead. */
  export const outboundSchema = WebhookSubscriptionStatus$outboundSchema;
}

/** @internal */
export const SubscriptionTypes$inboundSchema: z.ZodNativeEnum<
  typeof SubscriptionTypes
> = z.nativeEnum(SubscriptionTypes);

/** @internal */
export const SubscriptionTypes$outboundSchema: z.ZodNativeEnum<
  typeof SubscriptionTypes
> = SubscriptionTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SubscriptionTypes$ {
  /** @deprecated use `SubscriptionTypes$inboundSchema` instead. */
  export const inboundSchema = SubscriptionTypes$inboundSchema;
  /** @deprecated use `SubscriptionTypes$outboundSchema` instead. */
  export const outboundSchema = SubscriptionTypes$outboundSchema;
}

/** @internal */
export const WebhookSubscription$inboundSchema: z.ZodType<
  WebhookSubscription,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  url: z.string().optional(),
  status: WebhookSubscriptionStatus$inboundSchema.optional(),
  subscription_types: z.array(SubscriptionTypes$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "subscription_types": "subscriptionTypes",
  });
});

/** @internal */
export type WebhookSubscription$Outbound = {
  uuid: string;
  url?: string | undefined;
  status?: string | undefined;
  subscription_types?: Array<string> | undefined;
};

/** @internal */
export const WebhookSubscription$outboundSchema: z.ZodType<
  WebhookSubscription$Outbound,
  z.ZodTypeDef,
  WebhookSubscription
> = z.object({
  uuid: z.string(),
  url: z.string().optional(),
  status: WebhookSubscriptionStatus$outboundSchema.optional(),
  subscriptionTypes: z.array(SubscriptionTypes$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    subscriptionTypes: "subscription_types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WebhookSubscription$ {
  /** @deprecated use `WebhookSubscription$inboundSchema` instead. */
  export const inboundSchema = WebhookSubscription$inboundSchema;
  /** @deprecated use `WebhookSubscription$outboundSchema` instead. */
  export const outboundSchema = WebhookSubscription$outboundSchema;
  /** @deprecated use `WebhookSubscription$Outbound` instead. */
  export type Outbound = WebhookSubscription$Outbound;
}

export function webhookSubscriptionToJSON(
  webhookSubscription: WebhookSubscription,
): string {
  return JSON.stringify(
    WebhookSubscription$outboundSchema.parse(webhookSubscription),
  );
}

export function webhookSubscriptionFromJSON(
  jsonString: string,
): SafeParseResult<WebhookSubscription, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WebhookSubscription$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WebhookSubscription' from JSON`,
  );
}
