/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
 */
export const Status = {
  Unprocessed: "unprocessed",
  Processed: "processed",
} as const;
/**
 * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
 */
export type Status = ClosedEnum<typeof Status>;

export type Earnings = {
  amount?: string | undefined;
  hours?: string | undefined;
  earningType?: string | undefined;
  earningId?: number | undefined;
};

export type Benefits = {
  benefitId?: number | undefined;
  companyContributionAmount?: string | undefined;
  employeeDeductionAmount?: string | undefined;
};

export type ExternalPayrollTaxes = {
  taxId?: number | undefined;
  amount?: string | undefined;
};

export type ExternalPayrollItems = {
  employeeUuid?: string | undefined;
  earnings?: Array<Earnings> | undefined;
  benefits?: Array<Benefits> | undefined;
  taxes?: Array<ExternalPayrollTaxes> | undefined;
};

export type ApplicableEarnings = {
  earningType?: string | undefined;
  earningId?: number | undefined;
  name?: string | undefined;
  inputType?: string | undefined;
  category?: string | undefined;
};

export type ApplicableBenefits = {
  id?: number | undefined;
  description?: string | undefined;
  active?: boolean | undefined;
};

export type ApplicableTaxes = {
  id?: number | undefined;
  name?: string | undefined;
  /**
   * Some taxes may have an amount withheld from the employee and an amount withheld from the employer, e.g. Social Security. A `true` value indicates this is the employer's amount.
   */
  employerTax?: boolean | undefined;
  /**
   * Some taxes may have different rates or reporting requirements depending on if the employee is a resident or non-resident of the tax jurisdiction.
   */
  residentTax?: boolean | undefined;
};

/**
 * Stores metadata of the external payroll.
 */
export type ExternalPayrollMetadata = {
  /**
   * Determines if the external payroll can be deleted.
   */
  deletable?: boolean | undefined;
};

/**
 * The representation of an external payroll.
 */
export type ExternalPayroll = {
  /**
   * The UUID of the external payroll.
   */
  uuid: string;
  /**
   * The UUID of the company.
   */
  companyUuid?: string | undefined;
  /**
   * External payroll's check date.
   */
  checkDate?: string | undefined;
  /**
   * External payroll's pay period start date.
   */
  paymentPeriodStartDate?: string | undefined;
  /**
   * External payroll's pay period end date.
   */
  paymentPeriodEndDate?: string | undefined;
  /**
   * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
   */
  status?: Status | undefined;
  /**
   * External payroll items for employees
   */
  externalPayrollItems?: Array<ExternalPayrollItems> | undefined;
  /**
   * Applicable earnings based on company provisioning.
   */
  applicableEarnings?: Array<ApplicableEarnings> | undefined;
  /**
   * Applicable benefits based on company provisioning.
   */
  applicableBenefits?: Array<ApplicableBenefits> | null | undefined;
  /**
   * Applicable taxes based on company provisioning.
   */
  applicableTaxes?: Array<ApplicableTaxes> | undefined;
  /**
   * Stores metadata of the external payroll.
   */
  metadata?: ExternalPayrollMetadata | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const Earnings$inboundSchema: z.ZodType<
  Earnings,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  hours: z.string().optional(),
  earning_type: z.string().optional(),
  earning_id: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "earning_type": "earningType",
    "earning_id": "earningId",
  });
});

/** @internal */
export type Earnings$Outbound = {
  amount?: string | undefined;
  hours?: string | undefined;
  earning_type?: string | undefined;
  earning_id?: number | undefined;
};

/** @internal */
export const Earnings$outboundSchema: z.ZodType<
  Earnings$Outbound,
  z.ZodTypeDef,
  Earnings
> = z.object({
  amount: z.string().optional(),
  hours: z.string().optional(),
  earningType: z.string().optional(),
  earningId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    earningType: "earning_type",
    earningId: "earning_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Earnings$ {
  /** @deprecated use `Earnings$inboundSchema` instead. */
  export const inboundSchema = Earnings$inboundSchema;
  /** @deprecated use `Earnings$outboundSchema` instead. */
  export const outboundSchema = Earnings$outboundSchema;
  /** @deprecated use `Earnings$Outbound` instead. */
  export type Outbound = Earnings$Outbound;
}

export function earningsToJSON(earnings: Earnings): string {
  return JSON.stringify(Earnings$outboundSchema.parse(earnings));
}

export function earningsFromJSON(
  jsonString: string,
): SafeParseResult<Earnings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Earnings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Earnings' from JSON`,
  );
}

/** @internal */
export const Benefits$inboundSchema: z.ZodType<
  Benefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  benefit_id: z.number().int().optional(),
  company_contribution_amount: z.string().optional(),
  employee_deduction_amount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "benefit_id": "benefitId",
    "company_contribution_amount": "companyContributionAmount",
    "employee_deduction_amount": "employeeDeductionAmount",
  });
});

/** @internal */
export type Benefits$Outbound = {
  benefit_id?: number | undefined;
  company_contribution_amount?: string | undefined;
  employee_deduction_amount?: string | undefined;
};

/** @internal */
export const Benefits$outboundSchema: z.ZodType<
  Benefits$Outbound,
  z.ZodTypeDef,
  Benefits
> = z.object({
  benefitId: z.number().int().optional(),
  companyContributionAmount: z.string().optional(),
  employeeDeductionAmount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    benefitId: "benefit_id",
    companyContributionAmount: "company_contribution_amount",
    employeeDeductionAmount: "employee_deduction_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Benefits$ {
  /** @deprecated use `Benefits$inboundSchema` instead. */
  export const inboundSchema = Benefits$inboundSchema;
  /** @deprecated use `Benefits$outboundSchema` instead. */
  export const outboundSchema = Benefits$outboundSchema;
  /** @deprecated use `Benefits$Outbound` instead. */
  export type Outbound = Benefits$Outbound;
}

export function benefitsToJSON(benefits: Benefits): string {
  return JSON.stringify(Benefits$outboundSchema.parse(benefits));
}

export function benefitsFromJSON(
  jsonString: string,
): SafeParseResult<Benefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Benefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Benefits' from JSON`,
  );
}

/** @internal */
export const ExternalPayrollTaxes$inboundSchema: z.ZodType<
  ExternalPayrollTaxes,
  z.ZodTypeDef,
  unknown
> = z.object({
  tax_id: z.number().int().optional(),
  amount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tax_id": "taxId",
  });
});

/** @internal */
export type ExternalPayrollTaxes$Outbound = {
  tax_id?: number | undefined;
  amount?: string | undefined;
};

/** @internal */
export const ExternalPayrollTaxes$outboundSchema: z.ZodType<
  ExternalPayrollTaxes$Outbound,
  z.ZodTypeDef,
  ExternalPayrollTaxes
> = z.object({
  taxId: z.number().int().optional(),
  amount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    taxId: "tax_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalPayrollTaxes$ {
  /** @deprecated use `ExternalPayrollTaxes$inboundSchema` instead. */
  export const inboundSchema = ExternalPayrollTaxes$inboundSchema;
  /** @deprecated use `ExternalPayrollTaxes$outboundSchema` instead. */
  export const outboundSchema = ExternalPayrollTaxes$outboundSchema;
  /** @deprecated use `ExternalPayrollTaxes$Outbound` instead. */
  export type Outbound = ExternalPayrollTaxes$Outbound;
}

export function externalPayrollTaxesToJSON(
  externalPayrollTaxes: ExternalPayrollTaxes,
): string {
  return JSON.stringify(
    ExternalPayrollTaxes$outboundSchema.parse(externalPayrollTaxes),
  );
}

export function externalPayrollTaxesFromJSON(
  jsonString: string,
): SafeParseResult<ExternalPayrollTaxes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalPayrollTaxes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalPayrollTaxes' from JSON`,
  );
}

/** @internal */
export const ExternalPayrollItems$inboundSchema: z.ZodType<
  ExternalPayrollItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_uuid: z.string().optional(),
  earnings: z.array(z.lazy(() => Earnings$inboundSchema)).optional(),
  benefits: z.array(z.lazy(() => Benefits$inboundSchema)).optional(),
  taxes: z.array(z.lazy(() => ExternalPayrollTaxes$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
  });
});

/** @internal */
export type ExternalPayrollItems$Outbound = {
  employee_uuid?: string | undefined;
  earnings?: Array<Earnings$Outbound> | undefined;
  benefits?: Array<Benefits$Outbound> | undefined;
  taxes?: Array<ExternalPayrollTaxes$Outbound> | undefined;
};

/** @internal */
export const ExternalPayrollItems$outboundSchema: z.ZodType<
  ExternalPayrollItems$Outbound,
  z.ZodTypeDef,
  ExternalPayrollItems
> = z.object({
  employeeUuid: z.string().optional(),
  earnings: z.array(z.lazy(() => Earnings$outboundSchema)).optional(),
  benefits: z.array(z.lazy(() => Benefits$outboundSchema)).optional(),
  taxes: z.array(z.lazy(() => ExternalPayrollTaxes$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalPayrollItems$ {
  /** @deprecated use `ExternalPayrollItems$inboundSchema` instead. */
  export const inboundSchema = ExternalPayrollItems$inboundSchema;
  /** @deprecated use `ExternalPayrollItems$outboundSchema` instead. */
  export const outboundSchema = ExternalPayrollItems$outboundSchema;
  /** @deprecated use `ExternalPayrollItems$Outbound` instead. */
  export type Outbound = ExternalPayrollItems$Outbound;
}

export function externalPayrollItemsToJSON(
  externalPayrollItems: ExternalPayrollItems,
): string {
  return JSON.stringify(
    ExternalPayrollItems$outboundSchema.parse(externalPayrollItems),
  );
}

export function externalPayrollItemsFromJSON(
  jsonString: string,
): SafeParseResult<ExternalPayrollItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalPayrollItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalPayrollItems' from JSON`,
  );
}

/** @internal */
export const ApplicableEarnings$inboundSchema: z.ZodType<
  ApplicableEarnings,
  z.ZodTypeDef,
  unknown
> = z.object({
  earning_type: z.string().optional(),
  earning_id: z.number().optional(),
  name: z.string().optional(),
  input_type: z.string().optional(),
  category: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "earning_type": "earningType",
    "earning_id": "earningId",
    "input_type": "inputType",
  });
});

/** @internal */
export type ApplicableEarnings$Outbound = {
  earning_type?: string | undefined;
  earning_id?: number | undefined;
  name?: string | undefined;
  input_type?: string | undefined;
  category?: string | undefined;
};

/** @internal */
export const ApplicableEarnings$outboundSchema: z.ZodType<
  ApplicableEarnings$Outbound,
  z.ZodTypeDef,
  ApplicableEarnings
> = z.object({
  earningType: z.string().optional(),
  earningId: z.number().optional(),
  name: z.string().optional(),
  inputType: z.string().optional(),
  category: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    earningType: "earning_type",
    earningId: "earning_id",
    inputType: "input_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicableEarnings$ {
  /** @deprecated use `ApplicableEarnings$inboundSchema` instead. */
  export const inboundSchema = ApplicableEarnings$inboundSchema;
  /** @deprecated use `ApplicableEarnings$outboundSchema` instead. */
  export const outboundSchema = ApplicableEarnings$outboundSchema;
  /** @deprecated use `ApplicableEarnings$Outbound` instead. */
  export type Outbound = ApplicableEarnings$Outbound;
}

export function applicableEarningsToJSON(
  applicableEarnings: ApplicableEarnings,
): string {
  return JSON.stringify(
    ApplicableEarnings$outboundSchema.parse(applicableEarnings),
  );
}

export function applicableEarningsFromJSON(
  jsonString: string,
): SafeParseResult<ApplicableEarnings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicableEarnings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicableEarnings' from JSON`,
  );
}

/** @internal */
export const ApplicableBenefits$inboundSchema: z.ZodType<
  ApplicableBenefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  description: z.string().optional(),
  active: z.boolean().optional(),
});

/** @internal */
export type ApplicableBenefits$Outbound = {
  id?: number | undefined;
  description?: string | undefined;
  active?: boolean | undefined;
};

/** @internal */
export const ApplicableBenefits$outboundSchema: z.ZodType<
  ApplicableBenefits$Outbound,
  z.ZodTypeDef,
  ApplicableBenefits
> = z.object({
  id: z.number().int().optional(),
  description: z.string().optional(),
  active: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicableBenefits$ {
  /** @deprecated use `ApplicableBenefits$inboundSchema` instead. */
  export const inboundSchema = ApplicableBenefits$inboundSchema;
  /** @deprecated use `ApplicableBenefits$outboundSchema` instead. */
  export const outboundSchema = ApplicableBenefits$outboundSchema;
  /** @deprecated use `ApplicableBenefits$Outbound` instead. */
  export type Outbound = ApplicableBenefits$Outbound;
}

export function applicableBenefitsToJSON(
  applicableBenefits: ApplicableBenefits,
): string {
  return JSON.stringify(
    ApplicableBenefits$outboundSchema.parse(applicableBenefits),
  );
}

export function applicableBenefitsFromJSON(
  jsonString: string,
): SafeParseResult<ApplicableBenefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicableBenefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicableBenefits' from JSON`,
  );
}

/** @internal */
export const ApplicableTaxes$inboundSchema: z.ZodType<
  ApplicableTaxes,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  employer_tax: z.boolean().optional(),
  resident_tax: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "employer_tax": "employerTax",
    "resident_tax": "residentTax",
  });
});

/** @internal */
export type ApplicableTaxes$Outbound = {
  id?: number | undefined;
  name?: string | undefined;
  employer_tax?: boolean | undefined;
  resident_tax?: boolean | undefined;
};

/** @internal */
export const ApplicableTaxes$outboundSchema: z.ZodType<
  ApplicableTaxes$Outbound,
  z.ZodTypeDef,
  ApplicableTaxes
> = z.object({
  id: z.number().int().optional(),
  name: z.string().optional(),
  employerTax: z.boolean().optional(),
  residentTax: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    employerTax: "employer_tax",
    residentTax: "resident_tax",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicableTaxes$ {
  /** @deprecated use `ApplicableTaxes$inboundSchema` instead. */
  export const inboundSchema = ApplicableTaxes$inboundSchema;
  /** @deprecated use `ApplicableTaxes$outboundSchema` instead. */
  export const outboundSchema = ApplicableTaxes$outboundSchema;
  /** @deprecated use `ApplicableTaxes$Outbound` instead. */
  export type Outbound = ApplicableTaxes$Outbound;
}

export function applicableTaxesToJSON(
  applicableTaxes: ApplicableTaxes,
): string {
  return JSON.stringify(ApplicableTaxes$outboundSchema.parse(applicableTaxes));
}

export function applicableTaxesFromJSON(
  jsonString: string,
): SafeParseResult<ApplicableTaxes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicableTaxes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicableTaxes' from JSON`,
  );
}

/** @internal */
export const ExternalPayrollMetadata$inboundSchema: z.ZodType<
  ExternalPayrollMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  deletable: z.boolean().optional(),
});

/** @internal */
export type ExternalPayrollMetadata$Outbound = {
  deletable?: boolean | undefined;
};

/** @internal */
export const ExternalPayrollMetadata$outboundSchema: z.ZodType<
  ExternalPayrollMetadata$Outbound,
  z.ZodTypeDef,
  ExternalPayrollMetadata
> = z.object({
  deletable: z.boolean().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalPayrollMetadata$ {
  /** @deprecated use `ExternalPayrollMetadata$inboundSchema` instead. */
  export const inboundSchema = ExternalPayrollMetadata$inboundSchema;
  /** @deprecated use `ExternalPayrollMetadata$outboundSchema` instead. */
  export const outboundSchema = ExternalPayrollMetadata$outboundSchema;
  /** @deprecated use `ExternalPayrollMetadata$Outbound` instead. */
  export type Outbound = ExternalPayrollMetadata$Outbound;
}

export function externalPayrollMetadataToJSON(
  externalPayrollMetadata: ExternalPayrollMetadata,
): string {
  return JSON.stringify(
    ExternalPayrollMetadata$outboundSchema.parse(externalPayrollMetadata),
  );
}

export function externalPayrollMetadataFromJSON(
  jsonString: string,
): SafeParseResult<ExternalPayrollMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalPayrollMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalPayrollMetadata' from JSON`,
  );
}

/** @internal */
export const ExternalPayroll$inboundSchema: z.ZodType<
  ExternalPayroll,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  company_uuid: z.string().optional(),
  check_date: z.string().optional(),
  payment_period_start_date: z.string().optional(),
  payment_period_end_date: z.string().optional(),
  status: Status$inboundSchema.optional(),
  external_payroll_items: z.array(
    z.lazy(() => ExternalPayrollItems$inboundSchema),
  ).optional(),
  applicable_earnings: z.array(z.lazy(() => ApplicableEarnings$inboundSchema))
    .optional(),
  applicable_benefits: z.nullable(
    z.array(z.lazy(() => ApplicableBenefits$inboundSchema)),
  ).optional(),
  applicable_taxes: z.array(z.lazy(() => ApplicableTaxes$inboundSchema))
    .optional(),
  metadata: z.lazy(() => ExternalPayrollMetadata$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "check_date": "checkDate",
    "payment_period_start_date": "paymentPeriodStartDate",
    "payment_period_end_date": "paymentPeriodEndDate",
    "external_payroll_items": "externalPayrollItems",
    "applicable_earnings": "applicableEarnings",
    "applicable_benefits": "applicableBenefits",
    "applicable_taxes": "applicableTaxes",
  });
});

/** @internal */
export type ExternalPayroll$Outbound = {
  uuid: string;
  company_uuid?: string | undefined;
  check_date?: string | undefined;
  payment_period_start_date?: string | undefined;
  payment_period_end_date?: string | undefined;
  status?: string | undefined;
  external_payroll_items?: Array<ExternalPayrollItems$Outbound> | undefined;
  applicable_earnings?: Array<ApplicableEarnings$Outbound> | undefined;
  applicable_benefits?: Array<ApplicableBenefits$Outbound> | null | undefined;
  applicable_taxes?: Array<ApplicableTaxes$Outbound> | undefined;
  metadata?: ExternalPayrollMetadata$Outbound | undefined;
};

/** @internal */
export const ExternalPayroll$outboundSchema: z.ZodType<
  ExternalPayroll$Outbound,
  z.ZodTypeDef,
  ExternalPayroll
> = z.object({
  uuid: z.string(),
  companyUuid: z.string().optional(),
  checkDate: z.string().optional(),
  paymentPeriodStartDate: z.string().optional(),
  paymentPeriodEndDate: z.string().optional(),
  status: Status$outboundSchema.optional(),
  externalPayrollItems: z.array(
    z.lazy(() => ExternalPayrollItems$outboundSchema),
  ).optional(),
  applicableEarnings: z.array(z.lazy(() => ApplicableEarnings$outboundSchema))
    .optional(),
  applicableBenefits: z.nullable(
    z.array(z.lazy(() => ApplicableBenefits$outboundSchema)),
  ).optional(),
  applicableTaxes: z.array(z.lazy(() => ApplicableTaxes$outboundSchema))
    .optional(),
  metadata: z.lazy(() => ExternalPayrollMetadata$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    checkDate: "check_date",
    paymentPeriodStartDate: "payment_period_start_date",
    paymentPeriodEndDate: "payment_period_end_date",
    externalPayrollItems: "external_payroll_items",
    applicableEarnings: "applicable_earnings",
    applicableBenefits: "applicable_benefits",
    applicableTaxes: "applicable_taxes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalPayroll$ {
  /** @deprecated use `ExternalPayroll$inboundSchema` instead. */
  export const inboundSchema = ExternalPayroll$inboundSchema;
  /** @deprecated use `ExternalPayroll$outboundSchema` instead. */
  export const outboundSchema = ExternalPayroll$outboundSchema;
  /** @deprecated use `ExternalPayroll$Outbound` instead. */
  export type Outbound = ExternalPayroll$Outbound;
}

export function externalPayrollToJSON(
  externalPayroll: ExternalPayroll,
): string {
  return JSON.stringify(ExternalPayroll$outboundSchema.parse(externalPayroll));
}

export function externalPayrollFromJSON(
  jsonString: string,
): SafeParseResult<ExternalPayroll, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalPayroll$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalPayroll' from JSON`,
  );
}
