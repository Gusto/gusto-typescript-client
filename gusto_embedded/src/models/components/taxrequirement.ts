/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaxRequirementMetadata,
  TaxRequirementMetadata$inboundSchema,
  TaxRequirementMetadata$Outbound,
  TaxRequirementMetadata$outboundSchema,
} from "./taxrequirementmetadata.js";

/**
 * The required value of the requirement identified by `key`
 */
export type TaxRequirementValue = boolean | string | number;

export type ApplicableIf = {
  /**
   * An identifier for an individual requirement. Uniqueness is guaranteed within a requirement set.
   */
  key?: string | undefined;
  /**
   * The required value of the requirement identified by `key`
   */
  value?: boolean | string | number | null | undefined;
};

export type TaxRequirement = {
  /**
   * An identifier for an individual requirement. Uniqueness is guaranteed within a requirement set.
   */
  key?: string | undefined;
  /**
   * An array of references to other requirements within the requirement set. This requirement is only applicable if all referenced requirements have values matching the corresponding `value`. The primary use-case is dynamically hiding and showing requirements as values change. E.g. Show Requirement-B when Requirement-A has been answered with `false`. To be explicit, an empty array means the requirement is applicable.
   */
  applicableIf?: Array<ApplicableIf> | undefined;
  /**
   * A customer facing description of the requirement
   */
  label?: string | undefined;
  /**
   * A more detailed customer facing description of the requirement
   */
  description?: string | undefined;
  /**
   * The "answer"
   */
  value?: string | null | undefined;
  metadata?: TaxRequirementMetadata | undefined;
};

/** @internal */
export const TaxRequirementValue$inboundSchema: z.ZodType<
  TaxRequirementValue,
  z.ZodTypeDef,
  unknown
> = z.union([z.boolean(), z.string(), z.number()]);

/** @internal */
export type TaxRequirementValue$Outbound = boolean | string | number;

/** @internal */
export const TaxRequirementValue$outboundSchema: z.ZodType<
  TaxRequirementValue$Outbound,
  z.ZodTypeDef,
  TaxRequirementValue
> = z.union([z.boolean(), z.string(), z.number()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRequirementValue$ {
  /** @deprecated use `TaxRequirementValue$inboundSchema` instead. */
  export const inboundSchema = TaxRequirementValue$inboundSchema;
  /** @deprecated use `TaxRequirementValue$outboundSchema` instead. */
  export const outboundSchema = TaxRequirementValue$outboundSchema;
  /** @deprecated use `TaxRequirementValue$Outbound` instead. */
  export type Outbound = TaxRequirementValue$Outbound;
}

export function taxRequirementValueToJSON(
  taxRequirementValue: TaxRequirementValue,
): string {
  return JSON.stringify(
    TaxRequirementValue$outboundSchema.parse(taxRequirementValue),
  );
}

export function taxRequirementValueFromJSON(
  jsonString: string,
): SafeParseResult<TaxRequirementValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRequirementValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRequirementValue' from JSON`,
  );
}

/** @internal */
export const ApplicableIf$inboundSchema: z.ZodType<
  ApplicableIf,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])).optional(),
});

/** @internal */
export type ApplicableIf$Outbound = {
  key?: string | undefined;
  value?: boolean | string | number | null | undefined;
};

/** @internal */
export const ApplicableIf$outboundSchema: z.ZodType<
  ApplicableIf$Outbound,
  z.ZodTypeDef,
  ApplicableIf
> = z.object({
  key: z.string().optional(),
  value: z.nullable(z.union([z.boolean(), z.string(), z.number()])).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicableIf$ {
  /** @deprecated use `ApplicableIf$inboundSchema` instead. */
  export const inboundSchema = ApplicableIf$inboundSchema;
  /** @deprecated use `ApplicableIf$outboundSchema` instead. */
  export const outboundSchema = ApplicableIf$outboundSchema;
  /** @deprecated use `ApplicableIf$Outbound` instead. */
  export type Outbound = ApplicableIf$Outbound;
}

export function applicableIfToJSON(applicableIf: ApplicableIf): string {
  return JSON.stringify(ApplicableIf$outboundSchema.parse(applicableIf));
}

export function applicableIfFromJSON(
  jsonString: string,
): SafeParseResult<ApplicableIf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ApplicableIf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ApplicableIf' from JSON`,
  );
}

/** @internal */
export const TaxRequirement$inboundSchema: z.ZodType<
  TaxRequirement,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
  applicable_if: z.array(z.lazy(() => ApplicableIf$inboundSchema)).optional(),
  label: z.string().optional(),
  description: z.string().optional(),
  value: z.nullable(z.string()).optional(),
  metadata: TaxRequirementMetadata$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "applicable_if": "applicableIf",
  });
});

/** @internal */
export type TaxRequirement$Outbound = {
  key?: string | undefined;
  applicable_if?: Array<ApplicableIf$Outbound> | undefined;
  label?: string | undefined;
  description?: string | undefined;
  value?: string | null | undefined;
  metadata?: TaxRequirementMetadata$Outbound | undefined;
};

/** @internal */
export const TaxRequirement$outboundSchema: z.ZodType<
  TaxRequirement$Outbound,
  z.ZodTypeDef,
  TaxRequirement
> = z.object({
  key: z.string().optional(),
  applicableIf: z.array(z.lazy(() => ApplicableIf$outboundSchema)).optional(),
  label: z.string().optional(),
  description: z.string().optional(),
  value: z.nullable(z.string()).optional(),
  metadata: TaxRequirementMetadata$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    applicableIf: "applicable_if",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRequirement$ {
  /** @deprecated use `TaxRequirement$inboundSchema` instead. */
  export const inboundSchema = TaxRequirement$inboundSchema;
  /** @deprecated use `TaxRequirement$outboundSchema` instead. */
  export const outboundSchema = TaxRequirement$outboundSchema;
  /** @deprecated use `TaxRequirement$Outbound` instead. */
  export type Outbound = TaxRequirement$Outbound;
}

export function taxRequirementToJSON(taxRequirement: TaxRequirement): string {
  return JSON.stringify(TaxRequirement$outboundSchema.parse(taxRequirement));
}

export function taxRequirementFromJSON(
  jsonString: string,
): SafeParseResult<TaxRequirement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRequirement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRequirement' from JSON`,
  );
}
