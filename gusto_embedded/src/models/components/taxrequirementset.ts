/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  TaxRequirement,
  TaxRequirement$inboundSchema,
  TaxRequirement$Outbound,
  TaxRequirement$outboundSchema,
} from "./taxrequirement.js";

export type TaxRequirementSet = {
  /**
   * One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
   */
  state?: string | undefined;
  /**
   * An identifier for a set of requirements. A list of requirement sets can contain multiple sets with the same `key` and different `effective_from` values.
   */
  key?: string | undefined;
  /**
   * Customer facing label for the requirement set, e.g. "Registrations"
   */
  label?: string | undefined;
  /**
   * An ISO 8601 formatted date representing the date values became effective. Some requirement sets are effective dated, while others are not. Multiple requirement sets for the same state/key can/will exist with unique effective dates. If a requirement set is has an `effective_from` value, all requirement sets with the same key will also have an `effective_from` value.
   */
  effectiveFrom?: string | null | undefined;
  requirements?: Array<TaxRequirement> | undefined;
};

/** @internal */
export const TaxRequirementSet$inboundSchema: z.ZodType<
  TaxRequirementSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: z.string().optional(),
  key: z.string().optional(),
  label: z.string().optional(),
  effective_from: z.nullable(z.string()).optional(),
  requirements: z.array(TaxRequirement$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "effective_from": "effectiveFrom",
  });
});

/** @internal */
export type TaxRequirementSet$Outbound = {
  state?: string | undefined;
  key?: string | undefined;
  label?: string | undefined;
  effective_from?: string | null | undefined;
  requirements?: Array<TaxRequirement$Outbound> | undefined;
};

/** @internal */
export const TaxRequirementSet$outboundSchema: z.ZodType<
  TaxRequirementSet$Outbound,
  z.ZodTypeDef,
  TaxRequirementSet
> = z.object({
  state: z.string().optional(),
  key: z.string().optional(),
  label: z.string().optional(),
  effectiveFrom: z.nullable(z.string()).optional(),
  requirements: z.array(TaxRequirement$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    effectiveFrom: "effective_from",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxRequirementSet$ {
  /** @deprecated use `TaxRequirementSet$inboundSchema` instead. */
  export const inboundSchema = TaxRequirementSet$inboundSchema;
  /** @deprecated use `TaxRequirementSet$outboundSchema` instead. */
  export const outboundSchema = TaxRequirementSet$outboundSchema;
  /** @deprecated use `TaxRequirementSet$Outbound` instead. */
  export type Outbound = TaxRequirementSet$Outbound;
}

export function taxRequirementSetToJSON(
  taxRequirementSet: TaxRequirementSet,
): string {
  return JSON.stringify(
    TaxRequirementSet$outboundSchema.parse(taxRequirementSet),
  );
}

export function taxRequirementSetFromJSON(
  jsonString: string,
): SafeParseResult<TaxRequirementSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxRequirementSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxRequirementSet' from JSON`,
  );
}
