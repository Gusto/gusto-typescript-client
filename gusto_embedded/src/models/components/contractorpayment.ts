/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The payment method.
 */
export const ContractorPaymentPaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
  HistoricalPayment: "Historical Payment",
  CorrectionPayment: "Correction Payment",
} as const;
/**
 * The payment method.
 */
export type ContractorPaymentPaymentMethod = ClosedEnum<
  typeof ContractorPaymentPaymentMethod
>;

/**
 * Contractor payment status
 */
export const ContractorPaymentStatus = {
  Funded: "Funded",
  Unfunded: "Unfunded",
} as const;
/**
 * Contractor payment status
 */
export type ContractorPaymentStatus = ClosedEnum<
  typeof ContractorPaymentStatus
>;

/**
 * The wage type for the payment.
 */
export const ContractorPaymentWageType = {
  Hourly: "Hourly",
  Fixed: "Fixed",
} as const;
/**
 * The wage type for the payment.
 */
export type ContractorPaymentWageType = ClosedEnum<
  typeof ContractorPaymentWageType
>;

/**
 * The representation of a single contractor payment.
 */
export type ContractorPayment = {
  /**
   * The unique identifier of the contractor payment in Gusto.
   */
  uuid: string;
  /**
   * The UUID of the contractor.
   */
  contractorUuid?: string | undefined;
  /**
   * The bonus amount in the payment.
   */
  bonus?: string | undefined;
  /**
   * The payment date.
   */
  date?: string | undefined;
  /**
   * The number of hours worked for the payment.
   */
  hours?: string | undefined;
  /**
   * The payment method.
   */
  paymentMethod?: ContractorPaymentPaymentMethod | undefined;
  /**
   * The reimbursement amount in the payment.
   */
  reimbursement?: string | undefined;
  /**
   * Contractor payment status
   */
  status?: ContractorPaymentStatus | undefined;
  /**
   * The rate per hour worked for the payment.
   */
  hourlyRate?: string | undefined;
  /**
   * Determine if the contractor payment can be cancelled.
   */
  mayCancel?: boolean | undefined;
  /**
   * The fixed wage of the payment, regardless of hours worked.
   */
  wage?: string | undefined;
  /**
   * The wage type for the payment.
   */
  wageType?: ContractorPaymentWageType | undefined;
  /**
   * (hours * hourly_rate) + wage + bonus
   */
  wageTotal?: string | undefined;
};

/** @internal */
export const ContractorPaymentPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentPaymentMethod
> = z.nativeEnum(ContractorPaymentPaymentMethod);

/** @internal */
export const ContractorPaymentPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentPaymentMethod
> = ContractorPaymentPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentPaymentMethod$ {
  /** @deprecated use `ContractorPaymentPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentPaymentMethod$inboundSchema;
  /** @deprecated use `ContractorPaymentPaymentMethod$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentPaymentMethod$outboundSchema;
}

/** @internal */
export const ContractorPaymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentStatus
> = z.nativeEnum(ContractorPaymentStatus);

/** @internal */
export const ContractorPaymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentStatus
> = ContractorPaymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentStatus$ {
  /** @deprecated use `ContractorPaymentStatus$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentStatus$inboundSchema;
  /** @deprecated use `ContractorPaymentStatus$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentStatus$outboundSchema;
}

/** @internal */
export const ContractorPaymentWageType$inboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentWageType
> = z.nativeEnum(ContractorPaymentWageType);

/** @internal */
export const ContractorPaymentWageType$outboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentWageType
> = ContractorPaymentWageType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentWageType$ {
  /** @deprecated use `ContractorPaymentWageType$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentWageType$inboundSchema;
  /** @deprecated use `ContractorPaymentWageType$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentWageType$outboundSchema;
}

/** @internal */
export const ContractorPayment$inboundSchema: z.ZodType<
  ContractorPayment,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  contractor_uuid: z.string().optional(),
  bonus: z.string().optional(),
  date: z.string().optional(),
  hours: z.string().optional(),
  payment_method: ContractorPaymentPaymentMethod$inboundSchema.optional(),
  reimbursement: z.string().optional(),
  status: ContractorPaymentStatus$inboundSchema.optional(),
  hourly_rate: z.string().optional(),
  may_cancel: z.boolean().optional(),
  wage: z.string().optional(),
  wage_type: ContractorPaymentWageType$inboundSchema.optional(),
  wage_total: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "contractor_uuid": "contractorUuid",
    "payment_method": "paymentMethod",
    "hourly_rate": "hourlyRate",
    "may_cancel": "mayCancel",
    "wage_type": "wageType",
    "wage_total": "wageTotal",
  });
});

/** @internal */
export type ContractorPayment$Outbound = {
  uuid: string;
  contractor_uuid?: string | undefined;
  bonus?: string | undefined;
  date?: string | undefined;
  hours?: string | undefined;
  payment_method?: string | undefined;
  reimbursement?: string | undefined;
  status?: string | undefined;
  hourly_rate?: string | undefined;
  may_cancel?: boolean | undefined;
  wage?: string | undefined;
  wage_type?: string | undefined;
  wage_total?: string | undefined;
};

/** @internal */
export const ContractorPayment$outboundSchema: z.ZodType<
  ContractorPayment$Outbound,
  z.ZodTypeDef,
  ContractorPayment
> = z.object({
  uuid: z.string(),
  contractorUuid: z.string().optional(),
  bonus: z.string().optional(),
  date: z.string().optional(),
  hours: z.string().optional(),
  paymentMethod: ContractorPaymentPaymentMethod$outboundSchema.optional(),
  reimbursement: z.string().optional(),
  status: ContractorPaymentStatus$outboundSchema.optional(),
  hourlyRate: z.string().optional(),
  mayCancel: z.boolean().optional(),
  wage: z.string().optional(),
  wageType: ContractorPaymentWageType$outboundSchema.optional(),
  wageTotal: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    contractorUuid: "contractor_uuid",
    paymentMethod: "payment_method",
    hourlyRate: "hourly_rate",
    mayCancel: "may_cancel",
    wageType: "wage_type",
    wageTotal: "wage_total",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPayment$ {
  /** @deprecated use `ContractorPayment$inboundSchema` instead. */
  export const inboundSchema = ContractorPayment$inboundSchema;
  /** @deprecated use `ContractorPayment$outboundSchema` instead. */
  export const outboundSchema = ContractorPayment$outboundSchema;
  /** @deprecated use `ContractorPayment$Outbound` instead. */
  export type Outbound = ContractorPayment$Outbound;
}

export function contractorPaymentToJSON(
  contractorPayment: ContractorPayment,
): string {
  return JSON.stringify(
    ContractorPayment$outboundSchema.parse(contractorPayment),
  );
}

export function contractorPaymentFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPayment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPayment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPayment' from JSON`,
  );
}
