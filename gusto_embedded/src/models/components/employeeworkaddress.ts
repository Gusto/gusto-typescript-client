/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * List of employee work addresses
 */
export type EmployeeWorkAddress = {
  /**
   * The unique identifier of this work address.
   */
  uuid: string;
  /**
   * The date the employee began working at this location.
   */
  effectiveDate?: string | undefined;
  /**
   * Signifies if this address is the active work address for the current date
   */
  active?: boolean | undefined;
  /**
   * UUID reference to the company location for this work address.
   */
  locationUuid?: string | undefined;
  /**
   * UUID reference to the employee for this work address.
   */
  employeeUuid?: string | undefined;
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  street1?: string | undefined;
  street2?: string | null | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
  country?: string | undefined;
};

/** @internal */
export const EmployeeWorkAddress$inboundSchema: z.ZodType<
  EmployeeWorkAddress,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  effective_date: z.string().optional(),
  active: z.boolean().optional(),
  location_uuid: z.string().optional(),
  employee_uuid: z.string().optional(),
  version: z.string(),
  street_1: z.string().optional(),
  street_2: z.nullable(z.string()).optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zip: z.string().optional(),
  country: z.string().default("USA"),
}).transform((v) => {
  return remap$(v, {
    "effective_date": "effectiveDate",
    "location_uuid": "locationUuid",
    "employee_uuid": "employeeUuid",
    "street_1": "street1",
    "street_2": "street2",
  });
});

/** @internal */
export type EmployeeWorkAddress$Outbound = {
  uuid: string;
  effective_date?: string | undefined;
  active?: boolean | undefined;
  location_uuid?: string | undefined;
  employee_uuid?: string | undefined;
  version: string;
  street_1?: string | undefined;
  street_2?: string | null | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
  country: string;
};

/** @internal */
export const EmployeeWorkAddress$outboundSchema: z.ZodType<
  EmployeeWorkAddress$Outbound,
  z.ZodTypeDef,
  EmployeeWorkAddress
> = z.object({
  uuid: z.string(),
  effectiveDate: z.string().optional(),
  active: z.boolean().optional(),
  locationUuid: z.string().optional(),
  employeeUuid: z.string().optional(),
  version: z.string(),
  street1: z.string().optional(),
  street2: z.nullable(z.string()).optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zip: z.string().optional(),
  country: z.string().default("USA"),
}).transform((v) => {
  return remap$(v, {
    effectiveDate: "effective_date",
    locationUuid: "location_uuid",
    employeeUuid: "employee_uuid",
    street1: "street_1",
    street2: "street_2",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeWorkAddress$ {
  /** @deprecated use `EmployeeWorkAddress$inboundSchema` instead. */
  export const inboundSchema = EmployeeWorkAddress$inboundSchema;
  /** @deprecated use `EmployeeWorkAddress$outboundSchema` instead. */
  export const outboundSchema = EmployeeWorkAddress$outboundSchema;
  /** @deprecated use `EmployeeWorkAddress$Outbound` instead. */
  export type Outbound = EmployeeWorkAddress$Outbound;
}

export function employeeWorkAddressToJSON(
  employeeWorkAddress: EmployeeWorkAddress,
): string {
  return JSON.stringify(
    EmployeeWorkAddress$outboundSchema.parse(employeeWorkAddress),
  );
}

export function employeeWorkAddressFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeWorkAddress, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeWorkAddress$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeWorkAddress' from JSON`,
  );
}
