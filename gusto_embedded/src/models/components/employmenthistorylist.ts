/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
 */
export const EmploymentHistoryListEmploymentStatus = {
  PartTime: "part_time",
  FullTime: "full_time",
  PartTimeEligible: "part_time_eligible",
  Variable: "variable",
  SeasonalNotSet: "seasonal - not_set",
} as const;
/**
 * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
 */
export type EmploymentHistoryListEmploymentStatus = ClosedEnum<
  typeof EmploymentHistoryListEmploymentStatus
>;

/**
 * The representation of an employee's individual employements.
 */
export type EmploymentHistoryList = {
  /**
   * The employee's start day of work for an employment.
   */
  hireDate?: string | undefined;
  /**
   * The employee's last day of work for an employment.
   */
  terminationDate?: string | undefined;
  /**
   * The boolean flag indicating whether Gusto will file a new hire report for the employee.
   */
  fileNewHireReport?: boolean | undefined;
  /**
   * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
   */
  twoPercentShareholder?: boolean | undefined;
  /**
   * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
   */
  employmentStatus?: EmploymentHistoryListEmploymentStatus | undefined;
};

/** @internal */
export const EmploymentHistoryListEmploymentStatus$inboundSchema:
  z.ZodNativeEnum<typeof EmploymentHistoryListEmploymentStatus> = z.nativeEnum(
    EmploymentHistoryListEmploymentStatus,
  );

/** @internal */
export const EmploymentHistoryListEmploymentStatus$outboundSchema:
  z.ZodNativeEnum<typeof EmploymentHistoryListEmploymentStatus> =
    EmploymentHistoryListEmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentHistoryListEmploymentStatus$ {
  /** @deprecated use `EmploymentHistoryListEmploymentStatus$inboundSchema` instead. */
  export const inboundSchema =
    EmploymentHistoryListEmploymentStatus$inboundSchema;
  /** @deprecated use `EmploymentHistoryListEmploymentStatus$outboundSchema` instead. */
  export const outboundSchema =
    EmploymentHistoryListEmploymentStatus$outboundSchema;
}

/** @internal */
export const EmploymentHistoryList$inboundSchema: z.ZodType<
  EmploymentHistoryList,
  z.ZodTypeDef,
  unknown
> = z.object({
  hire_date: z.string().optional(),
  termination_date: z.string().optional(),
  file_new_hire_report: z.boolean().optional(),
  two_percent_shareholder: z.boolean().optional(),
  employment_status: EmploymentHistoryListEmploymentStatus$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "hire_date": "hireDate",
    "termination_date": "terminationDate",
    "file_new_hire_report": "fileNewHireReport",
    "two_percent_shareholder": "twoPercentShareholder",
    "employment_status": "employmentStatus",
  });
});

/** @internal */
export type EmploymentHistoryList$Outbound = {
  hire_date?: string | undefined;
  termination_date?: string | undefined;
  file_new_hire_report?: boolean | undefined;
  two_percent_shareholder?: boolean | undefined;
  employment_status?: string | undefined;
};

/** @internal */
export const EmploymentHistoryList$outboundSchema: z.ZodType<
  EmploymentHistoryList$Outbound,
  z.ZodTypeDef,
  EmploymentHistoryList
> = z.object({
  hireDate: z.string().optional(),
  terminationDate: z.string().optional(),
  fileNewHireReport: z.boolean().optional(),
  twoPercentShareholder: z.boolean().optional(),
  employmentStatus: EmploymentHistoryListEmploymentStatus$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    hireDate: "hire_date",
    terminationDate: "termination_date",
    fileNewHireReport: "file_new_hire_report",
    twoPercentShareholder: "two_percent_shareholder",
    employmentStatus: "employment_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentHistoryList$ {
  /** @deprecated use `EmploymentHistoryList$inboundSchema` instead. */
  export const inboundSchema = EmploymentHistoryList$inboundSchema;
  /** @deprecated use `EmploymentHistoryList$outboundSchema` instead. */
  export const outboundSchema = EmploymentHistoryList$outboundSchema;
  /** @deprecated use `EmploymentHistoryList$Outbound` instead. */
  export type Outbound = EmploymentHistoryList$Outbound;
}

export function employmentHistoryListToJSON(
  employmentHistoryList: EmploymentHistoryList,
): string {
  return JSON.stringify(
    EmploymentHistoryList$outboundSchema.parse(employmentHistoryList),
  );
}

export function employmentHistoryListFromJSON(
  jsonString: string,
): SafeParseResult<EmploymentHistoryList, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmploymentHistoryList$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmploymentHistoryList' from JSON`,
  );
}
