/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Experience level for this occupation.
 */
export const ExperienceLevel = {
  Novice: "novice",
  Intermediate: "intermediate",
  Average: "average",
  Skilled: "skilled",
  Expert: "expert",
} as const;
/**
 * Experience level for this occupation.
 */
export type ExperienceLevel = ClosedEnum<typeof ExperienceLevel>;

export type Tenth = {
  value?: number | undefined;
  seriesId?: string | undefined;
  note?: string | null | undefined;
};

export type TwentyFiveth = {
  value?: number | undefined;
  seriesId?: string | undefined;
  note?: string | null | undefined;
};

export type Fiftyth = {
  value?: number | undefined;
  seriesId?: string | undefined;
  note?: string | null | undefined;
};

export type SeventyFiveth = {
  value?: number | undefined;
  seriesId?: string | undefined;
  note?: string | null | undefined;
};

export type Ninetyth = {
  value?: number | undefined;
  seriesId?: string | undefined;
  note?: string | null | undefined;
};

/**
 * Salary percentile data for this occupation.
 */
export type Salaries = {
  tenth?: Tenth | undefined;
  twentyFiveth?: TwentyFiveth | undefined;
  fiftyth?: Fiftyth | undefined;
  seventyFiveth?: SeventyFiveth | undefined;
  ninetyth?: Ninetyth | undefined;
};

export type Occupations = {
  /**
   * Bureau of Labor Statistics (BLS) occupation code.
   */
  code: string;
  /**
   * Occupation name.
   */
  name?: string | undefined;
  /**
   * Occupation description.
   */
  description?: string | undefined;
  /**
   * Experience level for this occupation.
   */
  experienceLevel: ExperienceLevel;
  /**
   * Percentage of time spent in this occupation (as decimal string, 0-1).
   */
  timePercentage: string;
  /**
   * Whether this is the primary occupation.
   */
  primary?: boolean | undefined;
  /**
   * Salary percentile data for this occupation.
   */
  salaries?: Salaries | undefined;
};

/**
 * A salary estimate calculation for an S-Corp owner based on occupation, experience level, location, and business revenue.
 */
export type SalaryEstimate = {
  /**
   * The UUID of the salary estimate.
   */
  uuid: string;
  /**
   * The UUID of the employee this salary estimate is for.
   */
  employeeUuid: string | null;
  /**
   * The UUID of the employee job this salary estimate is associated with (once accepted).
   */
  employeeJobUuid?: string | null | undefined;
  /**
   * The annual net revenue of the business used for salary calculations.
   */
  annualNetRevenue: string | null;
  /**
   * The ZIP code used for location-based salary calculations.
   */
  zipCode: string | null;
  /**
   * The calculated reasonable salary estimate in cents. Null if not yet calculated.
   */
  result?: number | null | undefined;
  /**
   * The timestamp when this salary estimate was accepted and finalized.
   */
  acceptedAt?: Date | null | undefined;
  /**
   * The timestamp when this salary estimate was created.
   */
  createdAt: Date;
  /**
   * The timestamp when this salary estimate was last updated.
   */
  updatedAt: Date;
  /**
   * Array of occupations with their experience levels and time allocations.
   */
  occupations: Array<Occupations>;
};

/** @internal */
export const ExperienceLevel$inboundSchema: z.ZodNativeEnum<
  typeof ExperienceLevel
> = z.nativeEnum(ExperienceLevel);

/** @internal */
export const ExperienceLevel$outboundSchema: z.ZodNativeEnum<
  typeof ExperienceLevel
> = ExperienceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperienceLevel$ {
  /** @deprecated use `ExperienceLevel$inboundSchema` instead. */
  export const inboundSchema = ExperienceLevel$inboundSchema;
  /** @deprecated use `ExperienceLevel$outboundSchema` instead. */
  export const outboundSchema = ExperienceLevel$outboundSchema;
}

/** @internal */
export const Tenth$inboundSchema: z.ZodType<Tenth, z.ZodTypeDef, unknown> = z
  .object({
    value: z.number().int().optional(),
    series_id: z.string().optional(),
    note: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "series_id": "seriesId",
    });
  });

/** @internal */
export type Tenth$Outbound = {
  value?: number | undefined;
  series_id?: string | undefined;
  note?: string | null | undefined;
};

/** @internal */
export const Tenth$outboundSchema: z.ZodType<
  Tenth$Outbound,
  z.ZodTypeDef,
  Tenth
> = z.object({
  value: z.number().int().optional(),
  seriesId: z.string().optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    seriesId: "series_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Tenth$ {
  /** @deprecated use `Tenth$inboundSchema` instead. */
  export const inboundSchema = Tenth$inboundSchema;
  /** @deprecated use `Tenth$outboundSchema` instead. */
  export const outboundSchema = Tenth$outboundSchema;
  /** @deprecated use `Tenth$Outbound` instead. */
  export type Outbound = Tenth$Outbound;
}

export function tenthToJSON(tenth: Tenth): string {
  return JSON.stringify(Tenth$outboundSchema.parse(tenth));
}

export function tenthFromJSON(
  jsonString: string,
): SafeParseResult<Tenth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Tenth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Tenth' from JSON`,
  );
}

/** @internal */
export const TwentyFiveth$inboundSchema: z.ZodType<
  TwentyFiveth,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.number().int().optional(),
  series_id: z.string().optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "series_id": "seriesId",
  });
});

/** @internal */
export type TwentyFiveth$Outbound = {
  value?: number | undefined;
  series_id?: string | undefined;
  note?: string | null | undefined;
};

/** @internal */
export const TwentyFiveth$outboundSchema: z.ZodType<
  TwentyFiveth$Outbound,
  z.ZodTypeDef,
  TwentyFiveth
> = z.object({
  value: z.number().int().optional(),
  seriesId: z.string().optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    seriesId: "series_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TwentyFiveth$ {
  /** @deprecated use `TwentyFiveth$inboundSchema` instead. */
  export const inboundSchema = TwentyFiveth$inboundSchema;
  /** @deprecated use `TwentyFiveth$outboundSchema` instead. */
  export const outboundSchema = TwentyFiveth$outboundSchema;
  /** @deprecated use `TwentyFiveth$Outbound` instead. */
  export type Outbound = TwentyFiveth$Outbound;
}

export function twentyFivethToJSON(twentyFiveth: TwentyFiveth): string {
  return JSON.stringify(TwentyFiveth$outboundSchema.parse(twentyFiveth));
}

export function twentyFivethFromJSON(
  jsonString: string,
): SafeParseResult<TwentyFiveth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TwentyFiveth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TwentyFiveth' from JSON`,
  );
}

/** @internal */
export const Fiftyth$inboundSchema: z.ZodType<Fiftyth, z.ZodTypeDef, unknown> =
  z.object({
    value: z.number().int().optional(),
    series_id: z.string().optional(),
    note: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "series_id": "seriesId",
    });
  });

/** @internal */
export type Fiftyth$Outbound = {
  value?: number | undefined;
  series_id?: string | undefined;
  note?: string | null | undefined;
};

/** @internal */
export const Fiftyth$outboundSchema: z.ZodType<
  Fiftyth$Outbound,
  z.ZodTypeDef,
  Fiftyth
> = z.object({
  value: z.number().int().optional(),
  seriesId: z.string().optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    seriesId: "series_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Fiftyth$ {
  /** @deprecated use `Fiftyth$inboundSchema` instead. */
  export const inboundSchema = Fiftyth$inboundSchema;
  /** @deprecated use `Fiftyth$outboundSchema` instead. */
  export const outboundSchema = Fiftyth$outboundSchema;
  /** @deprecated use `Fiftyth$Outbound` instead. */
  export type Outbound = Fiftyth$Outbound;
}

export function fiftythToJSON(fiftyth: Fiftyth): string {
  return JSON.stringify(Fiftyth$outboundSchema.parse(fiftyth));
}

export function fiftythFromJSON(
  jsonString: string,
): SafeParseResult<Fiftyth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Fiftyth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Fiftyth' from JSON`,
  );
}

/** @internal */
export const SeventyFiveth$inboundSchema: z.ZodType<
  SeventyFiveth,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.number().int().optional(),
  series_id: z.string().optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "series_id": "seriesId",
  });
});

/** @internal */
export type SeventyFiveth$Outbound = {
  value?: number | undefined;
  series_id?: string | undefined;
  note?: string | null | undefined;
};

/** @internal */
export const SeventyFiveth$outboundSchema: z.ZodType<
  SeventyFiveth$Outbound,
  z.ZodTypeDef,
  SeventyFiveth
> = z.object({
  value: z.number().int().optional(),
  seriesId: z.string().optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    seriesId: "series_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SeventyFiveth$ {
  /** @deprecated use `SeventyFiveth$inboundSchema` instead. */
  export const inboundSchema = SeventyFiveth$inboundSchema;
  /** @deprecated use `SeventyFiveth$outboundSchema` instead. */
  export const outboundSchema = SeventyFiveth$outboundSchema;
  /** @deprecated use `SeventyFiveth$Outbound` instead. */
  export type Outbound = SeventyFiveth$Outbound;
}

export function seventyFivethToJSON(seventyFiveth: SeventyFiveth): string {
  return JSON.stringify(SeventyFiveth$outboundSchema.parse(seventyFiveth));
}

export function seventyFivethFromJSON(
  jsonString: string,
): SafeParseResult<SeventyFiveth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SeventyFiveth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SeventyFiveth' from JSON`,
  );
}

/** @internal */
export const Ninetyth$inboundSchema: z.ZodType<
  Ninetyth,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.number().int().optional(),
  series_id: z.string().optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "series_id": "seriesId",
  });
});

/** @internal */
export type Ninetyth$Outbound = {
  value?: number | undefined;
  series_id?: string | undefined;
  note?: string | null | undefined;
};

/** @internal */
export const Ninetyth$outboundSchema: z.ZodType<
  Ninetyth$Outbound,
  z.ZodTypeDef,
  Ninetyth
> = z.object({
  value: z.number().int().optional(),
  seriesId: z.string().optional(),
  note: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    seriesId: "series_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Ninetyth$ {
  /** @deprecated use `Ninetyth$inboundSchema` instead. */
  export const inboundSchema = Ninetyth$inboundSchema;
  /** @deprecated use `Ninetyth$outboundSchema` instead. */
  export const outboundSchema = Ninetyth$outboundSchema;
  /** @deprecated use `Ninetyth$Outbound` instead. */
  export type Outbound = Ninetyth$Outbound;
}

export function ninetythToJSON(ninetyth: Ninetyth): string {
  return JSON.stringify(Ninetyth$outboundSchema.parse(ninetyth));
}

export function ninetythFromJSON(
  jsonString: string,
): SafeParseResult<Ninetyth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Ninetyth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Ninetyth' from JSON`,
  );
}

/** @internal */
export const Salaries$inboundSchema: z.ZodType<
  Salaries,
  z.ZodTypeDef,
  unknown
> = z.object({
  "10th": z.lazy(() => Tenth$inboundSchema).optional(),
  "25th": z.lazy(() => TwentyFiveth$inboundSchema).optional(),
  "50th": z.lazy(() => Fiftyth$inboundSchema).optional(),
  "75th": z.lazy(() => SeventyFiveth$inboundSchema).optional(),
  "90th": z.lazy(() => Ninetyth$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "10th": "tenth",
    "25th": "twentyFiveth",
    "50th": "fiftyth",
    "75th": "seventyFiveth",
    "90th": "ninetyth",
  });
});

/** @internal */
export type Salaries$Outbound = {
  "10th"?: Tenth$Outbound | undefined;
  "25th"?: TwentyFiveth$Outbound | undefined;
  "50th"?: Fiftyth$Outbound | undefined;
  "75th"?: SeventyFiveth$Outbound | undefined;
  "90th"?: Ninetyth$Outbound | undefined;
};

/** @internal */
export const Salaries$outboundSchema: z.ZodType<
  Salaries$Outbound,
  z.ZodTypeDef,
  Salaries
> = z.object({
  tenth: z.lazy(() => Tenth$outboundSchema).optional(),
  twentyFiveth: z.lazy(() => TwentyFiveth$outboundSchema).optional(),
  fiftyth: z.lazy(() => Fiftyth$outboundSchema).optional(),
  seventyFiveth: z.lazy(() => SeventyFiveth$outboundSchema).optional(),
  ninetyth: z.lazy(() => Ninetyth$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    tenth: "10th",
    twentyFiveth: "25th",
    fiftyth: "50th",
    seventyFiveth: "75th",
    ninetyth: "90th",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Salaries$ {
  /** @deprecated use `Salaries$inboundSchema` instead. */
  export const inboundSchema = Salaries$inboundSchema;
  /** @deprecated use `Salaries$outboundSchema` instead. */
  export const outboundSchema = Salaries$outboundSchema;
  /** @deprecated use `Salaries$Outbound` instead. */
  export type Outbound = Salaries$Outbound;
}

export function salariesToJSON(salaries: Salaries): string {
  return JSON.stringify(Salaries$outboundSchema.parse(salaries));
}

export function salariesFromJSON(
  jsonString: string,
): SafeParseResult<Salaries, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Salaries$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Salaries' from JSON`,
  );
}

/** @internal */
export const Occupations$inboundSchema: z.ZodType<
  Occupations,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  experience_level: ExperienceLevel$inboundSchema,
  time_percentage: z.string(),
  primary: z.boolean().optional(),
  salaries: z.lazy(() => Salaries$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "experience_level": "experienceLevel",
    "time_percentage": "timePercentage",
  });
});

/** @internal */
export type Occupations$Outbound = {
  code: string;
  name?: string | undefined;
  description?: string | undefined;
  experience_level: string;
  time_percentage: string;
  primary?: boolean | undefined;
  salaries?: Salaries$Outbound | undefined;
};

/** @internal */
export const Occupations$outboundSchema: z.ZodType<
  Occupations$Outbound,
  z.ZodTypeDef,
  Occupations
> = z.object({
  code: z.string(),
  name: z.string().optional(),
  description: z.string().optional(),
  experienceLevel: ExperienceLevel$outboundSchema,
  timePercentage: z.string(),
  primary: z.boolean().optional(),
  salaries: z.lazy(() => Salaries$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    experienceLevel: "experience_level",
    timePercentage: "time_percentage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Occupations$ {
  /** @deprecated use `Occupations$inboundSchema` instead. */
  export const inboundSchema = Occupations$inboundSchema;
  /** @deprecated use `Occupations$outboundSchema` instead. */
  export const outboundSchema = Occupations$outboundSchema;
  /** @deprecated use `Occupations$Outbound` instead. */
  export type Outbound = Occupations$Outbound;
}

export function occupationsToJSON(occupations: Occupations): string {
  return JSON.stringify(Occupations$outboundSchema.parse(occupations));
}

export function occupationsFromJSON(
  jsonString: string,
): SafeParseResult<Occupations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Occupations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Occupations' from JSON`,
  );
}

/** @internal */
export const SalaryEstimate$inboundSchema: z.ZodType<
  SalaryEstimate,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  employee_uuid: z.nullable(z.string()),
  employee_job_uuid: z.nullable(z.string()).optional(),
  annual_net_revenue: z.nullable(z.string()),
  zip_code: z.nullable(z.string()),
  result: z.nullable(z.number().int()).optional(),
  accepted_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  created_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  updated_at: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  occupations: z.array(z.lazy(() => Occupations$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
    "employee_job_uuid": "employeeJobUuid",
    "annual_net_revenue": "annualNetRevenue",
    "zip_code": "zipCode",
    "accepted_at": "acceptedAt",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type SalaryEstimate$Outbound = {
  uuid: string;
  employee_uuid: string | null;
  employee_job_uuid?: string | null | undefined;
  annual_net_revenue: string | null;
  zip_code: string | null;
  result?: number | null | undefined;
  accepted_at?: string | null | undefined;
  created_at: string;
  updated_at: string;
  occupations: Array<Occupations$Outbound>;
};

/** @internal */
export const SalaryEstimate$outboundSchema: z.ZodType<
  SalaryEstimate$Outbound,
  z.ZodTypeDef,
  SalaryEstimate
> = z.object({
  uuid: z.string(),
  employeeUuid: z.nullable(z.string()),
  employeeJobUuid: z.nullable(z.string()).optional(),
  annualNetRevenue: z.nullable(z.string()),
  zipCode: z.nullable(z.string()),
  result: z.nullable(z.number().int()).optional(),
  acceptedAt: z.nullable(z.date().transform(v => v.toISOString())).optional(),
  createdAt: z.date().transform(v => v.toISOString()),
  updatedAt: z.date().transform(v => v.toISOString()),
  occupations: z.array(z.lazy(() => Occupations$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
    employeeJobUuid: "employee_job_uuid",
    annualNetRevenue: "annual_net_revenue",
    zipCode: "zip_code",
    acceptedAt: "accepted_at",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SalaryEstimate$ {
  /** @deprecated use `SalaryEstimate$inboundSchema` instead. */
  export const inboundSchema = SalaryEstimate$inboundSchema;
  /** @deprecated use `SalaryEstimate$outboundSchema` instead. */
  export const outboundSchema = SalaryEstimate$outboundSchema;
  /** @deprecated use `SalaryEstimate$Outbound` instead. */
  export type Outbound = SalaryEstimate$Outbound;
}

export function salaryEstimateToJSON(salaryEstimate: SalaryEstimate): string {
  return JSON.stringify(SalaryEstimate$outboundSchema.parse(salaryEstimate));
}

export function salaryEstimateFromJSON(
  jsonString: string,
): SafeParseResult<SalaryEstimate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SalaryEstimate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SalaryEstimate' from JSON`,
  );
}
