/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  DetailedPaymentAccountSplit,
  DetailedPaymentAccountSplit$inboundSchema,
  DetailedPaymentAccountSplit$Outbound,
  DetailedPaymentAccountSplit$outboundSchema,
} from "./detailedpaymentaccountsplit.js";

/**
 * The type of payment method.
 */
export const EmployeePaymentDetailPaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The type of payment method.
 */
export type EmployeePaymentDetailPaymentMethod = ClosedEnum<
  typeof EmployeePaymentDetailPaymentMethod
>;

/**
 * How the payment is split. This field is applicable when `payment_method` is "Direct Deposit".
 */
export const SplitBy = {
  Percentage: "Percentage",
  Amount: "Amount",
} as const;
/**
 * How the payment is split. This field is applicable when `payment_method` is "Direct Deposit".
 */
export type SplitBy = ClosedEnum<typeof SplitBy>;

/**
 * Represents an employee's payment method details.
 */
export type EmployeePaymentDetail = {
  /**
   * The UUID of the employee.
   */
  employeeUuid?: string | undefined;
  /**
   * The type of payment method.
   */
  paymentMethod?: EmployeePaymentDetailPaymentMethod | undefined;
  /**
   * How the payment is split. This field is applicable when `payment_method` is "Direct Deposit".
   */
  splitBy?: SplitBy | null | undefined;
  /**
   * An array of payment splits. This field is applicable when `payment_method` is "Direct Deposit".
   */
  splits?: Array<DetailedPaymentAccountSplit> | null | undefined;
};

/** @internal */
export const EmployeePaymentDetailPaymentMethod$inboundSchema: z.ZodNativeEnum<
  typeof EmployeePaymentDetailPaymentMethod
> = z.nativeEnum(EmployeePaymentDetailPaymentMethod);

/** @internal */
export const EmployeePaymentDetailPaymentMethod$outboundSchema: z.ZodNativeEnum<
  typeof EmployeePaymentDetailPaymentMethod
> = EmployeePaymentDetailPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeePaymentDetailPaymentMethod$ {
  /** @deprecated use `EmployeePaymentDetailPaymentMethod$inboundSchema` instead. */
  export const inboundSchema = EmployeePaymentDetailPaymentMethod$inboundSchema;
  /** @deprecated use `EmployeePaymentDetailPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    EmployeePaymentDetailPaymentMethod$outboundSchema;
}

/** @internal */
export const SplitBy$inboundSchema: z.ZodNativeEnum<typeof SplitBy> = z
  .nativeEnum(SplitBy);

/** @internal */
export const SplitBy$outboundSchema: z.ZodNativeEnum<typeof SplitBy> =
  SplitBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SplitBy$ {
  /** @deprecated use `SplitBy$inboundSchema` instead. */
  export const inboundSchema = SplitBy$inboundSchema;
  /** @deprecated use `SplitBy$outboundSchema` instead. */
  export const outboundSchema = SplitBy$outboundSchema;
}

/** @internal */
export const EmployeePaymentDetail$inboundSchema: z.ZodType<
  EmployeePaymentDetail,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_uuid: z.string().optional(),
  payment_method: EmployeePaymentDetailPaymentMethod$inboundSchema.optional(),
  split_by: z.nullable(SplitBy$inboundSchema).optional(),
  splits: z.nullable(z.array(DetailedPaymentAccountSplit$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
    "payment_method": "paymentMethod",
    "split_by": "splitBy",
  });
});

/** @internal */
export type EmployeePaymentDetail$Outbound = {
  employee_uuid?: string | undefined;
  payment_method?: string | undefined;
  split_by?: string | null | undefined;
  splits?: Array<DetailedPaymentAccountSplit$Outbound> | null | undefined;
};

/** @internal */
export const EmployeePaymentDetail$outboundSchema: z.ZodType<
  EmployeePaymentDetail$Outbound,
  z.ZodTypeDef,
  EmployeePaymentDetail
> = z.object({
  employeeUuid: z.string().optional(),
  paymentMethod: EmployeePaymentDetailPaymentMethod$outboundSchema.optional(),
  splitBy: z.nullable(SplitBy$outboundSchema).optional(),
  splits: z.nullable(z.array(DetailedPaymentAccountSplit$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
    paymentMethod: "payment_method",
    splitBy: "split_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeePaymentDetail$ {
  /** @deprecated use `EmployeePaymentDetail$inboundSchema` instead. */
  export const inboundSchema = EmployeePaymentDetail$inboundSchema;
  /** @deprecated use `EmployeePaymentDetail$outboundSchema` instead. */
  export const outboundSchema = EmployeePaymentDetail$outboundSchema;
  /** @deprecated use `EmployeePaymentDetail$Outbound` instead. */
  export type Outbound = EmployeePaymentDetail$Outbound;
}

export function employeePaymentDetailToJSON(
  employeePaymentDetail: EmployeePaymentDetail,
): string {
  return JSON.stringify(
    EmployeePaymentDetail$outboundSchema.parse(employeePaymentDetail),
  );
}

export function employeePaymentDetailFromJSON(
  jsonString: string,
): SafeParseResult<EmployeePaymentDetail, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeePaymentDetail$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeePaymentDetail' from JSON`,
  );
}
