/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  collectExtraKeys as collectExtraKeys$,
  safeParse,
} from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * single entity
 */
export type MetadataWithOneEntity = {
  /**
   * Name of the entity that the error corresponds to.
   */
  entityType?: string | undefined;
  /**
   * Unique identifier for the entity.
   */
  entityUuid?: string | undefined;
  validFrom?: string | null | undefined;
  validUpTo?: string | null | undefined;
  key?: string | null | undefined;
  state?: string | null | undefined;
  additionalProperties?: { [k: string]: any };
};

/** @internal */
export const MetadataWithOneEntity$inboundSchema: z.ZodType<
  MetadataWithOneEntity,
  z.ZodTypeDef,
  unknown
> = collectExtraKeys$(
  z.object({
    entity_type: z.string().optional(),
    entity_uuid: z.string().optional(),
    valid_from: z.nullable(z.string()).optional(),
    valid_up_to: z.nullable(z.string()).optional(),
    key: z.nullable(z.string()).optional(),
    state: z.nullable(z.string()).optional(),
  }).catchall(z.any()),
  "additionalProperties",
  true,
).transform((v) => {
  return remap$(v, {
    "entity_type": "entityType",
    "entity_uuid": "entityUuid",
    "valid_from": "validFrom",
    "valid_up_to": "validUpTo",
  });
});

/** @internal */
export type MetadataWithOneEntity$Outbound = {
  entity_type?: string | undefined;
  entity_uuid?: string | undefined;
  valid_from?: string | null | undefined;
  valid_up_to?: string | null | undefined;
  key?: string | null | undefined;
  state?: string | null | undefined;
  [additionalProperties: string]: unknown;
};

/** @internal */
export const MetadataWithOneEntity$outboundSchema: z.ZodType<
  MetadataWithOneEntity$Outbound,
  z.ZodTypeDef,
  MetadataWithOneEntity
> = z.object({
  entityType: z.string().optional(),
  entityUuid: z.string().optional(),
  validFrom: z.nullable(z.string()).optional(),
  validUpTo: z.nullable(z.string()).optional(),
  key: z.nullable(z.string()).optional(),
  state: z.nullable(z.string()).optional(),
  additionalProperties: z.record(z.any()),
}).transform((v) => {
  return {
    ...v.additionalProperties,
    ...remap$(v, {
      entityType: "entity_type",
      entityUuid: "entity_uuid",
      validFrom: "valid_from",
      validUpTo: "valid_up_to",
      additionalProperties: null,
    }),
  };
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MetadataWithOneEntity$ {
  /** @deprecated use `MetadataWithOneEntity$inboundSchema` instead. */
  export const inboundSchema = MetadataWithOneEntity$inboundSchema;
  /** @deprecated use `MetadataWithOneEntity$outboundSchema` instead. */
  export const outboundSchema = MetadataWithOneEntity$outboundSchema;
  /** @deprecated use `MetadataWithOneEntity$Outbound` instead. */
  export type Outbound = MetadataWithOneEntity$Outbound;
}

export function metadataWithOneEntityToJSON(
  metadataWithOneEntity: MetadataWithOneEntity,
): string {
  return JSON.stringify(
    MetadataWithOneEntity$outboundSchema.parse(metadataWithOneEntity),
  );
}

export function metadataWithOneEntityFromJSON(
  jsonString: string,
): SafeParseResult<MetadataWithOneEntity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MetadataWithOneEntity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MetadataWithOneEntity' from JSON`,
  );
}
