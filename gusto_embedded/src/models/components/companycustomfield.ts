/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CustomFieldType,
  CustomFieldType$inboundSchema,
  CustomFieldType$outboundSchema,
} from "./customfieldtype.js";

/**
 * A custom field on a company
 */
export type CompanyCustomField = {
  /**
   * UUID of the company custom field
   */
  uuid: string;
  /**
   * Name of the company custom field
   */
  name: string;
  /**
   * Input type for the custom field.
   */
  type: CustomFieldType;
  /**
   * Description of the company custom field
   */
  description?: string | null | undefined;
  /**
   * An array of options for fields of type radio. Otherwise, null.
   */
  selectionOptions?: Array<string> | null | undefined;
};

/** @internal */
export const CompanyCustomField$inboundSchema: z.ZodType<
  CompanyCustomField,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  name: z.string(),
  type: CustomFieldType$inboundSchema,
  description: z.nullable(z.string()).optional(),
  selection_options: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    "selection_options": "selectionOptions",
  });
});

/** @internal */
export type CompanyCustomField$Outbound = {
  uuid: string;
  name: string;
  type: string;
  description?: string | null | undefined;
  selection_options?: Array<string> | null | undefined;
};

/** @internal */
export const CompanyCustomField$outboundSchema: z.ZodType<
  CompanyCustomField$Outbound,
  z.ZodTypeDef,
  CompanyCustomField
> = z.object({
  uuid: z.string(),
  name: z.string(),
  type: CustomFieldType$outboundSchema,
  description: z.nullable(z.string()).optional(),
  selectionOptions: z.nullable(z.array(z.string())).optional(),
}).transform((v) => {
  return remap$(v, {
    selectionOptions: "selection_options",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyCustomField$ {
  /** @deprecated use `CompanyCustomField$inboundSchema` instead. */
  export const inboundSchema = CompanyCustomField$inboundSchema;
  /** @deprecated use `CompanyCustomField$outboundSchema` instead. */
  export const outboundSchema = CompanyCustomField$outboundSchema;
  /** @deprecated use `CompanyCustomField$Outbound` instead. */
  export type Outbound = CompanyCustomField$Outbound;
}

export function companyCustomFieldToJSON(
  companyCustomField: CompanyCustomField,
): string {
  return JSON.stringify(
    CompanyCustomField$outboundSchema.parse(companyCustomField),
  );
}

export function companyCustomFieldFromJSON(
  jsonString: string,
): SafeParseResult<CompanyCustomField, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyCustomField$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyCustomField' from JSON`,
  );
}
