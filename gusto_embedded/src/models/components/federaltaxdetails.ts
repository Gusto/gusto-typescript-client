/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of EIN verification:
 *
 * @remarks
 * - `pending`: The EIN verification process has not completed (or the company does not yet have an EIN).
 * - `verified`: The EIN has been successfully verified as a valid EIN with the IRS.
 * - `failed`: The company's EIN did not pass verification. Common issues are being entered incorrectly or not matching the company's legal name.
 */
export const FederalTaxDetailsStatus = {
  Pending: "pending",
  Verified: "verified",
  Failed: "failed",
} as const;
/**
 * The status of EIN verification:
 *
 * @remarks
 * - `pending`: The EIN verification process has not completed (or the company does not yet have an EIN).
 * - `verified`: The EIN has been successfully verified as a valid EIN with the IRS.
 * - `failed`: The company's EIN did not pass verification. Common issues are being entered incorrectly or not matching the company's legal name.
 */
export type FederalTaxDetailsStatus = ClosedEnum<
  typeof FederalTaxDetailsStatus
>;

/**
 * Information about the status of verifying the company's Employer Identification Number (EIN)
 */
export type EinVerification = {
  /**
   * The status of EIN verification:
   *
   * @remarks
   * - `pending`: The EIN verification process has not completed (or the company does not yet have an EIN).
   * - `verified`: The EIN has been successfully verified as a valid EIN with the IRS.
   * - `failed`: The company's EIN did not pass verification. Common issues are being entered incorrectly or not matching the company's legal name.
   */
  status?: FederalTaxDetailsStatus | undefined;
};

/**
 * Example response
 */
export type FederalTaxDetails = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * What type of tax entity the company is. One of:
   *
   * @remarks
   * - C-Corporation
   * - S-Corporation
   * - Sole proprietor
   * - LLC
   * - LLP
   * - Limited partnership
   * - Co-ownership
   * - Association
   * - Trusteeship
   * - General partnership
   * - Joint venture
   * - Non-Profit
   */
  taxPayerType?: string | null | undefined;
  /**
   * Whether the company is taxed as an S-Corporation. Tax payer types that may be taxed as an S-Corporation include:
   *
   * @remarks
   * - S-Corporation
   * - C-Corporation
   * - LLC
   */
  taxableAsScorp?: boolean | undefined;
  /**
   * The form used by the company for federal tax filing. One of:
   *
   * @remarks
   * - 941 (Quarterly federal tax return form)
   * - 944 (Annual federal tax return form)
   */
  filingForm?: string | undefined;
  /**
   * Whether company's Employer Identification Number (EIN) is present
   */
  hasEin?: boolean | undefined;
  /**
   * Whether the EIN has been successfully verified as a valid EIN with the IRS.
   */
  einVerified?: boolean | undefined;
  /**
   * Information about the status of verifying the company's Employer Identification Number (EIN)
   */
  einVerification?: EinVerification | undefined;
  /**
   * The legal name of the company
   */
  legalName?: string | undefined;
  /**
   * The date that these details took effect.
   */
  effectiveDate?: string | undefined;
  /**
   * How often the company sends money to the IRS. One of:
   *
   * @remarks
   *   - Semiweekly
   *   - Monthly
   */
  depositSchedule?: string | undefined;
};

/** @internal */
export const FederalTaxDetailsStatus$inboundSchema: z.ZodNativeEnum<
  typeof FederalTaxDetailsStatus
> = z.nativeEnum(FederalTaxDetailsStatus);

/** @internal */
export const FederalTaxDetailsStatus$outboundSchema: z.ZodNativeEnum<
  typeof FederalTaxDetailsStatus
> = FederalTaxDetailsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederalTaxDetailsStatus$ {
  /** @deprecated use `FederalTaxDetailsStatus$inboundSchema` instead. */
  export const inboundSchema = FederalTaxDetailsStatus$inboundSchema;
  /** @deprecated use `FederalTaxDetailsStatus$outboundSchema` instead. */
  export const outboundSchema = FederalTaxDetailsStatus$outboundSchema;
}

/** @internal */
export const EinVerification$inboundSchema: z.ZodType<
  EinVerification,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: FederalTaxDetailsStatus$inboundSchema.optional(),
});

/** @internal */
export type EinVerification$Outbound = {
  status?: string | undefined;
};

/** @internal */
export const EinVerification$outboundSchema: z.ZodType<
  EinVerification$Outbound,
  z.ZodTypeDef,
  EinVerification
> = z.object({
  status: FederalTaxDetailsStatus$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EinVerification$ {
  /** @deprecated use `EinVerification$inboundSchema` instead. */
  export const inboundSchema = EinVerification$inboundSchema;
  /** @deprecated use `EinVerification$outboundSchema` instead. */
  export const outboundSchema = EinVerification$outboundSchema;
  /** @deprecated use `EinVerification$Outbound` instead. */
  export type Outbound = EinVerification$Outbound;
}

export function einVerificationToJSON(
  einVerification: EinVerification,
): string {
  return JSON.stringify(EinVerification$outboundSchema.parse(einVerification));
}

export function einVerificationFromJSON(
  jsonString: string,
): SafeParseResult<EinVerification, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EinVerification$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EinVerification' from JSON`,
  );
}

/** @internal */
export const FederalTaxDetails$inboundSchema: z.ZodType<
  FederalTaxDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
  tax_payer_type: z.nullable(z.string()).optional(),
  taxable_as_scorp: z.boolean().optional(),
  filing_form: z.string().optional(),
  has_ein: z.boolean().optional(),
  ein_verified: z.boolean().optional(),
  ein_verification: z.lazy(() => EinVerification$inboundSchema).optional(),
  legal_name: z.string().optional(),
  effective_date: z.string().optional(),
  deposit_schedule: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "tax_payer_type": "taxPayerType",
    "taxable_as_scorp": "taxableAsScorp",
    "filing_form": "filingForm",
    "has_ein": "hasEin",
    "ein_verified": "einVerified",
    "ein_verification": "einVerification",
    "legal_name": "legalName",
    "effective_date": "effectiveDate",
    "deposit_schedule": "depositSchedule",
  });
});

/** @internal */
export type FederalTaxDetails$Outbound = {
  version?: string | undefined;
  tax_payer_type?: string | null | undefined;
  taxable_as_scorp?: boolean | undefined;
  filing_form?: string | undefined;
  has_ein?: boolean | undefined;
  ein_verified?: boolean | undefined;
  ein_verification?: EinVerification$Outbound | undefined;
  legal_name?: string | undefined;
  effective_date?: string | undefined;
  deposit_schedule?: string | undefined;
};

/** @internal */
export const FederalTaxDetails$outboundSchema: z.ZodType<
  FederalTaxDetails$Outbound,
  z.ZodTypeDef,
  FederalTaxDetails
> = z.object({
  version: z.string().optional(),
  taxPayerType: z.nullable(z.string()).optional(),
  taxableAsScorp: z.boolean().optional(),
  filingForm: z.string().optional(),
  hasEin: z.boolean().optional(),
  einVerified: z.boolean().optional(),
  einVerification: z.lazy(() => EinVerification$outboundSchema).optional(),
  legalName: z.string().optional(),
  effectiveDate: z.string().optional(),
  depositSchedule: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    taxPayerType: "tax_payer_type",
    taxableAsScorp: "taxable_as_scorp",
    filingForm: "filing_form",
    hasEin: "has_ein",
    einVerified: "ein_verified",
    einVerification: "ein_verification",
    legalName: "legal_name",
    effectiveDate: "effective_date",
    depositSchedule: "deposit_schedule",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FederalTaxDetails$ {
  /** @deprecated use `FederalTaxDetails$inboundSchema` instead. */
  export const inboundSchema = FederalTaxDetails$inboundSchema;
  /** @deprecated use `FederalTaxDetails$outboundSchema` instead. */
  export const outboundSchema = FederalTaxDetails$outboundSchema;
  /** @deprecated use `FederalTaxDetails$Outbound` instead. */
  export type Outbound = FederalTaxDetails$Outbound;
}

export function federalTaxDetailsToJSON(
  federalTaxDetails: FederalTaxDetails,
): string {
  return JSON.stringify(
    FederalTaxDetails$outboundSchema.parse(federalTaxDetails),
  );
}

export function federalTaxDetailsFromJSON(
  jsonString: string,
): SafeParseResult<FederalTaxDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FederalTaxDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FederalTaxDetails' from JSON`,
  );
}
