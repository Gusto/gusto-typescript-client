/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Name of the parent resource of the described entity.
 */
export const ResourceType = {
  Company: "Company",
} as const;
/**
 * Name of the parent resource of the described entity.
 */
export type ResourceType = ClosedEnum<typeof ResourceType>;

/**
 * Representation of an Event
 */
export type Event = {
  /**
   * Unique identifier for the event.
   */
  uuid: string;
  /**
   * Description of the event (e.g., payroll.submitted, or company.form.signed).
   */
  eventType?: string | undefined;
  /**
   * Name of the parent resource of the described entity.
   */
  resourceType?: ResourceType | undefined;
  /**
   * Unique identifier for the parent resource.
   */
  resourceUuid?: string | undefined;
  /**
   * Name of the entity that the event corresponds to.
   */
  entityType?: string | undefined;
  /**
   * Unique identifier for the entity.
   */
  entityUuid?: string | undefined;
  /**
   * Time at which this event was created. Measured in seconds since the Unix epoch.
   */
  timestamp?: number | undefined;
};

/** @internal */
export const ResourceType$inboundSchema: z.ZodNativeEnum<typeof ResourceType> =
  z.nativeEnum(ResourceType);

/** @internal */
export const ResourceType$outboundSchema: z.ZodNativeEnum<typeof ResourceType> =
  ResourceType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceType$ {
  /** @deprecated use `ResourceType$inboundSchema` instead. */
  export const inboundSchema = ResourceType$inboundSchema;
  /** @deprecated use `ResourceType$outboundSchema` instead. */
  export const outboundSchema = ResourceType$outboundSchema;
}

/** @internal */
export const Event$inboundSchema: z.ZodType<Event, z.ZodTypeDef, unknown> = z
  .object({
    uuid: z.string(),
    event_type: z.string().optional(),
    resource_type: ResourceType$inboundSchema.optional(),
    resource_uuid: z.string().optional(),
    entity_type: z.string().optional(),
    entity_uuid: z.string().optional(),
    timestamp: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "event_type": "eventType",
      "resource_type": "resourceType",
      "resource_uuid": "resourceUuid",
      "entity_type": "entityType",
      "entity_uuid": "entityUuid",
    });
  });

/** @internal */
export type Event$Outbound = {
  uuid: string;
  event_type?: string | undefined;
  resource_type?: string | undefined;
  resource_uuid?: string | undefined;
  entity_type?: string | undefined;
  entity_uuid?: string | undefined;
  timestamp?: number | undefined;
};

/** @internal */
export const Event$outboundSchema: z.ZodType<
  Event$Outbound,
  z.ZodTypeDef,
  Event
> = z.object({
  uuid: z.string(),
  eventType: z.string().optional(),
  resourceType: ResourceType$outboundSchema.optional(),
  resourceUuid: z.string().optional(),
  entityType: z.string().optional(),
  entityUuid: z.string().optional(),
  timestamp: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    eventType: "event_type",
    resourceType: "resource_type",
    resourceUuid: "resource_uuid",
    entityType: "entity_type",
    entityUuid: "entity_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Event$ {
  /** @deprecated use `Event$inboundSchema` instead. */
  export const inboundSchema = Event$inboundSchema;
  /** @deprecated use `Event$outboundSchema` instead. */
  export const outboundSchema = Event$outboundSchema;
  /** @deprecated use `Event$Outbound` instead. */
  export type Outbound = Event$Outbound;
}

export function eventToJSON(event: Event): string {
  return JSON.stringify(Event$outboundSchema.parse(event));
}

export function eventFromJSON(
  jsonString: string,
): SafeParseResult<Event, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Event$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Event' from JSON`,
  );
}
