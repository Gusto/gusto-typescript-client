/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of information request
 */
export const InformationRequestType = {
  CompanyOnboarding: "company_onboarding",
  AccountProtection: "account_protection",
  PaymentRequest: "payment_request",
  PaymentError: "payment_error",
} as const;
/**
 * The type of information request
 */
export type InformationRequestType = ClosedEnum<typeof InformationRequestType>;

/**
 * The status of the information request
 */
export const InformationRequestStatus = {
  PendingResponse: "pending_response",
  PendingReview: "pending_review",
  Approved: "approved",
} as const;
/**
 * The status of the information request
 */
export type InformationRequestStatus = ClosedEnum<
  typeof InformationRequestStatus
>;

/**
 * Representation of an information request
 */
export type InformationRequest = {
  /**
   * Unique identifier of an information request
   */
  uuid?: string | undefined;
  /**
   * Unique identifier of the company to which the information requests belongs
   */
  companyUuid?: string | undefined;
  /**
   * The type of information request
   */
  type?: InformationRequestType | null | undefined;
  /**
   * The status of the information request
   */
  status?: InformationRequestStatus | undefined;
  /**
   * If true, this information request is blocking payroll, and may require response or requires review from our Risk Ops team.
   */
  blockingPayroll?: boolean | undefined;
};

/** @internal */
export const InformationRequestType$inboundSchema: z.ZodNativeEnum<
  typeof InformationRequestType
> = z.nativeEnum(InformationRequestType);

/** @internal */
export const InformationRequestType$outboundSchema: z.ZodNativeEnum<
  typeof InformationRequestType
> = InformationRequestType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InformationRequestType$ {
  /** @deprecated use `InformationRequestType$inboundSchema` instead. */
  export const inboundSchema = InformationRequestType$inboundSchema;
  /** @deprecated use `InformationRequestType$outboundSchema` instead. */
  export const outboundSchema = InformationRequestType$outboundSchema;
}

/** @internal */
export const InformationRequestStatus$inboundSchema: z.ZodNativeEnum<
  typeof InformationRequestStatus
> = z.nativeEnum(InformationRequestStatus);

/** @internal */
export const InformationRequestStatus$outboundSchema: z.ZodNativeEnum<
  typeof InformationRequestStatus
> = InformationRequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InformationRequestStatus$ {
  /** @deprecated use `InformationRequestStatus$inboundSchema` instead. */
  export const inboundSchema = InformationRequestStatus$inboundSchema;
  /** @deprecated use `InformationRequestStatus$outboundSchema` instead. */
  export const outboundSchema = InformationRequestStatus$outboundSchema;
}

/** @internal */
export const InformationRequest$inboundSchema: z.ZodType<
  InformationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  company_uuid: z.string().optional(),
  type: z.nullable(InformationRequestType$inboundSchema).optional(),
  status: InformationRequestStatus$inboundSchema.optional(),
  blocking_payroll: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "blocking_payroll": "blockingPayroll",
  });
});

/** @internal */
export type InformationRequest$Outbound = {
  uuid?: string | undefined;
  company_uuid?: string | undefined;
  type?: string | null | undefined;
  status?: string | undefined;
  blocking_payroll?: boolean | undefined;
};

/** @internal */
export const InformationRequest$outboundSchema: z.ZodType<
  InformationRequest$Outbound,
  z.ZodTypeDef,
  InformationRequest
> = z.object({
  uuid: z.string().optional(),
  companyUuid: z.string().optional(),
  type: z.nullable(InformationRequestType$outboundSchema).optional(),
  status: InformationRequestStatus$outboundSchema.optional(),
  blockingPayroll: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    blockingPayroll: "blocking_payroll",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InformationRequest$ {
  /** @deprecated use `InformationRequest$inboundSchema` instead. */
  export const inboundSchema = InformationRequest$inboundSchema;
  /** @deprecated use `InformationRequest$outboundSchema` instead. */
  export const outboundSchema = InformationRequest$outboundSchema;
  /** @deprecated use `InformationRequest$Outbound` instead. */
  export type Outbound = InformationRequest$Outbound;
}

export function informationRequestToJSON(
  informationRequest: InformationRequest,
): string {
  return JSON.stringify(
    InformationRequest$outboundSchema.parse(informationRequest),
  );
}

export function informationRequestFromJSON(
  jsonString: string,
): SafeParseResult<InformationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => InformationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'InformationRequest' from JSON`,
  );
}
