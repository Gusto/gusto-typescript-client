/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PossibleLiabilities = {
  /**
   * Liability amount.
   */
  liabilityAmount?: string | undefined;
  /**
   * The external payroll check date.
   */
  payrollCheckDate?: string | null | undefined;
  /**
   * The UUID of the external payroll.
   */
  externalPayrollUuid?: string | null | undefined;
};

/**
 * Example response
 */
export type TaxLiabilitiesSelections = {
  /**
   * The ID of the tax.
   */
  taxId?: number | undefined;
  /**
   * The name of the tax.
   */
  taxName?: string | undefined;
  /**
   * The UUID of last unpaid external payroll.
   */
  lastUnpaidExternalPayrollUuid?: string | null | undefined;
  /**
   * Possible tax liabilities selections.
   */
  possibleLiabilities?: Array<PossibleLiabilities> | undefined;
};

/** @internal */
export const PossibleLiabilities$inboundSchema: z.ZodType<
  PossibleLiabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  liability_amount: z.string().optional(),
  payroll_check_date: z.nullable(z.string()).optional(),
  external_payroll_uuid: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "liability_amount": "liabilityAmount",
    "payroll_check_date": "payrollCheckDate",
    "external_payroll_uuid": "externalPayrollUuid",
  });
});

/** @internal */
export type PossibleLiabilities$Outbound = {
  liability_amount?: string | undefined;
  payroll_check_date?: string | null | undefined;
  external_payroll_uuid?: string | null | undefined;
};

/** @internal */
export const PossibleLiabilities$outboundSchema: z.ZodType<
  PossibleLiabilities$Outbound,
  z.ZodTypeDef,
  PossibleLiabilities
> = z.object({
  liabilityAmount: z.string().optional(),
  payrollCheckDate: z.nullable(z.string()).optional(),
  externalPayrollUuid: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    liabilityAmount: "liability_amount",
    payrollCheckDate: "payroll_check_date",
    externalPayrollUuid: "external_payroll_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PossibleLiabilities$ {
  /** @deprecated use `PossibleLiabilities$inboundSchema` instead. */
  export const inboundSchema = PossibleLiabilities$inboundSchema;
  /** @deprecated use `PossibleLiabilities$outboundSchema` instead. */
  export const outboundSchema = PossibleLiabilities$outboundSchema;
  /** @deprecated use `PossibleLiabilities$Outbound` instead. */
  export type Outbound = PossibleLiabilities$Outbound;
}

export function possibleLiabilitiesToJSON(
  possibleLiabilities: PossibleLiabilities,
): string {
  return JSON.stringify(
    PossibleLiabilities$outboundSchema.parse(possibleLiabilities),
  );
}

export function possibleLiabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<PossibleLiabilities, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PossibleLiabilities$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PossibleLiabilities' from JSON`,
  );
}

/** @internal */
export const TaxLiabilitiesSelections$inboundSchema: z.ZodType<
  TaxLiabilitiesSelections,
  z.ZodTypeDef,
  unknown
> = z.object({
  tax_id: z.number().int().optional(),
  tax_name: z.string().optional(),
  last_unpaid_external_payroll_uuid: z.nullable(z.string()).optional(),
  possible_liabilities: z.array(z.lazy(() => PossibleLiabilities$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "tax_id": "taxId",
    "tax_name": "taxName",
    "last_unpaid_external_payroll_uuid": "lastUnpaidExternalPayrollUuid",
    "possible_liabilities": "possibleLiabilities",
  });
});

/** @internal */
export type TaxLiabilitiesSelections$Outbound = {
  tax_id?: number | undefined;
  tax_name?: string | undefined;
  last_unpaid_external_payroll_uuid?: string | null | undefined;
  possible_liabilities?: Array<PossibleLiabilities$Outbound> | undefined;
};

/** @internal */
export const TaxLiabilitiesSelections$outboundSchema: z.ZodType<
  TaxLiabilitiesSelections$Outbound,
  z.ZodTypeDef,
  TaxLiabilitiesSelections
> = z.object({
  taxId: z.number().int().optional(),
  taxName: z.string().optional(),
  lastUnpaidExternalPayrollUuid: z.nullable(z.string()).optional(),
  possibleLiabilities: z.array(z.lazy(() => PossibleLiabilities$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    taxId: "tax_id",
    taxName: "tax_name",
    lastUnpaidExternalPayrollUuid: "last_unpaid_external_payroll_uuid",
    possibleLiabilities: "possible_liabilities",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxLiabilitiesSelections$ {
  /** @deprecated use `TaxLiabilitiesSelections$inboundSchema` instead. */
  export const inboundSchema = TaxLiabilitiesSelections$inboundSchema;
  /** @deprecated use `TaxLiabilitiesSelections$outboundSchema` instead. */
  export const outboundSchema = TaxLiabilitiesSelections$outboundSchema;
  /** @deprecated use `TaxLiabilitiesSelections$Outbound` instead. */
  export type Outbound = TaxLiabilitiesSelections$Outbound;
}

export function taxLiabilitiesSelectionsToJSON(
  taxLiabilitiesSelections: TaxLiabilitiesSelections,
): string {
  return JSON.stringify(
    TaxLiabilitiesSelections$outboundSchema.parse(taxLiabilitiesSelections),
  );
}

export function taxLiabilitiesSelectionsFromJSON(
  jsonString: string,
): SafeParseResult<TaxLiabilitiesSelections, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TaxLiabilitiesSelections$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TaxLiabilitiesSelections' from JSON`,
  );
}
