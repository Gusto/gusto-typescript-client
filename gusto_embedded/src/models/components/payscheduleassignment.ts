/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PayScheduleAssignmentDepartment,
  PayScheduleAssignmentDepartment$inboundSchema,
  PayScheduleAssignmentDepartment$Outbound,
  PayScheduleAssignmentDepartment$outboundSchema,
} from "./payscheduleassignmentdepartment.js";
import {
  PayScheduleAssignmentEmployee,
  PayScheduleAssignmentEmployee$inboundSchema,
  PayScheduleAssignmentEmployee$Outbound,
  PayScheduleAssignmentEmployee$outboundSchema,
} from "./payscheduleassignmentemployee.js";

/**
 * The pay schedule assignment type.
 */
export const Type = {
  Single: "single",
  HourlySalaried: "hourly_salaried",
  ByEmployee: "by_employee",
  ByDepartment: "by_department",
} as const;
/**
 * The pay schedule assignment type.
 */
export type Type = ClosedEnum<typeof Type>;

/**
 * The representation of a pay schedule assignment.
 */
export type PayScheduleAssignment = {
  /**
   * The pay schedule assignment type.
   */
  type?: Type | null | undefined;
  /**
   * Pay schedule for hourly employees.
   */
  hourlyPayScheduleUuid?: string | null | undefined;
  /**
   * Pay schedule for salaried employees.
   */
  salariedPayScheduleUuid?: string | null | undefined;
  /**
   * Default pay schedule for employees.
   */
  defaultPayScheduleUuid?: string | null | undefined;
  /**
   * List of employees and their pay schedules.
   */
  employees?: Array<PayScheduleAssignmentEmployee> | null | undefined;
  /**
   * List of departments and their pay schedules.
   */
  departments?: Array<PayScheduleAssignmentDepartment> | null | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const PayScheduleAssignment$inboundSchema: z.ZodType<
  PayScheduleAssignment,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.nullable(Type$inboundSchema).optional(),
  hourly_pay_schedule_uuid: z.nullable(z.string()).optional(),
  salaried_pay_schedule_uuid: z.nullable(z.string()).optional(),
  default_pay_schedule_uuid: z.nullable(z.string()).optional(),
  employees: z.nullable(z.array(PayScheduleAssignmentEmployee$inboundSchema))
    .optional(),
  departments: z.nullable(
    z.array(PayScheduleAssignmentDepartment$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "hourly_pay_schedule_uuid": "hourlyPayScheduleUuid",
    "salaried_pay_schedule_uuid": "salariedPayScheduleUuid",
    "default_pay_schedule_uuid": "defaultPayScheduleUuid",
  });
});

/** @internal */
export type PayScheduleAssignment$Outbound = {
  type?: string | null | undefined;
  hourly_pay_schedule_uuid?: string | null | undefined;
  salaried_pay_schedule_uuid?: string | null | undefined;
  default_pay_schedule_uuid?: string | null | undefined;
  employees?: Array<PayScheduleAssignmentEmployee$Outbound> | null | undefined;
  departments?:
    | Array<PayScheduleAssignmentDepartment$Outbound>
    | null
    | undefined;
};

/** @internal */
export const PayScheduleAssignment$outboundSchema: z.ZodType<
  PayScheduleAssignment$Outbound,
  z.ZodTypeDef,
  PayScheduleAssignment
> = z.object({
  type: z.nullable(Type$outboundSchema).optional(),
  hourlyPayScheduleUuid: z.nullable(z.string()).optional(),
  salariedPayScheduleUuid: z.nullable(z.string()).optional(),
  defaultPayScheduleUuid: z.nullable(z.string()).optional(),
  employees: z.nullable(z.array(PayScheduleAssignmentEmployee$outboundSchema))
    .optional(),
  departments: z.nullable(
    z.array(PayScheduleAssignmentDepartment$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    hourlyPayScheduleUuid: "hourly_pay_schedule_uuid",
    salariedPayScheduleUuid: "salaried_pay_schedule_uuid",
    defaultPayScheduleUuid: "default_pay_schedule_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayScheduleAssignment$ {
  /** @deprecated use `PayScheduleAssignment$inboundSchema` instead. */
  export const inboundSchema = PayScheduleAssignment$inboundSchema;
  /** @deprecated use `PayScheduleAssignment$outboundSchema` instead. */
  export const outboundSchema = PayScheduleAssignment$outboundSchema;
  /** @deprecated use `PayScheduleAssignment$Outbound` instead. */
  export type Outbound = PayScheduleAssignment$Outbound;
}

export function payScheduleAssignmentToJSON(
  payScheduleAssignment: PayScheduleAssignment,
): string {
  return JSON.stringify(
    PayScheduleAssignment$outboundSchema.parse(payScheduleAssignment),
  );
}

export function payScheduleAssignmentFromJSON(
  jsonString: string,
): SafeParseResult<PayScheduleAssignment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayScheduleAssignment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayScheduleAssignment' from JSON`,
  );
}
