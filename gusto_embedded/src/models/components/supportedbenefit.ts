/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Example response
 */
export type SupportedBenefit = {
  /**
   * The benefit type in Gusto.
   */
  benefitType?: number | undefined;
  /**
   * The name of the benefit.
   */
  name?: string | undefined;
  /**
   * The description of the benefit.
   */
  description?: string | undefined;
  /**
   * Whether the benefit is deducted before tax calculations, thus reducing oneâ€™s taxable income
   */
  pretax?: boolean | undefined;
  /**
   * Whether the benefit is deducted after tax calculations.
   */
  posttax?: boolean | undefined;
  /**
   * Whether the benefit is considered imputed income.
   */
  imputed?: boolean | undefined;
  /**
   * Whether the benefit is healthcare related.
   */
  healthcare?: boolean | undefined;
  /**
   * Whether the benefit is associated with retirement planning.
   */
  retirement?: boolean | undefined;
  /**
   * Whether the benefit has a government mandated yearly limit. If the benefit has a government mandated yearly limit, employees cannot be added to more than one benefit of this type.
   */
  yearlyLimit?: boolean | undefined;
  /**
   * Category where the benefit belongs to.
   */
  category?: string | undefined;
};

/** @internal */
export const SupportedBenefit$inboundSchema: z.ZodType<
  SupportedBenefit,
  z.ZodTypeDef,
  unknown
> = z.object({
  benefit_type: z.number().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  pretax: z.boolean().optional(),
  posttax: z.boolean().optional(),
  imputed: z.boolean().optional(),
  healthcare: z.boolean().optional(),
  retirement: z.boolean().optional(),
  yearly_limit: z.boolean().optional(),
  category: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "benefit_type": "benefitType",
    "yearly_limit": "yearlyLimit",
  });
});

/** @internal */
export type SupportedBenefit$Outbound = {
  benefit_type?: number | undefined;
  name?: string | undefined;
  description?: string | undefined;
  pretax?: boolean | undefined;
  posttax?: boolean | undefined;
  imputed?: boolean | undefined;
  healthcare?: boolean | undefined;
  retirement?: boolean | undefined;
  yearly_limit?: boolean | undefined;
  category?: string | undefined;
};

/** @internal */
export const SupportedBenefit$outboundSchema: z.ZodType<
  SupportedBenefit$Outbound,
  z.ZodTypeDef,
  SupportedBenefit
> = z.object({
  benefitType: z.number().optional(),
  name: z.string().optional(),
  description: z.string().optional(),
  pretax: z.boolean().optional(),
  posttax: z.boolean().optional(),
  imputed: z.boolean().optional(),
  healthcare: z.boolean().optional(),
  retirement: z.boolean().optional(),
  yearlyLimit: z.boolean().optional(),
  category: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    benefitType: "benefit_type",
    yearlyLimit: "yearly_limit",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportedBenefit$ {
  /** @deprecated use `SupportedBenefit$inboundSchema` instead. */
  export const inboundSchema = SupportedBenefit$inboundSchema;
  /** @deprecated use `SupportedBenefit$outboundSchema` instead. */
  export const outboundSchema = SupportedBenefit$outboundSchema;
  /** @deprecated use `SupportedBenefit$Outbound` instead. */
  export type Outbound = SupportedBenefit$Outbound;
}

export function supportedBenefitToJSON(
  supportedBenefit: SupportedBenefit,
): string {
  return JSON.stringify(
    SupportedBenefit$outboundSchema.parse(supportedBenefit),
  );
}

export function supportedBenefitFromJSON(
  jsonString: string,
): SafeParseResult<SupportedBenefit, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportedBenefit$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportedBenefit' from JSON`,
  );
}
