/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Type of the time off activity
 */
export const TimeOffType = {
  Vacation: "vacation",
  Sick: "sick",
} as const;
/**
 * Type of the time off activity
 */
export type TimeOffType = ClosedEnum<typeof TimeOffType>;

/**
 * Representation of a Time Off Activity
 */
export type TimeOffActivity = {
  /**
   * unique identifier of a time off policy
   */
  policyUuid?: string | undefined;
  /**
   * Type of the time off activity
   */
  timeOffType?: TimeOffType | undefined;
  /**
   * The name of the time off policy for this activity
   */
  policyName?: string | undefined;
  /**
   * The type of the time off event/activity
   */
  eventType?: string | undefined;
  /**
   * A description for the time off event/activity
   */
  eventDescription?: string | undefined;
  /**
   * The datetime of the time off activity
   */
  effectiveTime?: string | undefined;
  /**
   * The time off balance at the time of the activity
   */
  balance?: string | undefined;
  /**
   * The amount the time off balance changed as a result of the activity
   */
  balanceChange?: string | undefined;
};

/** @internal */
export const TimeOffType$inboundSchema: z.ZodNativeEnum<typeof TimeOffType> = z
  .nativeEnum(TimeOffType);

/** @internal */
export const TimeOffType$outboundSchema: z.ZodNativeEnum<typeof TimeOffType> =
  TimeOffType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffType$ {
  /** @deprecated use `TimeOffType$inboundSchema` instead. */
  export const inboundSchema = TimeOffType$inboundSchema;
  /** @deprecated use `TimeOffType$outboundSchema` instead. */
  export const outboundSchema = TimeOffType$outboundSchema;
}

/** @internal */
export const TimeOffActivity$inboundSchema: z.ZodType<
  TimeOffActivity,
  z.ZodTypeDef,
  unknown
> = z.object({
  policy_uuid: z.string().optional(),
  time_off_type: TimeOffType$inboundSchema.optional(),
  policy_name: z.string().optional(),
  event_type: z.string().optional(),
  event_description: z.string().optional(),
  effective_time: z.string().optional(),
  balance: z.string().optional(),
  balance_change: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "policy_uuid": "policyUuid",
    "time_off_type": "timeOffType",
    "policy_name": "policyName",
    "event_type": "eventType",
    "event_description": "eventDescription",
    "effective_time": "effectiveTime",
    "balance_change": "balanceChange",
  });
});

/** @internal */
export type TimeOffActivity$Outbound = {
  policy_uuid?: string | undefined;
  time_off_type?: string | undefined;
  policy_name?: string | undefined;
  event_type?: string | undefined;
  event_description?: string | undefined;
  effective_time?: string | undefined;
  balance?: string | undefined;
  balance_change?: string | undefined;
};

/** @internal */
export const TimeOffActivity$outboundSchema: z.ZodType<
  TimeOffActivity$Outbound,
  z.ZodTypeDef,
  TimeOffActivity
> = z.object({
  policyUuid: z.string().optional(),
  timeOffType: TimeOffType$outboundSchema.optional(),
  policyName: z.string().optional(),
  eventType: z.string().optional(),
  eventDescription: z.string().optional(),
  effectiveTime: z.string().optional(),
  balance: z.string().optional(),
  balanceChange: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    policyUuid: "policy_uuid",
    timeOffType: "time_off_type",
    policyName: "policy_name",
    eventType: "event_type",
    eventDescription: "event_description",
    effectiveTime: "effective_time",
    balanceChange: "balance_change",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TimeOffActivity$ {
  /** @deprecated use `TimeOffActivity$inboundSchema` instead. */
  export const inboundSchema = TimeOffActivity$inboundSchema;
  /** @deprecated use `TimeOffActivity$outboundSchema` instead. */
  export const outboundSchema = TimeOffActivity$outboundSchema;
  /** @deprecated use `TimeOffActivity$Outbound` instead. */
  export type Outbound = TimeOffActivity$Outbound;
}

export function timeOffActivityToJSON(
  timeOffActivity: TimeOffActivity,
): string {
  return JSON.stringify(TimeOffActivity$outboundSchema.parse(timeOffActivity));
}

export function timeOffActivityFromJSON(
  jsonString: string,
): SafeParseResult<TimeOffActivity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TimeOffActivity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TimeOffActivity' from JSON`,
  );
}
