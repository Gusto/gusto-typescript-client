/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Only applicable when a payroll is moved to four day processing instead of fast ach.
 */
export type PayrollPaymentSpeedChangedType = {
  /**
   * Original check date when fast ach applies.
   */
  originalCheckDate?: string | undefined;
  /**
   * Current check date.
   */
  currentCheckDate?: string | undefined;
  /**
   * Original debit date when fast ach applies.
   */
  originalDebitDate?: string | undefined;
  /**
   * Current debit date.
   */
  currentDebitDate?: string | undefined;
  /**
   * The reason why the payroll is moved to four day.
   */
  reason?: string | undefined;
};

/** @internal */
export const PayrollPaymentSpeedChangedType$inboundSchema: z.ZodType<
  PayrollPaymentSpeedChangedType,
  z.ZodTypeDef,
  unknown
> = z.object({
  original_check_date: z.string().optional(),
  current_check_date: z.string().optional(),
  original_debit_date: z.string().optional(),
  current_debit_date: z.string().optional(),
  reason: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "original_check_date": "originalCheckDate",
    "current_check_date": "currentCheckDate",
    "original_debit_date": "originalDebitDate",
    "current_debit_date": "currentDebitDate",
  });
});

/** @internal */
export type PayrollPaymentSpeedChangedType$Outbound = {
  original_check_date?: string | undefined;
  current_check_date?: string | undefined;
  original_debit_date?: string | undefined;
  current_debit_date?: string | undefined;
  reason?: string | undefined;
};

/** @internal */
export const PayrollPaymentSpeedChangedType$outboundSchema: z.ZodType<
  PayrollPaymentSpeedChangedType$Outbound,
  z.ZodTypeDef,
  PayrollPaymentSpeedChangedType
> = z.object({
  originalCheckDate: z.string().optional(),
  currentCheckDate: z.string().optional(),
  originalDebitDate: z.string().optional(),
  currentDebitDate: z.string().optional(),
  reason: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    originalCheckDate: "original_check_date",
    currentCheckDate: "current_check_date",
    originalDebitDate: "original_debit_date",
    currentDebitDate: "current_debit_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollPaymentSpeedChangedType$ {
  /** @deprecated use `PayrollPaymentSpeedChangedType$inboundSchema` instead. */
  export const inboundSchema = PayrollPaymentSpeedChangedType$inboundSchema;
  /** @deprecated use `PayrollPaymentSpeedChangedType$outboundSchema` instead. */
  export const outboundSchema = PayrollPaymentSpeedChangedType$outboundSchema;
  /** @deprecated use `PayrollPaymentSpeedChangedType$Outbound` instead. */
  export type Outbound = PayrollPaymentSpeedChangedType$Outbound;
}

export function payrollPaymentSpeedChangedTypeToJSON(
  payrollPaymentSpeedChangedType: PayrollPaymentSpeedChangedType,
): string {
  return JSON.stringify(
    PayrollPaymentSpeedChangedType$outboundSchema.parse(
      payrollPaymentSpeedChangedType,
    ),
  );
}

export function payrollPaymentSpeedChangedTypeFromJSON(
  jsonString: string,
): SafeParseResult<PayrollPaymentSpeedChangedType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollPaymentSpeedChangedType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollPaymentSpeedChangedType' from JSON`,
  );
}
