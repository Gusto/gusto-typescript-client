/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";

/**
 * Unprocessable Entity
 *
 * @remarks
 *
 * This may happen when the body of your request contains errors such as `invalid_attribute_value`, or the request fails due to an `invalid_operation`. See the [Errors Categories](https://docs.gusto.com/embedded-payroll/docs/error-categories) guide for more details.
 */
export type UnprocessableEntityErrorObject1Data = {
  errors?: Array<components.EntityErrorObject> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
};

/**
 * Unprocessable Entity
 *
 * @remarks
 *
 * This may happen when the body of your request contains errors such as `invalid_attribute_value`, or the request fails due to an `invalid_operation`. See the [Errors Categories](https://docs.gusto.com/embedded-payroll/docs/error-categories) guide for more details.
 */
export class UnprocessableEntityErrorObject1 extends Error {
  errors?: Array<components.EntityErrorObject> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;

  /** The original data that was passed to this error instance. */
  data$: UnprocessableEntityErrorObject1Data;

  constructor(err: UnprocessableEntityErrorObject1Data) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.errors != null) this.errors = err.errors;
    if (err.rawResponse != null) this.rawResponse = err.rawResponse;

    this.name = "UnprocessableEntityErrorObject1";
  }
}

/** @internal */
export const UnprocessableEntityErrorObject1$inboundSchema: z.ZodType<
  UnprocessableEntityErrorObject1,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(components.EntityErrorObject$inboundSchema).optional(),
  RawResponse: z.instanceof(Response).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "RawResponse": "rawResponse",
    });

    return new UnprocessableEntityErrorObject1(remapped);
  });

/** @internal */
export type UnprocessableEntityErrorObject1$Outbound = {
  errors?: Array<components.EntityErrorObject$Outbound> | undefined;
  RawResponse?: never | undefined;
};

/** @internal */
export const UnprocessableEntityErrorObject1$outboundSchema: z.ZodType<
  UnprocessableEntityErrorObject1$Outbound,
  z.ZodTypeDef,
  UnprocessableEntityErrorObject1
> = z.instanceof(UnprocessableEntityErrorObject1)
  .transform(v => v.data$)
  .pipe(
    z.object({
      errors: z.array(components.EntityErrorObject$outboundSchema).optional(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
    }).transform((v) => {
      return remap$(v, {
        rawResponse: "RawResponse",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnprocessableEntityErrorObject1$ {
  /** @deprecated use `UnprocessableEntityErrorObject1$inboundSchema` instead. */
  export const inboundSchema = UnprocessableEntityErrorObject1$inboundSchema;
  /** @deprecated use `UnprocessableEntityErrorObject1$outboundSchema` instead. */
  export const outboundSchema = UnprocessableEntityErrorObject1$outboundSchema;
  /** @deprecated use `UnprocessableEntityErrorObject1$Outbound` instead. */
  export type Outbound = UnprocessableEntityErrorObject1$Outbound;
}
