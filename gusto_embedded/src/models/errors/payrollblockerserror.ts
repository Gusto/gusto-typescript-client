/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "./sdkvalidationerror.js";

export type Metadata = {
  /**
   * A categorization of the payroll blocker, e.g. "geocode_error"
   */
  key?: string | undefined;
};

export type Errors = {
  /**
   * The string "base"
   */
  errorKey?: string | undefined;
  /**
   * The string "payroll_blocker"
   */
  category?: string | undefined;
  /**
   * Human readable description of the payroll blocker
   */
  message?: string | undefined;
  metadata?: Metadata | undefined;
};

/**
 * Payroll Blockers Error
 *
 * @remarks
 *
 * For detailed information, see the [Payroll Blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers)
 */
export type PayrollBlockersErrorData = {
  errors?: Array<Errors> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
};

/**
 * Payroll Blockers Error
 *
 * @remarks
 *
 * For detailed information, see the [Payroll Blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers)
 */
export class PayrollBlockersError extends Error {
  errors?: Array<Errors> | undefined;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;

  /** The original data that was passed to this error instance. */
  data$: PayrollBlockersErrorData;

  constructor(err: PayrollBlockersErrorData) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message);
    this.data$ = err;

    if (err.errors != null) this.errors = err.errors;
    if (err.rawResponse != null) this.rawResponse = err.rawResponse;

    this.name = "PayrollBlockersError";
  }
}

/** @internal */
export const Metadata$inboundSchema: z.ZodType<
  Metadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  key: z.string().optional(),
});

/** @internal */
export type Metadata$Outbound = {
  key?: string | undefined;
};

/** @internal */
export const Metadata$outboundSchema: z.ZodType<
  Metadata$Outbound,
  z.ZodTypeDef,
  Metadata
> = z.object({
  key: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Metadata$ {
  /** @deprecated use `Metadata$inboundSchema` instead. */
  export const inboundSchema = Metadata$inboundSchema;
  /** @deprecated use `Metadata$outboundSchema` instead. */
  export const outboundSchema = Metadata$outboundSchema;
  /** @deprecated use `Metadata$Outbound` instead. */
  export type Outbound = Metadata$Outbound;
}

export function metadataToJSON(metadata: Metadata): string {
  return JSON.stringify(Metadata$outboundSchema.parse(metadata));
}

export function metadataFromJSON(
  jsonString: string,
): SafeParseResult<Metadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Metadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Metadata' from JSON`,
  );
}

/** @internal */
export const Errors$inboundSchema: z.ZodType<Errors, z.ZodTypeDef, unknown> = z
  .object({
    error_key: z.string().optional(),
    category: z.string().optional(),
    message: z.string().optional(),
    metadata: z.lazy(() => Metadata$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "error_key": "errorKey",
    });
  });

/** @internal */
export type Errors$Outbound = {
  error_key?: string | undefined;
  category?: string | undefined;
  message?: string | undefined;
  metadata?: Metadata$Outbound | undefined;
};

/** @internal */
export const Errors$outboundSchema: z.ZodType<
  Errors$Outbound,
  z.ZodTypeDef,
  Errors
> = z.object({
  errorKey: z.string().optional(),
  category: z.string().optional(),
  message: z.string().optional(),
  metadata: z.lazy(() => Metadata$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    errorKey: "error_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Errors$ {
  /** @deprecated use `Errors$inboundSchema` instead. */
  export const inboundSchema = Errors$inboundSchema;
  /** @deprecated use `Errors$outboundSchema` instead. */
  export const outboundSchema = Errors$outboundSchema;
  /** @deprecated use `Errors$Outbound` instead. */
  export type Outbound = Errors$Outbound;
}

export function errorsToJSON(errors: Errors): string {
  return JSON.stringify(Errors$outboundSchema.parse(errors));
}

export function errorsFromJSON(
  jsonString: string,
): SafeParseResult<Errors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Errors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Errors' from JSON`,
  );
}

/** @internal */
export const PayrollBlockersError$inboundSchema: z.ZodType<
  PayrollBlockersError,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(z.lazy(() => Errors$inboundSchema)).optional(),
  RawResponse: z.instanceof(Response).optional(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "RawResponse": "rawResponse",
    });

    return new PayrollBlockersError(remapped);
  });

/** @internal */
export type PayrollBlockersError$Outbound = {
  errors?: Array<Errors$Outbound> | undefined;
  RawResponse?: never | undefined;
};

/** @internal */
export const PayrollBlockersError$outboundSchema: z.ZodType<
  PayrollBlockersError$Outbound,
  z.ZodTypeDef,
  PayrollBlockersError
> = z.instanceof(PayrollBlockersError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      errors: z.array(z.lazy(() => Errors$outboundSchema)).optional(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }).optional(),
    }).transform((v) => {
      return remap$(v, {
        rawResponse: "RawResponse",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollBlockersError$ {
  /** @deprecated use `PayrollBlockersError$inboundSchema` instead. */
  export const inboundSchema = PayrollBlockersError$inboundSchema;
  /** @deprecated use `PayrollBlockersError$outboundSchema` instead. */
  export const outboundSchema = PayrollBlockersError$outboundSchema;
  /** @deprecated use `PayrollBlockersError$Outbound` instead. */
  export type Outbound = PayrollBlockersError$Outbound;
}
