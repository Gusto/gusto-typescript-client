/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees = {
  uuid?: string | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  /**
   * An array of employee objects, each containing an employee_uuid.
   */
  employees?:
    | Array<PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees>
    | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyAddRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees,
    z.ZodTypeDef,
    unknown
  > = z.object({
    uuid: z.string().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees
  > = z.object({
    uuid: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyAddEmployeesToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyAddEmployees:
    PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyAddEmployees,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyAddEmployeesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    version: z.string(),
    employees: z.array(
      z.lazy(() =>
        PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$Outbound = {
  version: string;
  employees?:
    | Array<PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$Outbound>
    | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody
  > = z.object({
    version: z.string(),
    employees: z.array(
      z.lazy(() =>
        PutCompaniesCompanyUuidHolidayPayPolicyAddEmployees$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyAddRequestBodyToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyAddRequestBody:
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyAddRequestBody,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyAddRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_uuid: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
    RequestBody: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_uuid": "companyUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version"?: string | undefined;
  RequestBody: PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$Outbound;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
    requestBody: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyAddRequestToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyAddRequest:
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequest,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyAddRequest,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyAddRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyAddRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyAddRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyAddRequest' from JSON`,
  );
}
