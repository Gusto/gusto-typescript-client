/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ContractorPayment,
  ContractorPayment$inboundSchema,
  ContractorPayment$Outbound,
  ContractorPayment$outboundSchema,
} from "../components/contractorpayment.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the contractor payment
   */
  contractorPaymentId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse =
  {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Example response
     */
    contractorPayment?: ContractorPayment | undefined;
  };

/** @internal */
export const GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    contractor_payment_id: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "contractor_payment_id": "contractorPaymentId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$Outbound =
  {
    company_id: string;
    contractor_payment_id: string;
    "X-Gusto-API-Version": string;
  };

/** @internal */
export const GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest
  > = z.object({
    companyId: z.string(),
    contractorPaymentId: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      contractorPaymentId: "contractor_payment_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$Outbound;
}

export function getV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestToJSON(
  getV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest:
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$outboundSchema
      .parse(getV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest),
  );
}

export function getV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Contractor-Payment": ContractorPayment$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Contractor-Payment": "contractorPayment",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    "Contractor-Payment"?: ContractorPayment$Outbound | undefined;
  };

/** @internal */
export const GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    contractorPayment: ContractorPayment$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      contractorPayment: "Contractor-Payment",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$Outbound;
}

export function getV1CompaniesCompanyIdContractorPaymentContractorPaymentResponseToJSON(
  getV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse:
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$outboundSchema
      .parse(getV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse),
  );
}

export function getV1CompaniesCompanyIdContractorPaymentContractorPaymentResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse' from JSON`,
  );
}
