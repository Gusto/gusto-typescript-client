/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  EmployeePaymentDetail,
  EmployeePaymentDetail$inboundSchema,
  EmployeePaymentDetail$Outbound,
  EmployeePaymentDetail$outboundSchema,
} from "../components/employeepaymentdetail.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of a specific employee to fetch payment details for.
   */
  employeeUuid?: string | undefined;
  /**
   * The UUID of a specific payroll to fetch payment details for employees on that payroll.
   */
  payrollUuid?: string | undefined;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * A list of employee payment details.
   */
  employeePaymentDetailsList?: Array<EmployeePaymentDetail> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    employee_uuid: z.string().optional(),
    payroll_uuid: z.string().optional(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "employee_uuid": "employeeUuid",
      "payroll_uuid": "payrollUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$Outbound = {
  company_id: string;
  employee_uuid?: string | undefined;
  payroll_uuid?: string | undefined;
  page?: number | undefined;
  per?: number | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest
  > = z.object({
    companyId: z.string(),
    employeeUuid: z.string().optional(),
    payrollUuid: z.string().optional(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      employeeUuid: "employee_uuid",
      payrollUuid: "payroll_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$Outbound;
}

export function getV1CompaniesCompanyIdEmployeesPaymentDetailsRequestToJSON(
  getV1CompaniesCompanyIdEmployeesPaymentDetailsRequest:
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdEmployeesPaymentDetailsRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdEmployeesPaymentDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdEmployeesPaymentDetailsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    EmployeePaymentDetailsList: z.array(EmployeePaymentDetail$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "EmployeePaymentDetailsList": "employeePaymentDetailsList",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  EmployeePaymentDetailsList?:
    | Array<EmployeePaymentDetail$Outbound>
    | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    employeePaymentDetailsList: z.array(EmployeePaymentDetail$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      employeePaymentDetailsList: "EmployeePaymentDetailsList",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$Outbound;
}

export function getV1CompaniesCompanyIdEmployeesPaymentDetailsResponseToJSON(
  getV1CompaniesCompanyIdEmployeesPaymentDetailsResponse:
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$outboundSchema.parse(
      getV1CompaniesCompanyIdEmployeesPaymentDetailsResponse,
    ),
  );
}

export function getV1CompaniesCompanyIdEmployeesPaymentDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesCompanyIdEmployeesPaymentDetailsResponse' from JSON`,
  );
}
