/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Available options:
 *
 * @remarks
 * - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
 */
export const GetV1EmployeesEmployeeIdJobsQueryParamInclude = {
  AllCompensations: "all_compensations",
} as const;
/**
 * Available options:
 *
 * @remarks
 * - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
 */
export type GetV1EmployeesEmployeeIdJobsQueryParamInclude = ClosedEnum<
  typeof GetV1EmployeesEmployeeIdJobsQueryParamInclude
>;

export type GetV1EmployeesEmployeeIdJobsRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * Available options:
   *
   * @remarks
   * - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
   */
  include?: GetV1EmployeesEmployeeIdJobsQueryParamInclude | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdJobsQueryParamInclude$inboundSchema:
  z.ZodNativeEnum<typeof GetV1EmployeesEmployeeIdJobsQueryParamInclude> = z
    .nativeEnum(GetV1EmployeesEmployeeIdJobsQueryParamInclude);

/** @internal */
export const GetV1EmployeesEmployeeIdJobsQueryParamInclude$outboundSchema:
  z.ZodNativeEnum<typeof GetV1EmployeesEmployeeIdJobsQueryParamInclude> =
    GetV1EmployeesEmployeeIdJobsQueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdJobsQueryParamInclude$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdJobsQueryParamInclude$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdJobsQueryParamInclude$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdJobsQueryParamInclude$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdJobsQueryParamInclude$outboundSchema;
}

/** @internal */
export const GetV1EmployeesEmployeeIdJobsRequest$inboundSchema: z.ZodType<
  GetV1EmployeesEmployeeIdJobsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.string(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
  include: GetV1EmployeesEmployeeIdJobsQueryParamInclude$inboundSchema
    .optional(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1EmployeesEmployeeIdJobsRequest$Outbound = {
  employee_id: string;
  page?: number | undefined;
  per?: number | undefined;
  include?: string | undefined;
  "X-Gusto-API-Version"?: string | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdJobsRequest$outboundSchema: z.ZodType<
  GetV1EmployeesEmployeeIdJobsRequest$Outbound,
  z.ZodTypeDef,
  GetV1EmployeesEmployeeIdJobsRequest
> = z.object({
  employeeId: z.string(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
  include: GetV1EmployeesEmployeeIdJobsQueryParamInclude$outboundSchema
    .optional(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdJobsRequest$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdJobsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdJobsRequest$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdJobsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdJobsRequest$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdJobsRequest$Outbound` instead. */
  export type Outbound = GetV1EmployeesEmployeeIdJobsRequest$Outbound;
}

export function getV1EmployeesEmployeeIdJobsRequestToJSON(
  getV1EmployeesEmployeeIdJobsRequest: GetV1EmployeesEmployeeIdJobsRequest,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdJobsRequest$outboundSchema.parse(
      getV1EmployeesEmployeeIdJobsRequest,
    ),
  );
}

export function getV1EmployeesEmployeeIdJobsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1EmployeesEmployeeIdJobsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdJobsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1EmployeesEmployeeIdJobsRequest' from JSON`,
  );
}
