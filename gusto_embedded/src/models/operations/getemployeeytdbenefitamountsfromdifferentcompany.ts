/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import {
  YtdBenefitAmountsFromDifferentCompany,
  YtdBenefitAmountsFromDifferentCompany$inboundSchema,
  YtdBenefitAmountsFromDifferentCompany$Outbound,
  YtdBenefitAmountsFromDifferentCompany$outboundSchema,
} from "../components/ytdbenefitamountsfromdifferentcompany.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * The tax year for which to retrieve YTD benefit amounts. Defaults to current year if not specified.
   */
  taxYear?: number | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * List of Ytd Benefit Amounts From Different Company List
   */
  ytdBenefitAmountsFromDifferentCompanyList?:
    | Array<YtdBenefitAmountsFromDifferentCompany>
    | undefined;
};

/** @internal */
export const GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$inboundSchema:
  z.ZodType<
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    tax_year: z.number().int().optional(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "tax_year": "taxYear",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$Outbound = {
  employee_id: string;
  tax_year?: number | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$outboundSchema:
  z.ZodType<
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$Outbound,
    z.ZodTypeDef,
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest
  > = z.object({
    employeeId: z.string(),
    taxYear: z.number().int().optional(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      taxYear: "tax_year",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$ {
  /** @deprecated use `GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$inboundSchema;
  /** @deprecated use `GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$outboundSchema;
  /** @deprecated use `GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$Outbound` instead. */
  export type Outbound =
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$Outbound;
}

export function getEmployeeYtdBenefitAmountsFromDifferentCompanyRequestToJSON(
  getEmployeeYtdBenefitAmountsFromDifferentCompanyRequest:
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
): string {
  return JSON.stringify(
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$outboundSchema
      .parse(getEmployeeYtdBenefitAmountsFromDifferentCompanyRequest),
  );
}

export function getEmployeeYtdBenefitAmountsFromDifferentCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest' from JSON`,
  );
}

/** @internal */
export const GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$inboundSchema:
  z.ZodType<
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Ytd-Benefit-Amounts-From-Different-Company-List": z.array(
      YtdBenefitAmountsFromDifferentCompany$inboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Ytd-Benefit-Amounts-From-Different-Company-List":
        "ytdBenefitAmountsFromDifferentCompanyList",
    });
  });

/** @internal */
export type GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    "Ytd-Benefit-Amounts-From-Different-Company-List"?:
      | Array<YtdBenefitAmountsFromDifferentCompany$Outbound>
      | undefined;
  };

/** @internal */
export const GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$outboundSchema:
  z.ZodType<
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$Outbound,
    z.ZodTypeDef,
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    ytdBenefitAmountsFromDifferentCompanyList: z.array(
      YtdBenefitAmountsFromDifferentCompany$outboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      ytdBenefitAmountsFromDifferentCompanyList:
        "Ytd-Benefit-Amounts-From-Different-Company-List",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$ {
  /** @deprecated use `GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$inboundSchema;
  /** @deprecated use `GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$outboundSchema;
  /** @deprecated use `GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$Outbound` instead. */
  export type Outbound =
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$Outbound;
}

export function getEmployeeYtdBenefitAmountsFromDifferentCompanyResponseToJSON(
  getEmployeeYtdBenefitAmountsFromDifferentCompanyResponse:
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse,
): string {
  return JSON.stringify(
    GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$outboundSchema
      .parse(getEmployeeYtdBenefitAmountsFromDifferentCompanyResponse),
  );
}

export function getEmployeeYtdBenefitAmountsFromDifferentCompanyResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse' from JSON`,
  );
}
