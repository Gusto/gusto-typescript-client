/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1TokenInfoRequest = {
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

/**
 * Information about the token resource.
 */
export type Resource = {
  /**
   * Type of object
   */
  type: string;
  /**
   * UUID of object
   */
  uuid: string;
};

export const GetV1TokenInfoType = {
  CompanyAdmin: "CompanyAdmin",
  Employee: "Employee",
  Contractor: "Contractor",
} as const;
export type GetV1TokenInfoType = ClosedEnum<typeof GetV1TokenInfoType>;

/**
 * Information about the token owner
 */
export type ResourceOwner = {
  type: GetV1TokenInfoType;
  /**
   * UUID of resource owner
   */
  uuid: string;
};

/**
 * Example response
 */
export type GetV1TokenInfoResponseBody = {
  /**
   * Space delimited string of accessible scopes.
   */
  scope: string;
  /**
   * Information about the token resource.
   */
  resource: Resource | null;
  /**
   * Information about the token owner
   */
  resourceOwner: ResourceOwner | null;
};

/** @internal */
export const GetV1TokenInfoRequest$inboundSchema: z.ZodType<
  GetV1TokenInfoRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1TokenInfoRequest$Outbound = {
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1TokenInfoRequest$outboundSchema: z.ZodType<
  GetV1TokenInfoRequest$Outbound,
  z.ZodTypeDef,
  GetV1TokenInfoRequest
> = z.object({
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TokenInfoRequest$ {
  /** @deprecated use `GetV1TokenInfoRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1TokenInfoRequest$inboundSchema;
  /** @deprecated use `GetV1TokenInfoRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1TokenInfoRequest$outboundSchema;
  /** @deprecated use `GetV1TokenInfoRequest$Outbound` instead. */
  export type Outbound = GetV1TokenInfoRequest$Outbound;
}

export function getV1TokenInfoRequestToJSON(
  getV1TokenInfoRequest: GetV1TokenInfoRequest,
): string {
  return JSON.stringify(
    GetV1TokenInfoRequest$outboundSchema.parse(getV1TokenInfoRequest),
  );
}

export function getV1TokenInfoRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TokenInfoRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TokenInfoRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TokenInfoRequest' from JSON`,
  );
}

/** @internal */
export const Resource$inboundSchema: z.ZodType<
  Resource,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  uuid: z.string(),
});

/** @internal */
export type Resource$Outbound = {
  type: string;
  uuid: string;
};

/** @internal */
export const Resource$outboundSchema: z.ZodType<
  Resource$Outbound,
  z.ZodTypeDef,
  Resource
> = z.object({
  type: z.string(),
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Resource$ {
  /** @deprecated use `Resource$inboundSchema` instead. */
  export const inboundSchema = Resource$inboundSchema;
  /** @deprecated use `Resource$outboundSchema` instead. */
  export const outboundSchema = Resource$outboundSchema;
  /** @deprecated use `Resource$Outbound` instead. */
  export type Outbound = Resource$Outbound;
}

export function resourceToJSON(resource: Resource): string {
  return JSON.stringify(Resource$outboundSchema.parse(resource));
}

export function resourceFromJSON(
  jsonString: string,
): SafeParseResult<Resource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Resource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Resource' from JSON`,
  );
}

/** @internal */
export const GetV1TokenInfoType$inboundSchema: z.ZodNativeEnum<
  typeof GetV1TokenInfoType
> = z.nativeEnum(GetV1TokenInfoType);

/** @internal */
export const GetV1TokenInfoType$outboundSchema: z.ZodNativeEnum<
  typeof GetV1TokenInfoType
> = GetV1TokenInfoType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TokenInfoType$ {
  /** @deprecated use `GetV1TokenInfoType$inboundSchema` instead. */
  export const inboundSchema = GetV1TokenInfoType$inboundSchema;
  /** @deprecated use `GetV1TokenInfoType$outboundSchema` instead. */
  export const outboundSchema = GetV1TokenInfoType$outboundSchema;
}

/** @internal */
export const ResourceOwner$inboundSchema: z.ZodType<
  ResourceOwner,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: GetV1TokenInfoType$inboundSchema,
  uuid: z.string(),
});

/** @internal */
export type ResourceOwner$Outbound = {
  type: string;
  uuid: string;
};

/** @internal */
export const ResourceOwner$outboundSchema: z.ZodType<
  ResourceOwner$Outbound,
  z.ZodTypeDef,
  ResourceOwner
> = z.object({
  type: GetV1TokenInfoType$outboundSchema,
  uuid: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResourceOwner$ {
  /** @deprecated use `ResourceOwner$inboundSchema` instead. */
  export const inboundSchema = ResourceOwner$inboundSchema;
  /** @deprecated use `ResourceOwner$outboundSchema` instead. */
  export const outboundSchema = ResourceOwner$outboundSchema;
  /** @deprecated use `ResourceOwner$Outbound` instead. */
  export type Outbound = ResourceOwner$Outbound;
}

export function resourceOwnerToJSON(resourceOwner: ResourceOwner): string {
  return JSON.stringify(ResourceOwner$outboundSchema.parse(resourceOwner));
}

export function resourceOwnerFromJSON(
  jsonString: string,
): SafeParseResult<ResourceOwner, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResourceOwner$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResourceOwner' from JSON`,
  );
}

/** @internal */
export const GetV1TokenInfoResponseBody$inboundSchema: z.ZodType<
  GetV1TokenInfoResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  scope: z.string(),
  resource: z.nullable(z.lazy(() => Resource$inboundSchema)),
  resource_owner: z.nullable(z.lazy(() => ResourceOwner$inboundSchema)),
}).transform((v) => {
  return remap$(v, {
    "resource_owner": "resourceOwner",
  });
});

/** @internal */
export type GetV1TokenInfoResponseBody$Outbound = {
  scope: string;
  resource: Resource$Outbound | null;
  resource_owner: ResourceOwner$Outbound | null;
};

/** @internal */
export const GetV1TokenInfoResponseBody$outboundSchema: z.ZodType<
  GetV1TokenInfoResponseBody$Outbound,
  z.ZodTypeDef,
  GetV1TokenInfoResponseBody
> = z.object({
  scope: z.string(),
  resource: z.nullable(z.lazy(() => Resource$outboundSchema)),
  resourceOwner: z.nullable(z.lazy(() => ResourceOwner$outboundSchema)),
}).transform((v) => {
  return remap$(v, {
    resourceOwner: "resource_owner",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TokenInfoResponseBody$ {
  /** @deprecated use `GetV1TokenInfoResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetV1TokenInfoResponseBody$inboundSchema;
  /** @deprecated use `GetV1TokenInfoResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetV1TokenInfoResponseBody$outboundSchema;
  /** @deprecated use `GetV1TokenInfoResponseBody$Outbound` instead. */
  export type Outbound = GetV1TokenInfoResponseBody$Outbound;
}

export function getV1TokenInfoResponseBodyToJSON(
  getV1TokenInfoResponseBody: GetV1TokenInfoResponseBody,
): string {
  return JSON.stringify(
    GetV1TokenInfoResponseBody$outboundSchema.parse(getV1TokenInfoResponseBody),
  );
}

export function getV1TokenInfoResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TokenInfoResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TokenInfoResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TokenInfoResponseBody' from JSON`,
  );
}
