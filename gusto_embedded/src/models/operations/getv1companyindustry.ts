/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  Industry,
  Industry$inboundSchema,
  Industry$Outbound,
  Industry$outboundSchema,
} from "../components/industry.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompanyIndustryRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1CompanyIndustryResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  industry?: Industry | undefined;
};

/** @internal */
export const GetV1CompanyIndustryRequest$inboundSchema: z.ZodType<
  GetV1CompanyIndustryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1CompanyIndustryRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompanyIndustryRequest$outboundSchema: z.ZodType<
  GetV1CompanyIndustryRequest$Outbound,
  z.ZodTypeDef,
  GetV1CompanyIndustryRequest
> = z.object({
  companyId: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompanyIndustryRequest$ {
  /** @deprecated use `GetV1CompanyIndustryRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1CompanyIndustryRequest$inboundSchema;
  /** @deprecated use `GetV1CompanyIndustryRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1CompanyIndustryRequest$outboundSchema;
  /** @deprecated use `GetV1CompanyIndustryRequest$Outbound` instead. */
  export type Outbound = GetV1CompanyIndustryRequest$Outbound;
}

export function getV1CompanyIndustryRequestToJSON(
  getV1CompanyIndustryRequest: GetV1CompanyIndustryRequest,
): string {
  return JSON.stringify(
    GetV1CompanyIndustryRequest$outboundSchema.parse(
      getV1CompanyIndustryRequest,
    ),
  );
}

export function getV1CompanyIndustryRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompanyIndustryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CompanyIndustryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompanyIndustryRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompanyIndustryResponse$inboundSchema: z.ZodType<
  GetV1CompanyIndustryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  Industry: Industry$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Industry": "industry",
  });
});

/** @internal */
export type GetV1CompanyIndustryResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  Industry?: Industry$Outbound | undefined;
};

/** @internal */
export const GetV1CompanyIndustryResponse$outboundSchema: z.ZodType<
  GetV1CompanyIndustryResponse$Outbound,
  z.ZodTypeDef,
  GetV1CompanyIndustryResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  industry: Industry$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    industry: "Industry",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompanyIndustryResponse$ {
  /** @deprecated use `GetV1CompanyIndustryResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1CompanyIndustryResponse$inboundSchema;
  /** @deprecated use `GetV1CompanyIndustryResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1CompanyIndustryResponse$outboundSchema;
  /** @deprecated use `GetV1CompanyIndustryResponse$Outbound` instead. */
  export type Outbound = GetV1CompanyIndustryResponse$Outbound;
}

export function getV1CompanyIndustryResponseToJSON(
  getV1CompanyIndustryResponse: GetV1CompanyIndustryResponse,
): string {
  return JSON.stringify(
    GetV1CompanyIndustryResponse$outboundSchema.parse(
      getV1CompanyIndustryResponse,
    ),
  );
}

export function getV1CompanyIndustryResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompanyIndustryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CompanyIndustryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompanyIndustryResponse' from JSON`,
  );
}
