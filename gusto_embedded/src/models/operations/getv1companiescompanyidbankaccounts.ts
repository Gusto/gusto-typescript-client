/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CompanyBankAccount,
  CompanyBankAccount$inboundSchema,
  CompanyBankAccount$Outbound,
  CompanyBankAccount$outboundSchema,
} from "../components/companybankaccount.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFourMinus04Minus01: "2024-04-01",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion =
  ClosedEnum<typeof GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion>;

export type GetV1CompaniesCompanyIdBankAccountsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion
    | undefined;
};

export type GetV1CompaniesCompanyIdBankAccountsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  companyBankAccounts?: Array<CompanyBankAccount> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion
  > = z.nativeEnum(GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion);

/** @internal */
export const GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion
  > = GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$ {
  /** @deprecated use `GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const GetV1CompaniesCompanyIdBankAccountsRequest$inboundSchema:
  z.ZodType<GetV1CompaniesCompanyIdBankAccountsRequest, z.ZodTypeDef, unknown> =
    z.object({
      company_id: z.string(),
      "X-Gusto-API-Version":
        GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema
          .default("2024-04-01"),
    }).transform((v) => {
      return remap$(v, {
        "company_id": "companyId",
        "X-Gusto-API-Version": "xGustoAPIVersion",
      });
    });

/** @internal */
export type GetV1CompaniesCompanyIdBankAccountsRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyIdBankAccountsRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdBankAccountsRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdBankAccountsRequest
  > = z.object({
    companyId: z.string(),
    xGustoAPIVersion:
      GetV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$outboundSchema
        .default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdBankAccountsRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdBankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdBankAccountsRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdBankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdBankAccountsRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdBankAccountsRequest$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdBankAccountsRequest$Outbound;
}

export function getV1CompaniesCompanyIdBankAccountsRequestToJSON(
  getV1CompaniesCompanyIdBankAccountsRequest:
    GetV1CompaniesCompanyIdBankAccountsRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdBankAccountsRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdBankAccountsRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdBankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdBankAccountsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdBankAccountsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdBankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdBankAccountsResponse$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdBankAccountsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Company-Bank-Accounts": z.array(CompanyBankAccount$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Company-Bank-Accounts": "companyBankAccounts",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdBankAccountsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Company-Bank-Accounts"?: Array<CompanyBankAccount$Outbound> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdBankAccountsResponse$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdBankAccountsResponse$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdBankAccountsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    companyBankAccounts: z.array(CompanyBankAccount$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      companyBankAccounts: "Company-Bank-Accounts",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdBankAccountsResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdBankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdBankAccountsResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdBankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdBankAccountsResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdBankAccountsResponse$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdBankAccountsResponse$Outbound;
}

export function getV1CompaniesCompanyIdBankAccountsResponseToJSON(
  getV1CompaniesCompanyIdBankAccountsResponse:
    GetV1CompaniesCompanyIdBankAccountsResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdBankAccountsResponse$outboundSchema.parse(
      getV1CompaniesCompanyIdBankAccountsResponse,
    ),
  );
}

export function getV1CompaniesCompanyIdBankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdBankAccountsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdBankAccountsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdBankAccountsResponse' from JSON`,
  );
}
