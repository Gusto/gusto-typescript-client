/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The frequency that employees on this pay schedule are paid with Gusto.
 */
export const QueryParamFrequency = {
  EveryWeek: "Every week",
  EveryOtherWeek: "Every other week",
  TwicePerMonth: "Twice per month",
  Monthly: "Monthly",
} as const;
/**
 * The frequency that employees on this pay schedule are paid with Gusto.
 */
export type QueryParamFrequency = ClosedEnum<typeof QueryParamFrequency>;

export type GetV1CompaniesCompanyIdPaySchedulesPreviewRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The frequency that employees on this pay schedule are paid with Gusto.
   */
  frequency: QueryParamFrequency;
  /**
   * The first date that employees on this pay schedule are paid with Gusto.
   */
  anchorPayDate: string;
  /**
   * The last date of the first pay period. This can be the same date as the anchor pay date.
   */
  anchorEndOfPayPeriod: string;
  /**
   * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
   */
  day1?: number | undefined;
  /**
   * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the "Twice per month" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
   */
  day2?: number | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

export type PayPeriods = {
  /**
   * The payment date, "Check date", for the pay period
   */
  checkDate?: string | undefined;
  /**
   * The deadline to run payroll for direct deposit on the check date
   */
  runPayrollBy?: string | undefined;
  /**
   * The first day of the pay period
   */
  startDate?: string | undefined;
  /**
   * The last day of the pay period.
   */
  endDate?: string | undefined;
};

/**
 * Pay schedule preview
 */
export type GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody = {
  /**
   * A list of pay periods for the previewed pay schedule
   */
  payPeriods?: Array<PayPeriods> | undefined;
  /**
   * A list of dates for bank closures
   */
  holidays?: Array<string> | undefined;
};

/** @internal */
export const QueryParamFrequency$inboundSchema: z.ZodNativeEnum<
  typeof QueryParamFrequency
> = z.nativeEnum(QueryParamFrequency);

/** @internal */
export const QueryParamFrequency$outboundSchema: z.ZodNativeEnum<
  typeof QueryParamFrequency
> = QueryParamFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace QueryParamFrequency$ {
  /** @deprecated use `QueryParamFrequency$inboundSchema` instead. */
  export const inboundSchema = QueryParamFrequency$inboundSchema;
  /** @deprecated use `QueryParamFrequency$outboundSchema` instead. */
  export const outboundSchema = QueryParamFrequency$outboundSchema;
}

/** @internal */
export const GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPaySchedulesPreviewRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    frequency: QueryParamFrequency$inboundSchema,
    anchor_pay_date: z.string(),
    anchor_end_of_pay_period: z.string(),
    day_1: z.number().int().optional(),
    day_2: z.number().int().optional(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "anchor_pay_date": "anchorPayDate",
      "anchor_end_of_pay_period": "anchorEndOfPayPeriod",
      "day_1": "day1",
      "day_2": "day2",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$Outbound = {
  company_id: string;
  frequency: string;
  anchor_pay_date: string;
  anchor_end_of_pay_period: string;
  day_1?: number | undefined;
  day_2?: number | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdPaySchedulesPreviewRequest
  > = z.object({
    companyId: z.string(),
    frequency: QueryParamFrequency$outboundSchema,
    anchorPayDate: z.string(),
    anchorEndOfPayPeriod: z.string(),
    day1: z.number().int().optional(),
    day2: z.number().int().optional(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      anchorPayDate: "anchor_pay_date",
      anchorEndOfPayPeriod: "anchor_end_of_pay_period",
      day1: "day_1",
      day2: "day_2",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$Outbound;
}

export function getV1CompaniesCompanyIdPaySchedulesPreviewRequestToJSON(
  getV1CompaniesCompanyIdPaySchedulesPreviewRequest:
    GetV1CompaniesCompanyIdPaySchedulesPreviewRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdPaySchedulesPreviewRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdPaySchedulesPreviewRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdPaySchedulesPreviewRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPaySchedulesPreviewRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdPaySchedulesPreviewRequest' from JSON`,
  );
}

/** @internal */
export const PayPeriods$inboundSchema: z.ZodType<
  PayPeriods,
  z.ZodTypeDef,
  unknown
> = z.object({
  check_date: z.string().optional(),
  run_payroll_by: z.string().optional(),
  start_date: z.string().optional(),
  end_date: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "check_date": "checkDate",
    "run_payroll_by": "runPayrollBy",
    "start_date": "startDate",
    "end_date": "endDate",
  });
});

/** @internal */
export type PayPeriods$Outbound = {
  check_date?: string | undefined;
  run_payroll_by?: string | undefined;
  start_date?: string | undefined;
  end_date?: string | undefined;
};

/** @internal */
export const PayPeriods$outboundSchema: z.ZodType<
  PayPeriods$Outbound,
  z.ZodTypeDef,
  PayPeriods
> = z.object({
  checkDate: z.string().optional(),
  runPayrollBy: z.string().optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    checkDate: "check_date",
    runPayrollBy: "run_payroll_by",
    startDate: "start_date",
    endDate: "end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayPeriods$ {
  /** @deprecated use `PayPeriods$inboundSchema` instead. */
  export const inboundSchema = PayPeriods$inboundSchema;
  /** @deprecated use `PayPeriods$outboundSchema` instead. */
  export const outboundSchema = PayPeriods$outboundSchema;
  /** @deprecated use `PayPeriods$Outbound` instead. */
  export type Outbound = PayPeriods$Outbound;
}

export function payPeriodsToJSON(payPeriods: PayPeriods): string {
  return JSON.stringify(PayPeriods$outboundSchema.parse(payPeriods));
}

export function payPeriodsFromJSON(
  jsonString: string,
): SafeParseResult<PayPeriods, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayPeriods$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayPeriods' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    pay_periods: z.array(z.lazy(() => PayPeriods$inboundSchema)).optional(),
    holidays: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "pay_periods": "payPeriods",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$Outbound = {
  pay_periods?: Array<PayPeriods$Outbound> | undefined;
  holidays?: Array<string> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody
  > = z.object({
    payPeriods: z.array(z.lazy(() => PayPeriods$outboundSchema)).optional(),
    holidays: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      payPeriods: "pay_periods",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$Outbound;
}

export function getV1CompaniesCompanyIdPaySchedulesPreviewResponseBodyToJSON(
  getV1CompaniesCompanyIdPaySchedulesPreviewResponseBody:
    GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$outboundSchema.parse(
      getV1CompaniesCompanyIdPaySchedulesPreviewResponseBody,
    ),
  );
}

export function getV1CompaniesCompanyIdPaySchedulesPreviewResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody' from JSON`,
  );
}
