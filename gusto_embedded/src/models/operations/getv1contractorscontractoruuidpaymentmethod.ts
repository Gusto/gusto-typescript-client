/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ContractorPaymentMethod,
  ContractorPaymentMethod$inboundSchema,
  ContractorPaymentMethod$Outbound,
  ContractorPaymentMethod$outboundSchema,
} from "../components/contractorpaymentmethod.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1ContractorsContractorUuidPaymentMethodRequest = {
  /**
   * The UUID of the contractor
   */
  contractorUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1ContractorsContractorUuidPaymentMethodResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  contractorPaymentMethod?: ContractorPaymentMethod | undefined;
};

/** @internal */
export const GetV1ContractorsContractorUuidPaymentMethodRequest$inboundSchema:
  z.ZodType<
    GetV1ContractorsContractorUuidPaymentMethodRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    contractor_uuid: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      "contractor_uuid": "contractorUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1ContractorsContractorUuidPaymentMethodRequest$Outbound = {
  contractor_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1ContractorsContractorUuidPaymentMethodRequest$outboundSchema:
  z.ZodType<
    GetV1ContractorsContractorUuidPaymentMethodRequest$Outbound,
    z.ZodTypeDef,
    GetV1ContractorsContractorUuidPaymentMethodRequest
  > = z.object({
    contractorUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      contractorUuid: "contractor_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ContractorsContractorUuidPaymentMethodRequest$ {
  /** @deprecated use `GetV1ContractorsContractorUuidPaymentMethodRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1ContractorsContractorUuidPaymentMethodRequest$inboundSchema;
  /** @deprecated use `GetV1ContractorsContractorUuidPaymentMethodRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1ContractorsContractorUuidPaymentMethodRequest$outboundSchema;
  /** @deprecated use `GetV1ContractorsContractorUuidPaymentMethodRequest$Outbound` instead. */
  export type Outbound =
    GetV1ContractorsContractorUuidPaymentMethodRequest$Outbound;
}

export function getV1ContractorsContractorUuidPaymentMethodRequestToJSON(
  getV1ContractorsContractorUuidPaymentMethodRequest:
    GetV1ContractorsContractorUuidPaymentMethodRequest,
): string {
  return JSON.stringify(
    GetV1ContractorsContractorUuidPaymentMethodRequest$outboundSchema.parse(
      getV1ContractorsContractorUuidPaymentMethodRequest,
    ),
  );
}

export function getV1ContractorsContractorUuidPaymentMethodRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1ContractorsContractorUuidPaymentMethodRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1ContractorsContractorUuidPaymentMethodRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1ContractorsContractorUuidPaymentMethodRequest' from JSON`,
  );
}

/** @internal */
export const GetV1ContractorsContractorUuidPaymentMethodResponse$inboundSchema:
  z.ZodType<
    GetV1ContractorsContractorUuidPaymentMethodResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Contractor-Payment-Method": ContractorPaymentMethod$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Contractor-Payment-Method": "contractorPaymentMethod",
    });
  });

/** @internal */
export type GetV1ContractorsContractorUuidPaymentMethodResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Contractor-Payment-Method"?: ContractorPaymentMethod$Outbound | undefined;
};

/** @internal */
export const GetV1ContractorsContractorUuidPaymentMethodResponse$outboundSchema:
  z.ZodType<
    GetV1ContractorsContractorUuidPaymentMethodResponse$Outbound,
    z.ZodTypeDef,
    GetV1ContractorsContractorUuidPaymentMethodResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    contractorPaymentMethod: ContractorPaymentMethod$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      contractorPaymentMethod: "Contractor-Payment-Method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ContractorsContractorUuidPaymentMethodResponse$ {
  /** @deprecated use `GetV1ContractorsContractorUuidPaymentMethodResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1ContractorsContractorUuidPaymentMethodResponse$inboundSchema;
  /** @deprecated use `GetV1ContractorsContractorUuidPaymentMethodResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1ContractorsContractorUuidPaymentMethodResponse$outboundSchema;
  /** @deprecated use `GetV1ContractorsContractorUuidPaymentMethodResponse$Outbound` instead. */
  export type Outbound =
    GetV1ContractorsContractorUuidPaymentMethodResponse$Outbound;
}

export function getV1ContractorsContractorUuidPaymentMethodResponseToJSON(
  getV1ContractorsContractorUuidPaymentMethodResponse:
    GetV1ContractorsContractorUuidPaymentMethodResponse,
): string {
  return JSON.stringify(
    GetV1ContractorsContractorUuidPaymentMethodResponse$outboundSchema.parse(
      getV1ContractorsContractorUuidPaymentMethodResponse,
    ),
  );
}

export function getV1ContractorsContractorUuidPaymentMethodResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1ContractorsContractorUuidPaymentMethodResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1ContractorsContractorUuidPaymentMethodResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1ContractorsContractorUuidPaymentMethodResponse' from JSON`,
  );
}
