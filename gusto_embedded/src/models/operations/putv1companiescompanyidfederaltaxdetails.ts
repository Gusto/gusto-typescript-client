/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * What type of tax entity the company is
 */
export const TaxPayerType = {
  CCorporation: "C-Corporation",
  SCorporation: "S-Corporation",
  SoleProprietor: "Sole proprietor",
  Llc: "LLC",
  Llp: "LLP",
  LimitedPartnership: "Limited partnership",
  CoOwnership: "Co-ownership",
  Association: "Association",
  Trusteeship: "Trusteeship",
  GeneralPartnership: "General partnership",
  JointVenture: "Joint venture",
  NonProfit: "Non-Profit",
} as const;
/**
 * What type of tax entity the company is
 */
export type TaxPayerType = ClosedEnum<typeof TaxPayerType>;

/**
 * The form used by the company for federal tax filing. One of:
 *
 * @remarks
 * - 941 (Quarterly federal tax return)
 * - 944 (Annual federal tax return)
 */
export const FilingForm = {
  NineHundredAndFortyOne: "941",
  NineHundredAndFortyFour: "944",
} as const;
/**
 * The form used by the company for federal tax filing. One of:
 *
 * @remarks
 * - 941 (Quarterly federal tax return)
 * - 944 (Annual federal tax return)
 */
export type FilingForm = ClosedEnum<typeof FilingForm>;

/**
 * Attributes related to federal tax details that can be updated via this endpoint include:
 */
export type PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody = {
  /**
   * The legal name of the company
   */
  legalName?: string | undefined;
  /**
   * The EIN of of the company
   */
  ein?: string | undefined;
  /**
   * What type of tax entity the company is
   */
  taxPayerType?: TaxPayerType | undefined;
  /**
   * The form used by the company for federal tax filing. One of:
   *
   * @remarks
   * - 941 (Quarterly federal tax return)
   * - 944 (Annual federal tax return)
   */
  filingForm?: FilingForm | undefined;
  /**
   * Whether this company should be taxed as an S-Corporation
   */
  taxableAsScorp?: boolean | undefined;
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   */
  version: string;
};

export type PutV1CompaniesCompanyIdFederalTaxDetailsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  /**
   * Attributes related to federal tax details that can be updated via this endpoint include:
   */
  requestBody: PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody;
};

export type PutV1CompaniesCompanyIdFederalTaxDetailsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  federalTaxDetails?: components.FederalTaxDetails | undefined;
};

/** @internal */
export const TaxPayerType$inboundSchema: z.ZodNativeEnum<typeof TaxPayerType> =
  z.nativeEnum(TaxPayerType);

/** @internal */
export const TaxPayerType$outboundSchema: z.ZodNativeEnum<typeof TaxPayerType> =
  TaxPayerType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TaxPayerType$ {
  /** @deprecated use `TaxPayerType$inboundSchema` instead. */
  export const inboundSchema = TaxPayerType$inboundSchema;
  /** @deprecated use `TaxPayerType$outboundSchema` instead. */
  export const outboundSchema = TaxPayerType$outboundSchema;
}

/** @internal */
export const FilingForm$inboundSchema: z.ZodNativeEnum<typeof FilingForm> = z
  .nativeEnum(FilingForm);

/** @internal */
export const FilingForm$outboundSchema: z.ZodNativeEnum<typeof FilingForm> =
  FilingForm$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FilingForm$ {
  /** @deprecated use `FilingForm$inboundSchema` instead. */
  export const inboundSchema = FilingForm$inboundSchema;
  /** @deprecated use `FilingForm$outboundSchema` instead. */
  export const outboundSchema = FilingForm$outboundSchema;
}

/** @internal */
export const PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    legal_name: z.string().optional(),
    ein: z.string().optional(),
    tax_payer_type: TaxPayerType$inboundSchema.optional(),
    filing_form: FilingForm$inboundSchema.optional(),
    taxable_as_scorp: z.boolean().optional(),
    version: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "legal_name": "legalName",
      "tax_payer_type": "taxPayerType",
      "filing_form": "filingForm",
      "taxable_as_scorp": "taxableAsScorp",
    });
  });

/** @internal */
export type PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$Outbound = {
  legal_name?: string | undefined;
  ein?: string | undefined;
  tax_payer_type?: string | undefined;
  filing_form?: string | undefined;
  taxable_as_scorp?: boolean | undefined;
  version: string;
};

/** @internal */
export const PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody
  > = z.object({
    legalName: z.string().optional(),
    ein: z.string().optional(),
    taxPayerType: TaxPayerType$outboundSchema.optional(),
    filingForm: FilingForm$outboundSchema.optional(),
    taxableAsScorp: z.boolean().optional(),
    version: z.string(),
  }).transform((v) => {
    return remap$(v, {
      legalName: "legal_name",
      taxPayerType: "tax_payer_type",
      filingForm: "filing_form",
      taxableAsScorp: "taxable_as_scorp",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$ {
  /** @deprecated use `PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$Outbound;
}

export function putV1CompaniesCompanyIdFederalTaxDetailsRequestBodyToJSON(
  putV1CompaniesCompanyIdFederalTaxDetailsRequestBody:
    PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$outboundSchema.parse(
      putV1CompaniesCompanyIdFederalTaxDetailsRequestBody,
    ),
  );
}

export function putV1CompaniesCompanyIdFederalTaxDetailsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1CompaniesCompanyIdFederalTaxDetailsRequest$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdFederalTaxDetailsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
    RequestBody: z.lazy(() =>
      PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutV1CompaniesCompanyIdFederalTaxDetailsRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$Outbound;
};

/** @internal */
export const PutV1CompaniesCompanyIdFederalTaxDetailsRequest$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdFederalTaxDetailsRequest$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdFederalTaxDetailsRequest
  > = z.object({
    companyId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
    requestBody: z.lazy(() =>
      PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdFederalTaxDetailsRequest$ {
  /** @deprecated use `PutV1CompaniesCompanyIdFederalTaxDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdFederalTaxDetailsRequest$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdFederalTaxDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdFederalTaxDetailsRequest$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdFederalTaxDetailsRequest$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdFederalTaxDetailsRequest$Outbound;
}

export function putV1CompaniesCompanyIdFederalTaxDetailsRequestToJSON(
  putV1CompaniesCompanyIdFederalTaxDetailsRequest:
    PutV1CompaniesCompanyIdFederalTaxDetailsRequest,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdFederalTaxDetailsRequest$outboundSchema.parse(
      putV1CompaniesCompanyIdFederalTaxDetailsRequest,
    ),
  );
}

export function putV1CompaniesCompanyIdFederalTaxDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdFederalTaxDetailsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdFederalTaxDetailsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1CompaniesCompanyIdFederalTaxDetailsRequest' from JSON`,
  );
}

/** @internal */
export const PutV1CompaniesCompanyIdFederalTaxDetailsResponse$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdFederalTaxDetailsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Federal-Tax-Details": components.FederalTaxDetails$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Federal-Tax-Details": "federalTaxDetails",
    });
  });

/** @internal */
export type PutV1CompaniesCompanyIdFederalTaxDetailsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Federal-Tax-Details"?: components.FederalTaxDetails$Outbound | undefined;
};

/** @internal */
export const PutV1CompaniesCompanyIdFederalTaxDetailsResponse$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdFederalTaxDetailsResponse$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdFederalTaxDetailsResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    federalTaxDetails: components.FederalTaxDetails$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      federalTaxDetails: "Federal-Tax-Details",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdFederalTaxDetailsResponse$ {
  /** @deprecated use `PutV1CompaniesCompanyIdFederalTaxDetailsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdFederalTaxDetailsResponse$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdFederalTaxDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdFederalTaxDetailsResponse$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdFederalTaxDetailsResponse$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdFederalTaxDetailsResponse$Outbound;
}

export function putV1CompaniesCompanyIdFederalTaxDetailsResponseToJSON(
  putV1CompaniesCompanyIdFederalTaxDetailsResponse:
    PutV1CompaniesCompanyIdFederalTaxDetailsResponse,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdFederalTaxDetailsResponse$outboundSchema.parse(
      putV1CompaniesCompanyIdFederalTaxDetailsResponse,
    ),
  );
}

export function putV1CompaniesCompanyIdFederalTaxDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdFederalTaxDetailsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdFederalTaxDetailsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1CompaniesCompanyIdFederalTaxDetailsResponse' from JSON`,
  );
}
