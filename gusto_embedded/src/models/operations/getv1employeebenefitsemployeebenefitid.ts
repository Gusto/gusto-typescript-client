/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  EmployeeBenefit,
  EmployeeBenefit$inboundSchema,
  EmployeeBenefit$Outbound,
  EmployeeBenefit$outboundSchema,
} from "../components/employeebenefit.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1EmployeeBenefitsEmployeeBenefitIdRequest = {
  /**
   * The UUID of the employee benefit.
   */
  employeeBenefitId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1EmployeeBenefitsEmployeeBenefitIdResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  employeeBenefit?: EmployeeBenefit | undefined;
};

/** @internal */
export const GetV1EmployeeBenefitsEmployeeBenefitIdRequest$inboundSchema:
  z.ZodType<
    GetV1EmployeeBenefitsEmployeeBenefitIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_benefit_id: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      "employee_benefit_id": "employeeBenefitId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1EmployeeBenefitsEmployeeBenefitIdRequest$Outbound = {
  employee_benefit_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1EmployeeBenefitsEmployeeBenefitIdRequest$outboundSchema:
  z.ZodType<
    GetV1EmployeeBenefitsEmployeeBenefitIdRequest$Outbound,
    z.ZodTypeDef,
    GetV1EmployeeBenefitsEmployeeBenefitIdRequest
  > = z.object({
    employeeBenefitId: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      employeeBenefitId: "employee_benefit_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeeBenefitsEmployeeBenefitIdRequest$ {
  /** @deprecated use `GetV1EmployeeBenefitsEmployeeBenefitIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeeBenefitsEmployeeBenefitIdRequest$inboundSchema;
  /** @deprecated use `GetV1EmployeeBenefitsEmployeeBenefitIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeeBenefitsEmployeeBenefitIdRequest$outboundSchema;
  /** @deprecated use `GetV1EmployeeBenefitsEmployeeBenefitIdRequest$Outbound` instead. */
  export type Outbound = GetV1EmployeeBenefitsEmployeeBenefitIdRequest$Outbound;
}

export function getV1EmployeeBenefitsEmployeeBenefitIdRequestToJSON(
  getV1EmployeeBenefitsEmployeeBenefitIdRequest:
    GetV1EmployeeBenefitsEmployeeBenefitIdRequest,
): string {
  return JSON.stringify(
    GetV1EmployeeBenefitsEmployeeBenefitIdRequest$outboundSchema.parse(
      getV1EmployeeBenefitsEmployeeBenefitIdRequest,
    ),
  );
}

export function getV1EmployeeBenefitsEmployeeBenefitIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeeBenefitsEmployeeBenefitIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeeBenefitsEmployeeBenefitIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1EmployeeBenefitsEmployeeBenefitIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV1EmployeeBenefitsEmployeeBenefitIdResponse$inboundSchema:
  z.ZodType<
    GetV1EmployeeBenefitsEmployeeBenefitIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Employee-Benefit": EmployeeBenefit$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Employee-Benefit": "employeeBenefit",
    });
  });

/** @internal */
export type GetV1EmployeeBenefitsEmployeeBenefitIdResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Employee-Benefit"?: EmployeeBenefit$Outbound | undefined;
};

/** @internal */
export const GetV1EmployeeBenefitsEmployeeBenefitIdResponse$outboundSchema:
  z.ZodType<
    GetV1EmployeeBenefitsEmployeeBenefitIdResponse$Outbound,
    z.ZodTypeDef,
    GetV1EmployeeBenefitsEmployeeBenefitIdResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    employeeBenefit: EmployeeBenefit$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      employeeBenefit: "Employee-Benefit",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeeBenefitsEmployeeBenefitIdResponse$ {
  /** @deprecated use `GetV1EmployeeBenefitsEmployeeBenefitIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeeBenefitsEmployeeBenefitIdResponse$inboundSchema;
  /** @deprecated use `GetV1EmployeeBenefitsEmployeeBenefitIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeeBenefitsEmployeeBenefitIdResponse$outboundSchema;
  /** @deprecated use `GetV1EmployeeBenefitsEmployeeBenefitIdResponse$Outbound` instead. */
  export type Outbound =
    GetV1EmployeeBenefitsEmployeeBenefitIdResponse$Outbound;
}

export function getV1EmployeeBenefitsEmployeeBenefitIdResponseToJSON(
  getV1EmployeeBenefitsEmployeeBenefitIdResponse:
    GetV1EmployeeBenefitsEmployeeBenefitIdResponse,
): string {
  return JSON.stringify(
    GetV1EmployeeBenefitsEmployeeBenefitIdResponse$outboundSchema.parse(
      getV1EmployeeBenefitsEmployeeBenefitIdResponse,
    ),
  );
}

export function getV1EmployeeBenefitsEmployeeBenefitIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeeBenefitsEmployeeBenefitIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeeBenefitsEmployeeBenefitIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1EmployeeBenefitsEmployeeBenefitIdResponse' from JSON`,
  );
}
