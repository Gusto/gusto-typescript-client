/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1CompanyFormSignRequestBody = {
  /**
   * The signature
   */
  signatureText: string;
  /**
   * Whether you agree to sign electronically
   */
  agree: boolean;
  /**
   * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported.
   */
  signedByIpAddress: string;
};

export type PutV1CompanyFormSignRequest = {
  /**
   * The UUID of the form
   */
  formId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutV1CompanyFormSignRequestBody;
};

/** @internal */
export const PutV1CompanyFormSignRequestBody$inboundSchema: z.ZodType<
  PutV1CompanyFormSignRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  signature_text: z.string(),
  agree: z.boolean(),
  signed_by_ip_address: z.string(),
}).transform((v) => {
  return remap$(v, {
    "signature_text": "signatureText",
    "signed_by_ip_address": "signedByIpAddress",
  });
});

/** @internal */
export type PutV1CompanyFormSignRequestBody$Outbound = {
  signature_text: string;
  agree: boolean;
  signed_by_ip_address: string;
};

/** @internal */
export const PutV1CompanyFormSignRequestBody$outboundSchema: z.ZodType<
  PutV1CompanyFormSignRequestBody$Outbound,
  z.ZodTypeDef,
  PutV1CompanyFormSignRequestBody
> = z.object({
  signatureText: z.string(),
  agree: z.boolean(),
  signedByIpAddress: z.string(),
}).transform((v) => {
  return remap$(v, {
    signatureText: "signature_text",
    signedByIpAddress: "signed_by_ip_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompanyFormSignRequestBody$ {
  /** @deprecated use `PutV1CompanyFormSignRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutV1CompanyFormSignRequestBody$inboundSchema;
  /** @deprecated use `PutV1CompanyFormSignRequestBody$outboundSchema` instead. */
  export const outboundSchema = PutV1CompanyFormSignRequestBody$outboundSchema;
  /** @deprecated use `PutV1CompanyFormSignRequestBody$Outbound` instead. */
  export type Outbound = PutV1CompanyFormSignRequestBody$Outbound;
}

export function putV1CompanyFormSignRequestBodyToJSON(
  putV1CompanyFormSignRequestBody: PutV1CompanyFormSignRequestBody,
): string {
  return JSON.stringify(
    PutV1CompanyFormSignRequestBody$outboundSchema.parse(
      putV1CompanyFormSignRequestBody,
    ),
  );
}

export function putV1CompanyFormSignRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutV1CompanyFormSignRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1CompanyFormSignRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompanyFormSignRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1CompanyFormSignRequest$inboundSchema: z.ZodType<
  PutV1CompanyFormSignRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  form_id: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
  RequestBody: z.lazy(() => PutV1CompanyFormSignRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "form_id": "formId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1CompanyFormSignRequest$Outbound = {
  form_id: string;
  "X-Gusto-API-Version"?: string | undefined;
  RequestBody: PutV1CompanyFormSignRequestBody$Outbound;
};

/** @internal */
export const PutV1CompanyFormSignRequest$outboundSchema: z.ZodType<
  PutV1CompanyFormSignRequest$Outbound,
  z.ZodTypeDef,
  PutV1CompanyFormSignRequest
> = z.object({
  formId: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
  requestBody: z.lazy(() => PutV1CompanyFormSignRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    formId: "form_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompanyFormSignRequest$ {
  /** @deprecated use `PutV1CompanyFormSignRequest$inboundSchema` instead. */
  export const inboundSchema = PutV1CompanyFormSignRequest$inboundSchema;
  /** @deprecated use `PutV1CompanyFormSignRequest$outboundSchema` instead. */
  export const outboundSchema = PutV1CompanyFormSignRequest$outboundSchema;
  /** @deprecated use `PutV1CompanyFormSignRequest$Outbound` instead. */
  export type Outbound = PutV1CompanyFormSignRequest$Outbound;
}

export function putV1CompanyFormSignRequestToJSON(
  putV1CompanyFormSignRequest: PutV1CompanyFormSignRequest,
): string {
  return JSON.stringify(
    PutV1CompanyFormSignRequest$outboundSchema.parse(
      putV1CompanyFormSignRequest,
    ),
  );
}

export function putV1CompanyFormSignRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV1CompanyFormSignRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1CompanyFormSignRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompanyFormSignRequest' from JSON`,
  );
}
