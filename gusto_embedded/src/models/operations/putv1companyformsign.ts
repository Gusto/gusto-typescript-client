/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  Form,
  Form$inboundSchema,
  Form$Outbound,
  Form$outboundSchema,
} from "../components/form.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1CompanyFormSignRequestBody = {
  /**
   * The signature
   */
  signatureText: string;
  /**
   * Whether you agree to sign electronically
   */
  agree: boolean;
  /**
   * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
   */
  signedByIpAddress?: string | undefined;
};

export type PutV1CompanyFormSignRequest = {
  /**
   * The UUID of the form
   */
  formId: string;
  /**
   * Optional header to supply the IP address. This can be used to supply the IP address for signature endpoints instead of the signed_by_ip_address parameter.
   */
  xGustoClientIp?: string | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PutV1CompanyFormSignRequestBody;
};

export type PutV1CompanyFormSignResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  form?: Form | undefined;
};

/** @internal */
export const PutV1CompanyFormSignRequestBody$inboundSchema: z.ZodType<
  PutV1CompanyFormSignRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  signature_text: z.string(),
  agree: z.boolean(),
  signed_by_ip_address: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "signature_text": "signatureText",
    "signed_by_ip_address": "signedByIpAddress",
  });
});

/** @internal */
export type PutV1CompanyFormSignRequestBody$Outbound = {
  signature_text: string;
  agree: boolean;
  signed_by_ip_address?: string | undefined;
};

/** @internal */
export const PutV1CompanyFormSignRequestBody$outboundSchema: z.ZodType<
  PutV1CompanyFormSignRequestBody$Outbound,
  z.ZodTypeDef,
  PutV1CompanyFormSignRequestBody
> = z.object({
  signatureText: z.string(),
  agree: z.boolean(),
  signedByIpAddress: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    signatureText: "signature_text",
    signedByIpAddress: "signed_by_ip_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompanyFormSignRequestBody$ {
  /** @deprecated use `PutV1CompanyFormSignRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutV1CompanyFormSignRequestBody$inboundSchema;
  /** @deprecated use `PutV1CompanyFormSignRequestBody$outboundSchema` instead. */
  export const outboundSchema = PutV1CompanyFormSignRequestBody$outboundSchema;
  /** @deprecated use `PutV1CompanyFormSignRequestBody$Outbound` instead. */
  export type Outbound = PutV1CompanyFormSignRequestBody$Outbound;
}

export function putV1CompanyFormSignRequestBodyToJSON(
  putV1CompanyFormSignRequestBody: PutV1CompanyFormSignRequestBody,
): string {
  return JSON.stringify(
    PutV1CompanyFormSignRequestBody$outboundSchema.parse(
      putV1CompanyFormSignRequestBody,
    ),
  );
}

export function putV1CompanyFormSignRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutV1CompanyFormSignRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1CompanyFormSignRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompanyFormSignRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1CompanyFormSignRequest$inboundSchema: z.ZodType<
  PutV1CompanyFormSignRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  form_id: z.string(),
  "x-gusto-client-ip": z.string().optional(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  RequestBody: z.lazy(() => PutV1CompanyFormSignRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "form_id": "formId",
    "x-gusto-client-ip": "xGustoClientIp",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1CompanyFormSignRequest$Outbound = {
  form_id: string;
  "x-gusto-client-ip"?: string | undefined;
  "X-Gusto-API-Version": string;
  RequestBody: PutV1CompanyFormSignRequestBody$Outbound;
};

/** @internal */
export const PutV1CompanyFormSignRequest$outboundSchema: z.ZodType<
  PutV1CompanyFormSignRequest$Outbound,
  z.ZodTypeDef,
  PutV1CompanyFormSignRequest
> = z.object({
  formId: z.string(),
  xGustoClientIp: z.string().optional(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  requestBody: z.lazy(() => PutV1CompanyFormSignRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    formId: "form_id",
    xGustoClientIp: "x-gusto-client-ip",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompanyFormSignRequest$ {
  /** @deprecated use `PutV1CompanyFormSignRequest$inboundSchema` instead. */
  export const inboundSchema = PutV1CompanyFormSignRequest$inboundSchema;
  /** @deprecated use `PutV1CompanyFormSignRequest$outboundSchema` instead. */
  export const outboundSchema = PutV1CompanyFormSignRequest$outboundSchema;
  /** @deprecated use `PutV1CompanyFormSignRequest$Outbound` instead. */
  export type Outbound = PutV1CompanyFormSignRequest$Outbound;
}

export function putV1CompanyFormSignRequestToJSON(
  putV1CompanyFormSignRequest: PutV1CompanyFormSignRequest,
): string {
  return JSON.stringify(
    PutV1CompanyFormSignRequest$outboundSchema.parse(
      putV1CompanyFormSignRequest,
    ),
  );
}

export function putV1CompanyFormSignRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV1CompanyFormSignRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1CompanyFormSignRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompanyFormSignRequest' from JSON`,
  );
}

/** @internal */
export const PutV1CompanyFormSignResponse$inboundSchema: z.ZodType<
  PutV1CompanyFormSignResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  Form: Form$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Form": "form",
  });
});

/** @internal */
export type PutV1CompanyFormSignResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  Form?: Form$Outbound | undefined;
};

/** @internal */
export const PutV1CompanyFormSignResponse$outboundSchema: z.ZodType<
  PutV1CompanyFormSignResponse$Outbound,
  z.ZodTypeDef,
  PutV1CompanyFormSignResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  form: Form$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    form: "Form",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompanyFormSignResponse$ {
  /** @deprecated use `PutV1CompanyFormSignResponse$inboundSchema` instead. */
  export const inboundSchema = PutV1CompanyFormSignResponse$inboundSchema;
  /** @deprecated use `PutV1CompanyFormSignResponse$outboundSchema` instead. */
  export const outboundSchema = PutV1CompanyFormSignResponse$outboundSchema;
  /** @deprecated use `PutV1CompanyFormSignResponse$Outbound` instead. */
  export type Outbound = PutV1CompanyFormSignResponse$Outbound;
}

export function putV1CompanyFormSignResponseToJSON(
  putV1CompanyFormSignResponse: PutV1CompanyFormSignResponse,
): string {
  return JSON.stringify(
    PutV1CompanyFormSignResponse$outboundSchema.parse(
      putV1CompanyFormSignResponse,
    ),
  );
}

export function putV1CompanyFormSignResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV1CompanyFormSignResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1CompanyFormSignResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompanyFormSignResponse' from JSON`,
  );
}
