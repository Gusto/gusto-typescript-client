/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ContractorPayment,
  ContractorPayment$inboundSchema,
  ContractorPayment$Outbound,
  ContractorPayment$outboundSchema,
} from "../components/contractorpayment.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1ContractorPaymentsContractorPaymentUuidFundRequest = {
  /**
   * The UUID of the contractor payment
   */
  contractorPaymentUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1ContractorPaymentsContractorPaymentUuidFundResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  contractorPayment?: ContractorPayment | undefined;
};

/** @internal */
export const GetV1ContractorPaymentsContractorPaymentUuidFundRequest$inboundSchema:
  z.ZodType<
    GetV1ContractorPaymentsContractorPaymentUuidFundRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    contractor_payment_uuid: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      "contractor_payment_uuid": "contractorPaymentUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1ContractorPaymentsContractorPaymentUuidFundRequest$Outbound = {
  contractor_payment_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1ContractorPaymentsContractorPaymentUuidFundRequest$outboundSchema:
  z.ZodType<
    GetV1ContractorPaymentsContractorPaymentUuidFundRequest$Outbound,
    z.ZodTypeDef,
    GetV1ContractorPaymentsContractorPaymentUuidFundRequest
  > = z.object({
    contractorPaymentUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      contractorPaymentUuid: "contractor_payment_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ContractorPaymentsContractorPaymentUuidFundRequest$ {
  /** @deprecated use `GetV1ContractorPaymentsContractorPaymentUuidFundRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1ContractorPaymentsContractorPaymentUuidFundRequest$inboundSchema;
  /** @deprecated use `GetV1ContractorPaymentsContractorPaymentUuidFundRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1ContractorPaymentsContractorPaymentUuidFundRequest$outboundSchema;
  /** @deprecated use `GetV1ContractorPaymentsContractorPaymentUuidFundRequest$Outbound` instead. */
  export type Outbound =
    GetV1ContractorPaymentsContractorPaymentUuidFundRequest$Outbound;
}

export function getV1ContractorPaymentsContractorPaymentUuidFundRequestToJSON(
  getV1ContractorPaymentsContractorPaymentUuidFundRequest:
    GetV1ContractorPaymentsContractorPaymentUuidFundRequest,
): string {
  return JSON.stringify(
    GetV1ContractorPaymentsContractorPaymentUuidFundRequest$outboundSchema
      .parse(getV1ContractorPaymentsContractorPaymentUuidFundRequest),
  );
}

export function getV1ContractorPaymentsContractorPaymentUuidFundRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1ContractorPaymentsContractorPaymentUuidFundRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1ContractorPaymentsContractorPaymentUuidFundRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1ContractorPaymentsContractorPaymentUuidFundRequest' from JSON`,
  );
}

/** @internal */
export const GetV1ContractorPaymentsContractorPaymentUuidFundResponse$inboundSchema:
  z.ZodType<
    GetV1ContractorPaymentsContractorPaymentUuidFundResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Contractor-Payment": ContractorPayment$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Contractor-Payment": "contractorPayment",
    });
  });

/** @internal */
export type GetV1ContractorPaymentsContractorPaymentUuidFundResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    "Contractor-Payment"?: ContractorPayment$Outbound | undefined;
  };

/** @internal */
export const GetV1ContractorPaymentsContractorPaymentUuidFundResponse$outboundSchema:
  z.ZodType<
    GetV1ContractorPaymentsContractorPaymentUuidFundResponse$Outbound,
    z.ZodTypeDef,
    GetV1ContractorPaymentsContractorPaymentUuidFundResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    contractorPayment: ContractorPayment$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      contractorPayment: "Contractor-Payment",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ContractorPaymentsContractorPaymentUuidFundResponse$ {
  /** @deprecated use `GetV1ContractorPaymentsContractorPaymentUuidFundResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1ContractorPaymentsContractorPaymentUuidFundResponse$inboundSchema;
  /** @deprecated use `GetV1ContractorPaymentsContractorPaymentUuidFundResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1ContractorPaymentsContractorPaymentUuidFundResponse$outboundSchema;
  /** @deprecated use `GetV1ContractorPaymentsContractorPaymentUuidFundResponse$Outbound` instead. */
  export type Outbound =
    GetV1ContractorPaymentsContractorPaymentUuidFundResponse$Outbound;
}

export function getV1ContractorPaymentsContractorPaymentUuidFundResponseToJSON(
  getV1ContractorPaymentsContractorPaymentUuidFundResponse:
    GetV1ContractorPaymentsContractorPaymentUuidFundResponse,
): string {
  return JSON.stringify(
    GetV1ContractorPaymentsContractorPaymentUuidFundResponse$outboundSchema
      .parse(getV1ContractorPaymentsContractorPaymentUuidFundResponse),
  );
}

export function getV1ContractorPaymentsContractorPaymentUuidFundResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1ContractorPaymentsContractorPaymentUuidFundResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1ContractorPaymentsContractorPaymentUuidFundResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1ContractorPaymentsContractorPaymentUuidFundResponse' from JSON`,
  );
}
