/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import {
  EmployeeAddress,
  EmployeeAddress$inboundSchema,
  EmployeeAddress$Outbound,
  EmployeeAddress$outboundSchema,
} from "../components/employeeaddress.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFourMinus04Minus01: "2024-04-01",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion =
  ClosedEnum<typeof PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion>;

export type PutV1HomeAddressesHomeAddressUuidRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  street1?: string | undefined;
  street2?: string | null | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
  effectiveDate?: RFCDate | null | undefined;
  courtesyWithholding?: boolean | undefined;
};

export type PutV1HomeAddressesHomeAddressUuidRequest = {
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion
    | undefined;
  /**
   * The UUID of the home address
   */
  homeAddressUuid: string;
  requestBody: PutV1HomeAddressesHomeAddressUuidRequestBody;
};

export type PutV1HomeAddressesHomeAddressUuidResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  employeeAddress?: EmployeeAddress | undefined;
};

/** @internal */
export const PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion
  > = z.nativeEnum(PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion);

/** @internal */
export const PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion
  > = PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$ {
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const PutV1HomeAddressesHomeAddressUuidRequestBody$inboundSchema:
  z.ZodType<
    PutV1HomeAddressesHomeAddressUuidRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    version: z.string(),
    street_1: z.string().optional(),
    street_2: z.nullable(z.string()).optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip: z.string().optional(),
    effective_date: z.nullable(z.string().transform(v => new RFCDate(v)))
      .optional(),
    courtesy_withholding: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "street_1": "street1",
      "street_2": "street2",
      "effective_date": "effectiveDate",
      "courtesy_withholding": "courtesyWithholding",
    });
  });

/** @internal */
export type PutV1HomeAddressesHomeAddressUuidRequestBody$Outbound = {
  version: string;
  street_1?: string | undefined;
  street_2?: string | null | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
  effective_date?: string | null | undefined;
  courtesy_withholding?: boolean | undefined;
};

/** @internal */
export const PutV1HomeAddressesHomeAddressUuidRequestBody$outboundSchema:
  z.ZodType<
    PutV1HomeAddressesHomeAddressUuidRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1HomeAddressesHomeAddressUuidRequestBody
  > = z.object({
    version: z.string(),
    street1: z.string().optional(),
    street2: z.nullable(z.string()).optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip: z.string().optional(),
    effectiveDate: z.nullable(
      z.instanceof(RFCDate).transform(v => v.toString()),
    ).optional(),
    courtesyWithholding: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      street1: "street_1",
      street2: "street_2",
      effectiveDate: "effective_date",
      courtesyWithholding: "courtesy_withholding",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1HomeAddressesHomeAddressUuidRequestBody$ {
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1HomeAddressesHomeAddressUuidRequestBody$inboundSchema;
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1HomeAddressesHomeAddressUuidRequestBody$outboundSchema;
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidRequestBody$Outbound` instead. */
  export type Outbound = PutV1HomeAddressesHomeAddressUuidRequestBody$Outbound;
}

export function putV1HomeAddressesHomeAddressUuidRequestBodyToJSON(
  putV1HomeAddressesHomeAddressUuidRequestBody:
    PutV1HomeAddressesHomeAddressUuidRequestBody,
): string {
  return JSON.stringify(
    PutV1HomeAddressesHomeAddressUuidRequestBody$outboundSchema.parse(
      putV1HomeAddressesHomeAddressUuidRequestBody,
    ),
  );
}

export function putV1HomeAddressesHomeAddressUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1HomeAddressesHomeAddressUuidRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1HomeAddressesHomeAddressUuidRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1HomeAddressesHomeAddressUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1HomeAddressesHomeAddressUuidRequest$inboundSchema: z.ZodType<
  PutV1HomeAddressesHomeAddressUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Gusto-API-Version":
    PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$inboundSchema
      .default("2024-04-01"),
  home_address_uuid: z.string(),
  RequestBody: z.lazy(() =>
    PutV1HomeAddressesHomeAddressUuidRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "home_address_uuid": "homeAddressUuid",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1HomeAddressesHomeAddressUuidRequest$Outbound = {
  "X-Gusto-API-Version": string;
  home_address_uuid: string;
  RequestBody: PutV1HomeAddressesHomeAddressUuidRequestBody$Outbound;
};

/** @internal */
export const PutV1HomeAddressesHomeAddressUuidRequest$outboundSchema: z.ZodType<
  PutV1HomeAddressesHomeAddressUuidRequest$Outbound,
  z.ZodTypeDef,
  PutV1HomeAddressesHomeAddressUuidRequest
> = z.object({
  xGustoAPIVersion:
    PutV1HomeAddressesHomeAddressUuidHeaderXGustoAPIVersion$outboundSchema
      .default("2024-04-01"),
  homeAddressUuid: z.string(),
  requestBody: z.lazy(() =>
    PutV1HomeAddressesHomeAddressUuidRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    xGustoAPIVersion: "X-Gusto-API-Version",
    homeAddressUuid: "home_address_uuid",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1HomeAddressesHomeAddressUuidRequest$ {
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1HomeAddressesHomeAddressUuidRequest$inboundSchema;
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1HomeAddressesHomeAddressUuidRequest$outboundSchema;
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidRequest$Outbound` instead. */
  export type Outbound = PutV1HomeAddressesHomeAddressUuidRequest$Outbound;
}

export function putV1HomeAddressesHomeAddressUuidRequestToJSON(
  putV1HomeAddressesHomeAddressUuidRequest:
    PutV1HomeAddressesHomeAddressUuidRequest,
): string {
  return JSON.stringify(
    PutV1HomeAddressesHomeAddressUuidRequest$outboundSchema.parse(
      putV1HomeAddressesHomeAddressUuidRequest,
    ),
  );
}

export function putV1HomeAddressesHomeAddressUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1HomeAddressesHomeAddressUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1HomeAddressesHomeAddressUuidRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1HomeAddressesHomeAddressUuidRequest' from JSON`,
  );
}

/** @internal */
export const PutV1HomeAddressesHomeAddressUuidResponse$inboundSchema: z.ZodType<
  PutV1HomeAddressesHomeAddressUuidResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Employee-Address": EmployeeAddress$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Employee-Address": "employeeAddress",
  });
});

/** @internal */
export type PutV1HomeAddressesHomeAddressUuidResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Employee-Address"?: EmployeeAddress$Outbound | undefined;
};

/** @internal */
export const PutV1HomeAddressesHomeAddressUuidResponse$outboundSchema:
  z.ZodType<
    PutV1HomeAddressesHomeAddressUuidResponse$Outbound,
    z.ZodTypeDef,
    PutV1HomeAddressesHomeAddressUuidResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    employeeAddress: EmployeeAddress$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      employeeAddress: "Employee-Address",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1HomeAddressesHomeAddressUuidResponse$ {
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutV1HomeAddressesHomeAddressUuidResponse$inboundSchema;
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV1HomeAddressesHomeAddressUuidResponse$outboundSchema;
  /** @deprecated use `PutV1HomeAddressesHomeAddressUuidResponse$Outbound` instead. */
  export type Outbound = PutV1HomeAddressesHomeAddressUuidResponse$Outbound;
}

export function putV1HomeAddressesHomeAddressUuidResponseToJSON(
  putV1HomeAddressesHomeAddressUuidResponse:
    PutV1HomeAddressesHomeAddressUuidResponse,
): string {
  return JSON.stringify(
    PutV1HomeAddressesHomeAddressUuidResponse$outboundSchema.parse(
      putV1HomeAddressesHomeAddressUuidResponse,
    ),
  );
}

export function putV1HomeAddressesHomeAddressUuidResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1HomeAddressesHomeAddressUuidResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1HomeAddressesHomeAddressUuidResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1HomeAddressesHomeAddressUuidResponse' from JSON`,
  );
}
