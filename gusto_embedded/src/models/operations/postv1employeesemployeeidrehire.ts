/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1EmployeesEmployeeIdRehireRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  rehireBody: components.RehireBody;
};

/** @internal */
export const PostV1EmployeesEmployeeIdRehireRequest$inboundSchema: z.ZodType<
  PostV1EmployeesEmployeeIdRehireRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
  "Rehire-Body": components.RehireBody$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "Rehire-Body": "rehireBody",
  });
});

/** @internal */
export type PostV1EmployeesEmployeeIdRehireRequest$Outbound = {
  employee_id: string;
  "X-Gusto-API-Version"?: string | undefined;
  "Rehire-Body": components.RehireBody$Outbound;
};

/** @internal */
export const PostV1EmployeesEmployeeIdRehireRequest$outboundSchema: z.ZodType<
  PostV1EmployeesEmployeeIdRehireRequest$Outbound,
  z.ZodTypeDef,
  PostV1EmployeesEmployeeIdRehireRequest
> = z.object({
  employeeId: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
  rehireBody: components.RehireBody$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
    rehireBody: "Rehire-Body",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdRehireRequest$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdRehireRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdRehireRequest$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdRehireRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdRehireRequest$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdRehireRequest$Outbound` instead. */
  export type Outbound = PostV1EmployeesEmployeeIdRehireRequest$Outbound;
}

export function postV1EmployeesEmployeeIdRehireRequestToJSON(
  postV1EmployeesEmployeeIdRehireRequest:
    PostV1EmployeesEmployeeIdRehireRequest,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdRehireRequest$outboundSchema.parse(
      postV1EmployeesEmployeeIdRehireRequest,
    ),
  );
}

export function postV1EmployeesEmployeeIdRehireRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1EmployeesEmployeeIdRehireRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdRehireRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1EmployeesEmployeeIdRehireRequest' from JSON`,
  );
}
