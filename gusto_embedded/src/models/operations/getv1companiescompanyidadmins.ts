/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  Admin,
  Admin$inboundSchema,
  Admin$Outbound,
  Admin$outboundSchema,
} from "../components/admin.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompaniesCompanyIdAdminsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1CompaniesCompanyIdAdminsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  adminList?: Array<Admin> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdAdminsRequest$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdAdminsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdAdminsRequest$Outbound = {
  company_id: string;
  page?: number | undefined;
  per?: number | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyIdAdminsRequest$outboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdAdminsRequest$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesCompanyIdAdminsRequest
> = z.object({
  companyId: z.string(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdAdminsRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdAdminsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdAdminsRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdAdminsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdAdminsRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdAdminsRequest$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdAdminsRequest$Outbound;
}

export function getV1CompaniesCompanyIdAdminsRequestToJSON(
  getV1CompaniesCompanyIdAdminsRequest: GetV1CompaniesCompanyIdAdminsRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdAdminsRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdAdminsRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdAdminsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompaniesCompanyIdAdminsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdAdminsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesCompanyIdAdminsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdAdminsResponse$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdAdminsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Admin-List": z.array(Admin$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Admin-List": "adminList",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdAdminsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Admin-List"?: Array<Admin$Outbound> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdAdminsResponse$outboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdAdminsResponse$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesCompanyIdAdminsResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  adminList: z.array(Admin$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    adminList: "Admin-List",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdAdminsResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdAdminsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdAdminsResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdAdminsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdAdminsResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdAdminsResponse$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdAdminsResponse$Outbound;
}

export function getV1CompaniesCompanyIdAdminsResponseToJSON(
  getV1CompaniesCompanyIdAdminsResponse: GetV1CompaniesCompanyIdAdminsResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdAdminsResponse$outboundSchema.parse(
      getV1CompaniesCompanyIdAdminsResponse,
    ),
  );
}

export function getV1CompaniesCompanyIdAdminsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompaniesCompanyIdAdminsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdAdminsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesCompanyIdAdminsResponse' from JSON`,
  );
}
