/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  I9Authorization,
  I9Authorization$inboundSchema,
  I9Authorization$Outbound,
  I9Authorization$outboundSchema,
} from "../components/i9authorization.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody = {
  /**
   * The signature
   */
  signatureText: string;
  /**
   * The signer's job title
   */
  signerTitle: string;
  /**
   * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
   */
  signedByIpAddress?: string | undefined;
  /**
   * Whether you agree to sign electronically
   */
  agree: boolean;
  /**
   * Any additional notes
   */
  additionalInfo?: string | undefined;
  /**
   * Whether an alternative procedure authorized by DHS to examine documents was used
   */
  altProcedure?: boolean | undefined;
};

export type PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Optional header to supply the IP address. This can be used to supply the IP address for signature endpoints instead of the signed_by_ip_address parameter.
   */
  xGustoClientIp?: string | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody;
};

export type PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  i9Authorization?: I9Authorization | undefined;
};

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$inboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    signature_text: z.string(),
    signer_title: z.string(),
    signed_by_ip_address: z.string().optional(),
    agree: z.boolean(),
    additional_info: z.string().optional(),
    alt_procedure: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "signature_text": "signatureText",
      "signer_title": "signerTitle",
      "signed_by_ip_address": "signedByIpAddress",
      "additional_info": "additionalInfo",
      "alt_procedure": "altProcedure",
    });
  });

/** @internal */
export type PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$Outbound =
  {
    signature_text: string;
    signer_title: string;
    signed_by_ip_address?: string | undefined;
    agree: boolean;
    additional_info?: string | undefined;
    alt_procedure?: boolean | undefined;
  };

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$outboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody
  > = z.object({
    signatureText: z.string(),
    signerTitle: z.string(),
    signedByIpAddress: z.string().optional(),
    agree: z.boolean(),
    additionalInfo: z.string().optional(),
    altProcedure: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      signatureText: "signature_text",
      signerTitle: "signer_title",
      signedByIpAddress: "signed_by_ip_address",
      additionalInfo: "additional_info",
      altProcedure: "alt_procedure",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$ {
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$inboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$outboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$Outbound` instead. */
  export type Outbound =
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$Outbound;
}

export function putV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBodyToJSON(
  putV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody:
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody,
): string {
  return JSON.stringify(
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$outboundSchema
      .parse(putV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody),
  );
}

export function putV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$inboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    "x-gusto-client-ip": z.string().optional(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "x-gusto-client-ip": "xGustoClientIp",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$Outbound =
  {
    employee_id: string;
    "x-gusto-client-ip"?: string | undefined;
    "X-Gusto-API-Version": string;
    RequestBody:
      PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$Outbound;
  };

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$outboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$Outbound,
    z.ZodTypeDef,
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest
  > = z.object({
    employeeId: z.string(),
    xGustoClientIp: z.string().optional(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      xGustoClientIp: "x-gusto-client-ip",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$ {
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$inboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$outboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$Outbound` instead. */
  export type Outbound =
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$Outbound;
}

export function putV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestToJSON(
  putV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest:
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest,
): string {
  return JSON.stringify(
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$outboundSchema
      .parse(putV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest),
  );
}

export function putV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest' from JSON`,
  );
}

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$inboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "I9-Authorization": I9Authorization$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "I9-Authorization": "i9Authorization",
    });
  });

/** @internal */
export type PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$Outbound =
  {
    HttpMeta: HTTPMetadata$Outbound;
    "I9-Authorization"?: I9Authorization$Outbound | undefined;
  };

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$outboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$Outbound,
    z.ZodTypeDef,
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    i9Authorization: I9Authorization$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      i9Authorization: "I9-Authorization",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$ {
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$inboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$outboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$Outbound` instead. */
  export type Outbound =
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$Outbound;
}

export function putV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponseToJSON(
  putV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse:
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse,
): string {
  return JSON.stringify(
    PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$outboundSchema
      .parse(putV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse),
  );
}

export function putV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse' from JSON`,
  );
}
