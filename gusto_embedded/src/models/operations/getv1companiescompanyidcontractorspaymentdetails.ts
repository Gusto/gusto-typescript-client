/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ContractorPaymentDetailsList,
  ContractorPaymentDetailsList$inboundSchema,
  ContractorPaymentDetailsList$Outbound,
  ContractorPaymentDetailsList$outboundSchema,
} from "../components/contractorpaymentdetailslist.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion =
  {
    TwoThousandAndTwentyFiveMinus06Minus15: "2025-06-15",
  } as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion =
  ClosedEnum<
    typeof GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion
  >;

export type GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest = {
  /**
   * The UUID of the company. This identifies the company whose contractor payment details you want to retrieve.
   */
  companyId: string;
  /**
   * Optional filter to get payment details for a specific contractor. When provided, the response will only include payment details for this contractor.
   */
  contractorUuid?: string | undefined;
  /**
   * Optional filter to get payment details for contractors in a specific payment group. When provided, the response will only include payment details for contractors in this group.
   */
  contractorPaymentGroupUuid?: string | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion
    | undefined;
};

export type GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  contractorPaymentDetailsList?:
    | Array<ContractorPaymentDetailsList>
    | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion
  > = z.nativeEnum(
    GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion,
  );

/** @internal */
export const GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion
  > =
    GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$ {
  /** @deprecated use `GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    contractor_uuid: z.string().optional(),
    contractor_payment_group_uuid: z.string().optional(),
    "X-Gusto-API-Version":
      GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$inboundSchema
        .default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "contractor_uuid": "contractorUuid",
      "contractor_payment_group_uuid": "contractorPaymentGroupUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$Outbound = {
  company_id: string;
  contractor_uuid?: string | undefined;
  contractor_payment_group_uuid?: string | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest
  > = z.object({
    companyId: z.string(),
    contractorUuid: z.string().optional(),
    contractorPaymentGroupUuid: z.string().optional(),
    xGustoAPIVersion:
      GetV1CompaniesCompanyIdContractorsPaymentDetailsHeaderXGustoAPIVersion$outboundSchema
        .default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      contractorUuid: "contractor_uuid",
      contractorPaymentGroupUuid: "contractor_payment_group_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$Outbound;
}

export function getV1CompaniesCompanyIdContractorsPaymentDetailsRequestToJSON(
  getV1CompaniesCompanyIdContractorsPaymentDetailsRequest:
    GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$outboundSchema
      .parse(getV1CompaniesCompanyIdContractorsPaymentDetailsRequest),
  );
}

export function getV1CompaniesCompanyIdContractorsPaymentDetailsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesCompanyIdContractorsPaymentDetailsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Contractor-Payment-Details-List": z.array(
      ContractorPaymentDetailsList$inboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Contractor-Payment-Details-List": "contractorPaymentDetailsList",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$Outbound =
  {
    HttpMeta: HTTPMetadata$Outbound;
    "Contractor-Payment-Details-List"?:
      | Array<ContractorPaymentDetailsList$Outbound>
      | undefined;
  };

/** @internal */
export const GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    contractorPaymentDetailsList: z.array(
      ContractorPaymentDetailsList$outboundSchema,
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      contractorPaymentDetailsList: "Contractor-Payment-Details-List",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$Outbound;
}

export function getV1CompaniesCompanyIdContractorsPaymentDetailsResponseToJSON(
  getV1CompaniesCompanyIdContractorsPaymentDetailsResponse:
    GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$outboundSchema
      .parse(getV1CompaniesCompanyIdContractorsPaymentDetailsResponse),
  );
}

export function getV1CompaniesCompanyIdContractorsPaymentDetailsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesCompanyIdContractorsPaymentDetailsResponse' from JSON`,
  );
}
