/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1ContractorsContractorUuidAddressRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  street1?: string | undefined;
  street2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
};

export type PutV1ContractorsContractorUuidAddressRequest = {
  /**
   * The UUID of the contractor
   */
  contractorUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutV1ContractorsContractorUuidAddressRequestBody;
};

/** @internal */
export const PutV1ContractorsContractorUuidAddressRequestBody$inboundSchema:
  z.ZodType<
    PutV1ContractorsContractorUuidAddressRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    version: z.string(),
    street_1: z.string().optional(),
    street_2: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "street_1": "street1",
      "street_2": "street2",
    });
  });

/** @internal */
export type PutV1ContractorsContractorUuidAddressRequestBody$Outbound = {
  version: string;
  street_1?: string | undefined;
  street_2?: string | undefined;
  city?: string | undefined;
  state?: string | undefined;
  zip?: string | undefined;
};

/** @internal */
export const PutV1ContractorsContractorUuidAddressRequestBody$outboundSchema:
  z.ZodType<
    PutV1ContractorsContractorUuidAddressRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1ContractorsContractorUuidAddressRequestBody
  > = z.object({
    version: z.string(),
    street1: z.string().optional(),
    street2: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      street1: "street_1",
      street2: "street_2",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ContractorsContractorUuidAddressRequestBody$ {
  /** @deprecated use `PutV1ContractorsContractorUuidAddressRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1ContractorsContractorUuidAddressRequestBody$inboundSchema;
  /** @deprecated use `PutV1ContractorsContractorUuidAddressRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1ContractorsContractorUuidAddressRequestBody$outboundSchema;
  /** @deprecated use `PutV1ContractorsContractorUuidAddressRequestBody$Outbound` instead. */
  export type Outbound =
    PutV1ContractorsContractorUuidAddressRequestBody$Outbound;
}

export function putV1ContractorsContractorUuidAddressRequestBodyToJSON(
  putV1ContractorsContractorUuidAddressRequestBody:
    PutV1ContractorsContractorUuidAddressRequestBody,
): string {
  return JSON.stringify(
    PutV1ContractorsContractorUuidAddressRequestBody$outboundSchema.parse(
      putV1ContractorsContractorUuidAddressRequestBody,
    ),
  );
}

export function putV1ContractorsContractorUuidAddressRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1ContractorsContractorUuidAddressRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1ContractorsContractorUuidAddressRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1ContractorsContractorUuidAddressRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1ContractorsContractorUuidAddressRequest$inboundSchema:
  z.ZodType<
    PutV1ContractorsContractorUuidAddressRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    contractor_uuid: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
    RequestBody: z.lazy(() =>
      PutV1ContractorsContractorUuidAddressRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "contractor_uuid": "contractorUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutV1ContractorsContractorUuidAddressRequest$Outbound = {
  contractor_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutV1ContractorsContractorUuidAddressRequestBody$Outbound;
};

/** @internal */
export const PutV1ContractorsContractorUuidAddressRequest$outboundSchema:
  z.ZodType<
    PutV1ContractorsContractorUuidAddressRequest$Outbound,
    z.ZodTypeDef,
    PutV1ContractorsContractorUuidAddressRequest
  > = z.object({
    contractorUuid: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
    requestBody: z.lazy(() =>
      PutV1ContractorsContractorUuidAddressRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      contractorUuid: "contractor_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ContractorsContractorUuidAddressRequest$ {
  /** @deprecated use `PutV1ContractorsContractorUuidAddressRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1ContractorsContractorUuidAddressRequest$inboundSchema;
  /** @deprecated use `PutV1ContractorsContractorUuidAddressRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1ContractorsContractorUuidAddressRequest$outboundSchema;
  /** @deprecated use `PutV1ContractorsContractorUuidAddressRequest$Outbound` instead. */
  export type Outbound = PutV1ContractorsContractorUuidAddressRequest$Outbound;
}

export function putV1ContractorsContractorUuidAddressRequestToJSON(
  putV1ContractorsContractorUuidAddressRequest:
    PutV1ContractorsContractorUuidAddressRequest,
): string {
  return JSON.stringify(
    PutV1ContractorsContractorUuidAddressRequest$outboundSchema.parse(
      putV1ContractorsContractorUuidAddressRequest,
    ),
  );
}

export function putV1ContractorsContractorUuidAddressRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1ContractorsContractorUuidAddressRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1ContractorsContractorUuidAddressRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1ContractorsContractorUuidAddressRequest' from JSON`,
  );
}
