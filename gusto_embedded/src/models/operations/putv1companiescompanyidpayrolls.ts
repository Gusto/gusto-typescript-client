/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  PayrollPrepared,
  PayrollPrepared$inboundSchema,
  PayrollPrepared$Outbound,
  PayrollPrepared$outboundSchema,
} from "../components/payrollprepared.js";
import {
  PayrollUpdate,
  PayrollUpdate$inboundSchema,
  PayrollUpdate$Outbound,
  PayrollUpdate$outboundSchema,
} from "../components/payrollupdate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFourMinus04Minus01: "2024-04-01",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion = ClosedEnum<
  typeof PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion
>;

export type PutV1CompaniesCompanyIdPayrollsRequest = {
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion
    | undefined;
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the payroll
   */
  payrollId: string;
  payrollUpdate: PayrollUpdate;
};

export type PutV1CompaniesCompanyIdPayrollsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  payrollPrepared?: PayrollPrepared | undefined;
};

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion
  > = z.nativeEnum(PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion);

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion
  > = PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$ {
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsRequest$inboundSchema: z.ZodType<
  PutV1CompaniesCompanyIdPayrollsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Gusto-API-Version":
    PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema.default(
      "2024-04-01",
    ),
  company_id: z.string(),
  payroll_id: z.string(),
  "Payroll-Update": PayrollUpdate$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "company_id": "companyId",
    "payroll_id": "payrollId",
    "Payroll-Update": "payrollUpdate",
  });
});

/** @internal */
export type PutV1CompaniesCompanyIdPayrollsRequest$Outbound = {
  "X-Gusto-API-Version": string;
  company_id: string;
  payroll_id: string;
  "Payroll-Update": PayrollUpdate$Outbound;
};

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsRequest$outboundSchema: z.ZodType<
  PutV1CompaniesCompanyIdPayrollsRequest$Outbound,
  z.ZodTypeDef,
  PutV1CompaniesCompanyIdPayrollsRequest
> = z.object({
  xGustoAPIVersion:
    PutV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$outboundSchema
      .default("2024-04-01"),
  companyId: z.string(),
  payrollId: z.string(),
  payrollUpdate: PayrollUpdate$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    xGustoAPIVersion: "X-Gusto-API-Version",
    companyId: "company_id",
    payrollId: "payroll_id",
    payrollUpdate: "Payroll-Update",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdPayrollsRequest$ {
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdPayrollsRequest$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdPayrollsRequest$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsRequest$Outbound` instead. */
  export type Outbound = PutV1CompaniesCompanyIdPayrollsRequest$Outbound;
}

export function putV1CompaniesCompanyIdPayrollsRequestToJSON(
  putV1CompaniesCompanyIdPayrollsRequest:
    PutV1CompaniesCompanyIdPayrollsRequest,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdPayrollsRequest$outboundSchema.parse(
      putV1CompaniesCompanyIdPayrollsRequest,
    ),
  );
}

export function putV1CompaniesCompanyIdPayrollsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV1CompaniesCompanyIdPayrollsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdPayrollsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompaniesCompanyIdPayrollsRequest' from JSON`,
  );
}

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsResponse$inboundSchema: z.ZodType<
  PutV1CompaniesCompanyIdPayrollsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Payroll-Prepared": PayrollPrepared$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Payroll-Prepared": "payrollPrepared",
  });
});

/** @internal */
export type PutV1CompaniesCompanyIdPayrollsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Payroll-Prepared"?: PayrollPrepared$Outbound | undefined;
};

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsResponse$outboundSchema: z.ZodType<
  PutV1CompaniesCompanyIdPayrollsResponse$Outbound,
  z.ZodTypeDef,
  PutV1CompaniesCompanyIdPayrollsResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  payrollPrepared: PayrollPrepared$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    payrollPrepared: "Payroll-Prepared",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdPayrollsResponse$ {
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdPayrollsResponse$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdPayrollsResponse$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsResponse$Outbound` instead. */
  export type Outbound = PutV1CompaniesCompanyIdPayrollsResponse$Outbound;
}

export function putV1CompaniesCompanyIdPayrollsResponseToJSON(
  putV1CompaniesCompanyIdPayrollsResponse:
    PutV1CompaniesCompanyIdPayrollsResponse,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdPayrollsResponse$outboundSchema.parse(
      putV1CompaniesCompanyIdPayrollsResponse,
    ),
  );
}

export function putV1CompaniesCompanyIdPayrollsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdPayrollsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdPayrollsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1CompaniesCompanyIdPayrollsResponse' from JSON`,
  );
}
