/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CompanySuspension,
  CompanySuspension$inboundSchema,
  CompanySuspension$Outbound,
  CompanySuspension$outboundSchema,
} from "../components/companysuspension.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCompaniesCompanyUuidSuspensionsRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetCompaniesCompanyUuidSuspensionsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  companySuspensionList?: Array<CompanySuspension> | undefined;
};

/** @internal */
export const GetCompaniesCompanyUuidSuspensionsRequest$inboundSchema: z.ZodType<
  GetCompaniesCompanyUuidSuspensionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetCompaniesCompanyUuidSuspensionsRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetCompaniesCompanyUuidSuspensionsRequest$outboundSchema:
  z.ZodType<
    GetCompaniesCompanyUuidSuspensionsRequest$Outbound,
    z.ZodTypeDef,
    GetCompaniesCompanyUuidSuspensionsRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompaniesCompanyUuidSuspensionsRequest$ {
  /** @deprecated use `GetCompaniesCompanyUuidSuspensionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetCompaniesCompanyUuidSuspensionsRequest$inboundSchema;
  /** @deprecated use `GetCompaniesCompanyUuidSuspensionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetCompaniesCompanyUuidSuspensionsRequest$outboundSchema;
  /** @deprecated use `GetCompaniesCompanyUuidSuspensionsRequest$Outbound` instead. */
  export type Outbound = GetCompaniesCompanyUuidSuspensionsRequest$Outbound;
}

export function getCompaniesCompanyUuidSuspensionsRequestToJSON(
  getCompaniesCompanyUuidSuspensionsRequest:
    GetCompaniesCompanyUuidSuspensionsRequest,
): string {
  return JSON.stringify(
    GetCompaniesCompanyUuidSuspensionsRequest$outboundSchema.parse(
      getCompaniesCompanyUuidSuspensionsRequest,
    ),
  );
}

export function getCompaniesCompanyUuidSuspensionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetCompaniesCompanyUuidSuspensionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetCompaniesCompanyUuidSuspensionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetCompaniesCompanyUuidSuspensionsRequest' from JSON`,
  );
}

/** @internal */
export const GetCompaniesCompanyUuidSuspensionsResponse$inboundSchema:
  z.ZodType<GetCompaniesCompanyUuidSuspensionsResponse, z.ZodTypeDef, unknown> =
    z.object({
      HttpMeta: HTTPMetadata$inboundSchema,
      "Company-Suspension-List": z.array(CompanySuspension$inboundSchema)
        .optional(),
    }).transform((v) => {
      return remap$(v, {
        "HttpMeta": "httpMeta",
        "Company-Suspension-List": "companySuspensionList",
      });
    });

/** @internal */
export type GetCompaniesCompanyUuidSuspensionsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Company-Suspension-List"?: Array<CompanySuspension$Outbound> | undefined;
};

/** @internal */
export const GetCompaniesCompanyUuidSuspensionsResponse$outboundSchema:
  z.ZodType<
    GetCompaniesCompanyUuidSuspensionsResponse$Outbound,
    z.ZodTypeDef,
    GetCompaniesCompanyUuidSuspensionsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    companySuspensionList: z.array(CompanySuspension$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      companySuspensionList: "Company-Suspension-List",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompaniesCompanyUuidSuspensionsResponse$ {
  /** @deprecated use `GetCompaniesCompanyUuidSuspensionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetCompaniesCompanyUuidSuspensionsResponse$inboundSchema;
  /** @deprecated use `GetCompaniesCompanyUuidSuspensionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetCompaniesCompanyUuidSuspensionsResponse$outboundSchema;
  /** @deprecated use `GetCompaniesCompanyUuidSuspensionsResponse$Outbound` instead. */
  export type Outbound = GetCompaniesCompanyUuidSuspensionsResponse$Outbound;
}

export function getCompaniesCompanyUuidSuspensionsResponseToJSON(
  getCompaniesCompanyUuidSuspensionsResponse:
    GetCompaniesCompanyUuidSuspensionsResponse,
): string {
  return JSON.stringify(
    GetCompaniesCompanyUuidSuspensionsResponse$outboundSchema.parse(
      getCompaniesCompanyUuidSuspensionsResponse,
    ),
  );
}

export function getCompaniesCompanyUuidSuspensionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetCompaniesCompanyUuidSuspensionsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetCompaniesCompanyUuidSuspensionsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetCompaniesCompanyUuidSuspensionsResponse' from JSON`,
  );
}
