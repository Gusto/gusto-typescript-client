/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ContractorPaymentMethod,
  ContractorPaymentMethod$inboundSchema,
  ContractorPaymentMethod$Outbound,
  ContractorPaymentMethod$outboundSchema,
} from "../components/contractorpaymentmethod.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The payment method type. If type is Direct Deposit, the contractor is required to have a bank account.
 *
 * @remarks
 * see [Bank account endpoint](./post-v1-contractors-contractor_uuid-bank_accounts)
 */
export const PutV1ContractorsContractorIdPaymentMethodType = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The payment method type. If type is Direct Deposit, the contractor is required to have a bank account.
 *
 * @remarks
 * see [Bank account endpoint](./post-v1-contractors-contractor_uuid-bank_accounts)
 */
export type PutV1ContractorsContractorIdPaymentMethodType = ClosedEnum<
  typeof PutV1ContractorsContractorIdPaymentMethodType
>;

export type PutV1ContractorsContractorIdPaymentMethodRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  /**
   * The payment method type. If type is Direct Deposit, the contractor is required to have a bank account.
   *
   * @remarks
   * see [Bank account endpoint](./post-v1-contractors-contractor_uuid-bank_accounts)
   */
  type: PutV1ContractorsContractorIdPaymentMethodType;
};

export type PutV1ContractorsContractorIdPaymentMethodRequest = {
  /**
   * The UUID of the contractor
   */
  contractorUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PutV1ContractorsContractorIdPaymentMethodRequestBody;
};

export type PutV1ContractorsContractorIdPaymentMethodResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  contractorPaymentMethod?: ContractorPaymentMethod | undefined;
};

/** @internal */
export const PutV1ContractorsContractorIdPaymentMethodType$inboundSchema:
  z.ZodNativeEnum<typeof PutV1ContractorsContractorIdPaymentMethodType> = z
    .nativeEnum(PutV1ContractorsContractorIdPaymentMethodType);

/** @internal */
export const PutV1ContractorsContractorIdPaymentMethodType$outboundSchema:
  z.ZodNativeEnum<typeof PutV1ContractorsContractorIdPaymentMethodType> =
    PutV1ContractorsContractorIdPaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ContractorsContractorIdPaymentMethodType$ {
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodType$inboundSchema` instead. */
  export const inboundSchema =
    PutV1ContractorsContractorIdPaymentMethodType$inboundSchema;
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodType$outboundSchema` instead. */
  export const outboundSchema =
    PutV1ContractorsContractorIdPaymentMethodType$outboundSchema;
}

/** @internal */
export const PutV1ContractorsContractorIdPaymentMethodRequestBody$inboundSchema:
  z.ZodType<
    PutV1ContractorsContractorIdPaymentMethodRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    version: z.string(),
    type: PutV1ContractorsContractorIdPaymentMethodType$inboundSchema,
  });

/** @internal */
export type PutV1ContractorsContractorIdPaymentMethodRequestBody$Outbound = {
  version: string;
  type: string;
};

/** @internal */
export const PutV1ContractorsContractorIdPaymentMethodRequestBody$outboundSchema:
  z.ZodType<
    PutV1ContractorsContractorIdPaymentMethodRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1ContractorsContractorIdPaymentMethodRequestBody
  > = z.object({
    version: z.string(),
    type: PutV1ContractorsContractorIdPaymentMethodType$outboundSchema,
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ContractorsContractorIdPaymentMethodRequestBody$ {
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1ContractorsContractorIdPaymentMethodRequestBody$inboundSchema;
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1ContractorsContractorIdPaymentMethodRequestBody$outboundSchema;
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodRequestBody$Outbound` instead. */
  export type Outbound =
    PutV1ContractorsContractorIdPaymentMethodRequestBody$Outbound;
}

export function putV1ContractorsContractorIdPaymentMethodRequestBodyToJSON(
  putV1ContractorsContractorIdPaymentMethodRequestBody:
    PutV1ContractorsContractorIdPaymentMethodRequestBody,
): string {
  return JSON.stringify(
    PutV1ContractorsContractorIdPaymentMethodRequestBody$outboundSchema.parse(
      putV1ContractorsContractorIdPaymentMethodRequestBody,
    ),
  );
}

export function putV1ContractorsContractorIdPaymentMethodRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1ContractorsContractorIdPaymentMethodRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1ContractorsContractorIdPaymentMethodRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1ContractorsContractorIdPaymentMethodRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1ContractorsContractorIdPaymentMethodRequest$inboundSchema:
  z.ZodType<
    PutV1ContractorsContractorIdPaymentMethodRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    contractor_uuid: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PutV1ContractorsContractorIdPaymentMethodRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "contractor_uuid": "contractorUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutV1ContractorsContractorIdPaymentMethodRequest$Outbound = {
  contractor_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutV1ContractorsContractorIdPaymentMethodRequestBody$Outbound;
};

/** @internal */
export const PutV1ContractorsContractorIdPaymentMethodRequest$outboundSchema:
  z.ZodType<
    PutV1ContractorsContractorIdPaymentMethodRequest$Outbound,
    z.ZodTypeDef,
    PutV1ContractorsContractorIdPaymentMethodRequest
  > = z.object({
    contractorUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PutV1ContractorsContractorIdPaymentMethodRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      contractorUuid: "contractor_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ContractorsContractorIdPaymentMethodRequest$ {
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1ContractorsContractorIdPaymentMethodRequest$inboundSchema;
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1ContractorsContractorIdPaymentMethodRequest$outboundSchema;
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodRequest$Outbound` instead. */
  export type Outbound =
    PutV1ContractorsContractorIdPaymentMethodRequest$Outbound;
}

export function putV1ContractorsContractorIdPaymentMethodRequestToJSON(
  putV1ContractorsContractorIdPaymentMethodRequest:
    PutV1ContractorsContractorIdPaymentMethodRequest,
): string {
  return JSON.stringify(
    PutV1ContractorsContractorIdPaymentMethodRequest$outboundSchema.parse(
      putV1ContractorsContractorIdPaymentMethodRequest,
    ),
  );
}

export function putV1ContractorsContractorIdPaymentMethodRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1ContractorsContractorIdPaymentMethodRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1ContractorsContractorIdPaymentMethodRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1ContractorsContractorIdPaymentMethodRequest' from JSON`,
  );
}

/** @internal */
export const PutV1ContractorsContractorIdPaymentMethodResponse$inboundSchema:
  z.ZodType<
    PutV1ContractorsContractorIdPaymentMethodResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Contractor-Payment-Method": ContractorPaymentMethod$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Contractor-Payment-Method": "contractorPaymentMethod",
    });
  });

/** @internal */
export type PutV1ContractorsContractorIdPaymentMethodResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Contractor-Payment-Method"?: ContractorPaymentMethod$Outbound | undefined;
};

/** @internal */
export const PutV1ContractorsContractorIdPaymentMethodResponse$outboundSchema:
  z.ZodType<
    PutV1ContractorsContractorIdPaymentMethodResponse$Outbound,
    z.ZodTypeDef,
    PutV1ContractorsContractorIdPaymentMethodResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    contractorPaymentMethod: ContractorPaymentMethod$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      contractorPaymentMethod: "Contractor-Payment-Method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ContractorsContractorIdPaymentMethodResponse$ {
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutV1ContractorsContractorIdPaymentMethodResponse$inboundSchema;
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV1ContractorsContractorIdPaymentMethodResponse$outboundSchema;
  /** @deprecated use `PutV1ContractorsContractorIdPaymentMethodResponse$Outbound` instead. */
  export type Outbound =
    PutV1ContractorsContractorIdPaymentMethodResponse$Outbound;
}

export function putV1ContractorsContractorIdPaymentMethodResponseToJSON(
  putV1ContractorsContractorIdPaymentMethodResponse:
    PutV1ContractorsContractorIdPaymentMethodResponse,
): string {
  return JSON.stringify(
    PutV1ContractorsContractorIdPaymentMethodResponse$outboundSchema.parse(
      putV1ContractorsContractorIdPaymentMethodResponse,
    ),
  );
}

export function putV1ContractorsContractorIdPaymentMethodResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1ContractorsContractorIdPaymentMethodResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1ContractorsContractorIdPaymentMethodResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1ContractorsContractorIdPaymentMethodResponse' from JSON`,
  );
}
