/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Available options:
 *
 * @remarks
 * - all_compensations: Include all effective dated compensations for the job instead of only the current compensation
 */
export const GetV1JobsJobIdQueryParamInclude = {
  AllCompensations: "all_compensations",
} as const;
/**
 * Available options:
 *
 * @remarks
 * - all_compensations: Include all effective dated compensations for the job instead of only the current compensation
 */
export type GetV1JobsJobIdQueryParamInclude = ClosedEnum<
  typeof GetV1JobsJobIdQueryParamInclude
>;

export type GetV1JobsJobIdRequest = {
  /**
   * The UUID of the job
   */
  jobId: string;
  /**
   * Available options:
   *
   * @remarks
   * - all_compensations: Include all effective dated compensations for the job instead of only the current compensation
   */
  include?: GetV1JobsJobIdQueryParamInclude | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

/** @internal */
export const GetV1JobsJobIdQueryParamInclude$inboundSchema: z.ZodNativeEnum<
  typeof GetV1JobsJobIdQueryParamInclude
> = z.nativeEnum(GetV1JobsJobIdQueryParamInclude);

/** @internal */
export const GetV1JobsJobIdQueryParamInclude$outboundSchema: z.ZodNativeEnum<
  typeof GetV1JobsJobIdQueryParamInclude
> = GetV1JobsJobIdQueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1JobsJobIdQueryParamInclude$ {
  /** @deprecated use `GetV1JobsJobIdQueryParamInclude$inboundSchema` instead. */
  export const inboundSchema = GetV1JobsJobIdQueryParamInclude$inboundSchema;
  /** @deprecated use `GetV1JobsJobIdQueryParamInclude$outboundSchema` instead. */
  export const outboundSchema = GetV1JobsJobIdQueryParamInclude$outboundSchema;
}

/** @internal */
export const GetV1JobsJobIdRequest$inboundSchema: z.ZodType<
  GetV1JobsJobIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_id: z.string(),
  include: GetV1JobsJobIdQueryParamInclude$inboundSchema.optional(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1JobsJobIdRequest$Outbound = {
  job_id: string;
  include?: string | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1JobsJobIdRequest$outboundSchema: z.ZodType<
  GetV1JobsJobIdRequest$Outbound,
  z.ZodTypeDef,
  GetV1JobsJobIdRequest
> = z.object({
  jobId: z.string(),
  include: GetV1JobsJobIdQueryParamInclude$outboundSchema.optional(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1JobsJobIdRequest$ {
  /** @deprecated use `GetV1JobsJobIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1JobsJobIdRequest$inboundSchema;
  /** @deprecated use `GetV1JobsJobIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1JobsJobIdRequest$outboundSchema;
  /** @deprecated use `GetV1JobsJobIdRequest$Outbound` instead. */
  export type Outbound = GetV1JobsJobIdRequest$Outbound;
}

export function getV1JobsJobIdRequestToJSON(
  getV1JobsJobIdRequest: GetV1JobsJobIdRequest,
): string {
  return JSON.stringify(
    GetV1JobsJobIdRequest$outboundSchema.parse(getV1JobsJobIdRequest),
  );
}

export function getV1JobsJobIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1JobsJobIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1JobsJobIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1JobsJobIdRequest' from JSON`,
  );
}
