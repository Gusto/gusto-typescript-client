/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  BenefitTypeRequirements,
  BenefitTypeRequirements$inboundSchema,
  BenefitTypeRequirements$Outbound,
  BenefitTypeRequirements$outboundSchema,
} from "../components/benefittyperequirements.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1BenefitsBenefitsIdRequirementsRequest = {
  /**
   * The benefit type in Gusto.
   */
  benefitId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1BenefitsBenefitsIdRequirementsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Benefit type requirements response
   */
  benefitTypeRequirements?: BenefitTypeRequirements | undefined;
};

/** @internal */
export const GetV1BenefitsBenefitsIdRequirementsRequest$inboundSchema:
  z.ZodType<GetV1BenefitsBenefitsIdRequirementsRequest, z.ZodTypeDef, unknown> =
    z.object({
      benefit_id: z.string(),
      "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    }).transform((v) => {
      return remap$(v, {
        "benefit_id": "benefitId",
        "X-Gusto-API-Version": "xGustoAPIVersion",
      });
    });

/** @internal */
export type GetV1BenefitsBenefitsIdRequirementsRequest$Outbound = {
  benefit_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1BenefitsBenefitsIdRequirementsRequest$outboundSchema:
  z.ZodType<
    GetV1BenefitsBenefitsIdRequirementsRequest$Outbound,
    z.ZodTypeDef,
    GetV1BenefitsBenefitsIdRequirementsRequest
  > = z.object({
    benefitId: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      benefitId: "benefit_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1BenefitsBenefitsIdRequirementsRequest$ {
  /** @deprecated use `GetV1BenefitsBenefitsIdRequirementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1BenefitsBenefitsIdRequirementsRequest$inboundSchema;
  /** @deprecated use `GetV1BenefitsBenefitsIdRequirementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1BenefitsBenefitsIdRequirementsRequest$outboundSchema;
  /** @deprecated use `GetV1BenefitsBenefitsIdRequirementsRequest$Outbound` instead. */
  export type Outbound = GetV1BenefitsBenefitsIdRequirementsRequest$Outbound;
}

export function getV1BenefitsBenefitsIdRequirementsRequestToJSON(
  getV1BenefitsBenefitsIdRequirementsRequest:
    GetV1BenefitsBenefitsIdRequirementsRequest,
): string {
  return JSON.stringify(
    GetV1BenefitsBenefitsIdRequirementsRequest$outboundSchema.parse(
      getV1BenefitsBenefitsIdRequirementsRequest,
    ),
  );
}

export function getV1BenefitsBenefitsIdRequirementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1BenefitsBenefitsIdRequirementsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1BenefitsBenefitsIdRequirementsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1BenefitsBenefitsIdRequirementsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1BenefitsBenefitsIdRequirementsResponse$inboundSchema:
  z.ZodType<
    GetV1BenefitsBenefitsIdRequirementsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Benefit-Type-Requirements": BenefitTypeRequirements$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Benefit-Type-Requirements": "benefitTypeRequirements",
    });
  });

/** @internal */
export type GetV1BenefitsBenefitsIdRequirementsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Benefit-Type-Requirements"?: BenefitTypeRequirements$Outbound | undefined;
};

/** @internal */
export const GetV1BenefitsBenefitsIdRequirementsResponse$outboundSchema:
  z.ZodType<
    GetV1BenefitsBenefitsIdRequirementsResponse$Outbound,
    z.ZodTypeDef,
    GetV1BenefitsBenefitsIdRequirementsResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    benefitTypeRequirements: BenefitTypeRequirements$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      benefitTypeRequirements: "Benefit-Type-Requirements",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1BenefitsBenefitsIdRequirementsResponse$ {
  /** @deprecated use `GetV1BenefitsBenefitsIdRequirementsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1BenefitsBenefitsIdRequirementsResponse$inboundSchema;
  /** @deprecated use `GetV1BenefitsBenefitsIdRequirementsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1BenefitsBenefitsIdRequirementsResponse$outboundSchema;
  /** @deprecated use `GetV1BenefitsBenefitsIdRequirementsResponse$Outbound` instead. */
  export type Outbound = GetV1BenefitsBenefitsIdRequirementsResponse$Outbound;
}

export function getV1BenefitsBenefitsIdRequirementsResponseToJSON(
  getV1BenefitsBenefitsIdRequirementsResponse:
    GetV1BenefitsBenefitsIdRequirementsResponse,
): string {
  return JSON.stringify(
    GetV1BenefitsBenefitsIdRequirementsResponse$outboundSchema.parse(
      getV1BenefitsBenefitsIdRequirementsResponse,
    ),
  );
}

export function getV1BenefitsBenefitsIdRequirementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1BenefitsBenefitsIdRequirementsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1BenefitsBenefitsIdRequirementsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1BenefitsBenefitsIdRequirementsResponse' from JSON`,
  );
}
