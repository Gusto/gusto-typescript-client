/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutDepartmentsRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   */
  version: string;
  title?: string | undefined;
};

export type PutDepartmentsRequest = {
  /**
   * The UUID of the department
   */
  departmentUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutDepartmentsRequestBody;
};

export type PutDepartmentsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Department Object Example
   */
  department?: components.Department | undefined;
};

/** @internal */
export const PutDepartmentsRequestBody$inboundSchema: z.ZodType<
  PutDepartmentsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  title: z.string().optional(),
});

/** @internal */
export type PutDepartmentsRequestBody$Outbound = {
  version: string;
  title?: string | undefined;
};

/** @internal */
export const PutDepartmentsRequestBody$outboundSchema: z.ZodType<
  PutDepartmentsRequestBody$Outbound,
  z.ZodTypeDef,
  PutDepartmentsRequestBody
> = z.object({
  version: z.string(),
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutDepartmentsRequestBody$ {
  /** @deprecated use `PutDepartmentsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutDepartmentsRequestBody$inboundSchema;
  /** @deprecated use `PutDepartmentsRequestBody$outboundSchema` instead. */
  export const outboundSchema = PutDepartmentsRequestBody$outboundSchema;
  /** @deprecated use `PutDepartmentsRequestBody$Outbound` instead. */
  export type Outbound = PutDepartmentsRequestBody$Outbound;
}

export function putDepartmentsRequestBodyToJSON(
  putDepartmentsRequestBody: PutDepartmentsRequestBody,
): string {
  return JSON.stringify(
    PutDepartmentsRequestBody$outboundSchema.parse(putDepartmentsRequestBody),
  );
}

export function putDepartmentsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutDepartmentsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutDepartmentsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutDepartmentsRequestBody' from JSON`,
  );
}

/** @internal */
export const PutDepartmentsRequest$inboundSchema: z.ZodType<
  PutDepartmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  department_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
  RequestBody: z.lazy(() => PutDepartmentsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "department_uuid": "departmentUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutDepartmentsRequest$Outbound = {
  department_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutDepartmentsRequestBody$Outbound;
};

/** @internal */
export const PutDepartmentsRequest$outboundSchema: z.ZodType<
  PutDepartmentsRequest$Outbound,
  z.ZodTypeDef,
  PutDepartmentsRequest
> = z.object({
  departmentUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
  requestBody: z.lazy(() => PutDepartmentsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    departmentUuid: "department_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutDepartmentsRequest$ {
  /** @deprecated use `PutDepartmentsRequest$inboundSchema` instead. */
  export const inboundSchema = PutDepartmentsRequest$inboundSchema;
  /** @deprecated use `PutDepartmentsRequest$outboundSchema` instead. */
  export const outboundSchema = PutDepartmentsRequest$outboundSchema;
  /** @deprecated use `PutDepartmentsRequest$Outbound` instead. */
  export type Outbound = PutDepartmentsRequest$Outbound;
}

export function putDepartmentsRequestToJSON(
  putDepartmentsRequest: PutDepartmentsRequest,
): string {
  return JSON.stringify(
    PutDepartmentsRequest$outboundSchema.parse(putDepartmentsRequest),
  );
}

export function putDepartmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutDepartmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutDepartmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutDepartmentsRequest' from JSON`,
  );
}

/** @internal */
export const PutDepartmentsResponse$inboundSchema: z.ZodType<
  PutDepartmentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  Department: components.Department$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Department": "department",
  });
});

/** @internal */
export type PutDepartmentsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  Department?: components.Department$Outbound | undefined;
};

/** @internal */
export const PutDepartmentsResponse$outboundSchema: z.ZodType<
  PutDepartmentsResponse$Outbound,
  z.ZodTypeDef,
  PutDepartmentsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  department: components.Department$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    department: "Department",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutDepartmentsResponse$ {
  /** @deprecated use `PutDepartmentsResponse$inboundSchema` instead. */
  export const inboundSchema = PutDepartmentsResponse$inboundSchema;
  /** @deprecated use `PutDepartmentsResponse$outboundSchema` instead. */
  export const outboundSchema = PutDepartmentsResponse$outboundSchema;
  /** @deprecated use `PutDepartmentsResponse$Outbound` instead. */
  export type Outbound = PutDepartmentsResponse$Outbound;
}

export function putDepartmentsResponseToJSON(
  putDepartmentsResponse: PutDepartmentsResponse,
): string {
  return JSON.stringify(
    PutDepartmentsResponse$outboundSchema.parse(putDepartmentsResponse),
  );
}

export function putDepartmentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutDepartmentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutDepartmentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutDepartmentsResponse' from JSON`,
  );
}
