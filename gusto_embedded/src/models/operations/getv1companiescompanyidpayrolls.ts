/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  Payroll,
  Payroll$inboundSchema,
  Payroll$Outbound,
  Payroll$outboundSchema,
} from "../components/payroll.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFiveMinus06Minus15: "2025-06-15",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion = ClosedEnum<
  typeof GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion
>;

export const ProcessingStatuses = {
  Processed: "processed",
  Unprocessed: "unprocessed",
} as const;
export type ProcessingStatuses = ClosedEnum<typeof ProcessingStatuses>;

export const PayrollTypes = {
  Regular: "regular",
  OffCycle: "off_cycle",
  External: "external",
} as const;
export type PayrollTypes = ClosedEnum<typeof PayrollTypes>;

export const GetV1CompaniesCompanyIdPayrollsQueryParamInclude = {
  Taxes: "taxes",
  PayrollStatusMeta: "payroll_status_meta",
  Totals: "totals",
  RiskBlockers: "risk_blockers",
  Reversals: "reversals",
} as const;
export type GetV1CompaniesCompanyIdPayrollsQueryParamInclude = ClosedEnum<
  typeof GetV1CompaniesCompanyIdPayrollsQueryParamInclude
>;

/**
 * Specifies which date field to use when filtering payrolls with start_date and end_date. This field applies only to regular processed payrolls and defaults to pay period if not provided.
 */
export const DateFilterBy = {
  CheckDate: "check_date",
} as const;
/**
 * Specifies which date field to use when filtering payrolls with start_date and end_date. This field applies only to regular processed payrolls and defaults to pay period if not provided.
 */
export type DateFilterBy = ClosedEnum<typeof DateFilterBy>;

/**
 * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
 */
export const SortOrder = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
 */
export type SortOrder = ClosedEnum<typeof SortOrder>;

export type GetV1CompaniesCompanyIdPayrollsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion
    | undefined;
  /**
   * Whether to include processed and/or unprocessed payrolls in the response, defaults to processed, for multiple attributes comma separate the values, i.e. `?processing_statuses=processed,unprocessed`
   */
  processingStatuses?: Array<ProcessingStatuses> | undefined;
  /**
   * Whether to include regular and/or off_cycle payrolls in the response, defaults to regular, for multiple attributes comma separate the values, i.e. `?payroll_types=regular,off_cycle`
   */
  payrollTypes?: Array<PayrollTypes> | undefined;
  /**
   * Whether to return processed or unprocessed payrolls
   */
  processed?: boolean | undefined;
  /**
   * Whether to include off cycle payrolls in the response
   */
  includeOffCycle?: boolean | undefined;
  /**
   * Include the requested attribute in the response. The risk_blockers option will include submission_blockers and credit_blockers if applicable. The reversals option will include reversal payroll UUIDs if applicable. In v2023-04-01 totals are no longer included by default. For multiple attributes comma separate the values, i.e. `?include=totals,payroll_status_meta`. Results are paginated, with a maximum page size of 100 payrolls.
   */
  include?: Array<GetV1CompaniesCompanyIdPayrollsQueryParamInclude> | undefined;
  /**
   * Return payrolls whose pay period is after the start date
   */
  startDate?: string | undefined;
  /**
   * Return payrolls whose pay period is before the end date. If left empty, defaults to today's date.
   */
  endDate?: string | undefined;
  /**
   * Specifies which date field to use when filtering payrolls with start_date and end_date. This field applies only to regular processed payrolls and defaults to pay period if not provided.
   */
  dateFilterBy?: DateFilterBy | undefined;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
   */
  sortOrder?: SortOrder | undefined;
};

export type GetV1CompaniesCompanyIdPayrollsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  payrollList?: Array<Payroll> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion
  > = z.nativeEnum(GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion);

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion
  > = GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const ProcessingStatuses$inboundSchema: z.ZodNativeEnum<
  typeof ProcessingStatuses
> = z.nativeEnum(ProcessingStatuses);

/** @internal */
export const ProcessingStatuses$outboundSchema: z.ZodNativeEnum<
  typeof ProcessingStatuses
> = ProcessingStatuses$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ProcessingStatuses$ {
  /** @deprecated use `ProcessingStatuses$inboundSchema` instead. */
  export const inboundSchema = ProcessingStatuses$inboundSchema;
  /** @deprecated use `ProcessingStatuses$outboundSchema` instead. */
  export const outboundSchema = ProcessingStatuses$outboundSchema;
}

/** @internal */
export const PayrollTypes$inboundSchema: z.ZodNativeEnum<typeof PayrollTypes> =
  z.nativeEnum(PayrollTypes);

/** @internal */
export const PayrollTypes$outboundSchema: z.ZodNativeEnum<typeof PayrollTypes> =
  PayrollTypes$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollTypes$ {
  /** @deprecated use `PayrollTypes$inboundSchema` instead. */
  export const inboundSchema = PayrollTypes$inboundSchema;
  /** @deprecated use `PayrollTypes$outboundSchema` instead. */
  export const outboundSchema = PayrollTypes$outboundSchema;
}

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsQueryParamInclude$inboundSchema:
  z.ZodNativeEnum<typeof GetV1CompaniesCompanyIdPayrollsQueryParamInclude> = z
    .nativeEnum(GetV1CompaniesCompanyIdPayrollsQueryParamInclude);

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsQueryParamInclude$outboundSchema:
  z.ZodNativeEnum<typeof GetV1CompaniesCompanyIdPayrollsQueryParamInclude> =
    GetV1CompaniesCompanyIdPayrollsQueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsQueryParamInclude$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsQueryParamInclude$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsQueryParamInclude$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsQueryParamInclude$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsQueryParamInclude$outboundSchema;
}

/** @internal */
export const DateFilterBy$inboundSchema: z.ZodNativeEnum<typeof DateFilterBy> =
  z.nativeEnum(DateFilterBy);

/** @internal */
export const DateFilterBy$outboundSchema: z.ZodNativeEnum<typeof DateFilterBy> =
  DateFilterBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DateFilterBy$ {
  /** @deprecated use `DateFilterBy$inboundSchema` instead. */
  export const inboundSchema = DateFilterBy$inboundSchema;
  /** @deprecated use `DateFilterBy$outboundSchema` instead. */
  export const outboundSchema = DateFilterBy$outboundSchema;
}

/** @internal */
export const SortOrder$inboundSchema: z.ZodNativeEnum<typeof SortOrder> = z
  .nativeEnum(SortOrder);

/** @internal */
export const SortOrder$outboundSchema: z.ZodNativeEnum<typeof SortOrder> =
  SortOrder$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortOrder$ {
  /** @deprecated use `SortOrder$inboundSchema` instead. */
  export const inboundSchema = SortOrder$inboundSchema;
  /** @deprecated use `SortOrder$outboundSchema` instead. */
  export const outboundSchema = SortOrder$outboundSchema;
}

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsRequest$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdPayrollsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string(),
  "X-Gusto-API-Version":
    GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$inboundSchema.default(
      "2025-06-15",
    ),
  processing_statuses: z.array(ProcessingStatuses$inboundSchema).optional(),
  payroll_types: z.array(PayrollTypes$inboundSchema).optional(),
  processed: z.boolean().optional(),
  include_off_cycle: z.boolean().optional(),
  include: z.array(
    GetV1CompaniesCompanyIdPayrollsQueryParamInclude$inboundSchema,
  ).optional(),
  start_date: z.string().optional(),
  end_date: z.string().optional(),
  date_filter_by: DateFilterBy$inboundSchema.optional(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
  sort_order: SortOrder$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "processing_statuses": "processingStatuses",
    "payroll_types": "payrollTypes",
    "include_off_cycle": "includeOffCycle",
    "start_date": "startDate",
    "end_date": "endDate",
    "date_filter_by": "dateFilterBy",
    "sort_order": "sortOrder",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdPayrollsRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
  processing_statuses?: Array<string> | undefined;
  payroll_types?: Array<string> | undefined;
  processed?: boolean | undefined;
  include_off_cycle?: boolean | undefined;
  include?: Array<string> | undefined;
  start_date?: string | undefined;
  end_date?: string | undefined;
  date_filter_by?: string | undefined;
  page?: number | undefined;
  per?: number | undefined;
  sort_order?: string | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsRequest$outboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdPayrollsRequest$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesCompanyIdPayrollsRequest
> = z.object({
  companyId: z.string(),
  xGustoAPIVersion:
    GetV1CompaniesCompanyIdPayrollsHeaderXGustoAPIVersion$outboundSchema
      .default("2025-06-15"),
  processingStatuses: z.array(ProcessingStatuses$outboundSchema).optional(),
  payrollTypes: z.array(PayrollTypes$outboundSchema).optional(),
  processed: z.boolean().optional(),
  includeOffCycle: z.boolean().optional(),
  include: z.array(
    GetV1CompaniesCompanyIdPayrollsQueryParamInclude$outboundSchema,
  ).optional(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  dateFilterBy: DateFilterBy$outboundSchema.optional(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
  sortOrder: SortOrder$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
    processingStatuses: "processing_statuses",
    payrollTypes: "payroll_types",
    includeOffCycle: "include_off_cycle",
    startDate: "start_date",
    endDate: "end_date",
    dateFilterBy: "date_filter_by",
    sortOrder: "sort_order",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsRequest$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdPayrollsRequest$Outbound;
}

export function getV1CompaniesCompanyIdPayrollsRequestToJSON(
  getV1CompaniesCompanyIdPayrollsRequest:
    GetV1CompaniesCompanyIdPayrollsRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPayrollsRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdPayrollsRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdPayrollsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompaniesCompanyIdPayrollsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPayrollsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesCompanyIdPayrollsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsResponse$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdPayrollsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Payroll-List": z.array(Payroll$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Payroll-List": "payrollList",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdPayrollsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Payroll-List"?: Array<Payroll$Outbound> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsResponse$outboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdPayrollsResponse$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesCompanyIdPayrollsResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  payrollList: z.array(Payroll$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    payrollList: "Payroll-List",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsResponse$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdPayrollsResponse$Outbound;
}

export function getV1CompaniesCompanyIdPayrollsResponseToJSON(
  getV1CompaniesCompanyIdPayrollsResponse:
    GetV1CompaniesCompanyIdPayrollsResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPayrollsResponse$outboundSchema.parse(
      getV1CompaniesCompanyIdPayrollsResponse,
    ),
  );
}

export function getV1CompaniesCompanyIdPayrollsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdPayrollsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPayrollsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdPayrollsResponse' from JSON`,
  );
}
