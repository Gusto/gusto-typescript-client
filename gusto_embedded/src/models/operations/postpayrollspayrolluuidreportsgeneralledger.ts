/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  GeneralLedgerReport,
  GeneralLedgerReport$inboundSchema,
  GeneralLedgerReport$Outbound,
  GeneralLedgerReport$outboundSchema,
} from "../components/generalledgerreport.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The breakdown of the report. Use 'default' for no split.
 */
export const Aggregation = {
  Default: "default",
  Job: "job",
  Department: "department",
  Integration: "integration",
} as const;
/**
 * The breakdown of the report. Use 'default' for no split.
 */
export type Aggregation = ClosedEnum<typeof Aggregation>;

/**
 * The kind of integration set up for the company. Required when `aggregation` is 'integration'. Must be null if `aggregation` is not 'integration'.
 */
export const IntegrationType = {
  Xero: "xero",
  Qbo: "qbo",
} as const;
/**
 * The kind of integration set up for the company. Required when `aggregation` is 'integration'. Must be null if `aggregation` is not 'integration'.
 */
export type IntegrationType = ClosedEnum<typeof IntegrationType>;

export type PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody = {
  /**
   * The breakdown of the report. Use 'default' for no split.
   */
  aggregation: Aggregation;
  /**
   * The kind of integration set up for the company. Required when `aggregation` is 'integration'. Must be null if `aggregation` is not 'integration'.
   */
  integrationType?: IntegrationType | null | undefined;
};

export type PostPayrollsPayrollUuidReportsGeneralLedgerRequest = {
  /**
   * The UUID of the payroll
   */
  payrollUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody;
};

export type PostPayrollsPayrollUuidReportsGeneralLedgerResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Successful response for general ledger report generation
   */
  generalLedgerReport?: GeneralLedgerReport | undefined;
};

/** @internal */
export const Aggregation$inboundSchema: z.ZodNativeEnum<typeof Aggregation> = z
  .nativeEnum(Aggregation);

/** @internal */
export const Aggregation$outboundSchema: z.ZodNativeEnum<typeof Aggregation> =
  Aggregation$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Aggregation$ {
  /** @deprecated use `Aggregation$inboundSchema` instead. */
  export const inboundSchema = Aggregation$inboundSchema;
  /** @deprecated use `Aggregation$outboundSchema` instead. */
  export const outboundSchema = Aggregation$outboundSchema;
}

/** @internal */
export const IntegrationType$inboundSchema: z.ZodNativeEnum<
  typeof IntegrationType
> = z.nativeEnum(IntegrationType);

/** @internal */
export const IntegrationType$outboundSchema: z.ZodNativeEnum<
  typeof IntegrationType
> = IntegrationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IntegrationType$ {
  /** @deprecated use `IntegrationType$inboundSchema` instead. */
  export const inboundSchema = IntegrationType$inboundSchema;
  /** @deprecated use `IntegrationType$outboundSchema` instead. */
  export const outboundSchema = IntegrationType$outboundSchema;
}

/** @internal */
export const PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$inboundSchema:
  z.ZodType<
    PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    aggregation: Aggregation$inboundSchema,
    integration_type: z.nullable(IntegrationType$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "integration_type": "integrationType",
    });
  });

/** @internal */
export type PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$Outbound = {
  aggregation: string;
  integration_type?: string | null | undefined;
};

/** @internal */
export const PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$outboundSchema:
  z.ZodType<
    PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$Outbound,
    z.ZodTypeDef,
    PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody
  > = z.object({
    aggregation: Aggregation$outboundSchema,
    integrationType: z.nullable(IntegrationType$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      integrationType: "integration_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$ {
  /** @deprecated use `PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$inboundSchema;
  /** @deprecated use `PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$outboundSchema;
  /** @deprecated use `PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$Outbound` instead. */
  export type Outbound =
    PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$Outbound;
}

export function postPayrollsPayrollUuidReportsGeneralLedgerRequestBodyToJSON(
  postPayrollsPayrollUuidReportsGeneralLedgerRequestBody:
    PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody,
): string {
  return JSON.stringify(
    PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$outboundSchema.parse(
      postPayrollsPayrollUuidReportsGeneralLedgerRequestBody,
    ),
  );
}

export function postPayrollsPayrollUuidReportsGeneralLedgerRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody' from JSON`,
  );
}

/** @internal */
export const PostPayrollsPayrollUuidReportsGeneralLedgerRequest$inboundSchema:
  z.ZodType<
    PostPayrollsPayrollUuidReportsGeneralLedgerRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payroll_uuid: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "payroll_uuid": "payrollUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostPayrollsPayrollUuidReportsGeneralLedgerRequest$Outbound = {
  payroll_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$Outbound;
};

/** @internal */
export const PostPayrollsPayrollUuidReportsGeneralLedgerRequest$outboundSchema:
  z.ZodType<
    PostPayrollsPayrollUuidReportsGeneralLedgerRequest$Outbound,
    z.ZodTypeDef,
    PostPayrollsPayrollUuidReportsGeneralLedgerRequest
  > = z.object({
    payrollUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PostPayrollsPayrollUuidReportsGeneralLedgerRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      payrollUuid: "payroll_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPayrollsPayrollUuidReportsGeneralLedgerRequest$ {
  /** @deprecated use `PostPayrollsPayrollUuidReportsGeneralLedgerRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostPayrollsPayrollUuidReportsGeneralLedgerRequest$inboundSchema;
  /** @deprecated use `PostPayrollsPayrollUuidReportsGeneralLedgerRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostPayrollsPayrollUuidReportsGeneralLedgerRequest$outboundSchema;
  /** @deprecated use `PostPayrollsPayrollUuidReportsGeneralLedgerRequest$Outbound` instead. */
  export type Outbound =
    PostPayrollsPayrollUuidReportsGeneralLedgerRequest$Outbound;
}

export function postPayrollsPayrollUuidReportsGeneralLedgerRequestToJSON(
  postPayrollsPayrollUuidReportsGeneralLedgerRequest:
    PostPayrollsPayrollUuidReportsGeneralLedgerRequest,
): string {
  return JSON.stringify(
    PostPayrollsPayrollUuidReportsGeneralLedgerRequest$outboundSchema.parse(
      postPayrollsPayrollUuidReportsGeneralLedgerRequest,
    ),
  );
}

export function postPayrollsPayrollUuidReportsGeneralLedgerRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostPayrollsPayrollUuidReportsGeneralLedgerRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostPayrollsPayrollUuidReportsGeneralLedgerRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostPayrollsPayrollUuidReportsGeneralLedgerRequest' from JSON`,
  );
}

/** @internal */
export const PostPayrollsPayrollUuidReportsGeneralLedgerResponse$inboundSchema:
  z.ZodType<
    PostPayrollsPayrollUuidReportsGeneralLedgerResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "General-Ledger-Report": GeneralLedgerReport$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "General-Ledger-Report": "generalLedgerReport",
    });
  });

/** @internal */
export type PostPayrollsPayrollUuidReportsGeneralLedgerResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "General-Ledger-Report"?: GeneralLedgerReport$Outbound | undefined;
};

/** @internal */
export const PostPayrollsPayrollUuidReportsGeneralLedgerResponse$outboundSchema:
  z.ZodType<
    PostPayrollsPayrollUuidReportsGeneralLedgerResponse$Outbound,
    z.ZodTypeDef,
    PostPayrollsPayrollUuidReportsGeneralLedgerResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    generalLedgerReport: GeneralLedgerReport$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      generalLedgerReport: "General-Ledger-Report",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPayrollsPayrollUuidReportsGeneralLedgerResponse$ {
  /** @deprecated use `PostPayrollsPayrollUuidReportsGeneralLedgerResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostPayrollsPayrollUuidReportsGeneralLedgerResponse$inboundSchema;
  /** @deprecated use `PostPayrollsPayrollUuidReportsGeneralLedgerResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostPayrollsPayrollUuidReportsGeneralLedgerResponse$outboundSchema;
  /** @deprecated use `PostPayrollsPayrollUuidReportsGeneralLedgerResponse$Outbound` instead. */
  export type Outbound =
    PostPayrollsPayrollUuidReportsGeneralLedgerResponse$Outbound;
}

export function postPayrollsPayrollUuidReportsGeneralLedgerResponseToJSON(
  postPayrollsPayrollUuidReportsGeneralLedgerResponse:
    PostPayrollsPayrollUuidReportsGeneralLedgerResponse,
): string {
  return JSON.stringify(
    PostPayrollsPayrollUuidReportsGeneralLedgerResponse$outboundSchema.parse(
      postPayrollsPayrollUuidReportsGeneralLedgerResponse,
    ),
  );
}

export function postPayrollsPayrollUuidReportsGeneralLedgerResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostPayrollsPayrollUuidReportsGeneralLedgerResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostPayrollsPayrollUuidReportsGeneralLedgerResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostPayrollsPayrollUuidReportsGeneralLedgerResponse' from JSON`,
  );
}
