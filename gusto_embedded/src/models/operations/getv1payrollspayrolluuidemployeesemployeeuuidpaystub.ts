/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest = {
  /**
   * The UUID of the payroll
   */
  payrollId: string;
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$inboundSchema:
  z.ZodType<
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payroll_id: z.string(),
    employee_id: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      "payroll_id": "payrollId",
      "employee_id": "employeeId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$Outbound =
  {
    payroll_id: string;
    employee_id: string;
    "X-Gusto-API-Version": string;
  };

/** @internal */
export const GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$outboundSchema:
  z.ZodType<
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$Outbound,
    z.ZodTypeDef,
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest
  > = z.object({
    payrollId: z.string(),
    employeeId: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      payrollId: "payroll_id",
      employeeId: "employee_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$ {
  /** @deprecated use `GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$inboundSchema;
  /** @deprecated use `GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$outboundSchema;
  /** @deprecated use `GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$Outbound` instead. */
  export type Outbound =
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$Outbound;
}

export function getV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequestToJSON(
  getV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest:
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest,
): string {
  return JSON.stringify(
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$outboundSchema
      .parse(getV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest),
  );
}

export function getV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest' from JSON`,
  );
}

/** @internal */
export const GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$inboundSchema:
  z.ZodType<
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
    });
  });

/** @internal */
export type GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
  };

/** @internal */
export const GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$outboundSchema:
  z.ZodType<
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$Outbound,
    z.ZodTypeDef,
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$ {
  /** @deprecated use `GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$inboundSchema;
  /** @deprecated use `GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$outboundSchema;
  /** @deprecated use `GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$Outbound` instead. */
  export type Outbound =
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$Outbound;
}

export function getV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponseToJSON(
  getV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse:
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse,
): string {
  return JSON.stringify(
    GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$outboundSchema
      .parse(getV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse),
  );
}

export function getV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse' from JSON`,
  );
}
