/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1CompanyIndustryRequestBody = {
  /**
   * Industry title
   */
  title?: string | undefined;
  /**
   * North American Industry Classification System (NAICS) is used to classify businesses with a six digit number based on the primary type of work the business performs
   */
  naicsCode: string;
  /**
   * A list of Standard Industrial Classification (SIC) codes, which are four digit number that categorize the industries that companies belong to based on their business activities. If sic_codes is not passed in, we will perform an internal lookup with naics_code.
   */
  sicCodes?: Array<string> | undefined;
};

export type PutV1CompanyIndustryRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutV1CompanyIndustryRequestBody;
};

export type PutV1CompanyIndustryResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  industry?: components.Industry | undefined;
};

/** @internal */
export const PutV1CompanyIndustryRequestBody$inboundSchema: z.ZodType<
  PutV1CompanyIndustryRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  naics_code: z.string(),
  sic_codes: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "naics_code": "naicsCode",
    "sic_codes": "sicCodes",
  });
});

/** @internal */
export type PutV1CompanyIndustryRequestBody$Outbound = {
  title?: string | undefined;
  naics_code: string;
  sic_codes?: Array<string> | undefined;
};

/** @internal */
export const PutV1CompanyIndustryRequestBody$outboundSchema: z.ZodType<
  PutV1CompanyIndustryRequestBody$Outbound,
  z.ZodTypeDef,
  PutV1CompanyIndustryRequestBody
> = z.object({
  title: z.string().optional(),
  naicsCode: z.string(),
  sicCodes: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    naicsCode: "naics_code",
    sicCodes: "sic_codes",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompanyIndustryRequestBody$ {
  /** @deprecated use `PutV1CompanyIndustryRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutV1CompanyIndustryRequestBody$inboundSchema;
  /** @deprecated use `PutV1CompanyIndustryRequestBody$outboundSchema` instead. */
  export const outboundSchema = PutV1CompanyIndustryRequestBody$outboundSchema;
  /** @deprecated use `PutV1CompanyIndustryRequestBody$Outbound` instead. */
  export type Outbound = PutV1CompanyIndustryRequestBody$Outbound;
}

export function putV1CompanyIndustryRequestBodyToJSON(
  putV1CompanyIndustryRequestBody: PutV1CompanyIndustryRequestBody,
): string {
  return JSON.stringify(
    PutV1CompanyIndustryRequestBody$outboundSchema.parse(
      putV1CompanyIndustryRequestBody,
    ),
  );
}

export function putV1CompanyIndustryRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutV1CompanyIndustryRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1CompanyIndustryRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompanyIndustryRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1CompanyIndustryRequest$inboundSchema: z.ZodType<
  PutV1CompanyIndustryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
  RequestBody: z.lazy(() => PutV1CompanyIndustryRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1CompanyIndustryRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutV1CompanyIndustryRequestBody$Outbound;
};

/** @internal */
export const PutV1CompanyIndustryRequest$outboundSchema: z.ZodType<
  PutV1CompanyIndustryRequest$Outbound,
  z.ZodTypeDef,
  PutV1CompanyIndustryRequest
> = z.object({
  companyId: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
  requestBody: z.lazy(() => PutV1CompanyIndustryRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompanyIndustryRequest$ {
  /** @deprecated use `PutV1CompanyIndustryRequest$inboundSchema` instead. */
  export const inboundSchema = PutV1CompanyIndustryRequest$inboundSchema;
  /** @deprecated use `PutV1CompanyIndustryRequest$outboundSchema` instead. */
  export const outboundSchema = PutV1CompanyIndustryRequest$outboundSchema;
  /** @deprecated use `PutV1CompanyIndustryRequest$Outbound` instead. */
  export type Outbound = PutV1CompanyIndustryRequest$Outbound;
}

export function putV1CompanyIndustryRequestToJSON(
  putV1CompanyIndustryRequest: PutV1CompanyIndustryRequest,
): string {
  return JSON.stringify(
    PutV1CompanyIndustryRequest$outboundSchema.parse(
      putV1CompanyIndustryRequest,
    ),
  );
}

export function putV1CompanyIndustryRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV1CompanyIndustryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1CompanyIndustryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompanyIndustryRequest' from JSON`,
  );
}

/** @internal */
export const PutV1CompanyIndustryResponse$inboundSchema: z.ZodType<
  PutV1CompanyIndustryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  Industry: components.Industry$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Industry": "industry",
  });
});

/** @internal */
export type PutV1CompanyIndustryResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  Industry?: components.Industry$Outbound | undefined;
};

/** @internal */
export const PutV1CompanyIndustryResponse$outboundSchema: z.ZodType<
  PutV1CompanyIndustryResponse$Outbound,
  z.ZodTypeDef,
  PutV1CompanyIndustryResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  industry: components.Industry$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    industry: "Industry",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompanyIndustryResponse$ {
  /** @deprecated use `PutV1CompanyIndustryResponse$inboundSchema` instead. */
  export const inboundSchema = PutV1CompanyIndustryResponse$inboundSchema;
  /** @deprecated use `PutV1CompanyIndustryResponse$outboundSchema` instead. */
  export const outboundSchema = PutV1CompanyIndustryResponse$outboundSchema;
  /** @deprecated use `PutV1CompanyIndustryResponse$Outbound` instead. */
  export type Outbound = PutV1CompanyIndustryResponse$Outbound;
}

export function putV1CompanyIndustryResponseToJSON(
  putV1CompanyIndustryResponse: PutV1CompanyIndustryResponse,
): string {
  return JSON.stringify(
    PutV1CompanyIndustryResponse$outboundSchema.parse(
      putV1CompanyIndustryResponse,
    ),
  );
}

export function putV1CompanyIndustryResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV1CompanyIndustryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1CompanyIndustryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompanyIndustryResponse' from JSON`,
  );
}
