/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CompanySuspension,
  CompanySuspension$inboundSchema,
  CompanySuspension$Outbound,
  CompanySuspension$outboundSchema,
} from "../components/companysuspension.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * How Gusto will handle taxes already collected.
 */
export const ReconcileTaxMethod = {
  PayTaxes: "pay_taxes",
  RefundTaxes: "refund_taxes",
} as const;
/**
 * How Gusto will handle taxes already collected.
 */
export type ReconcileTaxMethod = ClosedEnum<typeof ReconcileTaxMethod>;

/**
 * Explanation for why the company is suspending their account.
 *
 * @remarks
 *
 * > ðŸš§ FEIN or entity type changes require Customer Support
 * >
 * > If a company is switching FEIN or changing their entity type, this change must be performed by Gusto Customer Support and cannot be performed via the API at this time.
 */
export const Reason = {
  SwitchingProvider: "switching_provider",
  ShuttingDown: "shutting_down",
  Acquired: "acquired",
  NoMoreEmployees: "no_more_employees",
  ChangingEinOrEntityType: "changing_ein_or_entity_type",
} as const;
/**
 * Explanation for why the company is suspending their account.
 *
 * @remarks
 *
 * > ðŸš§ FEIN or entity type changes require Customer Support
 * >
 * > If a company is switching FEIN or changing their entity type, this change must be performed by Gusto Customer Support and cannot be performed via the API at this time.
 */
export type Reason = ClosedEnum<typeof Reason>;

/**
 * Which competitor the company is joining instead. Required if `reason` is `'switching_provider'`.
 */
export const LeavingFor = {
  Apd: "apd",
  AdpTotalSource: "adp_total_source",
  Accountant: "accountant",
  BambooHr: "bamboo_hr",
  BankOrFinancialInstitution: "bank_or_financial_institution",
  Check: "check",
  Insperity: "insperity",
  IntuitOrQuickbooks: "intuit_or_quickbooks",
  Justworks: "justworks",
  Manual: "manual",
  Namely: "namely",
  Onpay: "onpay",
  Other: "other",
  Patriot: "patriot",
  Paycom: "paycom",
  Paylocity: "paylocity",
  Rippling: "rippling",
  Square: "square",
  Surepayroll: "surepayroll",
  Trinet: "trinet",
  Zenefits: "zenefits",
} as const;
/**
 * Which competitor the company is joining instead. Required if `reason` is `'switching_provider'`.
 */
export type LeavingFor = ClosedEnum<typeof LeavingFor>;

export type PostCompaniesCompanyUuidSuspensionsRequestBody = {
  /**
   * Should Gusto file quarterly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
   */
  fileQuarterlyForms: boolean;
  /**
   * Should Gusto file yearly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
   */
  fileYearlyForms: boolean;
  /**
   * How Gusto will handle taxes already collected.
   */
  reconcileTaxMethod: ReconcileTaxMethod;
  /**
   * User-supplied comments describing why they are suspending their account.
   */
  comments?: string | undefined;
  /**
   * Explanation for why the company is suspending their account.
   *
   * @remarks
   *
   * > ðŸš§ FEIN or entity type changes require Customer Support
   * >
   * > If a company is switching FEIN or changing their entity type, this change must be performed by Gusto Customer Support and cannot be performed via the API at this time.
   */
  reason: Reason;
  /**
   * Which competitor the company is joining instead. Required if `reason` is `'switching_provider'`.
   */
  leavingFor?: LeavingFor | undefined;
};

export type PostCompaniesCompanyUuidSuspensionsRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PostCompaniesCompanyUuidSuspensionsRequestBody;
};

export type PostCompaniesCompanyUuidSuspensionsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  companySuspension?: CompanySuspension | undefined;
};

/** @internal */
export const ReconcileTaxMethod$inboundSchema: z.ZodNativeEnum<
  typeof ReconcileTaxMethod
> = z.nativeEnum(ReconcileTaxMethod);

/** @internal */
export const ReconcileTaxMethod$outboundSchema: z.ZodNativeEnum<
  typeof ReconcileTaxMethod
> = ReconcileTaxMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReconcileTaxMethod$ {
  /** @deprecated use `ReconcileTaxMethod$inboundSchema` instead. */
  export const inboundSchema = ReconcileTaxMethod$inboundSchema;
  /** @deprecated use `ReconcileTaxMethod$outboundSchema` instead. */
  export const outboundSchema = ReconcileTaxMethod$outboundSchema;
}

/** @internal */
export const Reason$inboundSchema: z.ZodNativeEnum<typeof Reason> = z
  .nativeEnum(Reason);

/** @internal */
export const Reason$outboundSchema: z.ZodNativeEnum<typeof Reason> =
  Reason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reason$ {
  /** @deprecated use `Reason$inboundSchema` instead. */
  export const inboundSchema = Reason$inboundSchema;
  /** @deprecated use `Reason$outboundSchema` instead. */
  export const outboundSchema = Reason$outboundSchema;
}

/** @internal */
export const LeavingFor$inboundSchema: z.ZodNativeEnum<typeof LeavingFor> = z
  .nativeEnum(LeavingFor);

/** @internal */
export const LeavingFor$outboundSchema: z.ZodNativeEnum<typeof LeavingFor> =
  LeavingFor$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LeavingFor$ {
  /** @deprecated use `LeavingFor$inboundSchema` instead. */
  export const inboundSchema = LeavingFor$inboundSchema;
  /** @deprecated use `LeavingFor$outboundSchema` instead. */
  export const outboundSchema = LeavingFor$outboundSchema;
}

/** @internal */
export const PostCompaniesCompanyUuidSuspensionsRequestBody$inboundSchema:
  z.ZodType<
    PostCompaniesCompanyUuidSuspensionsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    file_quarterly_forms: z.boolean(),
    file_yearly_forms: z.boolean(),
    reconcile_tax_method: ReconcileTaxMethod$inboundSchema,
    comments: z.string().optional(),
    reason: Reason$inboundSchema,
    leaving_for: LeavingFor$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "file_quarterly_forms": "fileQuarterlyForms",
      "file_yearly_forms": "fileYearlyForms",
      "reconcile_tax_method": "reconcileTaxMethod",
      "leaving_for": "leavingFor",
    });
  });

/** @internal */
export type PostCompaniesCompanyUuidSuspensionsRequestBody$Outbound = {
  file_quarterly_forms: boolean;
  file_yearly_forms: boolean;
  reconcile_tax_method: string;
  comments?: string | undefined;
  reason: string;
  leaving_for?: string | undefined;
};

/** @internal */
export const PostCompaniesCompanyUuidSuspensionsRequestBody$outboundSchema:
  z.ZodType<
    PostCompaniesCompanyUuidSuspensionsRequestBody$Outbound,
    z.ZodTypeDef,
    PostCompaniesCompanyUuidSuspensionsRequestBody
  > = z.object({
    fileQuarterlyForms: z.boolean(),
    fileYearlyForms: z.boolean(),
    reconcileTaxMethod: ReconcileTaxMethod$outboundSchema,
    comments: z.string().optional(),
    reason: Reason$outboundSchema,
    leavingFor: LeavingFor$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      fileQuarterlyForms: "file_quarterly_forms",
      fileYearlyForms: "file_yearly_forms",
      reconcileTaxMethod: "reconcile_tax_method",
      leavingFor: "leaving_for",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCompaniesCompanyUuidSuspensionsRequestBody$ {
  /** @deprecated use `PostCompaniesCompanyUuidSuspensionsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostCompaniesCompanyUuidSuspensionsRequestBody$inboundSchema;
  /** @deprecated use `PostCompaniesCompanyUuidSuspensionsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostCompaniesCompanyUuidSuspensionsRequestBody$outboundSchema;
  /** @deprecated use `PostCompaniesCompanyUuidSuspensionsRequestBody$Outbound` instead. */
  export type Outbound =
    PostCompaniesCompanyUuidSuspensionsRequestBody$Outbound;
}

export function postCompaniesCompanyUuidSuspensionsRequestBodyToJSON(
  postCompaniesCompanyUuidSuspensionsRequestBody:
    PostCompaniesCompanyUuidSuspensionsRequestBody,
): string {
  return JSON.stringify(
    PostCompaniesCompanyUuidSuspensionsRequestBody$outboundSchema.parse(
      postCompaniesCompanyUuidSuspensionsRequestBody,
    ),
  );
}

export function postCompaniesCompanyUuidSuspensionsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCompaniesCompanyUuidSuspensionsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCompaniesCompanyUuidSuspensionsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCompaniesCompanyUuidSuspensionsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostCompaniesCompanyUuidSuspensionsRequest$inboundSchema:
  z.ZodType<PostCompaniesCompanyUuidSuspensionsRequest, z.ZodTypeDef, unknown> =
    z.object({
      company_uuid: z.string(),
      "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
      RequestBody: z.lazy(() =>
        PostCompaniesCompanyUuidSuspensionsRequestBody$inboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        "company_uuid": "companyUuid",
        "X-Gusto-API-Version": "xGustoAPIVersion",
        "RequestBody": "requestBody",
      });
    });

/** @internal */
export type PostCompaniesCompanyUuidSuspensionsRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostCompaniesCompanyUuidSuspensionsRequestBody$Outbound;
};

/** @internal */
export const PostCompaniesCompanyUuidSuspensionsRequest$outboundSchema:
  z.ZodType<
    PostCompaniesCompanyUuidSuspensionsRequest$Outbound,
    z.ZodTypeDef,
    PostCompaniesCompanyUuidSuspensionsRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PostCompaniesCompanyUuidSuspensionsRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCompaniesCompanyUuidSuspensionsRequest$ {
  /** @deprecated use `PostCompaniesCompanyUuidSuspensionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostCompaniesCompanyUuidSuspensionsRequest$inboundSchema;
  /** @deprecated use `PostCompaniesCompanyUuidSuspensionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostCompaniesCompanyUuidSuspensionsRequest$outboundSchema;
  /** @deprecated use `PostCompaniesCompanyUuidSuspensionsRequest$Outbound` instead. */
  export type Outbound = PostCompaniesCompanyUuidSuspensionsRequest$Outbound;
}

export function postCompaniesCompanyUuidSuspensionsRequestToJSON(
  postCompaniesCompanyUuidSuspensionsRequest:
    PostCompaniesCompanyUuidSuspensionsRequest,
): string {
  return JSON.stringify(
    PostCompaniesCompanyUuidSuspensionsRequest$outboundSchema.parse(
      postCompaniesCompanyUuidSuspensionsRequest,
    ),
  );
}

export function postCompaniesCompanyUuidSuspensionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCompaniesCompanyUuidSuspensionsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCompaniesCompanyUuidSuspensionsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCompaniesCompanyUuidSuspensionsRequest' from JSON`,
  );
}

/** @internal */
export const PostCompaniesCompanyUuidSuspensionsResponse$inboundSchema:
  z.ZodType<
    PostCompaniesCompanyUuidSuspensionsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Company-Suspension": CompanySuspension$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Company-Suspension": "companySuspension",
    });
  });

/** @internal */
export type PostCompaniesCompanyUuidSuspensionsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Company-Suspension"?: CompanySuspension$Outbound | undefined;
};

/** @internal */
export const PostCompaniesCompanyUuidSuspensionsResponse$outboundSchema:
  z.ZodType<
    PostCompaniesCompanyUuidSuspensionsResponse$Outbound,
    z.ZodTypeDef,
    PostCompaniesCompanyUuidSuspensionsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    companySuspension: CompanySuspension$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      companySuspension: "Company-Suspension",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCompaniesCompanyUuidSuspensionsResponse$ {
  /** @deprecated use `PostCompaniesCompanyUuidSuspensionsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostCompaniesCompanyUuidSuspensionsResponse$inboundSchema;
  /** @deprecated use `PostCompaniesCompanyUuidSuspensionsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostCompaniesCompanyUuidSuspensionsResponse$outboundSchema;
  /** @deprecated use `PostCompaniesCompanyUuidSuspensionsResponse$Outbound` instead. */
  export type Outbound = PostCompaniesCompanyUuidSuspensionsResponse$Outbound;
}

export function postCompaniesCompanyUuidSuspensionsResponseToJSON(
  postCompaniesCompanyUuidSuspensionsResponse:
    PostCompaniesCompanyUuidSuspensionsResponse,
): string {
  return JSON.stringify(
    PostCompaniesCompanyUuidSuspensionsResponse$outboundSchema.parse(
      postCompaniesCompanyUuidSuspensionsResponse,
    ),
  );
}

export function postCompaniesCompanyUuidSuspensionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCompaniesCompanyUuidSuspensionsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCompaniesCompanyUuidSuspensionsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCompaniesCompanyUuidSuspensionsResponse' from JSON`,
  );
}
