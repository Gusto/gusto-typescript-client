/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1EmployeesEmployeeIdTerminationsRequestBody = {
  /**
   * The employee's last day of work.
   */
  effectiveDate: string;
  /**
   * If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule.
   */
  runTerminationPayroll?: boolean | undefined;
};

export type PostV1EmployeesEmployeeIdTerminationsRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PostV1EmployeesEmployeeIdTerminationsRequestBody;
};

/** @internal */
export const PostV1EmployeesEmployeeIdTerminationsRequestBody$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdTerminationsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    effective_date: z.string(),
    run_termination_payroll: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "effective_date": "effectiveDate",
      "run_termination_payroll": "runTerminationPayroll",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdTerminationsRequestBody$Outbound = {
  effective_date: string;
  run_termination_payroll?: boolean | undefined;
};

/** @internal */
export const PostV1EmployeesEmployeeIdTerminationsRequestBody$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdTerminationsRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdTerminationsRequestBody
  > = z.object({
    effectiveDate: z.string(),
    runTerminationPayroll: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      effectiveDate: "effective_date",
      runTerminationPayroll: "run_termination_payroll",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdTerminationsRequestBody$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdTerminationsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdTerminationsRequestBody$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdTerminationsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdTerminationsRequestBody$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdTerminationsRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1EmployeesEmployeeIdTerminationsRequestBody$Outbound;
}

export function postV1EmployeesEmployeeIdTerminationsRequestBodyToJSON(
  postV1EmployeesEmployeeIdTerminationsRequestBody:
    PostV1EmployeesEmployeeIdTerminationsRequestBody,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdTerminationsRequestBody$outboundSchema.parse(
      postV1EmployeesEmployeeIdTerminationsRequestBody,
    ),
  );
}

export function postV1EmployeesEmployeeIdTerminationsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdTerminationsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdTerminationsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdTerminationsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1EmployeesEmployeeIdTerminationsRequest$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdTerminationsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
    RequestBody: z.lazy(() =>
      PostV1EmployeesEmployeeIdTerminationsRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdTerminationsRequest$Outbound = {
  employee_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostV1EmployeesEmployeeIdTerminationsRequestBody$Outbound;
};

/** @internal */
export const PostV1EmployeesEmployeeIdTerminationsRequest$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdTerminationsRequest$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdTerminationsRequest
  > = z.object({
    employeeId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
    requestBody: z.lazy(() =>
      PostV1EmployeesEmployeeIdTerminationsRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdTerminationsRequest$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdTerminationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdTerminationsRequest$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdTerminationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdTerminationsRequest$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdTerminationsRequest$Outbound` instead. */
  export type Outbound = PostV1EmployeesEmployeeIdTerminationsRequest$Outbound;
}

export function postV1EmployeesEmployeeIdTerminationsRequestToJSON(
  postV1EmployeesEmployeeIdTerminationsRequest:
    PostV1EmployeesEmployeeIdTerminationsRequest,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdTerminationsRequest$outboundSchema.parse(
      postV1EmployeesEmployeeIdTerminationsRequest,
    ),
  );
}

export function postV1EmployeesEmployeeIdTerminationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdTerminationsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdTerminationsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdTerminationsRequest' from JSON`,
  );
}
