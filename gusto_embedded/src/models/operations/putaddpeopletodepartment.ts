/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Employees = {
  uuid?: string | undefined;
};

export type Contractors = {
  uuid?: string | undefined;
};

export type PutAddPeopleToDepartmentRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * Array of employees to add to the department
   */
  employees?: Array<Employees> | undefined;
  /**
   * Array of contractors to add to the department
   */
  contractors?: Array<Contractors> | undefined;
};

export type PutAddPeopleToDepartmentRequest = {
  /**
   * The UUID of the department
   */
  departmentUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutAddPeopleToDepartmentRequestBody;
};

/** @internal */
export const Employees$inboundSchema: z.ZodType<
  Employees,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type Employees$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const Employees$outboundSchema: z.ZodType<
  Employees$Outbound,
  z.ZodTypeDef,
  Employees
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Employees$ {
  /** @deprecated use `Employees$inboundSchema` instead. */
  export const inboundSchema = Employees$inboundSchema;
  /** @deprecated use `Employees$outboundSchema` instead. */
  export const outboundSchema = Employees$outboundSchema;
  /** @deprecated use `Employees$Outbound` instead. */
  export type Outbound = Employees$Outbound;
}

export function employeesToJSON(employees: Employees): string {
  return JSON.stringify(Employees$outboundSchema.parse(employees));
}

export function employeesFromJSON(
  jsonString: string,
): SafeParseResult<Employees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Employees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Employees' from JSON`,
  );
}

/** @internal */
export const Contractors$inboundSchema: z.ZodType<
  Contractors,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type Contractors$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const Contractors$outboundSchema: z.ZodType<
  Contractors$Outbound,
  z.ZodTypeDef,
  Contractors
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contractors$ {
  /** @deprecated use `Contractors$inboundSchema` instead. */
  export const inboundSchema = Contractors$inboundSchema;
  /** @deprecated use `Contractors$outboundSchema` instead. */
  export const outboundSchema = Contractors$outboundSchema;
  /** @deprecated use `Contractors$Outbound` instead. */
  export type Outbound = Contractors$Outbound;
}

export function contractorsToJSON(contractors: Contractors): string {
  return JSON.stringify(Contractors$outboundSchema.parse(contractors));
}

export function contractorsFromJSON(
  jsonString: string,
): SafeParseResult<Contractors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contractors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contractors' from JSON`,
  );
}

/** @internal */
export const PutAddPeopleToDepartmentRequestBody$inboundSchema: z.ZodType<
  PutAddPeopleToDepartmentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
  employees: z.array(z.lazy(() => Employees$inboundSchema)).optional(),
  contractors: z.array(z.lazy(() => Contractors$inboundSchema)).optional(),
});

/** @internal */
export type PutAddPeopleToDepartmentRequestBody$Outbound = {
  version?: string | undefined;
  employees?: Array<Employees$Outbound> | undefined;
  contractors?: Array<Contractors$Outbound> | undefined;
};

/** @internal */
export const PutAddPeopleToDepartmentRequestBody$outboundSchema: z.ZodType<
  PutAddPeopleToDepartmentRequestBody$Outbound,
  z.ZodTypeDef,
  PutAddPeopleToDepartmentRequestBody
> = z.object({
  version: z.string().optional(),
  employees: z.array(z.lazy(() => Employees$outboundSchema)).optional(),
  contractors: z.array(z.lazy(() => Contractors$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutAddPeopleToDepartmentRequestBody$ {
  /** @deprecated use `PutAddPeopleToDepartmentRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutAddPeopleToDepartmentRequestBody$inboundSchema;
  /** @deprecated use `PutAddPeopleToDepartmentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutAddPeopleToDepartmentRequestBody$outboundSchema;
  /** @deprecated use `PutAddPeopleToDepartmentRequestBody$Outbound` instead. */
  export type Outbound = PutAddPeopleToDepartmentRequestBody$Outbound;
}

export function putAddPeopleToDepartmentRequestBodyToJSON(
  putAddPeopleToDepartmentRequestBody: PutAddPeopleToDepartmentRequestBody,
): string {
  return JSON.stringify(
    PutAddPeopleToDepartmentRequestBody$outboundSchema.parse(
      putAddPeopleToDepartmentRequestBody,
    ),
  );
}

export function putAddPeopleToDepartmentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutAddPeopleToDepartmentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutAddPeopleToDepartmentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutAddPeopleToDepartmentRequestBody' from JSON`,
  );
}

/** @internal */
export const PutAddPeopleToDepartmentRequest$inboundSchema: z.ZodType<
  PutAddPeopleToDepartmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  department_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
  RequestBody: z.lazy(() => PutAddPeopleToDepartmentRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "department_uuid": "departmentUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutAddPeopleToDepartmentRequest$Outbound = {
  department_uuid: string;
  "X-Gusto-API-Version"?: string | undefined;
  RequestBody: PutAddPeopleToDepartmentRequestBody$Outbound;
};

/** @internal */
export const PutAddPeopleToDepartmentRequest$outboundSchema: z.ZodType<
  PutAddPeopleToDepartmentRequest$Outbound,
  z.ZodTypeDef,
  PutAddPeopleToDepartmentRequest
> = z.object({
  departmentUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
  requestBody: z.lazy(() => PutAddPeopleToDepartmentRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    departmentUuid: "department_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutAddPeopleToDepartmentRequest$ {
  /** @deprecated use `PutAddPeopleToDepartmentRequest$inboundSchema` instead. */
  export const inboundSchema = PutAddPeopleToDepartmentRequest$inboundSchema;
  /** @deprecated use `PutAddPeopleToDepartmentRequest$outboundSchema` instead. */
  export const outboundSchema = PutAddPeopleToDepartmentRequest$outboundSchema;
  /** @deprecated use `PutAddPeopleToDepartmentRequest$Outbound` instead. */
  export type Outbound = PutAddPeopleToDepartmentRequest$Outbound;
}

export function putAddPeopleToDepartmentRequestToJSON(
  putAddPeopleToDepartmentRequest: PutAddPeopleToDepartmentRequest,
): string {
  return JSON.stringify(
    PutAddPeopleToDepartmentRequest$outboundSchema.parse(
      putAddPeopleToDepartmentRequest,
    ),
  );
}

export function putAddPeopleToDepartmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutAddPeopleToDepartmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutAddPeopleToDepartmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutAddPeopleToDepartmentRequest' from JSON`,
  );
}
