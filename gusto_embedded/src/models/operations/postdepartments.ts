/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostDepartmentsRequestBody = {
  title?: string | undefined;
};

export type PostDepartmentsRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PostDepartmentsRequestBody;
};

/** @internal */
export const PostDepartmentsRequestBody$inboundSchema: z.ZodType<
  PostDepartmentsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
});

/** @internal */
export type PostDepartmentsRequestBody$Outbound = {
  title?: string | undefined;
};

/** @internal */
export const PostDepartmentsRequestBody$outboundSchema: z.ZodType<
  PostDepartmentsRequestBody$Outbound,
  z.ZodTypeDef,
  PostDepartmentsRequestBody
> = z.object({
  title: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostDepartmentsRequestBody$ {
  /** @deprecated use `PostDepartmentsRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostDepartmentsRequestBody$inboundSchema;
  /** @deprecated use `PostDepartmentsRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostDepartmentsRequestBody$outboundSchema;
  /** @deprecated use `PostDepartmentsRequestBody$Outbound` instead. */
  export type Outbound = PostDepartmentsRequestBody$Outbound;
}

export function postDepartmentsRequestBodyToJSON(
  postDepartmentsRequestBody: PostDepartmentsRequestBody,
): string {
  return JSON.stringify(
    PostDepartmentsRequestBody$outboundSchema.parse(postDepartmentsRequestBody),
  );
}

export function postDepartmentsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostDepartmentsRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostDepartmentsRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostDepartmentsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostDepartmentsRequest$inboundSchema: z.ZodType<
  PostDepartmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
  RequestBody: z.lazy(() => PostDepartmentsRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostDepartmentsRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostDepartmentsRequestBody$Outbound;
};

/** @internal */
export const PostDepartmentsRequest$outboundSchema: z.ZodType<
  PostDepartmentsRequest$Outbound,
  z.ZodTypeDef,
  PostDepartmentsRequest
> = z.object({
  companyUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
  requestBody: z.lazy(() => PostDepartmentsRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostDepartmentsRequest$ {
  /** @deprecated use `PostDepartmentsRequest$inboundSchema` instead. */
  export const inboundSchema = PostDepartmentsRequest$inboundSchema;
  /** @deprecated use `PostDepartmentsRequest$outboundSchema` instead. */
  export const outboundSchema = PostDepartmentsRequest$outboundSchema;
  /** @deprecated use `PostDepartmentsRequest$Outbound` instead. */
  export type Outbound = PostDepartmentsRequest$Outbound;
}

export function postDepartmentsRequestToJSON(
  postDepartmentsRequest: PostDepartmentsRequest,
): string {
  return JSON.stringify(
    PostDepartmentsRequest$outboundSchema.parse(postDepartmentsRequest),
  );
}

export function postDepartmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostDepartmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostDepartmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostDepartmentsRequest' from JSON`,
  );
}
