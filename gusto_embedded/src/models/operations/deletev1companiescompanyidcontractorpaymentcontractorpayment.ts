/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest =
  {
    /**
     * The UUID of the company
     */
    companyId: string;
    /**
     * The UUID of the contractor payment
     */
    contractorPaymentId: string;
    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    xGustoAPIVersion?: components.VersionHeader | undefined;
  };

/** @internal */
export const DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$inboundSchema:
  z.ZodType<
    DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    contractor_payment_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "contractor_payment_id": "contractorPaymentId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$Outbound =
  {
    company_id: string;
    contractor_payment_id: string;
    "X-Gusto-API-Version": string;
  };

/** @internal */
export const DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$outboundSchema:
  z.ZodType<
    DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$Outbound,
    z.ZodTypeDef,
    DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest
  > = z.object({
    companyId: z.string(),
    contractorPaymentId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      contractorPaymentId: "contractor_payment_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$ {
  /** @deprecated use `DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$inboundSchema;
  /** @deprecated use `DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$outboundSchema;
  /** @deprecated use `DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$Outbound` instead. */
  export type Outbound =
    DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$Outbound;
}

export function deleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestToJSON(
  deleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest:
    DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest,
): string {
  return JSON.stringify(
    DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$outboundSchema
      .parse(
        deleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest,
      ),
  );
}

export function deleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest' from JSON`,
  );
}
