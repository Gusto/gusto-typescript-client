/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  EmployeeWorkAddress,
  EmployeeWorkAddress$inboundSchema,
  EmployeeWorkAddress$Outbound,
  EmployeeWorkAddress$outboundSchema,
} from "../components/employeeworkaddress.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFourMinus04Minus01: "2024-04-01",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion =
  ClosedEnum<
    typeof GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion
  >;

export type GetV1EmployeesEmployeeIdWorkAddressesRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion
    | undefined;
};

export type GetV1EmployeesEmployeeIdWorkAddressesResponse = {
  httpMeta: HTTPMetadata;
  /**
   * List of employee work addresses
   */
  employeeWorkAddressesList?: Array<EmployeeWorkAddress> | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion
  > = z.nativeEnum(GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion);

/** @internal */
export const GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion
  > = GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const GetV1EmployeesEmployeeIdWorkAddressesRequest$inboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdWorkAddressesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    "X-Gusto-API-Version":
      GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$inboundSchema
        .default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1EmployeesEmployeeIdWorkAddressesRequest$Outbound = {
  employee_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1EmployeesEmployeeIdWorkAddressesRequest$outboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdWorkAddressesRequest$Outbound,
    z.ZodTypeDef,
    GetV1EmployeesEmployeeIdWorkAddressesRequest
  > = z.object({
    employeeId: z.string(),
    xGustoAPIVersion:
      GetV1EmployeesEmployeeIdWorkAddressesHeaderXGustoAPIVersion$outboundSchema
        .default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdWorkAddressesRequest$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdWorkAddressesRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdWorkAddressesRequest$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdWorkAddressesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdWorkAddressesRequest$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdWorkAddressesRequest$Outbound` instead. */
  export type Outbound = GetV1EmployeesEmployeeIdWorkAddressesRequest$Outbound;
}

export function getV1EmployeesEmployeeIdWorkAddressesRequestToJSON(
  getV1EmployeesEmployeeIdWorkAddressesRequest:
    GetV1EmployeesEmployeeIdWorkAddressesRequest,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdWorkAddressesRequest$outboundSchema.parse(
      getV1EmployeesEmployeeIdWorkAddressesRequest,
    ),
  );
}

export function getV1EmployeesEmployeeIdWorkAddressesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeesEmployeeIdWorkAddressesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdWorkAddressesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1EmployeesEmployeeIdWorkAddressesRequest' from JSON`,
  );
}

/** @internal */
export const GetV1EmployeesEmployeeIdWorkAddressesResponse$inboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdWorkAddressesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Employee-Work-Addresses-List": z.array(EmployeeWorkAddress$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Employee-Work-Addresses-List": "employeeWorkAddressesList",
    });
  });

/** @internal */
export type GetV1EmployeesEmployeeIdWorkAddressesResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Employee-Work-Addresses-List"?:
    | Array<EmployeeWorkAddress$Outbound>
    | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdWorkAddressesResponse$outboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdWorkAddressesResponse$Outbound,
    z.ZodTypeDef,
    GetV1EmployeesEmployeeIdWorkAddressesResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    employeeWorkAddressesList: z.array(EmployeeWorkAddress$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      employeeWorkAddressesList: "Employee-Work-Addresses-List",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdWorkAddressesResponse$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdWorkAddressesResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdWorkAddressesResponse$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdWorkAddressesResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdWorkAddressesResponse$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdWorkAddressesResponse$Outbound` instead. */
  export type Outbound = GetV1EmployeesEmployeeIdWorkAddressesResponse$Outbound;
}

export function getV1EmployeesEmployeeIdWorkAddressesResponseToJSON(
  getV1EmployeesEmployeeIdWorkAddressesResponse:
    GetV1EmployeesEmployeeIdWorkAddressesResponse,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdWorkAddressesResponse$outboundSchema.parse(
      getV1EmployeesEmployeeIdWorkAddressesResponse,
    ),
  );
}

export function getV1EmployeesEmployeeIdWorkAddressesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeesEmployeeIdWorkAddressesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdWorkAddressesResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1EmployeesEmployeeIdWorkAddressesResponse' from JSON`,
  );
}
