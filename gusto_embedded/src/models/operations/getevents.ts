/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetEventsSecurity = {
  systemAccessAuth: string;
};

export type GetEventsRequest = {
  /**
   * A cursor for pagination. Returns all events occuring after the specified UUID (exclusive). Events are sorted according to the provided sort_order param.
   */
  startingAfterUuid?: string | undefined;
  /**
   * The UUID of the company. If not specified, will return all events for all companies.
   */
  resourceUuid?: string | undefined;
  /**
   * Limits the number of objects returned in a single response, between 1 and 100. The default is 25
   */
  limit?: string | undefined;
  /**
   * A string containing the exact event name (e.g. `employee.created`), or use a wildcard match to filter for a group of events (e.g. `employee.*`, `*.created`, `notification.*.created` etc.)
   */
  eventType?: string | undefined;
  /**
   * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
   */
  sortOrder?: components.SortOrder | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

/** @internal */
export const GetEventsSecurity$inboundSchema: z.ZodType<
  GetEventsSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  SystemAccessAuth: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SystemAccessAuth": "systemAccessAuth",
  });
});

/** @internal */
export type GetEventsSecurity$Outbound = {
  SystemAccessAuth: string;
};

/** @internal */
export const GetEventsSecurity$outboundSchema: z.ZodType<
  GetEventsSecurity$Outbound,
  z.ZodTypeDef,
  GetEventsSecurity
> = z.object({
  systemAccessAuth: z.string(),
}).transform((v) => {
  return remap$(v, {
    systemAccessAuth: "SystemAccessAuth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventsSecurity$ {
  /** @deprecated use `GetEventsSecurity$inboundSchema` instead. */
  export const inboundSchema = GetEventsSecurity$inboundSchema;
  /** @deprecated use `GetEventsSecurity$outboundSchema` instead. */
  export const outboundSchema = GetEventsSecurity$outboundSchema;
  /** @deprecated use `GetEventsSecurity$Outbound` instead. */
  export type Outbound = GetEventsSecurity$Outbound;
}

export function getEventsSecurityToJSON(
  getEventsSecurity: GetEventsSecurity,
): string {
  return JSON.stringify(
    GetEventsSecurity$outboundSchema.parse(getEventsSecurity),
  );
}

export function getEventsSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetEventsSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventsSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventsSecurity' from JSON`,
  );
}

/** @internal */
export const GetEventsRequest$inboundSchema: z.ZodType<
  GetEventsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  starting_after_uuid: z.string().optional(),
  resource_uuid: z.string().optional(),
  limit: z.string().optional(),
  event_type: z.string().optional(),
  sort_order: components.SortOrder$inboundSchema.optional(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "starting_after_uuid": "startingAfterUuid",
    "resource_uuid": "resourceUuid",
    "event_type": "eventType",
    "sort_order": "sortOrder",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetEventsRequest$Outbound = {
  starting_after_uuid?: string | undefined;
  resource_uuid?: string | undefined;
  limit?: string | undefined;
  event_type?: string | undefined;
  sort_order?: string | undefined;
  "X-Gusto-API-Version"?: string | undefined;
};

/** @internal */
export const GetEventsRequest$outboundSchema: z.ZodType<
  GetEventsRequest$Outbound,
  z.ZodTypeDef,
  GetEventsRequest
> = z.object({
  startingAfterUuid: z.string().optional(),
  resourceUuid: z.string().optional(),
  limit: z.string().optional(),
  eventType: z.string().optional(),
  sortOrder: components.SortOrder$outboundSchema.optional(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    startingAfterUuid: "starting_after_uuid",
    resourceUuid: "resource_uuid",
    eventType: "event_type",
    sortOrder: "sort_order",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEventsRequest$ {
  /** @deprecated use `GetEventsRequest$inboundSchema` instead. */
  export const inboundSchema = GetEventsRequest$inboundSchema;
  /** @deprecated use `GetEventsRequest$outboundSchema` instead. */
  export const outboundSchema = GetEventsRequest$outboundSchema;
  /** @deprecated use `GetEventsRequest$Outbound` instead. */
  export type Outbound = GetEventsRequest$Outbound;
}

export function getEventsRequestToJSON(
  getEventsRequest: GetEventsRequest,
): string {
  return JSON.stringify(
    GetEventsRequest$outboundSchema.parse(getEventsRequest),
  );
}

export function getEventsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEventsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetEventsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEventsRequest' from JSON`,
  );
}
