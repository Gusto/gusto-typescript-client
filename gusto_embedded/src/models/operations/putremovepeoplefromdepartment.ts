/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutRemovePeopleFromDepartmentEmployees = {
  uuid?: string | undefined;
};

export type PutRemovePeopleFromDepartmentContractors = {
  uuid?: string | undefined;
};

export type PutRemovePeopleFromDepartmentRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * Array of employees to remove from a department
   */
  employees?: Array<PutRemovePeopleFromDepartmentEmployees> | undefined;
  /**
   * Array of contractors to remove from a department
   */
  contractors?: Array<PutRemovePeopleFromDepartmentContractors> | undefined;
};

export type PutRemovePeopleFromDepartmentRequest = {
  /**
   * The UUID of the department
   */
  departmentUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutRemovePeopleFromDepartmentRequestBody;
};

export type PutRemovePeopleFromDepartmentResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Department Object Example
   */
  department?: components.Department | undefined;
};

/** @internal */
export const PutRemovePeopleFromDepartmentEmployees$inboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentEmployees,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type PutRemovePeopleFromDepartmentEmployees$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const PutRemovePeopleFromDepartmentEmployees$outboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentEmployees$Outbound,
  z.ZodTypeDef,
  PutRemovePeopleFromDepartmentEmployees
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutRemovePeopleFromDepartmentEmployees$ {
  /** @deprecated use `PutRemovePeopleFromDepartmentEmployees$inboundSchema` instead. */
  export const inboundSchema =
    PutRemovePeopleFromDepartmentEmployees$inboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentEmployees$outboundSchema` instead. */
  export const outboundSchema =
    PutRemovePeopleFromDepartmentEmployees$outboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentEmployees$Outbound` instead. */
  export type Outbound = PutRemovePeopleFromDepartmentEmployees$Outbound;
}

export function putRemovePeopleFromDepartmentEmployeesToJSON(
  putRemovePeopleFromDepartmentEmployees:
    PutRemovePeopleFromDepartmentEmployees,
): string {
  return JSON.stringify(
    PutRemovePeopleFromDepartmentEmployees$outboundSchema.parse(
      putRemovePeopleFromDepartmentEmployees,
    ),
  );
}

export function putRemovePeopleFromDepartmentEmployeesFromJSON(
  jsonString: string,
): SafeParseResult<PutRemovePeopleFromDepartmentEmployees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutRemovePeopleFromDepartmentEmployees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutRemovePeopleFromDepartmentEmployees' from JSON`,
  );
}

/** @internal */
export const PutRemovePeopleFromDepartmentContractors$inboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentContractors,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type PutRemovePeopleFromDepartmentContractors$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const PutRemovePeopleFromDepartmentContractors$outboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentContractors$Outbound,
  z.ZodTypeDef,
  PutRemovePeopleFromDepartmentContractors
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutRemovePeopleFromDepartmentContractors$ {
  /** @deprecated use `PutRemovePeopleFromDepartmentContractors$inboundSchema` instead. */
  export const inboundSchema =
    PutRemovePeopleFromDepartmentContractors$inboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentContractors$outboundSchema` instead. */
  export const outboundSchema =
    PutRemovePeopleFromDepartmentContractors$outboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentContractors$Outbound` instead. */
  export type Outbound = PutRemovePeopleFromDepartmentContractors$Outbound;
}

export function putRemovePeopleFromDepartmentContractorsToJSON(
  putRemovePeopleFromDepartmentContractors:
    PutRemovePeopleFromDepartmentContractors,
): string {
  return JSON.stringify(
    PutRemovePeopleFromDepartmentContractors$outboundSchema.parse(
      putRemovePeopleFromDepartmentContractors,
    ),
  );
}

export function putRemovePeopleFromDepartmentContractorsFromJSON(
  jsonString: string,
): SafeParseResult<
  PutRemovePeopleFromDepartmentContractors,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutRemovePeopleFromDepartmentContractors$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutRemovePeopleFromDepartmentContractors' from JSON`,
  );
}

/** @internal */
export const PutRemovePeopleFromDepartmentRequestBody$inboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
  employees: z.array(
    z.lazy(() => PutRemovePeopleFromDepartmentEmployees$inboundSchema),
  ).optional(),
  contractors: z.array(
    z.lazy(() => PutRemovePeopleFromDepartmentContractors$inboundSchema),
  ).optional(),
});

/** @internal */
export type PutRemovePeopleFromDepartmentRequestBody$Outbound = {
  version?: string | undefined;
  employees?:
    | Array<PutRemovePeopleFromDepartmentEmployees$Outbound>
    | undefined;
  contractors?:
    | Array<PutRemovePeopleFromDepartmentContractors$Outbound>
    | undefined;
};

/** @internal */
export const PutRemovePeopleFromDepartmentRequestBody$outboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentRequestBody$Outbound,
  z.ZodTypeDef,
  PutRemovePeopleFromDepartmentRequestBody
> = z.object({
  version: z.string().optional(),
  employees: z.array(
    z.lazy(() => PutRemovePeopleFromDepartmentEmployees$outboundSchema),
  ).optional(),
  contractors: z.array(
    z.lazy(() => PutRemovePeopleFromDepartmentContractors$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutRemovePeopleFromDepartmentRequestBody$ {
  /** @deprecated use `PutRemovePeopleFromDepartmentRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutRemovePeopleFromDepartmentRequestBody$inboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutRemovePeopleFromDepartmentRequestBody$outboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentRequestBody$Outbound` instead. */
  export type Outbound = PutRemovePeopleFromDepartmentRequestBody$Outbound;
}

export function putRemovePeopleFromDepartmentRequestBodyToJSON(
  putRemovePeopleFromDepartmentRequestBody:
    PutRemovePeopleFromDepartmentRequestBody,
): string {
  return JSON.stringify(
    PutRemovePeopleFromDepartmentRequestBody$outboundSchema.parse(
      putRemovePeopleFromDepartmentRequestBody,
    ),
  );
}

export function putRemovePeopleFromDepartmentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutRemovePeopleFromDepartmentRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutRemovePeopleFromDepartmentRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutRemovePeopleFromDepartmentRequestBody' from JSON`,
  );
}

/** @internal */
export const PutRemovePeopleFromDepartmentRequest$inboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  department_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
  RequestBody: z.lazy(() =>
    PutRemovePeopleFromDepartmentRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "department_uuid": "departmentUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutRemovePeopleFromDepartmentRequest$Outbound = {
  department_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutRemovePeopleFromDepartmentRequestBody$Outbound;
};

/** @internal */
export const PutRemovePeopleFromDepartmentRequest$outboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentRequest$Outbound,
  z.ZodTypeDef,
  PutRemovePeopleFromDepartmentRequest
> = z.object({
  departmentUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
  requestBody: z.lazy(() =>
    PutRemovePeopleFromDepartmentRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    departmentUuid: "department_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutRemovePeopleFromDepartmentRequest$ {
  /** @deprecated use `PutRemovePeopleFromDepartmentRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutRemovePeopleFromDepartmentRequest$inboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutRemovePeopleFromDepartmentRequest$outboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentRequest$Outbound` instead. */
  export type Outbound = PutRemovePeopleFromDepartmentRequest$Outbound;
}

export function putRemovePeopleFromDepartmentRequestToJSON(
  putRemovePeopleFromDepartmentRequest: PutRemovePeopleFromDepartmentRequest,
): string {
  return JSON.stringify(
    PutRemovePeopleFromDepartmentRequest$outboundSchema.parse(
      putRemovePeopleFromDepartmentRequest,
    ),
  );
}

export function putRemovePeopleFromDepartmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutRemovePeopleFromDepartmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutRemovePeopleFromDepartmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutRemovePeopleFromDepartmentRequest' from JSON`,
  );
}

/** @internal */
export const PutRemovePeopleFromDepartmentResponse$inboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  Department: components.Department$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Department": "department",
  });
});

/** @internal */
export type PutRemovePeopleFromDepartmentResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  Department?: components.Department$Outbound | undefined;
};

/** @internal */
export const PutRemovePeopleFromDepartmentResponse$outboundSchema: z.ZodType<
  PutRemovePeopleFromDepartmentResponse$Outbound,
  z.ZodTypeDef,
  PutRemovePeopleFromDepartmentResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  department: components.Department$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    department: "Department",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutRemovePeopleFromDepartmentResponse$ {
  /** @deprecated use `PutRemovePeopleFromDepartmentResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutRemovePeopleFromDepartmentResponse$inboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutRemovePeopleFromDepartmentResponse$outboundSchema;
  /** @deprecated use `PutRemovePeopleFromDepartmentResponse$Outbound` instead. */
  export type Outbound = PutRemovePeopleFromDepartmentResponse$Outbound;
}

export function putRemovePeopleFromDepartmentResponseToJSON(
  putRemovePeopleFromDepartmentResponse: PutRemovePeopleFromDepartmentResponse,
): string {
  return JSON.stringify(
    PutRemovePeopleFromDepartmentResponse$outboundSchema.parse(
      putRemovePeopleFromDepartmentResponse,
    ),
  );
}

export function putRemovePeopleFromDepartmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutRemovePeopleFromDepartmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutRemovePeopleFromDepartmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutRemovePeopleFromDepartmentResponse' from JSON`,
  );
}
