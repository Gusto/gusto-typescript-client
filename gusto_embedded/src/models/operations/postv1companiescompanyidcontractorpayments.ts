/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
  HistoricalPayment: "Historical Payment",
} as const;
export type PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod =
  ClosedEnum<typeof PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod>;

export type PostV1CompaniesCompanyIdContractorPaymentsRequestBody = {
  /**
   * The contractor receiving the payment
   */
  contractorUuid: string;
  /**
   * Date of contractor payment
   */
  date: RFCDate;
  paymentMethod?:
    | PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod
    | undefined;
  /**
   * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
   */
  wage?: number | undefined;
  /**
   * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
   */
  hours?: number | undefined;
  /**
   * If the contractor is on an hourly wage, this is the bonus the contractor earned
   */
  bonus?: number | undefined;
  /**
   * Reimbursed wages for the contractor
   */
  reimbursement?: number | undefined;
};

export type PostV1CompaniesCompanyIdContractorPaymentsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PostV1CompaniesCompanyIdContractorPaymentsRequestBody;
};

export type PostV1CompaniesCompanyIdContractorPaymentsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  contractorPayment?: components.ContractorPayment | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod
  > = z.nativeEnum(PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod);

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod
  > = PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$outboundSchema;
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentsRequestBody$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    contractor_uuid: z.string(),
    date: z.string().transform(v => new RFCDate(v)),
    payment_method:
      PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$inboundSchema
        .default("Direct Deposit"),
    wage: z.number().optional(),
    hours: z.number().optional(),
    bonus: z.number().optional(),
    reimbursement: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "contractor_uuid": "contractorUuid",
      "payment_method": "paymentMethod",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentsRequestBody$Outbound = {
  contractor_uuid: string;
  date: string;
  payment_method: string;
  wage?: number | undefined;
  hours?: number | undefined;
  bonus?: number | undefined;
  reimbursement?: number | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentsRequestBody$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentsRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentsRequestBody
  > = z.object({
    contractorUuid: z.string(),
    date: z.instanceof(RFCDate).transform(v => v.toString()),
    paymentMethod:
      PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod$outboundSchema
        .default("Direct Deposit"),
    wage: z.number().optional(),
    hours: z.number().optional(),
    bonus: z.number().optional(),
    reimbursement: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      contractorUuid: "contractor_uuid",
      paymentMethod: "payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentsRequestBody$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentsRequestBody$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentsRequestBody$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentsRequestBody$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentsRequestBodyToJSON(
  postV1CompaniesCompanyIdContractorPaymentsRequestBody:
    PostV1CompaniesCompanyIdContractorPaymentsRequestBody,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentsRequestBody$outboundSchema.parse(
      postV1CompaniesCompanyIdContractorPaymentsRequestBody,
    ),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentsRequest$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
    RequestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdContractorPaymentsRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentsRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostV1CompaniesCompanyIdContractorPaymentsRequestBody$Outbound;
};

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentsRequest$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentsRequest$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentsRequest
  > = z.object({
    companyId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
    requestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdContractorPaymentsRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentsRequest$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentsRequest$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentsRequest$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsRequest$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentsRequest$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentsRequestToJSON(
  postV1CompaniesCompanyIdContractorPaymentsRequest:
    PostV1CompaniesCompanyIdContractorPaymentsRequest,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentsRequest$outboundSchema.parse(
      postV1CompaniesCompanyIdContractorPaymentsRequest,
    ),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentsRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentsResponse$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Contractor-Payment": components.ContractorPayment$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Contractor-Payment": "contractorPayment",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Contractor-Payment"?: components.ContractorPayment$Outbound | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentsResponse$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentsResponse$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentsResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    contractorPayment: components.ContractorPayment$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      contractorPayment: "Contractor-Payment",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentsResponse$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentsResponse$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentsResponse$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentsResponse$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentsResponse$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentsResponseToJSON(
  postV1CompaniesCompanyIdContractorPaymentsResponse:
    PostV1CompaniesCompanyIdContractorPaymentsResponse,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentsResponse$outboundSchema.parse(
      postV1CompaniesCompanyIdContractorPaymentsResponse,
    ),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentsResponse' from JSON`,
  );
}
