/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
 */
export const EmploymentStatus = {
  PartTime: "part_time",
  FullTime: "full_time",
  PartTimeEligible: "part_time_eligible",
  Variable: "variable",
  Seasonal: "seasonal",
  NotSet: "not_set",
} as const;
/**
 * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
 */
export type EmploymentStatus = ClosedEnum<typeof EmploymentStatus>;

export type PutV1EmployeesEmployeeIdRehireRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  /**
   * The day when the employee returns to work.
   */
  effectiveDate: string;
  /**
   * The boolean flag indicating whether Gusto will file a new hire report for the employee.
   */
  fileNewHireReport: boolean;
  /**
   * The uuid of the employee's work location.
   */
  workLocationUuid: string;
  /**
   * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
   */
  employmentStatus?: EmploymentStatus | undefined;
  /**
   * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
   */
  twoPercentShareholder?: boolean | undefined;
};

export type PutV1EmployeesEmployeeIdRehireRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutV1EmployeesEmployeeIdRehireRequestBody;
};

export type PutV1EmployeesEmployeeIdRehireResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  rehire?: components.Rehire | undefined;
};

/** @internal */
export const EmploymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof EmploymentStatus
> = z.nativeEnum(EmploymentStatus);

/** @internal */
export const EmploymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof EmploymentStatus
> = EmploymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmploymentStatus$ {
  /** @deprecated use `EmploymentStatus$inboundSchema` instead. */
  export const inboundSchema = EmploymentStatus$inboundSchema;
  /** @deprecated use `EmploymentStatus$outboundSchema` instead. */
  export const outboundSchema = EmploymentStatus$outboundSchema;
}

/** @internal */
export const PutV1EmployeesEmployeeIdRehireRequestBody$inboundSchema: z.ZodType<
  PutV1EmployeesEmployeeIdRehireRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  effective_date: z.string(),
  file_new_hire_report: z.boolean(),
  work_location_uuid: z.string(),
  employment_status: EmploymentStatus$inboundSchema.optional(),
  two_percent_shareholder: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "effective_date": "effectiveDate",
    "file_new_hire_report": "fileNewHireReport",
    "work_location_uuid": "workLocationUuid",
    "employment_status": "employmentStatus",
    "two_percent_shareholder": "twoPercentShareholder",
  });
});

/** @internal */
export type PutV1EmployeesEmployeeIdRehireRequestBody$Outbound = {
  version: string;
  effective_date: string;
  file_new_hire_report: boolean;
  work_location_uuid: string;
  employment_status?: string | undefined;
  two_percent_shareholder?: boolean | undefined;
};

/** @internal */
export const PutV1EmployeesEmployeeIdRehireRequestBody$outboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdRehireRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1EmployeesEmployeeIdRehireRequestBody
  > = z.object({
    version: z.string(),
    effectiveDate: z.string(),
    fileNewHireReport: z.boolean(),
    workLocationUuid: z.string(),
    employmentStatus: EmploymentStatus$outboundSchema.optional(),
    twoPercentShareholder: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      effectiveDate: "effective_date",
      fileNewHireReport: "file_new_hire_report",
      workLocationUuid: "work_location_uuid",
      employmentStatus: "employment_status",
      twoPercentShareholder: "two_percent_shareholder",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1EmployeesEmployeeIdRehireRequestBody$ {
  /** @deprecated use `PutV1EmployeesEmployeeIdRehireRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1EmployeesEmployeeIdRehireRequestBody$inboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdRehireRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1EmployeesEmployeeIdRehireRequestBody$outboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdRehireRequestBody$Outbound` instead. */
  export type Outbound = PutV1EmployeesEmployeeIdRehireRequestBody$Outbound;
}

export function putV1EmployeesEmployeeIdRehireRequestBodyToJSON(
  putV1EmployeesEmployeeIdRehireRequestBody:
    PutV1EmployeesEmployeeIdRehireRequestBody,
): string {
  return JSON.stringify(
    PutV1EmployeesEmployeeIdRehireRequestBody$outboundSchema.parse(
      putV1EmployeesEmployeeIdRehireRequestBody,
    ),
  );
}

export function putV1EmployeesEmployeeIdRehireRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1EmployeesEmployeeIdRehireRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1EmployeesEmployeeIdRehireRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1EmployeesEmployeeIdRehireRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1EmployeesEmployeeIdRehireRequest$inboundSchema: z.ZodType<
  PutV1EmployeesEmployeeIdRehireRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
  RequestBody: z.lazy(() =>
    PutV1EmployeesEmployeeIdRehireRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1EmployeesEmployeeIdRehireRequest$Outbound = {
  employee_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutV1EmployeesEmployeeIdRehireRequestBody$Outbound;
};

/** @internal */
export const PutV1EmployeesEmployeeIdRehireRequest$outboundSchema: z.ZodType<
  PutV1EmployeesEmployeeIdRehireRequest$Outbound,
  z.ZodTypeDef,
  PutV1EmployeesEmployeeIdRehireRequest
> = z.object({
  employeeId: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
  requestBody: z.lazy(() =>
    PutV1EmployeesEmployeeIdRehireRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1EmployeesEmployeeIdRehireRequest$ {
  /** @deprecated use `PutV1EmployeesEmployeeIdRehireRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1EmployeesEmployeeIdRehireRequest$inboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdRehireRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1EmployeesEmployeeIdRehireRequest$outboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdRehireRequest$Outbound` instead. */
  export type Outbound = PutV1EmployeesEmployeeIdRehireRequest$Outbound;
}

export function putV1EmployeesEmployeeIdRehireRequestToJSON(
  putV1EmployeesEmployeeIdRehireRequest: PutV1EmployeesEmployeeIdRehireRequest,
): string {
  return JSON.stringify(
    PutV1EmployeesEmployeeIdRehireRequest$outboundSchema.parse(
      putV1EmployeesEmployeeIdRehireRequest,
    ),
  );
}

export function putV1EmployeesEmployeeIdRehireRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV1EmployeesEmployeeIdRehireRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1EmployeesEmployeeIdRehireRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1EmployeesEmployeeIdRehireRequest' from JSON`,
  );
}

/** @internal */
export const PutV1EmployeesEmployeeIdRehireResponse$inboundSchema: z.ZodType<
  PutV1EmployeesEmployeeIdRehireResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  Rehire: components.Rehire$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Rehire": "rehire",
  });
});

/** @internal */
export type PutV1EmployeesEmployeeIdRehireResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  Rehire?: components.Rehire$Outbound | undefined;
};

/** @internal */
export const PutV1EmployeesEmployeeIdRehireResponse$outboundSchema: z.ZodType<
  PutV1EmployeesEmployeeIdRehireResponse$Outbound,
  z.ZodTypeDef,
  PutV1EmployeesEmployeeIdRehireResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  rehire: components.Rehire$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    rehire: "Rehire",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1EmployeesEmployeeIdRehireResponse$ {
  /** @deprecated use `PutV1EmployeesEmployeeIdRehireResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutV1EmployeesEmployeeIdRehireResponse$inboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdRehireResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV1EmployeesEmployeeIdRehireResponse$outboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdRehireResponse$Outbound` instead. */
  export type Outbound = PutV1EmployeesEmployeeIdRehireResponse$Outbound;
}

export function putV1EmployeesEmployeeIdRehireResponseToJSON(
  putV1EmployeesEmployeeIdRehireResponse:
    PutV1EmployeesEmployeeIdRehireResponse,
): string {
  return JSON.stringify(
    PutV1EmployeesEmployeeIdRehireResponse$outboundSchema.parse(
      putV1EmployeesEmployeeIdRehireResponse,
    ),
  );
}

export function putV1EmployeesEmployeeIdRehireResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV1EmployeesEmployeeIdRehireResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1EmployeesEmployeeIdRehireResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1EmployeesEmployeeIdRehireResponse' from JSON`,
  );
}
