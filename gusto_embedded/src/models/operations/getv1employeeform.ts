/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  Form,
  Form$inboundSchema,
  Form$Outbound,
  Form$outboundSchema,
} from "../components/form.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1EmployeeFormRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * The UUID of the form
   */
  formId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1EmployeeFormResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  form?: Form | undefined;
};

/** @internal */
export const GetV1EmployeeFormRequest$inboundSchema: z.ZodType<
  GetV1EmployeeFormRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.string(),
  form_id: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "form_id": "formId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1EmployeeFormRequest$Outbound = {
  employee_id: string;
  form_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1EmployeeFormRequest$outboundSchema: z.ZodType<
  GetV1EmployeeFormRequest$Outbound,
  z.ZodTypeDef,
  GetV1EmployeeFormRequest
> = z.object({
  employeeId: z.string(),
  formId: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    formId: "form_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeeFormRequest$ {
  /** @deprecated use `GetV1EmployeeFormRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1EmployeeFormRequest$inboundSchema;
  /** @deprecated use `GetV1EmployeeFormRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1EmployeeFormRequest$outboundSchema;
  /** @deprecated use `GetV1EmployeeFormRequest$Outbound` instead. */
  export type Outbound = GetV1EmployeeFormRequest$Outbound;
}

export function getV1EmployeeFormRequestToJSON(
  getV1EmployeeFormRequest: GetV1EmployeeFormRequest,
): string {
  return JSON.stringify(
    GetV1EmployeeFormRequest$outboundSchema.parse(getV1EmployeeFormRequest),
  );
}

export function getV1EmployeeFormRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1EmployeeFormRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1EmployeeFormRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1EmployeeFormRequest' from JSON`,
  );
}

/** @internal */
export const GetV1EmployeeFormResponse$inboundSchema: z.ZodType<
  GetV1EmployeeFormResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  Form: Form$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Form": "form",
  });
});

/** @internal */
export type GetV1EmployeeFormResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  Form?: Form$Outbound | undefined;
};

/** @internal */
export const GetV1EmployeeFormResponse$outboundSchema: z.ZodType<
  GetV1EmployeeFormResponse$Outbound,
  z.ZodTypeDef,
  GetV1EmployeeFormResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  form: Form$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    form: "Form",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeeFormResponse$ {
  /** @deprecated use `GetV1EmployeeFormResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1EmployeeFormResponse$inboundSchema;
  /** @deprecated use `GetV1EmployeeFormResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1EmployeeFormResponse$outboundSchema;
  /** @deprecated use `GetV1EmployeeFormResponse$Outbound` instead. */
  export type Outbound = GetV1EmployeeFormResponse$Outbound;
}

export function getV1EmployeeFormResponseToJSON(
  getV1EmployeeFormResponse: GetV1EmployeeFormResponse,
): string {
  return JSON.stringify(
    GetV1EmployeeFormResponse$outboundSchema.parse(getV1EmployeeFormResponse),
  );
}

export function getV1EmployeeFormResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1EmployeeFormResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1EmployeeFormResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1EmployeeFormResponse' from JSON`,
  );
}
