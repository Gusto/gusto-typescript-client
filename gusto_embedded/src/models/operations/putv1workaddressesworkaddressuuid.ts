/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1WorkAddressesWorkAddressUuidRequestBody = {
  /**
   * Reference to a company location
   */
  locationUuid?: string | undefined;
  effectiveDate?: RFCDate | undefined;
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   */
  version: string;
};

export type PutV1WorkAddressesWorkAddressUuidRequest = {
  /**
   * The UUID of the work address
   */
  workAddressUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutV1WorkAddressesWorkAddressUuidRequestBody;
};

/** @internal */
export const PutV1WorkAddressesWorkAddressUuidRequestBody$inboundSchema:
  z.ZodType<
    PutV1WorkAddressesWorkAddressUuidRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    location_uuid: z.string().optional(),
    effective_date: z.string().transform(v => new RFCDate(v)).optional(),
    version: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "location_uuid": "locationUuid",
      "effective_date": "effectiveDate",
    });
  });

/** @internal */
export type PutV1WorkAddressesWorkAddressUuidRequestBody$Outbound = {
  location_uuid?: string | undefined;
  effective_date?: string | undefined;
  version: string;
};

/** @internal */
export const PutV1WorkAddressesWorkAddressUuidRequestBody$outboundSchema:
  z.ZodType<
    PutV1WorkAddressesWorkAddressUuidRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1WorkAddressesWorkAddressUuidRequestBody
  > = z.object({
    locationUuid: z.string().optional(),
    effectiveDate: z.instanceof(RFCDate).transform(v => v.toString())
      .optional(),
    version: z.string(),
  }).transform((v) => {
    return remap$(v, {
      locationUuid: "location_uuid",
      effectiveDate: "effective_date",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1WorkAddressesWorkAddressUuidRequestBody$ {
  /** @deprecated use `PutV1WorkAddressesWorkAddressUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1WorkAddressesWorkAddressUuidRequestBody$inboundSchema;
  /** @deprecated use `PutV1WorkAddressesWorkAddressUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1WorkAddressesWorkAddressUuidRequestBody$outboundSchema;
  /** @deprecated use `PutV1WorkAddressesWorkAddressUuidRequestBody$Outbound` instead. */
  export type Outbound = PutV1WorkAddressesWorkAddressUuidRequestBody$Outbound;
}

export function putV1WorkAddressesWorkAddressUuidRequestBodyToJSON(
  putV1WorkAddressesWorkAddressUuidRequestBody:
    PutV1WorkAddressesWorkAddressUuidRequestBody,
): string {
  return JSON.stringify(
    PutV1WorkAddressesWorkAddressUuidRequestBody$outboundSchema.parse(
      putV1WorkAddressesWorkAddressUuidRequestBody,
    ),
  );
}

export function putV1WorkAddressesWorkAddressUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1WorkAddressesWorkAddressUuidRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1WorkAddressesWorkAddressUuidRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1WorkAddressesWorkAddressUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1WorkAddressesWorkAddressUuidRequest$inboundSchema: z.ZodType<
  PutV1WorkAddressesWorkAddressUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  work_address_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
  RequestBody: z.lazy(() =>
    PutV1WorkAddressesWorkAddressUuidRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "work_address_uuid": "workAddressUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1WorkAddressesWorkAddressUuidRequest$Outbound = {
  work_address_uuid: string;
  "X-Gusto-API-Version"?: string | undefined;
  RequestBody: PutV1WorkAddressesWorkAddressUuidRequestBody$Outbound;
};

/** @internal */
export const PutV1WorkAddressesWorkAddressUuidRequest$outboundSchema: z.ZodType<
  PutV1WorkAddressesWorkAddressUuidRequest$Outbound,
  z.ZodTypeDef,
  PutV1WorkAddressesWorkAddressUuidRequest
> = z.object({
  workAddressUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
  requestBody: z.lazy(() =>
    PutV1WorkAddressesWorkAddressUuidRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    workAddressUuid: "work_address_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1WorkAddressesWorkAddressUuidRequest$ {
  /** @deprecated use `PutV1WorkAddressesWorkAddressUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1WorkAddressesWorkAddressUuidRequest$inboundSchema;
  /** @deprecated use `PutV1WorkAddressesWorkAddressUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1WorkAddressesWorkAddressUuidRequest$outboundSchema;
  /** @deprecated use `PutV1WorkAddressesWorkAddressUuidRequest$Outbound` instead. */
  export type Outbound = PutV1WorkAddressesWorkAddressUuidRequest$Outbound;
}

export function putV1WorkAddressesWorkAddressUuidRequestToJSON(
  putV1WorkAddressesWorkAddressUuidRequest:
    PutV1WorkAddressesWorkAddressUuidRequest,
): string {
  return JSON.stringify(
    PutV1WorkAddressesWorkAddressUuidRequest$outboundSchema.parse(
      putV1WorkAddressesWorkAddressUuidRequest,
    ),
  );
}

export function putV1WorkAddressesWorkAddressUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1WorkAddressesWorkAddressUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1WorkAddressesWorkAddressUuidRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1WorkAddressesWorkAddressUuidRequest' from JSON`,
  );
}
