/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  WebhooksHealthCheckStatus,
  WebhooksHealthCheckStatus$inboundSchema,
  WebhooksHealthCheckStatus$Outbound,
  WebhooksHealthCheckStatus$outboundSchema,
} from "../components/webhookshealthcheckstatus.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1WebhooksHealthCheckSecurity = {
  systemAccessAuth: string;
};

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const GetV1WebhooksHealthCheckHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFiveMinus06Minus15: "2025-06-15",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type GetV1WebhooksHealthCheckHeaderXGustoAPIVersion = ClosedEnum<
  typeof GetV1WebhooksHealthCheckHeaderXGustoAPIVersion
>;

export type GetV1WebhooksHealthCheckRequest = {
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: GetV1WebhooksHealthCheckHeaderXGustoAPIVersion | undefined;
};

export type GetV1WebhooksHealthCheckResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  webhooksHealthCheckStatus?: WebhooksHealthCheckStatus | undefined;
};

/** @internal */
export const GetV1WebhooksHealthCheckSecurity$inboundSchema: z.ZodType<
  GetV1WebhooksHealthCheckSecurity,
  z.ZodTypeDef,
  unknown
> = z.object({
  SystemAccessAuth: z.string(),
}).transform((v) => {
  return remap$(v, {
    "SystemAccessAuth": "systemAccessAuth",
  });
});

/** @internal */
export type GetV1WebhooksHealthCheckSecurity$Outbound = {
  SystemAccessAuth: string;
};

/** @internal */
export const GetV1WebhooksHealthCheckSecurity$outboundSchema: z.ZodType<
  GetV1WebhooksHealthCheckSecurity$Outbound,
  z.ZodTypeDef,
  GetV1WebhooksHealthCheckSecurity
> = z.object({
  systemAccessAuth: z.string(),
}).transform((v) => {
  return remap$(v, {
    systemAccessAuth: "SystemAccessAuth",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1WebhooksHealthCheckSecurity$ {
  /** @deprecated use `GetV1WebhooksHealthCheckSecurity$inboundSchema` instead. */
  export const inboundSchema = GetV1WebhooksHealthCheckSecurity$inboundSchema;
  /** @deprecated use `GetV1WebhooksHealthCheckSecurity$outboundSchema` instead. */
  export const outboundSchema = GetV1WebhooksHealthCheckSecurity$outboundSchema;
  /** @deprecated use `GetV1WebhooksHealthCheckSecurity$Outbound` instead. */
  export type Outbound = GetV1WebhooksHealthCheckSecurity$Outbound;
}

export function getV1WebhooksHealthCheckSecurityToJSON(
  getV1WebhooksHealthCheckSecurity: GetV1WebhooksHealthCheckSecurity,
): string {
  return JSON.stringify(
    GetV1WebhooksHealthCheckSecurity$outboundSchema.parse(
      getV1WebhooksHealthCheckSecurity,
    ),
  );
}

export function getV1WebhooksHealthCheckSecurityFromJSON(
  jsonString: string,
): SafeParseResult<GetV1WebhooksHealthCheckSecurity, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1WebhooksHealthCheckSecurity$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1WebhooksHealthCheckSecurity' from JSON`,
  );
}

/** @internal */
export const GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetV1WebhooksHealthCheckHeaderXGustoAPIVersion> = z
    .nativeEnum(GetV1WebhooksHealthCheckHeaderXGustoAPIVersion);

/** @internal */
export const GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetV1WebhooksHealthCheckHeaderXGustoAPIVersion> =
    GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$ {
  /** @deprecated use `GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const GetV1WebhooksHealthCheckRequest$inboundSchema: z.ZodType<
  GetV1WebhooksHealthCheckRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Gusto-API-Version":
    GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$inboundSchema.default(
      "2025-06-15",
    ),
}).transform((v) => {
  return remap$(v, {
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1WebhooksHealthCheckRequest$Outbound = {
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1WebhooksHealthCheckRequest$outboundSchema: z.ZodType<
  GetV1WebhooksHealthCheckRequest$Outbound,
  z.ZodTypeDef,
  GetV1WebhooksHealthCheckRequest
> = z.object({
  xGustoAPIVersion:
    GetV1WebhooksHealthCheckHeaderXGustoAPIVersion$outboundSchema.default(
      "2025-06-15",
    ),
}).transform((v) => {
  return remap$(v, {
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1WebhooksHealthCheckRequest$ {
  /** @deprecated use `GetV1WebhooksHealthCheckRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1WebhooksHealthCheckRequest$inboundSchema;
  /** @deprecated use `GetV1WebhooksHealthCheckRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1WebhooksHealthCheckRequest$outboundSchema;
  /** @deprecated use `GetV1WebhooksHealthCheckRequest$Outbound` instead. */
  export type Outbound = GetV1WebhooksHealthCheckRequest$Outbound;
}

export function getV1WebhooksHealthCheckRequestToJSON(
  getV1WebhooksHealthCheckRequest: GetV1WebhooksHealthCheckRequest,
): string {
  return JSON.stringify(
    GetV1WebhooksHealthCheckRequest$outboundSchema.parse(
      getV1WebhooksHealthCheckRequest,
    ),
  );
}

export function getV1WebhooksHealthCheckRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1WebhooksHealthCheckRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1WebhooksHealthCheckRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1WebhooksHealthCheckRequest' from JSON`,
  );
}

/** @internal */
export const GetV1WebhooksHealthCheckResponse$inboundSchema: z.ZodType<
  GetV1WebhooksHealthCheckResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Webhooks-Health-Check-Status": WebhooksHealthCheckStatus$inboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Webhooks-Health-Check-Status": "webhooksHealthCheckStatus",
  });
});

/** @internal */
export type GetV1WebhooksHealthCheckResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Webhooks-Health-Check-Status"?:
    | WebhooksHealthCheckStatus$Outbound
    | undefined;
};

/** @internal */
export const GetV1WebhooksHealthCheckResponse$outboundSchema: z.ZodType<
  GetV1WebhooksHealthCheckResponse$Outbound,
  z.ZodTypeDef,
  GetV1WebhooksHealthCheckResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  webhooksHealthCheckStatus: WebhooksHealthCheckStatus$outboundSchema
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    webhooksHealthCheckStatus: "Webhooks-Health-Check-Status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1WebhooksHealthCheckResponse$ {
  /** @deprecated use `GetV1WebhooksHealthCheckResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1WebhooksHealthCheckResponse$inboundSchema;
  /** @deprecated use `GetV1WebhooksHealthCheckResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1WebhooksHealthCheckResponse$outboundSchema;
  /** @deprecated use `GetV1WebhooksHealthCheckResponse$Outbound` instead. */
  export type Outbound = GetV1WebhooksHealthCheckResponse$Outbound;
}

export function getV1WebhooksHealthCheckResponseToJSON(
  getV1WebhooksHealthCheckResponse: GetV1WebhooksHealthCheckResponse,
): string {
  return JSON.stringify(
    GetV1WebhooksHealthCheckResponse$outboundSchema.parse(
      getV1WebhooksHealthCheckResponse,
    ),
  );
}

export function getV1WebhooksHealthCheckResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1WebhooksHealthCheckResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1WebhooksHealthCheckResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1WebhooksHealthCheckResponse' from JSON`,
  );
}
