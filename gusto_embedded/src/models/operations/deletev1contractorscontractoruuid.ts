/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV1ContractorsContractorUuidRequest = {
  /**
   * The UUID of the contractor
   */
  contractorUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type DeleteV1ContractorsContractorUuidResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const DeleteV1ContractorsContractorUuidRequest$inboundSchema: z.ZodType<
  DeleteV1ContractorsContractorUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  contractor_uuid: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "contractor_uuid": "contractorUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type DeleteV1ContractorsContractorUuidRequest$Outbound = {
  contractor_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const DeleteV1ContractorsContractorUuidRequest$outboundSchema: z.ZodType<
  DeleteV1ContractorsContractorUuidRequest$Outbound,
  z.ZodTypeDef,
  DeleteV1ContractorsContractorUuidRequest
> = z.object({
  contractorUuid: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    contractorUuid: "contractor_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1ContractorsContractorUuidRequest$ {
  /** @deprecated use `DeleteV1ContractorsContractorUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV1ContractorsContractorUuidRequest$inboundSchema;
  /** @deprecated use `DeleteV1ContractorsContractorUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV1ContractorsContractorUuidRequest$outboundSchema;
  /** @deprecated use `DeleteV1ContractorsContractorUuidRequest$Outbound` instead. */
  export type Outbound = DeleteV1ContractorsContractorUuidRequest$Outbound;
}

export function deleteV1ContractorsContractorUuidRequestToJSON(
  deleteV1ContractorsContractorUuidRequest:
    DeleteV1ContractorsContractorUuidRequest,
): string {
  return JSON.stringify(
    DeleteV1ContractorsContractorUuidRequest$outboundSchema.parse(
      deleteV1ContractorsContractorUuidRequest,
    ),
  );
}

export function deleteV1ContractorsContractorUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV1ContractorsContractorUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV1ContractorsContractorUuidRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteV1ContractorsContractorUuidRequest' from JSON`,
  );
}

/** @internal */
export const DeleteV1ContractorsContractorUuidResponse$inboundSchema: z.ZodType<
  DeleteV1ContractorsContractorUuidResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type DeleteV1ContractorsContractorUuidResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const DeleteV1ContractorsContractorUuidResponse$outboundSchema:
  z.ZodType<
    DeleteV1ContractorsContractorUuidResponse$Outbound,
    z.ZodTypeDef,
    DeleteV1ContractorsContractorUuidResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1ContractorsContractorUuidResponse$ {
  /** @deprecated use `DeleteV1ContractorsContractorUuidResponse$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV1ContractorsContractorUuidResponse$inboundSchema;
  /** @deprecated use `DeleteV1ContractorsContractorUuidResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV1ContractorsContractorUuidResponse$outboundSchema;
  /** @deprecated use `DeleteV1ContractorsContractorUuidResponse$Outbound` instead. */
  export type Outbound = DeleteV1ContractorsContractorUuidResponse$Outbound;
}

export function deleteV1ContractorsContractorUuidResponseToJSON(
  deleteV1ContractorsContractorUuidResponse:
    DeleteV1ContractorsContractorUuidResponse,
): string {
  return JSON.stringify(
    DeleteV1ContractorsContractorUuidResponse$outboundSchema.parse(
      deleteV1ContractorsContractorUuidResponse,
    ),
  );
}

export function deleteV1ContractorsContractorUuidResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV1ContractorsContractorUuidResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV1ContractorsContractorUuidResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteV1ContractorsContractorUuidResponse' from JSON`,
  );
}
