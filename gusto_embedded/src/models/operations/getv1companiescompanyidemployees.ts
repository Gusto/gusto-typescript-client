/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  Employee,
  Employee$inboundSchema,
  Employee$Outbound,
  Employee$outboundSchema,
} from "../components/employee.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFourMinus04Minus01: "2024-04-01",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion = ClosedEnum<
  typeof GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion
>;

export const Include = {
  CustomFields: "custom_fields",
  AllCompensations: "all_compensations",
  CompanyName: "company_name",
} as const;
export type Include = ClosedEnum<typeof Include>;

export type GetV1CompaniesCompanyIdEmployeesRequest = {
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion
    | undefined;
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * A string to search for in the object's names
   */
  searchTerm?: string | undefined;
  /**
   * Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options:
   *
   * @remarks
   * - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
   * - custom_fields: Include employees' custom fields
   */
  include?: Array<Include> | undefined;
  /**
   * Filters employees by the provided boolean
   */
  terminated?: boolean | undefined;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
};

export type GetV1CompaniesCompanyIdEmployeesResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  employees?: Array<Employee> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion
  > = z.nativeEnum(GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion);

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion
  > = GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$ {
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const Include$inboundSchema: z.ZodNativeEnum<typeof Include> = z
  .nativeEnum(Include);

/** @internal */
export const Include$outboundSchema: z.ZodNativeEnum<typeof Include> =
  Include$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Include$ {
  /** @deprecated use `Include$inboundSchema` instead. */
  export const inboundSchema = Include$inboundSchema;
  /** @deprecated use `Include$outboundSchema` instead. */
  export const outboundSchema = Include$outboundSchema;
}

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesRequest$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdEmployeesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Gusto-API-Version":
    GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$inboundSchema
      .default("2024-04-01"),
  company_id: z.string(),
  search_term: z.string().optional(),
  include: z.array(Include$inboundSchema).optional(),
  terminated: z.boolean().optional(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "company_id": "companyId",
    "search_term": "searchTerm",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdEmployeesRequest$Outbound = {
  "X-Gusto-API-Version": string;
  company_id: string;
  search_term?: string | undefined;
  include?: Array<string> | undefined;
  terminated?: boolean | undefined;
  page?: number | undefined;
  per?: number | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesRequest$outboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdEmployeesRequest$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesCompanyIdEmployeesRequest
> = z.object({
  xGustoAPIVersion:
    GetV1CompaniesCompanyIdEmployeesHeaderXGustoAPIVersion$outboundSchema
      .default("2024-04-01"),
  companyId: z.string(),
  searchTerm: z.string().optional(),
  include: z.array(Include$outboundSchema).optional(),
  terminated: z.boolean().optional(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    xGustoAPIVersion: "X-Gusto-API-Version",
    companyId: "company_id",
    searchTerm: "search_term",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdEmployeesRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdEmployeesRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdEmployeesRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesRequest$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdEmployeesRequest$Outbound;
}

export function getV1CompaniesCompanyIdEmployeesRequestToJSON(
  getV1CompaniesCompanyIdEmployeesRequest:
    GetV1CompaniesCompanyIdEmployeesRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdEmployeesRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdEmployeesRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdEmployeesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdEmployeesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdEmployeesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdEmployeesRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesResponse$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdEmployeesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  Employees: z.array(Employee$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Employees": "employees",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdEmployeesResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  Employees?: Array<Employee$Outbound> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdEmployeesResponse$outboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdEmployeesResponse$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesCompanyIdEmployeesResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  employees: z.array(Employee$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    employees: "Employees",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdEmployeesResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdEmployeesResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdEmployeesResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdEmployeesResponse$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdEmployeesResponse$Outbound;
}

export function getV1CompaniesCompanyIdEmployeesResponseToJSON(
  getV1CompaniesCompanyIdEmployeesResponse:
    GetV1CompaniesCompanyIdEmployeesResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdEmployeesResponse$outboundSchema.parse(
      getV1CompaniesCompanyIdEmployeesResponse,
    ),
  );
}

export function getV1CompaniesCompanyIdEmployeesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdEmployeesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdEmployeesResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdEmployeesResponse' from JSON`,
  );
}
