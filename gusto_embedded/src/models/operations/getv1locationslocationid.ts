/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  Location,
  Location$inboundSchema,
  Location$Outbound,
  Location$outboundSchema,
} from "../components/location.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1LocationsLocationIdRequest = {
  /**
   * The UUID of the location
   */
  locationId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1LocationsLocationIdResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  location?: Location | undefined;
};

/** @internal */
export const GetV1LocationsLocationIdRequest$inboundSchema: z.ZodType<
  GetV1LocationsLocationIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  location_id: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "location_id": "locationId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1LocationsLocationIdRequest$Outbound = {
  location_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1LocationsLocationIdRequest$outboundSchema: z.ZodType<
  GetV1LocationsLocationIdRequest$Outbound,
  z.ZodTypeDef,
  GetV1LocationsLocationIdRequest
> = z.object({
  locationId: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    locationId: "location_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1LocationsLocationIdRequest$ {
  /** @deprecated use `GetV1LocationsLocationIdRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1LocationsLocationIdRequest$inboundSchema;
  /** @deprecated use `GetV1LocationsLocationIdRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1LocationsLocationIdRequest$outboundSchema;
  /** @deprecated use `GetV1LocationsLocationIdRequest$Outbound` instead. */
  export type Outbound = GetV1LocationsLocationIdRequest$Outbound;
}

export function getV1LocationsLocationIdRequestToJSON(
  getV1LocationsLocationIdRequest: GetV1LocationsLocationIdRequest,
): string {
  return JSON.stringify(
    GetV1LocationsLocationIdRequest$outboundSchema.parse(
      getV1LocationsLocationIdRequest,
    ),
  );
}

export function getV1LocationsLocationIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1LocationsLocationIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1LocationsLocationIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1LocationsLocationIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV1LocationsLocationIdResponse$inboundSchema: z.ZodType<
  GetV1LocationsLocationIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  Location: Location$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Location": "location",
  });
});

/** @internal */
export type GetV1LocationsLocationIdResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  Location?: Location$Outbound | undefined;
};

/** @internal */
export const GetV1LocationsLocationIdResponse$outboundSchema: z.ZodType<
  GetV1LocationsLocationIdResponse$Outbound,
  z.ZodTypeDef,
  GetV1LocationsLocationIdResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  location: Location$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    location: "Location",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1LocationsLocationIdResponse$ {
  /** @deprecated use `GetV1LocationsLocationIdResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1LocationsLocationIdResponse$inboundSchema;
  /** @deprecated use `GetV1LocationsLocationIdResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1LocationsLocationIdResponse$outboundSchema;
  /** @deprecated use `GetV1LocationsLocationIdResponse$Outbound` instead. */
  export type Outbound = GetV1LocationsLocationIdResponse$Outbound;
}

export function getV1LocationsLocationIdResponseToJSON(
  getV1LocationsLocationIdResponse: GetV1LocationsLocationIdResponse,
): string {
  return JSON.stringify(
    GetV1LocationsLocationIdResponse$outboundSchema.parse(
      getV1LocationsLocationIdResponse,
    ),
  );
}

export function getV1LocationsLocationIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1LocationsLocationIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1LocationsLocationIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1LocationsLocationIdResponse' from JSON`,
  );
}
