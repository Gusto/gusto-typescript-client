/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  InformationRequest,
  InformationRequest$inboundSchema,
  InformationRequest$Outbound,
  InformationRequest$outboundSchema,
} from "../components/informationrequest.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetInformationRequestsRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetInformationRequestsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  informationRequestList?: Array<InformationRequest> | undefined;
};

/** @internal */
export const GetInformationRequestsRequest$inboundSchema: z.ZodType<
  GetInformationRequestsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetInformationRequestsRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetInformationRequestsRequest$outboundSchema: z.ZodType<
  GetInformationRequestsRequest$Outbound,
  z.ZodTypeDef,
  GetInformationRequestsRequest
> = z.object({
  companyUuid: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInformationRequestsRequest$ {
  /** @deprecated use `GetInformationRequestsRequest$inboundSchema` instead. */
  export const inboundSchema = GetInformationRequestsRequest$inboundSchema;
  /** @deprecated use `GetInformationRequestsRequest$outboundSchema` instead. */
  export const outboundSchema = GetInformationRequestsRequest$outboundSchema;
  /** @deprecated use `GetInformationRequestsRequest$Outbound` instead. */
  export type Outbound = GetInformationRequestsRequest$Outbound;
}

export function getInformationRequestsRequestToJSON(
  getInformationRequestsRequest: GetInformationRequestsRequest,
): string {
  return JSON.stringify(
    GetInformationRequestsRequest$outboundSchema.parse(
      getInformationRequestsRequest,
    ),
  );
}

export function getInformationRequestsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetInformationRequestsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInformationRequestsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInformationRequestsRequest' from JSON`,
  );
}

/** @internal */
export const GetInformationRequestsResponse$inboundSchema: z.ZodType<
  GetInformationRequestsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Information-Request-List": z.array(InformationRequest$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Information-Request-List": "informationRequestList",
  });
});

/** @internal */
export type GetInformationRequestsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Information-Request-List"?: Array<InformationRequest$Outbound> | undefined;
};

/** @internal */
export const GetInformationRequestsResponse$outboundSchema: z.ZodType<
  GetInformationRequestsResponse$Outbound,
  z.ZodTypeDef,
  GetInformationRequestsResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  informationRequestList: z.array(InformationRequest$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    informationRequestList: "Information-Request-List",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetInformationRequestsResponse$ {
  /** @deprecated use `GetInformationRequestsResponse$inboundSchema` instead. */
  export const inboundSchema = GetInformationRequestsResponse$inboundSchema;
  /** @deprecated use `GetInformationRequestsResponse$outboundSchema` instead. */
  export const outboundSchema = GetInformationRequestsResponse$outboundSchema;
  /** @deprecated use `GetInformationRequestsResponse$Outbound` instead. */
  export type Outbound = GetInformationRequestsResponse$Outbound;
}

export function getInformationRequestsResponseToJSON(
  getInformationRequestsResponse: GetInformationRequestsResponse,
): string {
  return JSON.stringify(
    GetInformationRequestsResponse$outboundSchema.parse(
      getInformationRequestsResponse,
    ),
  );
}

export function getInformationRequestsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetInformationRequestsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetInformationRequestsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetInformationRequestsResponse' from JSON`,
  );
}
