/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  Signatory,
  Signatory$inboundSchema,
  Signatory$Outbound,
  Signatory$outboundSchema,
} from "../components/signatory.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody = {
  firstName?: string | undefined;
  lastName?: string | undefined;
  title?: string | undefined;
  email: string;
};

export type PostV1CompaniesCompanyUuidSignatoriesInviteRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody;
};

export type PostV1CompaniesCompanyUuidSignatoriesInviteResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  signatory?: Signatory | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    first_name: z.string().optional(),
    last_name: z.string().optional(),
    title: z.string().optional(),
    email: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "first_name": "firstName",
      "last_name": "lastName",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$Outbound = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  title?: string | undefined;
  email: string;
};

/** @internal */
export const PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody
  > = z.object({
    firstName: z.string().optional(),
    lastName: z.string().optional(),
    title: z.string().optional(),
    email: z.string(),
  }).transform((v) => {
    return remap$(v, {
      firstName: "first_name",
      lastName: "last_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$ {
  /** @deprecated use `PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$Outbound;
}

export function postV1CompaniesCompanyUuidSignatoriesInviteRequestBodyToJSON(
  postV1CompaniesCompanyUuidSignatoriesInviteRequestBody:
    PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$outboundSchema.parse(
      postV1CompaniesCompanyUuidSignatoriesInviteRequestBody,
    ),
  );
}

export function postV1CompaniesCompanyUuidSignatoriesInviteRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyUuidSignatoriesInviteRequest$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyUuidSignatoriesInviteRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_uuid: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_uuid": "companyUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyUuidSignatoriesInviteRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$Outbound;
};

/** @internal */
export const PostV1CompaniesCompanyUuidSignatoriesInviteRequest$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyUuidSignatoriesInviteRequest$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyUuidSignatoriesInviteRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PostV1CompaniesCompanyUuidSignatoriesInviteRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyUuidSignatoriesInviteRequest$ {
  /** @deprecated use `PostV1CompaniesCompanyUuidSignatoriesInviteRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyUuidSignatoriesInviteRequest$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyUuidSignatoriesInviteRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyUuidSignatoriesInviteRequest$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyUuidSignatoriesInviteRequest$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyUuidSignatoriesInviteRequest$Outbound;
}

export function postV1CompaniesCompanyUuidSignatoriesInviteRequestToJSON(
  postV1CompaniesCompanyUuidSignatoriesInviteRequest:
    PostV1CompaniesCompanyUuidSignatoriesInviteRequest,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyUuidSignatoriesInviteRequest$outboundSchema.parse(
      postV1CompaniesCompanyUuidSignatoriesInviteRequest,
    ),
  );
}

export function postV1CompaniesCompanyUuidSignatoriesInviteRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyUuidSignatoriesInviteRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyUuidSignatoriesInviteRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyUuidSignatoriesInviteRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyUuidSignatoriesInviteResponse$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyUuidSignatoriesInviteResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    Signatory: Signatory$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Signatory": "signatory",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyUuidSignatoriesInviteResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  Signatory?: Signatory$Outbound | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyUuidSignatoriesInviteResponse$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyUuidSignatoriesInviteResponse$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyUuidSignatoriesInviteResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    signatory: Signatory$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      signatory: "Signatory",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyUuidSignatoriesInviteResponse$ {
  /** @deprecated use `PostV1CompaniesCompanyUuidSignatoriesInviteResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyUuidSignatoriesInviteResponse$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyUuidSignatoriesInviteResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyUuidSignatoriesInviteResponse$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyUuidSignatoriesInviteResponse$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyUuidSignatoriesInviteResponse$Outbound;
}

export function postV1CompaniesCompanyUuidSignatoriesInviteResponseToJSON(
  postV1CompaniesCompanyUuidSignatoriesInviteResponse:
    PostV1CompaniesCompanyUuidSignatoriesInviteResponse,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyUuidSignatoriesInviteResponse$outboundSchema.parse(
      postV1CompaniesCompanyUuidSignatoriesInviteResponse,
    ),
  );
}

export function postV1CompaniesCompanyUuidSignatoriesInviteResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyUuidSignatoriesInviteResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyUuidSignatoriesInviteResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyUuidSignatoriesInviteResponse' from JSON`,
  );
}
