/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  Notification,
  Notification$inboundSchema,
  Notification$Outbound,
  Notification$outboundSchema,
} from "../components/notification.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const Status = {
  Open: "open",
  Expired: "expired",
  Resolved: "resolved",
} as const;
export type Status = ClosedEnum<typeof Status>;

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const GetCompanyNotificationsHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFiveMinus06Minus15: "2025-06-15",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type GetCompanyNotificationsHeaderXGustoAPIVersion = ClosedEnum<
  typeof GetCompanyNotificationsHeaderXGustoAPIVersion
>;

export type GetCompanyNotificationsRequest = {
  /**
   * The UUID of the company for which you would like to return notifications
   */
  companyUuid: string;
  status?: Status | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: GetCompanyNotificationsHeaderXGustoAPIVersion | undefined;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
};

export type GetCompanyNotificationsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  notificationsList?: Array<Notification> | undefined;
};

/** @internal */
export const Status$inboundSchema: z.ZodNativeEnum<typeof Status> = z
  .nativeEnum(Status);

/** @internal */
export const Status$outboundSchema: z.ZodNativeEnum<typeof Status> =
  Status$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Status$ {
  /** @deprecated use `Status$inboundSchema` instead. */
  export const inboundSchema = Status$inboundSchema;
  /** @deprecated use `Status$outboundSchema` instead. */
  export const outboundSchema = Status$outboundSchema;
}

/** @internal */
export const GetCompanyNotificationsHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<typeof GetCompanyNotificationsHeaderXGustoAPIVersion> = z
    .nativeEnum(GetCompanyNotificationsHeaderXGustoAPIVersion);

/** @internal */
export const GetCompanyNotificationsHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<typeof GetCompanyNotificationsHeaderXGustoAPIVersion> =
    GetCompanyNotificationsHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyNotificationsHeaderXGustoAPIVersion$ {
  /** @deprecated use `GetCompanyNotificationsHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetCompanyNotificationsHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `GetCompanyNotificationsHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetCompanyNotificationsHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const GetCompanyNotificationsRequest$inboundSchema: z.ZodType<
  GetCompanyNotificationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  status: Status$inboundSchema.optional(),
  "X-Gusto-API-Version":
    GetCompanyNotificationsHeaderXGustoAPIVersion$inboundSchema.default(
      "2025-06-15",
    ),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetCompanyNotificationsRequest$Outbound = {
  company_uuid: string;
  status?: string | undefined;
  "X-Gusto-API-Version": string;
  page?: number | undefined;
  per?: number | undefined;
};

/** @internal */
export const GetCompanyNotificationsRequest$outboundSchema: z.ZodType<
  GetCompanyNotificationsRequest$Outbound,
  z.ZodTypeDef,
  GetCompanyNotificationsRequest
> = z.object({
  companyUuid: z.string(),
  status: Status$outboundSchema.optional(),
  xGustoAPIVersion: GetCompanyNotificationsHeaderXGustoAPIVersion$outboundSchema
    .default("2025-06-15"),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyNotificationsRequest$ {
  /** @deprecated use `GetCompanyNotificationsRequest$inboundSchema` instead. */
  export const inboundSchema = GetCompanyNotificationsRequest$inboundSchema;
  /** @deprecated use `GetCompanyNotificationsRequest$outboundSchema` instead. */
  export const outboundSchema = GetCompanyNotificationsRequest$outboundSchema;
  /** @deprecated use `GetCompanyNotificationsRequest$Outbound` instead. */
  export type Outbound = GetCompanyNotificationsRequest$Outbound;
}

export function getCompanyNotificationsRequestToJSON(
  getCompanyNotificationsRequest: GetCompanyNotificationsRequest,
): string {
  return JSON.stringify(
    GetCompanyNotificationsRequest$outboundSchema.parse(
      getCompanyNotificationsRequest,
    ),
  );
}

export function getCompanyNotificationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyNotificationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyNotificationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyNotificationsRequest' from JSON`,
  );
}

/** @internal */
export const GetCompanyNotificationsResponse$inboundSchema: z.ZodType<
  GetCompanyNotificationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Notifications-List": z.array(Notification$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Notifications-List": "notificationsList",
  });
});

/** @internal */
export type GetCompanyNotificationsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Notifications-List"?: Array<Notification$Outbound> | undefined;
};

/** @internal */
export const GetCompanyNotificationsResponse$outboundSchema: z.ZodType<
  GetCompanyNotificationsResponse$Outbound,
  z.ZodTypeDef,
  GetCompanyNotificationsResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  notificationsList: z.array(Notification$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    notificationsList: "Notifications-List",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompanyNotificationsResponse$ {
  /** @deprecated use `GetCompanyNotificationsResponse$inboundSchema` instead. */
  export const inboundSchema = GetCompanyNotificationsResponse$inboundSchema;
  /** @deprecated use `GetCompanyNotificationsResponse$outboundSchema` instead. */
  export const outboundSchema = GetCompanyNotificationsResponse$outboundSchema;
  /** @deprecated use `GetCompanyNotificationsResponse$Outbound` instead. */
  export type Outbound = GetCompanyNotificationsResponse$Outbound;
}

export function getCompanyNotificationsResponseToJSON(
  getCompanyNotificationsResponse: GetCompanyNotificationsResponse,
): string {
  return JSON.stringify(
    GetCompanyNotificationsResponse$outboundSchema.parse(
      getCompanyNotificationsResponse,
    ),
  );
}

export function getCompanyNotificationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCompanyNotificationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompanyNotificationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompanyNotificationsResponse' from JSON`,
  );
}
