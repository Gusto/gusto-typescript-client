/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The frequency that employees on this pay schedule are paid with Gusto.
 */
export const Frequency = {
  EveryWeek: "Every week",
  EveryOtherWeek: "Every other week",
  TwicePerMonth: "Twice per month",
  Monthly: "Monthly",
} as const;
/**
 * The frequency that employees on this pay schedule are paid with Gusto.
 */
export type Frequency = ClosedEnum<typeof Frequency>;

export type PostV1CompaniesCompanyIdPaySchedulesRequestBody = {
  /**
   * The frequency that employees on this pay schedule are paid with Gusto.
   */
  frequency: Frequency;
  /**
   * The first date that employees on this pay schedule are paid with Gusto.
   */
  anchorPayDate: string;
  /**
   * The last date of the first pay period. This can be the same date as the anchor pay date.
   */
  anchorEndOfPayPeriod: string;
  /**
   * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
   */
  day1?: number | null | undefined;
  /**
   * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the "Twice per month" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
   */
  day2?: number | null | undefined;
  /**
   * A custom pay schedule name, defaults to the pay frequency description.
   */
  customName?: string | undefined;
};

export type PostV1CompaniesCompanyIdPaySchedulesRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody?: PostV1CompaniesCompanyIdPaySchedulesRequestBody | undefined;
};

/** @internal */
export const Frequency$inboundSchema: z.ZodNativeEnum<typeof Frequency> = z
  .nativeEnum(Frequency);

/** @internal */
export const Frequency$outboundSchema: z.ZodNativeEnum<typeof Frequency> =
  Frequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Frequency$ {
  /** @deprecated use `Frequency$inboundSchema` instead. */
  export const inboundSchema = Frequency$inboundSchema;
  /** @deprecated use `Frequency$outboundSchema` instead. */
  export const outboundSchema = Frequency$outboundSchema;
}

/** @internal */
export const PostV1CompaniesCompanyIdPaySchedulesRequestBody$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdPaySchedulesRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    frequency: Frequency$inboundSchema,
    anchor_pay_date: z.string(),
    anchor_end_of_pay_period: z.string(),
    day_1: z.nullable(z.number().int()).optional(),
    day_2: z.nullable(z.number().int()).optional(),
    custom_name: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "anchor_pay_date": "anchorPayDate",
      "anchor_end_of_pay_period": "anchorEndOfPayPeriod",
      "day_1": "day1",
      "day_2": "day2",
      "custom_name": "customName",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdPaySchedulesRequestBody$Outbound = {
  frequency: string;
  anchor_pay_date: string;
  anchor_end_of_pay_period: string;
  day_1?: number | null | undefined;
  day_2?: number | null | undefined;
  custom_name?: string | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdPaySchedulesRequestBody$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdPaySchedulesRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdPaySchedulesRequestBody
  > = z.object({
    frequency: Frequency$outboundSchema,
    anchorPayDate: z.string(),
    anchorEndOfPayPeriod: z.string(),
    day1: z.nullable(z.number().int()).optional(),
    day2: z.nullable(z.number().int()).optional(),
    customName: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      anchorPayDate: "anchor_pay_date",
      anchorEndOfPayPeriod: "anchor_end_of_pay_period",
      day1: "day_1",
      day2: "day_2",
      customName: "custom_name",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdPaySchedulesRequestBody$ {
  /** @deprecated use `PostV1CompaniesCompanyIdPaySchedulesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdPaySchedulesRequestBody$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdPaySchedulesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdPaySchedulesRequestBody$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdPaySchedulesRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdPaySchedulesRequestBody$Outbound;
}

export function postV1CompaniesCompanyIdPaySchedulesRequestBodyToJSON(
  postV1CompaniesCompanyIdPaySchedulesRequestBody:
    PostV1CompaniesCompanyIdPaySchedulesRequestBody,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdPaySchedulesRequestBody$outboundSchema.parse(
      postV1CompaniesCompanyIdPaySchedulesRequestBody,
    ),
  );
}

export function postV1CompaniesCompanyIdPaySchedulesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdPaySchedulesRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdPaySchedulesRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdPaySchedulesRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdPaySchedulesRequest$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdPaySchedulesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
    RequestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdPaySchedulesRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdPaySchedulesRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version"?: string | undefined;
  RequestBody?:
    | PostV1CompaniesCompanyIdPaySchedulesRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdPaySchedulesRequest$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdPaySchedulesRequest$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdPaySchedulesRequest
  > = z.object({
    companyId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
    requestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdPaySchedulesRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdPaySchedulesRequest$ {
  /** @deprecated use `PostV1CompaniesCompanyIdPaySchedulesRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdPaySchedulesRequest$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdPaySchedulesRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdPaySchedulesRequest$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdPaySchedulesRequest$Outbound` instead. */
  export type Outbound = PostV1CompaniesCompanyIdPaySchedulesRequest$Outbound;
}

export function postV1CompaniesCompanyIdPaySchedulesRequestToJSON(
  postV1CompaniesCompanyIdPaySchedulesRequest:
    PostV1CompaniesCompanyIdPaySchedulesRequest,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdPaySchedulesRequest$outboundSchema.parse(
      postV1CompaniesCompanyIdPaySchedulesRequest,
    ),
  );
}

export function postV1CompaniesCompanyIdPaySchedulesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdPaySchedulesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdPaySchedulesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdPaySchedulesRequest' from JSON`,
  );
}
