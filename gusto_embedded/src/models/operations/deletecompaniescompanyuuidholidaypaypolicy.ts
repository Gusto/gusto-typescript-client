/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteCompaniesCompanyUuidHolidayPayPolicyRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type DeleteCompaniesCompanyUuidHolidayPayPolicyResponse = {
  httpMeta: HTTPMetadata;
};

/** @internal */
export const DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$inboundSchema:
  z.ZodType<
    DeleteCompaniesCompanyUuidHolidayPayPolicyRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_uuid: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      "company_uuid": "companyUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$outboundSchema:
  z.ZodType<
    DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$Outbound,
    z.ZodTypeDef,
    DeleteCompaniesCompanyUuidHolidayPayPolicyRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$ {
  /** @deprecated use `DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$inboundSchema;
  /** @deprecated use `DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$outboundSchema;
  /** @deprecated use `DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$Outbound` instead. */
  export type Outbound =
    DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$Outbound;
}

export function deleteCompaniesCompanyUuidHolidayPayPolicyRequestToJSON(
  deleteCompaniesCompanyUuidHolidayPayPolicyRequest:
    DeleteCompaniesCompanyUuidHolidayPayPolicyRequest,
): string {
  return JSON.stringify(
    DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$outboundSchema.parse(
      deleteCompaniesCompanyUuidHolidayPayPolicyRequest,
    ),
  );
}

export function deleteCompaniesCompanyUuidHolidayPayPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteCompaniesCompanyUuidHolidayPayPolicyRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteCompaniesCompanyUuidHolidayPayPolicyRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteCompaniesCompanyUuidHolidayPayPolicyRequest' from JSON`,
  );
}

/** @internal */
export const DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$inboundSchema:
  z.ZodType<
    DeleteCompaniesCompanyUuidHolidayPayPolicyResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
    });
  });

/** @internal */
export type DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
};

/** @internal */
export const DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$outboundSchema:
  z.ZodType<
    DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$Outbound,
    z.ZodTypeDef,
    DeleteCompaniesCompanyUuidHolidayPayPolicyResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$ {
  /** @deprecated use `DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$inboundSchema` instead. */
  export const inboundSchema =
    DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$inboundSchema;
  /** @deprecated use `DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$outboundSchema;
  /** @deprecated use `DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$Outbound` instead. */
  export type Outbound =
    DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$Outbound;
}

export function deleteCompaniesCompanyUuidHolidayPayPolicyResponseToJSON(
  deleteCompaniesCompanyUuidHolidayPayPolicyResponse:
    DeleteCompaniesCompanyUuidHolidayPayPolicyResponse,
): string {
  return JSON.stringify(
    DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$outboundSchema.parse(
      deleteCompaniesCompanyUuidHolidayPayPolicyResponse,
    ),
  );
}

export function deleteCompaniesCompanyUuidHolidayPayPolicyResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteCompaniesCompanyUuidHolidayPayPolicyResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteCompaniesCompanyUuidHolidayPayPolicyResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteCompaniesCompanyUuidHolidayPayPolicyResponse' from JSON`,
  );
}
