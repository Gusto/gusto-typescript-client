/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  Department,
  Department$inboundSchema,
  Department$Outbound,
  Department$outboundSchema,
} from "../components/department.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCompaniesDepartmentsRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetCompaniesDepartmentsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * List of departments
   */
  departmentList?: Array<Department> | undefined;
};

/** @internal */
export const GetCompaniesDepartmentsRequest$inboundSchema: z.ZodType<
  GetCompaniesDepartmentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetCompaniesDepartmentsRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetCompaniesDepartmentsRequest$outboundSchema: z.ZodType<
  GetCompaniesDepartmentsRequest$Outbound,
  z.ZodTypeDef,
  GetCompaniesDepartmentsRequest
> = z.object({
  companyUuid: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompaniesDepartmentsRequest$ {
  /** @deprecated use `GetCompaniesDepartmentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetCompaniesDepartmentsRequest$inboundSchema;
  /** @deprecated use `GetCompaniesDepartmentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetCompaniesDepartmentsRequest$outboundSchema;
  /** @deprecated use `GetCompaniesDepartmentsRequest$Outbound` instead. */
  export type Outbound = GetCompaniesDepartmentsRequest$Outbound;
}

export function getCompaniesDepartmentsRequestToJSON(
  getCompaniesDepartmentsRequest: GetCompaniesDepartmentsRequest,
): string {
  return JSON.stringify(
    GetCompaniesDepartmentsRequest$outboundSchema.parse(
      getCompaniesDepartmentsRequest,
    ),
  );
}

export function getCompaniesDepartmentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCompaniesDepartmentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompaniesDepartmentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompaniesDepartmentsRequest' from JSON`,
  );
}

/** @internal */
export const GetCompaniesDepartmentsResponse$inboundSchema: z.ZodType<
  GetCompaniesDepartmentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Department-List": z.array(Department$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Department-List": "departmentList",
  });
});

/** @internal */
export type GetCompaniesDepartmentsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Department-List"?: Array<Department$Outbound> | undefined;
};

/** @internal */
export const GetCompaniesDepartmentsResponse$outboundSchema: z.ZodType<
  GetCompaniesDepartmentsResponse$Outbound,
  z.ZodTypeDef,
  GetCompaniesDepartmentsResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  departmentList: z.array(Department$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    departmentList: "Department-List",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompaniesDepartmentsResponse$ {
  /** @deprecated use `GetCompaniesDepartmentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetCompaniesDepartmentsResponse$inboundSchema;
  /** @deprecated use `GetCompaniesDepartmentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetCompaniesDepartmentsResponse$outboundSchema;
  /** @deprecated use `GetCompaniesDepartmentsResponse$Outbound` instead. */
  export type Outbound = GetCompaniesDepartmentsResponse$Outbound;
}

export function getCompaniesDepartmentsResponseToJSON(
  getCompaniesDepartmentsResponse: GetCompaniesDepartmentsResponse,
): string {
  return JSON.stringify(
    GetCompaniesDepartmentsResponse$outboundSchema.parse(
      getCompaniesDepartmentsResponse,
    ),
  );
}

export function getCompaniesDepartmentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCompaniesDepartmentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCompaniesDepartmentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCompaniesDepartmentsResponse' from JSON`,
  );
}
