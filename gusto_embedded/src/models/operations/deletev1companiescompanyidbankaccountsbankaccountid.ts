/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion =
  {
    TwoThousandAndTwentyFiveMinus06Minus15: "2025-06-15",
  } as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion =
  ClosedEnum<
    typeof DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion
  >;

export type DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the company bank account
   */
  bankAccountId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion
    | undefined;
};

export type DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse = {
  httpMeta: HTTPMetadata;
};

/** @internal */
export const DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion
  > = z.nativeEnum(
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion,
  );

/** @internal */
export const DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion
  > =
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$ {
  /** @deprecated use `DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$inboundSchema:
  z.ZodType<
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    bank_account_id: z.string(),
    "X-Gusto-API-Version":
      DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$inboundSchema
        .default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "bank_account_id": "bankAccountId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$Outbound =
  {
    company_id: string;
    bank_account_id: string;
    "X-Gusto-API-Version": string;
  };

/** @internal */
export const DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$outboundSchema:
  z.ZodType<
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$Outbound,
    z.ZodTypeDef,
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest
  > = z.object({
    companyId: z.string(),
    bankAccountId: z.string(),
    xGustoAPIVersion:
      DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdHeaderXGustoAPIVersion$outboundSchema
        .default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      bankAccountId: "bank_account_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$ {
  /** @deprecated use `DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$inboundSchema;
  /** @deprecated use `DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$outboundSchema;
  /** @deprecated use `DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$Outbound` instead. */
  export type Outbound =
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$Outbound;
}

export function deleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequestToJSON(
  deleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest:
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest,
): string {
  return JSON.stringify(
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$outboundSchema
      .parse(deleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest),
  );
}

export function deleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$inboundSchema:
  z.ZodType<
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
    });
  });

/** @internal */
export type DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$Outbound =
  {
    HttpMeta: HTTPMetadata$Outbound;
  };

/** @internal */
export const DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$outboundSchema:
  z.ZodType<
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$Outbound,
    z.ZodTypeDef,
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$ {
  /** @deprecated use `DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$inboundSchema;
  /** @deprecated use `DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$outboundSchema;
  /** @deprecated use `DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$Outbound` instead. */
  export type Outbound =
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$Outbound;
}

export function deleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponseToJSON(
  deleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse:
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse,
): string {
  return JSON.stringify(
    DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$outboundSchema
      .parse(deleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse),
  );
}

export function deleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1CompaniesCompanyIdBankAccountsBankAccountIdResponse' from JSON`,
  );
}
