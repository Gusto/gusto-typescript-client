/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CompanyBankAccount,
  CompanyBankAccount$inboundSchema,
  CompanyBankAccount$Outbound,
  CompanyBankAccount$outboundSchema,
} from "../components/companybankaccount.js";
import {
  CompanyBankAccountRequest,
  CompanyBankAccountRequest$inboundSchema,
  CompanyBankAccountRequest$Outbound,
  CompanyBankAccountRequest$outboundSchema,
} from "../components/companybankaccountrequest.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFiveMinus06Minus15: "2025-06-15",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion =
  ClosedEnum<typeof PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion>;

export type PostV1CompaniesCompanyIdBankAccountsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion
    | undefined;
  companyBankAccountRequest: CompanyBankAccountRequest;
};

export type PostV1CompaniesCompanyIdBankAccountsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * created
   */
  companyBankAccount?: CompanyBankAccount | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion
  > = z.nativeEnum(PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion);

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion
  > = PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$ {
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsRequest$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    "X-Gusto-API-Version":
      PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$inboundSchema
        .default("2025-06-15"),
    "Company-Bank-Account-Request": CompanyBankAccountRequest$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "Company-Bank-Account-Request": "companyBankAccountRequest",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdBankAccountsRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
  "Company-Bank-Account-Request": CompanyBankAccountRequest$Outbound;
};

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsRequest$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsRequest$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdBankAccountsRequest
  > = z.object({
    companyId: z.string(),
    xGustoAPIVersion:
      PostV1CompaniesCompanyIdBankAccountsHeaderXGustoAPIVersion$outboundSchema
        .default("2025-06-15"),
    companyBankAccountRequest: CompanyBankAccountRequest$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      companyBankAccountRequest: "Company-Bank-Account-Request",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdBankAccountsRequest$ {
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdBankAccountsRequest$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdBankAccountsRequest$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsRequest$Outbound` instead. */
  export type Outbound = PostV1CompaniesCompanyIdBankAccountsRequest$Outbound;
}

export function postV1CompaniesCompanyIdBankAccountsRequestToJSON(
  postV1CompaniesCompanyIdBankAccountsRequest:
    PostV1CompaniesCompanyIdBankAccountsRequest,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdBankAccountsRequest$outboundSchema.parse(
      postV1CompaniesCompanyIdBankAccountsRequest,
    ),
  );
}

export function postV1CompaniesCompanyIdBankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdBankAccountsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdBankAccountsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdBankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsResponse$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Company-Bank-Account": CompanyBankAccount$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Company-Bank-Account": "companyBankAccount",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdBankAccountsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Company-Bank-Account"?: CompanyBankAccount$Outbound | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsResponse$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsResponse$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdBankAccountsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    companyBankAccount: CompanyBankAccount$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      companyBankAccount: "Company-Bank-Account",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdBankAccountsResponse$ {
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdBankAccountsResponse$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdBankAccountsResponse$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsResponse$Outbound` instead. */
  export type Outbound = PostV1CompaniesCompanyIdBankAccountsResponse$Outbound;
}

export function postV1CompaniesCompanyIdBankAccountsResponseToJSON(
  postV1CompaniesCompanyIdBankAccountsResponse:
    PostV1CompaniesCompanyIdBankAccountsResponse,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdBankAccountsResponse$outboundSchema.parse(
      postV1CompaniesCompanyIdBankAccountsResponse,
    ),
  );
}

export function postV1CompaniesCompanyIdBankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdBankAccountsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdBankAccountsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdBankAccountsResponse' from JSON`,
  );
}
