/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CompanyBankAccount,
  CompanyBankAccount$inboundSchema,
  CompanyBankAccount$Outbound,
  CompanyBankAccount$outboundSchema,
} from "../components/companybankaccount.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The bank account type
 */
export const AccountType = {
  Checking: "Checking",
  Savings: "Savings",
} as const;
/**
 * The bank account type
 */
export type AccountType = ClosedEnum<typeof AccountType>;

export type PostV1CompaniesCompanyIdBankAccountsRequestBody = {
  /**
   * The bank routing number
   */
  routingNumber?: string | undefined;
  /**
   * The bank account number
   */
  accountNumber?: string | undefined;
  /**
   * The bank account type
   */
  accountType?: AccountType | undefined;
};

export type PostV1CompaniesCompanyIdBankAccountsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PostV1CompaniesCompanyIdBankAccountsRequestBody;
};

export type PostV1CompaniesCompanyIdBankAccountsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  companyBankAccount?: CompanyBankAccount | undefined;
};

/** @internal */
export const AccountType$inboundSchema: z.ZodNativeEnum<typeof AccountType> = z
  .nativeEnum(AccountType);

/** @internal */
export const AccountType$outboundSchema: z.ZodNativeEnum<typeof AccountType> =
  AccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
}

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsRequestBody$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    routing_number: z.string().optional(),
    account_number: z.string().optional(),
    account_type: AccountType$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "routing_number": "routingNumber",
      "account_number": "accountNumber",
      "account_type": "accountType",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdBankAccountsRequestBody$Outbound = {
  routing_number?: string | undefined;
  account_number?: string | undefined;
  account_type?: string | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsRequestBody$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdBankAccountsRequestBody
  > = z.object({
    routingNumber: z.string().optional(),
    accountNumber: z.string().optional(),
    accountType: AccountType$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      routingNumber: "routing_number",
      accountNumber: "account_number",
      accountType: "account_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdBankAccountsRequestBody$ {
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdBankAccountsRequestBody$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdBankAccountsRequestBody$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdBankAccountsRequestBody$Outbound;
}

export function postV1CompaniesCompanyIdBankAccountsRequestBodyToJSON(
  postV1CompaniesCompanyIdBankAccountsRequestBody:
    PostV1CompaniesCompanyIdBankAccountsRequestBody,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdBankAccountsRequestBody$outboundSchema.parse(
      postV1CompaniesCompanyIdBankAccountsRequestBody,
    ),
  );
}

export function postV1CompaniesCompanyIdBankAccountsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdBankAccountsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdBankAccountsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdBankAccountsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsRequest$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdBankAccountsRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdBankAccountsRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostV1CompaniesCompanyIdBankAccountsRequestBody$Outbound;
};

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsRequest$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsRequest$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdBankAccountsRequest
  > = z.object({
    companyId: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdBankAccountsRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdBankAccountsRequest$ {
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdBankAccountsRequest$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdBankAccountsRequest$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsRequest$Outbound` instead. */
  export type Outbound = PostV1CompaniesCompanyIdBankAccountsRequest$Outbound;
}

export function postV1CompaniesCompanyIdBankAccountsRequestToJSON(
  postV1CompaniesCompanyIdBankAccountsRequest:
    PostV1CompaniesCompanyIdBankAccountsRequest,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdBankAccountsRequest$outboundSchema.parse(
      postV1CompaniesCompanyIdBankAccountsRequest,
    ),
  );
}

export function postV1CompaniesCompanyIdBankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdBankAccountsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdBankAccountsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdBankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsResponse$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Company-Bank-Account": CompanyBankAccount$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Company-Bank-Account": "companyBankAccount",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdBankAccountsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Company-Bank-Account"?: CompanyBankAccount$Outbound | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdBankAccountsResponse$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdBankAccountsResponse$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdBankAccountsResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    companyBankAccount: CompanyBankAccount$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      companyBankAccount: "Company-Bank-Account",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdBankAccountsResponse$ {
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdBankAccountsResponse$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdBankAccountsResponse$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdBankAccountsResponse$Outbound` instead. */
  export type Outbound = PostV1CompaniesCompanyIdBankAccountsResponse$Outbound;
}

export function postV1CompaniesCompanyIdBankAccountsResponseToJSON(
  postV1CompaniesCompanyIdBankAccountsResponse:
    PostV1CompaniesCompanyIdBankAccountsResponse,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdBankAccountsResponse$outboundSchema.parse(
      postV1CompaniesCompanyIdBankAccountsResponse,
    ),
  );
}

export function postV1CompaniesCompanyIdBankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdBankAccountsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdBankAccountsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdBankAccountsResponse' from JSON`,
  );
}
