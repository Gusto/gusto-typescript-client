/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompaniesCompanyUuidTaxRequirementsStateRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * 2-letter US state abbreviation
   */
  state: string;
  /**
   * When true, return "new" requirement sets with valid `effective_from` dates that are available to save new effective dated values.
   */
  scheduling?: boolean | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

export type GetV1CompaniesCompanyUuidTaxRequirementsStateResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * OK
   */
  taxRequirementsState?: components.TaxRequirementsState | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyUuidTaxRequirementsStateRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_uuid: z.string(),
    state: z.string(),
    scheduling: z.boolean().optional(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_uuid": "companyUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$Outbound = {
  company_uuid: string;
  state: string;
  scheduling?: boolean | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyUuidTaxRequirementsStateRequest
  > = z.object({
    companyUuid: z.string(),
    state: z.string(),
    scheduling: z.boolean().optional(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$Outbound;
}

export function getV1CompaniesCompanyUuidTaxRequirementsStateRequestToJSON(
  getV1CompaniesCompanyUuidTaxRequirementsStateRequest:
    GetV1CompaniesCompanyUuidTaxRequirementsStateRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$outboundSchema.parse(
      getV1CompaniesCompanyUuidTaxRequirementsStateRequest,
    ),
  );
}

export function getV1CompaniesCompanyUuidTaxRequirementsStateRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyUuidTaxRequirementsStateRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyUuidTaxRequirementsStateRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyUuidTaxRequirementsStateRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyUuidTaxRequirementsStateResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Tax-Requirements-State": components.TaxRequirementsState$inboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Tax-Requirements-State": "taxRequirementsState",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Tax-Requirements-State"?:
    | components.TaxRequirementsState$Outbound
    | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyUuidTaxRequirementsStateResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    taxRequirementsState: components.TaxRequirementsState$outboundSchema
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      taxRequirementsState: "Tax-Requirements-State",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$Outbound;
}

export function getV1CompaniesCompanyUuidTaxRequirementsStateResponseToJSON(
  getV1CompaniesCompanyUuidTaxRequirementsStateResponse:
    GetV1CompaniesCompanyUuidTaxRequirementsStateResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$outboundSchema.parse(
      getV1CompaniesCompanyUuidTaxRequirementsStateResponse,
    ),
  );
}

export function getV1CompaniesCompanyUuidTaxRequirementsStateResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyUuidTaxRequirementsStateResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyUuidTaxRequirementsStateResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyUuidTaxRequirementsStateResponse' from JSON`,
  );
}
