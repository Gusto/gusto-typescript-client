/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  Contractor,
  Contractor$inboundSchema,
  Contractor$Outbound,
  Contractor$outboundSchema,
} from "../components/contractor.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompaniesCompanyUuidContractorsRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * A string to search for in the object's names
   */
  searchTerm?: string | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1CompaniesCompanyUuidContractorsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  contractorList?: Array<Contractor> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyUuidContractorsRequest$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyUuidContractorsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_uuid: z.string(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    search_term: z.string().optional(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      "company_uuid": "companyUuid",
      "search_term": "searchTerm",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyUuidContractorsRequest$Outbound = {
  company_uuid: string;
  page?: number | undefined;
  per?: number | undefined;
  search_term?: string | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyUuidContractorsRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyUuidContractorsRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyUuidContractorsRequest
  > = z.object({
    companyUuid: z.string(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    searchTerm: z.string().optional(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      searchTerm: "search_term",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyUuidContractorsRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyUuidContractorsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyUuidContractorsRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyUuidContractorsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyUuidContractorsRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyUuidContractorsRequest$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyUuidContractorsRequest$Outbound;
}

export function getV1CompaniesCompanyUuidContractorsRequestToJSON(
  getV1CompaniesCompanyUuidContractorsRequest:
    GetV1CompaniesCompanyUuidContractorsRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyUuidContractorsRequest$outboundSchema.parse(
      getV1CompaniesCompanyUuidContractorsRequest,
    ),
  );
}

export function getV1CompaniesCompanyUuidContractorsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyUuidContractorsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyUuidContractorsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyUuidContractorsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyUuidContractorsResponse$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyUuidContractorsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Contractor-List": z.array(Contractor$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Contractor-List": "contractorList",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyUuidContractorsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Contractor-List"?: Array<Contractor$Outbound> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyUuidContractorsResponse$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyUuidContractorsResponse$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyUuidContractorsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    contractorList: z.array(Contractor$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      contractorList: "Contractor-List",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyUuidContractorsResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyUuidContractorsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyUuidContractorsResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyUuidContractorsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyUuidContractorsResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyUuidContractorsResponse$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyUuidContractorsResponse$Outbound;
}

export function getV1CompaniesCompanyUuidContractorsResponseToJSON(
  getV1CompaniesCompanyUuidContractorsResponse:
    GetV1CompaniesCompanyUuidContractorsResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyUuidContractorsResponse$outboundSchema.parse(
      getV1CompaniesCompanyUuidContractorsResponse,
    ),
  );
}

export function getV1CompaniesCompanyUuidContractorsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyUuidContractorsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyUuidContractorsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyUuidContractorsResponse' from JSON`,
  );
}
