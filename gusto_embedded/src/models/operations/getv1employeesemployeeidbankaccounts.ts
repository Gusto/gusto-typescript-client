/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  EmployeeBankAccount,
  EmployeeBankAccount$inboundSchema,
  EmployeeBankAccount$Outbound,
  EmployeeBankAccount$outboundSchema,
} from "../components/employeebankaccount.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1EmployeesEmployeeIdBankAccountsRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1EmployeesEmployeeIdBankAccountsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  employeeBankAccountList?: Array<EmployeeBankAccount> | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdBankAccountsRequest$inboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdBankAccountsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1EmployeesEmployeeIdBankAccountsRequest$Outbound = {
  employee_id: string;
  page?: number | undefined;
  per?: number | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1EmployeesEmployeeIdBankAccountsRequest$outboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdBankAccountsRequest$Outbound,
    z.ZodTypeDef,
    GetV1EmployeesEmployeeIdBankAccountsRequest
  > = z.object({
    employeeId: z.string(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdBankAccountsRequest$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdBankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdBankAccountsRequest$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdBankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdBankAccountsRequest$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdBankAccountsRequest$Outbound` instead. */
  export type Outbound = GetV1EmployeesEmployeeIdBankAccountsRequest$Outbound;
}

export function getV1EmployeesEmployeeIdBankAccountsRequestToJSON(
  getV1EmployeesEmployeeIdBankAccountsRequest:
    GetV1EmployeesEmployeeIdBankAccountsRequest,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdBankAccountsRequest$outboundSchema.parse(
      getV1EmployeesEmployeeIdBankAccountsRequest,
    ),
  );
}

export function getV1EmployeesEmployeeIdBankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeesEmployeeIdBankAccountsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdBankAccountsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1EmployeesEmployeeIdBankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1EmployeesEmployeeIdBankAccountsResponse$inboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdBankAccountsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Employee-Bank-Account-List": z.array(EmployeeBankAccount$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Employee-Bank-Account-List": "employeeBankAccountList",
    });
  });

/** @internal */
export type GetV1EmployeesEmployeeIdBankAccountsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Employee-Bank-Account-List"?:
    | Array<EmployeeBankAccount$Outbound>
    | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdBankAccountsResponse$outboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdBankAccountsResponse$Outbound,
    z.ZodTypeDef,
    GetV1EmployeesEmployeeIdBankAccountsResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    employeeBankAccountList: z.array(EmployeeBankAccount$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      employeeBankAccountList: "Employee-Bank-Account-List",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdBankAccountsResponse$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdBankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdBankAccountsResponse$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdBankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdBankAccountsResponse$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdBankAccountsResponse$Outbound` instead. */
  export type Outbound = GetV1EmployeesEmployeeIdBankAccountsResponse$Outbound;
}

export function getV1EmployeesEmployeeIdBankAccountsResponseToJSON(
  getV1EmployeesEmployeeIdBankAccountsResponse:
    GetV1EmployeesEmployeeIdBankAccountsResponse,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdBankAccountsResponse$outboundSchema.parse(
      getV1EmployeesEmployeeIdBankAccountsResponse,
    ),
  );
}

export function getV1EmployeesEmployeeIdBankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeesEmployeeIdBankAccountsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdBankAccountsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1EmployeesEmployeeIdBankAccountsResponse' from JSON`,
  );
}
