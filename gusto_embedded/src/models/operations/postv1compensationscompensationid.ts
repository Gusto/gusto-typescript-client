/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  Compensation,
  Compensation$inboundSchema,
  Compensation$Outbound,
  Compensation$outboundSchema,
} from "../components/compensation.js";
import {
  FlsaStatusType,
  FlsaStatusType$inboundSchema,
  FlsaStatusType$outboundSchema,
} from "../components/flsastatustype.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The unit accompanying the compensation rate. If the employee is an owner, rate should be 'Paycheck'.
 */
export const PaymentUnit = {
  Hour: "Hour",
  Week: "Week",
  Month: "Month",
  Year: "Year",
  Paycheck: "Paycheck",
} as const;
/**
 * The unit accompanying the compensation rate. If the employee is an owner, rate should be 'Paycheck'.
 */
export type PaymentUnit = ClosedEnum<typeof PaymentUnit>;

/**
 * The minimum wage record you want to apply to the compensation
 */
export type MinimumWages = {
  /**
   * The UUID of the minimum wage record. Required if adjust_for_minimum_wage set to true
   */
  uuid?: string | undefined;
};

export type PostV1CompensationsCompensationIdRequestBody = {
  /**
   * The dollar amount paid per payment unit.
   */
  rate?: string | undefined;
  /**
   * The unit accompanying the compensation rate. If the employee is an owner, rate should be 'Paycheck'.
   */
  paymentUnit: PaymentUnit;
  /**
   * The date when the compensation takes effect.
   */
  effectiveDate?: string | undefined;
  /**
   * The FLSA status for this compensation. Salaried ('Exempt') employees are paid a fixed salary every pay period. Salaried with overtime ('Salaried Nonexempt') employees are paid a fixed salary every pay period, and receive overtime pay when applicable. Hourly ('Nonexempt') employees are paid for the hours they work, and receive overtime pay when applicable. Commissioned employees ('Commission Only Exempt') earn wages based only on commission. Commissioned with overtime ('Commission Only Nonexempt') earn wages based on commission, and receive overtime pay when applicable. Owners ('Owner') are employees that own at least twenty percent of the company.
   */
  flsaStatus: FlsaStatusType;
  /**
   * Determines whether the compensation should be adjusted for minimum wage. Only applies to Nonexempt employees.
   */
  adjustForMinimumWage?: boolean | undefined;
  minimumWages?: Array<MinimumWages> | undefined;
};

export type PostV1CompensationsCompensationIdRequest = {
  /**
   * The UUID of the job
   */
  jobId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PostV1CompensationsCompensationIdRequestBody;
};

export type PostV1CompensationsCompensationIdResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  compensation?: Compensation | undefined;
};

/** @internal */
export const PaymentUnit$inboundSchema: z.ZodNativeEnum<typeof PaymentUnit> = z
  .nativeEnum(PaymentUnit);

/** @internal */
export const PaymentUnit$outboundSchema: z.ZodNativeEnum<typeof PaymentUnit> =
  PaymentUnit$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentUnit$ {
  /** @deprecated use `PaymentUnit$inboundSchema` instead. */
  export const inboundSchema = PaymentUnit$inboundSchema;
  /** @deprecated use `PaymentUnit$outboundSchema` instead. */
  export const outboundSchema = PaymentUnit$outboundSchema;
}

/** @internal */
export const MinimumWages$inboundSchema: z.ZodType<
  MinimumWages,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type MinimumWages$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const MinimumWages$outboundSchema: z.ZodType<
  MinimumWages$Outbound,
  z.ZodTypeDef,
  MinimumWages
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MinimumWages$ {
  /** @deprecated use `MinimumWages$inboundSchema` instead. */
  export const inboundSchema = MinimumWages$inboundSchema;
  /** @deprecated use `MinimumWages$outboundSchema` instead. */
  export const outboundSchema = MinimumWages$outboundSchema;
  /** @deprecated use `MinimumWages$Outbound` instead. */
  export type Outbound = MinimumWages$Outbound;
}

export function minimumWagesToJSON(minimumWages: MinimumWages): string {
  return JSON.stringify(MinimumWages$outboundSchema.parse(minimumWages));
}

export function minimumWagesFromJSON(
  jsonString: string,
): SafeParseResult<MinimumWages, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MinimumWages$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MinimumWages' from JSON`,
  );
}

/** @internal */
export const PostV1CompensationsCompensationIdRequestBody$inboundSchema:
  z.ZodType<
    PostV1CompensationsCompensationIdRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    rate: z.string().optional(),
    payment_unit: PaymentUnit$inboundSchema,
    effective_date: z.string().optional(),
    flsa_status: FlsaStatusType$inboundSchema,
    adjust_for_minimum_wage: z.boolean().optional(),
    minimum_wages: z.array(z.lazy(() => MinimumWages$inboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payment_unit": "paymentUnit",
      "effective_date": "effectiveDate",
      "flsa_status": "flsaStatus",
      "adjust_for_minimum_wage": "adjustForMinimumWage",
      "minimum_wages": "minimumWages",
    });
  });

/** @internal */
export type PostV1CompensationsCompensationIdRequestBody$Outbound = {
  rate?: string | undefined;
  payment_unit: string;
  effective_date?: string | undefined;
  flsa_status: string;
  adjust_for_minimum_wage?: boolean | undefined;
  minimum_wages?: Array<MinimumWages$Outbound> | undefined;
};

/** @internal */
export const PostV1CompensationsCompensationIdRequestBody$outboundSchema:
  z.ZodType<
    PostV1CompensationsCompensationIdRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1CompensationsCompensationIdRequestBody
  > = z.object({
    rate: z.string().optional(),
    paymentUnit: PaymentUnit$outboundSchema,
    effectiveDate: z.string().optional(),
    flsaStatus: FlsaStatusType$outboundSchema,
    adjustForMinimumWage: z.boolean().optional(),
    minimumWages: z.array(z.lazy(() => MinimumWages$outboundSchema)).optional(),
  }).transform((v) => {
    return remap$(v, {
      paymentUnit: "payment_unit",
      effectiveDate: "effective_date",
      flsaStatus: "flsa_status",
      adjustForMinimumWage: "adjust_for_minimum_wage",
      minimumWages: "minimum_wages",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompensationsCompensationIdRequestBody$ {
  /** @deprecated use `PostV1CompensationsCompensationIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompensationsCompensationIdRequestBody$inboundSchema;
  /** @deprecated use `PostV1CompensationsCompensationIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompensationsCompensationIdRequestBody$outboundSchema;
  /** @deprecated use `PostV1CompensationsCompensationIdRequestBody$Outbound` instead. */
  export type Outbound = PostV1CompensationsCompensationIdRequestBody$Outbound;
}

export function postV1CompensationsCompensationIdRequestBodyToJSON(
  postV1CompensationsCompensationIdRequestBody:
    PostV1CompensationsCompensationIdRequestBody,
): string {
  return JSON.stringify(
    PostV1CompensationsCompensationIdRequestBody$outboundSchema.parse(
      postV1CompensationsCompensationIdRequestBody,
    ),
  );
}

export function postV1CompensationsCompensationIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompensationsCompensationIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompensationsCompensationIdRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompensationsCompensationIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1CompensationsCompensationIdRequest$inboundSchema: z.ZodType<
  PostV1CompensationsCompensationIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_id: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
  RequestBody: z.lazy(() =>
    PostV1CompensationsCompensationIdRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostV1CompensationsCompensationIdRequest$Outbound = {
  job_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostV1CompensationsCompensationIdRequestBody$Outbound;
};

/** @internal */
export const PostV1CompensationsCompensationIdRequest$outboundSchema: z.ZodType<
  PostV1CompensationsCompensationIdRequest$Outbound,
  z.ZodTypeDef,
  PostV1CompensationsCompensationIdRequest
> = z.object({
  jobId: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
  requestBody: z.lazy(() =>
    PostV1CompensationsCompensationIdRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompensationsCompensationIdRequest$ {
  /** @deprecated use `PostV1CompensationsCompensationIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompensationsCompensationIdRequest$inboundSchema;
  /** @deprecated use `PostV1CompensationsCompensationIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompensationsCompensationIdRequest$outboundSchema;
  /** @deprecated use `PostV1CompensationsCompensationIdRequest$Outbound` instead. */
  export type Outbound = PostV1CompensationsCompensationIdRequest$Outbound;
}

export function postV1CompensationsCompensationIdRequestToJSON(
  postV1CompensationsCompensationIdRequest:
    PostV1CompensationsCompensationIdRequest,
): string {
  return JSON.stringify(
    PostV1CompensationsCompensationIdRequest$outboundSchema.parse(
      postV1CompensationsCompensationIdRequest,
    ),
  );
}

export function postV1CompensationsCompensationIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompensationsCompensationIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompensationsCompensationIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompensationsCompensationIdRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CompensationsCompensationIdResponse$inboundSchema: z.ZodType<
  PostV1CompensationsCompensationIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  Compensation: Compensation$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Compensation": "compensation",
  });
});

/** @internal */
export type PostV1CompensationsCompensationIdResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  Compensation?: Compensation$Outbound | undefined;
};

/** @internal */
export const PostV1CompensationsCompensationIdResponse$outboundSchema:
  z.ZodType<
    PostV1CompensationsCompensationIdResponse$Outbound,
    z.ZodTypeDef,
    PostV1CompensationsCompensationIdResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    compensation: Compensation$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      compensation: "Compensation",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompensationsCompensationIdResponse$ {
  /** @deprecated use `PostV1CompensationsCompensationIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompensationsCompensationIdResponse$inboundSchema;
  /** @deprecated use `PostV1CompensationsCompensationIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompensationsCompensationIdResponse$outboundSchema;
  /** @deprecated use `PostV1CompensationsCompensationIdResponse$Outbound` instead. */
  export type Outbound = PostV1CompensationsCompensationIdResponse$Outbound;
}

export function postV1CompensationsCompensationIdResponseToJSON(
  postV1CompensationsCompensationIdResponse:
    PostV1CompensationsCompensationIdResponse,
): string {
  return JSON.stringify(
    PostV1CompensationsCompensationIdResponse$outboundSchema.parse(
      postV1CompensationsCompensationIdResponse,
    ),
  );
}

export function postV1CompensationsCompensationIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompensationsCompensationIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompensationsCompensationIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompensationsCompensationIdResponse' from JSON`,
  );
}
