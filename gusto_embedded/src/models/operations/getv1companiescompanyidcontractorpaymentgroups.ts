/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompaniesCompanyIdContractorPaymentGroupsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The time period for which to retrieve contractor payment groups. Defaults to 6 months ago.
   */
  startDate?: string | undefined;
  /**
   * The time period for which to retrieve contractor payment groups. Defaults to today's date.
   */
  endDate?: string | undefined;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorPaymentGroupsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    start_date: z.string().optional(),
    end_date: z.string().optional(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "start_date": "startDate",
      "end_date": "endDate",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$Outbound = {
  company_id: string;
  start_date?: string | undefined;
  end_date?: string | undefined;
  page?: number | undefined;
  per?: number | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdContractorPaymentGroupsRequest
  > = z.object({
    companyId: z.string(),
    startDate: z.string().optional(),
    endDate: z.string().optional(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      startDate: "start_date",
      endDate: "end_date",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$Outbound;
}

export function getV1CompaniesCompanyIdContractorPaymentGroupsRequestToJSON(
  getV1CompaniesCompanyIdContractorPaymentGroupsRequest:
    GetV1CompaniesCompanyIdContractorPaymentGroupsRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdContractorPaymentGroupsRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdContractorPaymentGroupsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdContractorPaymentGroupsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdContractorPaymentGroupsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdContractorPaymentGroupsRequest' from JSON`,
  );
}
