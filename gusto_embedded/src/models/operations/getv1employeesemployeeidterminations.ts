/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  Termination,
  Termination$inboundSchema,
  Termination$Outbound,
  Termination$outboundSchema,
} from "../components/termination.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1EmployeesEmployeeIdTerminationsRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1EmployeesEmployeeIdTerminationsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  terminationList?: Array<Termination> | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdTerminationsRequest$inboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdTerminationsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1EmployeesEmployeeIdTerminationsRequest$Outbound = {
  employee_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1EmployeesEmployeeIdTerminationsRequest$outboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdTerminationsRequest$Outbound,
    z.ZodTypeDef,
    GetV1EmployeesEmployeeIdTerminationsRequest
  > = z.object({
    employeeId: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdTerminationsRequest$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdTerminationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdTerminationsRequest$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdTerminationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdTerminationsRequest$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdTerminationsRequest$Outbound` instead. */
  export type Outbound = GetV1EmployeesEmployeeIdTerminationsRequest$Outbound;
}

export function getV1EmployeesEmployeeIdTerminationsRequestToJSON(
  getV1EmployeesEmployeeIdTerminationsRequest:
    GetV1EmployeesEmployeeIdTerminationsRequest,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdTerminationsRequest$outboundSchema.parse(
      getV1EmployeesEmployeeIdTerminationsRequest,
    ),
  );
}

export function getV1EmployeesEmployeeIdTerminationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeesEmployeeIdTerminationsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdTerminationsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1EmployeesEmployeeIdTerminationsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1EmployeesEmployeeIdTerminationsResponse$inboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdTerminationsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Termination-List": z.array(Termination$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Termination-List": "terminationList",
    });
  });

/** @internal */
export type GetV1EmployeesEmployeeIdTerminationsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Termination-List"?: Array<Termination$Outbound> | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdTerminationsResponse$outboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdTerminationsResponse$Outbound,
    z.ZodTypeDef,
    GetV1EmployeesEmployeeIdTerminationsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    terminationList: z.array(Termination$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      terminationList: "Termination-List",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdTerminationsResponse$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdTerminationsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdTerminationsResponse$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdTerminationsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdTerminationsResponse$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdTerminationsResponse$Outbound` instead. */
  export type Outbound = GetV1EmployeesEmployeeIdTerminationsResponse$Outbound;
}

export function getV1EmployeesEmployeeIdTerminationsResponseToJSON(
  getV1EmployeesEmployeeIdTerminationsResponse:
    GetV1EmployeesEmployeeIdTerminationsResponse,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdTerminationsResponse$outboundSchema.parse(
      getV1EmployeesEmployeeIdTerminationsResponse,
    ),
  );
}

export function getV1EmployeesEmployeeIdTerminationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeesEmployeeIdTerminationsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdTerminationsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1EmployeesEmployeeIdTerminationsResponse' from JSON`,
  );
}
