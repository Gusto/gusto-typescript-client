/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Payroll type
 */
export const PayrollType = {
  Regular: "Regular",
  HiredEmployee: "Hired employee",
  DismissedEmployee: "Dismissed employee",
  TransitionFromOldPaySchedule: "Transition from old pay schedule",
} as const;
/**
 * Payroll type
 */
export type PayrollType = ClosedEnum<typeof PayrollType>;

export type PostCompaniesPayrollSkipCompanyUuidRequestBody = {
  /**
   * Payroll type
   */
  payrollType: PayrollType;
  /**
   * Pay period start date
   */
  startDate?: string | undefined;
  /**
   * Pay period end date. If left empty, defaults to today's date.
   */
  endDate?: string | undefined;
  /**
   * The UUID of the pay schedule
   */
  payScheduleUuid?: string | undefined;
  /**
   * An array of employees. This field is only applicable to new hire payroll and termination payroll
   */
  employeeUuids?: Array<string> | undefined;
};

export type PostCompaniesPayrollSkipCompanyUuidRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PostCompaniesPayrollSkipCompanyUuidRequestBody;
};

export type PostCompaniesPayrollSkipCompanyUuidResponse = {
  httpMeta: HTTPMetadata;
};

/** @internal */
export const PayrollType$inboundSchema: z.ZodNativeEnum<typeof PayrollType> = z
  .nativeEnum(PayrollType);

/** @internal */
export const PayrollType$outboundSchema: z.ZodNativeEnum<typeof PayrollType> =
  PayrollType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollType$ {
  /** @deprecated use `PayrollType$inboundSchema` instead. */
  export const inboundSchema = PayrollType$inboundSchema;
  /** @deprecated use `PayrollType$outboundSchema` instead. */
  export const outboundSchema = PayrollType$outboundSchema;
}

/** @internal */
export const PostCompaniesPayrollSkipCompanyUuidRequestBody$inboundSchema:
  z.ZodType<
    PostCompaniesPayrollSkipCompanyUuidRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    payroll_type: PayrollType$inboundSchema,
    start_date: z.string().optional(),
    end_date: z.string().optional(),
    pay_schedule_uuid: z.string().optional(),
    employee_uuids: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "payroll_type": "payrollType",
      "start_date": "startDate",
      "end_date": "endDate",
      "pay_schedule_uuid": "payScheduleUuid",
      "employee_uuids": "employeeUuids",
    });
  });

/** @internal */
export type PostCompaniesPayrollSkipCompanyUuidRequestBody$Outbound = {
  payroll_type: string;
  start_date?: string | undefined;
  end_date?: string | undefined;
  pay_schedule_uuid?: string | undefined;
  employee_uuids?: Array<string> | undefined;
};

/** @internal */
export const PostCompaniesPayrollSkipCompanyUuidRequestBody$outboundSchema:
  z.ZodType<
    PostCompaniesPayrollSkipCompanyUuidRequestBody$Outbound,
    z.ZodTypeDef,
    PostCompaniesPayrollSkipCompanyUuidRequestBody
  > = z.object({
    payrollType: PayrollType$outboundSchema,
    startDate: z.string().optional(),
    endDate: z.string().optional(),
    payScheduleUuid: z.string().optional(),
    employeeUuids: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      payrollType: "payroll_type",
      startDate: "start_date",
      endDate: "end_date",
      payScheduleUuid: "pay_schedule_uuid",
      employeeUuids: "employee_uuids",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCompaniesPayrollSkipCompanyUuidRequestBody$ {
  /** @deprecated use `PostCompaniesPayrollSkipCompanyUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostCompaniesPayrollSkipCompanyUuidRequestBody$inboundSchema;
  /** @deprecated use `PostCompaniesPayrollSkipCompanyUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostCompaniesPayrollSkipCompanyUuidRequestBody$outboundSchema;
  /** @deprecated use `PostCompaniesPayrollSkipCompanyUuidRequestBody$Outbound` instead. */
  export type Outbound =
    PostCompaniesPayrollSkipCompanyUuidRequestBody$Outbound;
}

export function postCompaniesPayrollSkipCompanyUuidRequestBodyToJSON(
  postCompaniesPayrollSkipCompanyUuidRequestBody:
    PostCompaniesPayrollSkipCompanyUuidRequestBody,
): string {
  return JSON.stringify(
    PostCompaniesPayrollSkipCompanyUuidRequestBody$outboundSchema.parse(
      postCompaniesPayrollSkipCompanyUuidRequestBody,
    ),
  );
}

export function postCompaniesPayrollSkipCompanyUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCompaniesPayrollSkipCompanyUuidRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCompaniesPayrollSkipCompanyUuidRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCompaniesPayrollSkipCompanyUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const PostCompaniesPayrollSkipCompanyUuidRequest$inboundSchema:
  z.ZodType<PostCompaniesPayrollSkipCompanyUuidRequest, z.ZodTypeDef, unknown> =
    z.object({
      company_uuid: z.string(),
      "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
      RequestBody: z.lazy(() =>
        PostCompaniesPayrollSkipCompanyUuidRequestBody$inboundSchema
      ),
    }).transform((v) => {
      return remap$(v, {
        "company_uuid": "companyUuid",
        "X-Gusto-API-Version": "xGustoAPIVersion",
        "RequestBody": "requestBody",
      });
    });

/** @internal */
export type PostCompaniesPayrollSkipCompanyUuidRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostCompaniesPayrollSkipCompanyUuidRequestBody$Outbound;
};

/** @internal */
export const PostCompaniesPayrollSkipCompanyUuidRequest$outboundSchema:
  z.ZodType<
    PostCompaniesPayrollSkipCompanyUuidRequest$Outbound,
    z.ZodTypeDef,
    PostCompaniesPayrollSkipCompanyUuidRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PostCompaniesPayrollSkipCompanyUuidRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCompaniesPayrollSkipCompanyUuidRequest$ {
  /** @deprecated use `PostCompaniesPayrollSkipCompanyUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostCompaniesPayrollSkipCompanyUuidRequest$inboundSchema;
  /** @deprecated use `PostCompaniesPayrollSkipCompanyUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostCompaniesPayrollSkipCompanyUuidRequest$outboundSchema;
  /** @deprecated use `PostCompaniesPayrollSkipCompanyUuidRequest$Outbound` instead. */
  export type Outbound = PostCompaniesPayrollSkipCompanyUuidRequest$Outbound;
}

export function postCompaniesPayrollSkipCompanyUuidRequestToJSON(
  postCompaniesPayrollSkipCompanyUuidRequest:
    PostCompaniesPayrollSkipCompanyUuidRequest,
): string {
  return JSON.stringify(
    PostCompaniesPayrollSkipCompanyUuidRequest$outboundSchema.parse(
      postCompaniesPayrollSkipCompanyUuidRequest,
    ),
  );
}

export function postCompaniesPayrollSkipCompanyUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCompaniesPayrollSkipCompanyUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCompaniesPayrollSkipCompanyUuidRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCompaniesPayrollSkipCompanyUuidRequest' from JSON`,
  );
}

/** @internal */
export const PostCompaniesPayrollSkipCompanyUuidResponse$inboundSchema:
  z.ZodType<
    PostCompaniesPayrollSkipCompanyUuidResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
    });
  });

/** @internal */
export type PostCompaniesPayrollSkipCompanyUuidResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
};

/** @internal */
export const PostCompaniesPayrollSkipCompanyUuidResponse$outboundSchema:
  z.ZodType<
    PostCompaniesPayrollSkipCompanyUuidResponse$Outbound,
    z.ZodTypeDef,
    PostCompaniesPayrollSkipCompanyUuidResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostCompaniesPayrollSkipCompanyUuidResponse$ {
  /** @deprecated use `PostCompaniesPayrollSkipCompanyUuidResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostCompaniesPayrollSkipCompanyUuidResponse$inboundSchema;
  /** @deprecated use `PostCompaniesPayrollSkipCompanyUuidResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostCompaniesPayrollSkipCompanyUuidResponse$outboundSchema;
  /** @deprecated use `PostCompaniesPayrollSkipCompanyUuidResponse$Outbound` instead. */
  export type Outbound = PostCompaniesPayrollSkipCompanyUuidResponse$Outbound;
}

export function postCompaniesPayrollSkipCompanyUuidResponseToJSON(
  postCompaniesPayrollSkipCompanyUuidResponse:
    PostCompaniesPayrollSkipCompanyUuidResponse,
): string {
  return JSON.stringify(
    PostCompaniesPayrollSkipCompanyUuidResponse$outboundSchema.parse(
      postCompaniesPayrollSkipCompanyUuidResponse,
    ),
  );
}

export function postCompaniesPayrollSkipCompanyUuidResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostCompaniesPayrollSkipCompanyUuidResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostCompaniesPayrollSkipCompanyUuidResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostCompaniesPayrollSkipCompanyUuidResponse' from JSON`,
  );
}
