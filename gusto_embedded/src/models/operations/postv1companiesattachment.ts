/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CompanyAttachment,
  CompanyAttachment$inboundSchema,
  CompanyAttachment$Outbound,
  CompanyAttachment$outboundSchema,
} from "../components/companyattachment.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Document = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/**
 * The category of a company attachment.
 */
export const Category = {
  GepNotice: "gep_notice",
  Compliance: "compliance",
} as const;
/**
 * The category of a company attachment.
 */
export type Category = ClosedEnum<typeof Category>;

/**
 * The binary payload of the file and the company attachment category.
 */
export type PostV1CompaniesAttachmentRequestBody = {
  /**
   * The binary payload of the file to be uploaded.
   */
  document: Document | Blob;
  /**
   * The category of a company attachment.
   */
  category: Category;
};

export type PostV1CompaniesAttachmentRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PostV1CompaniesAttachmentRequestBody;
};

export type PostV1CompaniesAttachmentResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  companyAttachment?: CompanyAttachment | undefined;
};

/** @internal */
export const Document$inboundSchema: z.ZodType<
  Document,
  z.ZodTypeDef,
  unknown
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/** @internal */
export type Document$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const Document$outboundSchema: z.ZodType<
  Document$Outbound,
  z.ZodTypeDef,
  Document
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Document$ {
  /** @deprecated use `Document$inboundSchema` instead. */
  export const inboundSchema = Document$inboundSchema;
  /** @deprecated use `Document$outboundSchema` instead. */
  export const outboundSchema = Document$outboundSchema;
  /** @deprecated use `Document$Outbound` instead. */
  export type Outbound = Document$Outbound;
}

export function documentToJSON(document: Document): string {
  return JSON.stringify(Document$outboundSchema.parse(document));
}

export function documentFromJSON(
  jsonString: string,
): SafeParseResult<Document, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Document$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Document' from JSON`,
  );
}

/** @internal */
export const Category$inboundSchema: z.ZodNativeEnum<typeof Category> = z
  .nativeEnum(Category);

/** @internal */
export const Category$outboundSchema: z.ZodNativeEnum<typeof Category> =
  Category$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Category$ {
  /** @deprecated use `Category$inboundSchema` instead. */
  export const inboundSchema = Category$inboundSchema;
  /** @deprecated use `Category$outboundSchema` instead. */
  export const outboundSchema = Category$outboundSchema;
}

/** @internal */
export const PostV1CompaniesAttachmentRequestBody$inboundSchema: z.ZodType<
  PostV1CompaniesAttachmentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  document: z.lazy(() => Document$inboundSchema),
  category: Category$inboundSchema,
});

/** @internal */
export type PostV1CompaniesAttachmentRequestBody$Outbound = {
  document: Document$Outbound | Blob;
  category: string;
};

/** @internal */
export const PostV1CompaniesAttachmentRequestBody$outboundSchema: z.ZodType<
  PostV1CompaniesAttachmentRequestBody$Outbound,
  z.ZodTypeDef,
  PostV1CompaniesAttachmentRequestBody
> = z.object({
  document: z.lazy(() => Document$outboundSchema).or(blobLikeSchema),
  category: Category$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesAttachmentRequestBody$ {
  /** @deprecated use `PostV1CompaniesAttachmentRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesAttachmentRequestBody$inboundSchema;
  /** @deprecated use `PostV1CompaniesAttachmentRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesAttachmentRequestBody$outboundSchema;
  /** @deprecated use `PostV1CompaniesAttachmentRequestBody$Outbound` instead. */
  export type Outbound = PostV1CompaniesAttachmentRequestBody$Outbound;
}

export function postV1CompaniesAttachmentRequestBodyToJSON(
  postV1CompaniesAttachmentRequestBody: PostV1CompaniesAttachmentRequestBody,
): string {
  return JSON.stringify(
    PostV1CompaniesAttachmentRequestBody$outboundSchema.parse(
      postV1CompaniesAttachmentRequestBody,
    ),
  );
}

export function postV1CompaniesAttachmentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CompaniesAttachmentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesAttachmentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesAttachmentRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesAttachmentRequest$inboundSchema: z.ZodType<
  PostV1CompaniesAttachmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
  RequestBody: z.lazy(() => PostV1CompaniesAttachmentRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostV1CompaniesAttachmentRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostV1CompaniesAttachmentRequestBody$Outbound;
};

/** @internal */
export const PostV1CompaniesAttachmentRequest$outboundSchema: z.ZodType<
  PostV1CompaniesAttachmentRequest$Outbound,
  z.ZodTypeDef,
  PostV1CompaniesAttachmentRequest
> = z.object({
  companyId: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
  requestBody: z.lazy(() =>
    PostV1CompaniesAttachmentRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesAttachmentRequest$ {
  /** @deprecated use `PostV1CompaniesAttachmentRequest$inboundSchema` instead. */
  export const inboundSchema = PostV1CompaniesAttachmentRequest$inboundSchema;
  /** @deprecated use `PostV1CompaniesAttachmentRequest$outboundSchema` instead. */
  export const outboundSchema = PostV1CompaniesAttachmentRequest$outboundSchema;
  /** @deprecated use `PostV1CompaniesAttachmentRequest$Outbound` instead. */
  export type Outbound = PostV1CompaniesAttachmentRequest$Outbound;
}

export function postV1CompaniesAttachmentRequestToJSON(
  postV1CompaniesAttachmentRequest: PostV1CompaniesAttachmentRequest,
): string {
  return JSON.stringify(
    PostV1CompaniesAttachmentRequest$outboundSchema.parse(
      postV1CompaniesAttachmentRequest,
    ),
  );
}

export function postV1CompaniesAttachmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CompaniesAttachmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CompaniesAttachmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesAttachmentRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesAttachmentResponse$inboundSchema: z.ZodType<
  PostV1CompaniesAttachmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Company-Attachment": CompanyAttachment$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Company-Attachment": "companyAttachment",
  });
});

/** @internal */
export type PostV1CompaniesAttachmentResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Company-Attachment"?: CompanyAttachment$Outbound | undefined;
};

/** @internal */
export const PostV1CompaniesAttachmentResponse$outboundSchema: z.ZodType<
  PostV1CompaniesAttachmentResponse$Outbound,
  z.ZodTypeDef,
  PostV1CompaniesAttachmentResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  companyAttachment: CompanyAttachment$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    companyAttachment: "Company-Attachment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesAttachmentResponse$ {
  /** @deprecated use `PostV1CompaniesAttachmentResponse$inboundSchema` instead. */
  export const inboundSchema = PostV1CompaniesAttachmentResponse$inboundSchema;
  /** @deprecated use `PostV1CompaniesAttachmentResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesAttachmentResponse$outboundSchema;
  /** @deprecated use `PostV1CompaniesAttachmentResponse$Outbound` instead. */
  export type Outbound = PostV1CompaniesAttachmentResponse$Outbound;
}

export function postV1CompaniesAttachmentResponseToJSON(
  postV1CompaniesAttachmentResponse: PostV1CompaniesAttachmentResponse,
): string {
  return JSON.stringify(
    PostV1CompaniesAttachmentResponse$outboundSchema.parse(
      postV1CompaniesAttachmentResponse,
    ),
  );
}

export function postV1CompaniesAttachmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<PostV1CompaniesAttachmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1CompaniesAttachmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesAttachmentResponse' from JSON`,
  );
}
