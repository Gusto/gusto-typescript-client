/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCompaniesCompanyUuidTimeOffPoliciesRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

export type GetCompaniesCompanyUuidTimeOffPoliciesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  timeOffPolicyList?: Array<components.TimeOffPolicy> | undefined;
};

/** @internal */
export const GetCompaniesCompanyUuidTimeOffPoliciesRequest$inboundSchema:
  z.ZodType<
    GetCompaniesCompanyUuidTimeOffPoliciesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_uuid: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_uuid": "companyUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetCompaniesCompanyUuidTimeOffPoliciesRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetCompaniesCompanyUuidTimeOffPoliciesRequest$outboundSchema:
  z.ZodType<
    GetCompaniesCompanyUuidTimeOffPoliciesRequest$Outbound,
    z.ZodTypeDef,
    GetCompaniesCompanyUuidTimeOffPoliciesRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompaniesCompanyUuidTimeOffPoliciesRequest$ {
  /** @deprecated use `GetCompaniesCompanyUuidTimeOffPoliciesRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetCompaniesCompanyUuidTimeOffPoliciesRequest$inboundSchema;
  /** @deprecated use `GetCompaniesCompanyUuidTimeOffPoliciesRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetCompaniesCompanyUuidTimeOffPoliciesRequest$outboundSchema;
  /** @deprecated use `GetCompaniesCompanyUuidTimeOffPoliciesRequest$Outbound` instead. */
  export type Outbound = GetCompaniesCompanyUuidTimeOffPoliciesRequest$Outbound;
}

export function getCompaniesCompanyUuidTimeOffPoliciesRequestToJSON(
  getCompaniesCompanyUuidTimeOffPoliciesRequest:
    GetCompaniesCompanyUuidTimeOffPoliciesRequest,
): string {
  return JSON.stringify(
    GetCompaniesCompanyUuidTimeOffPoliciesRequest$outboundSchema.parse(
      getCompaniesCompanyUuidTimeOffPoliciesRequest,
    ),
  );
}

export function getCompaniesCompanyUuidTimeOffPoliciesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetCompaniesCompanyUuidTimeOffPoliciesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetCompaniesCompanyUuidTimeOffPoliciesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetCompaniesCompanyUuidTimeOffPoliciesRequest' from JSON`,
  );
}

/** @internal */
export const GetCompaniesCompanyUuidTimeOffPoliciesResponse$inboundSchema:
  z.ZodType<
    GetCompaniesCompanyUuidTimeOffPoliciesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Time-Off-Policy-List": z.array(components.TimeOffPolicy$inboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Time-Off-Policy-List": "timeOffPolicyList",
    });
  });

/** @internal */
export type GetCompaniesCompanyUuidTimeOffPoliciesResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Time-Off-Policy-List"?: Array<components.TimeOffPolicy$Outbound> | undefined;
};

/** @internal */
export const GetCompaniesCompanyUuidTimeOffPoliciesResponse$outboundSchema:
  z.ZodType<
    GetCompaniesCompanyUuidTimeOffPoliciesResponse$Outbound,
    z.ZodTypeDef,
    GetCompaniesCompanyUuidTimeOffPoliciesResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    timeOffPolicyList: z.array(components.TimeOffPolicy$outboundSchema)
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      timeOffPolicyList: "Time-Off-Policy-List",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCompaniesCompanyUuidTimeOffPoliciesResponse$ {
  /** @deprecated use `GetCompaniesCompanyUuidTimeOffPoliciesResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetCompaniesCompanyUuidTimeOffPoliciesResponse$inboundSchema;
  /** @deprecated use `GetCompaniesCompanyUuidTimeOffPoliciesResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetCompaniesCompanyUuidTimeOffPoliciesResponse$outboundSchema;
  /** @deprecated use `GetCompaniesCompanyUuidTimeOffPoliciesResponse$Outbound` instead. */
  export type Outbound =
    GetCompaniesCompanyUuidTimeOffPoliciesResponse$Outbound;
}

export function getCompaniesCompanyUuidTimeOffPoliciesResponseToJSON(
  getCompaniesCompanyUuidTimeOffPoliciesResponse:
    GetCompaniesCompanyUuidTimeOffPoliciesResponse,
): string {
  return JSON.stringify(
    GetCompaniesCompanyUuidTimeOffPoliciesResponse$outboundSchema.parse(
      getCompaniesCompanyUuidTimeOffPoliciesResponse,
    ),
  );
}

export function getCompaniesCompanyUuidTimeOffPoliciesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetCompaniesCompanyUuidTimeOffPoliciesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetCompaniesCompanyUuidTimeOffPoliciesResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetCompaniesCompanyUuidTimeOffPoliciesResponse' from JSON`,
  );
}
