/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetWireInRequestsWireInRequestUuidRequest = {
  /**
   * The UUID of the Wire In Request
   */
  wireInRequestUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

export type GetWireInRequestsWireInRequestUuidResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  wireInRequest?: components.WireInRequest | undefined;
};

/** @internal */
export const GetWireInRequestsWireInRequestUuidRequest$inboundSchema: z.ZodType<
  GetWireInRequestsWireInRequestUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  wire_in_request_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    "wire_in_request_uuid": "wireInRequestUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetWireInRequestsWireInRequestUuidRequest$Outbound = {
  wire_in_request_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetWireInRequestsWireInRequestUuidRequest$outboundSchema:
  z.ZodType<
    GetWireInRequestsWireInRequestUuidRequest$Outbound,
    z.ZodTypeDef,
    GetWireInRequestsWireInRequestUuidRequest
  > = z.object({
    wireInRequestUuid: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      wireInRequestUuid: "wire_in_request_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWireInRequestsWireInRequestUuidRequest$ {
  /** @deprecated use `GetWireInRequestsWireInRequestUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetWireInRequestsWireInRequestUuidRequest$inboundSchema;
  /** @deprecated use `GetWireInRequestsWireInRequestUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetWireInRequestsWireInRequestUuidRequest$outboundSchema;
  /** @deprecated use `GetWireInRequestsWireInRequestUuidRequest$Outbound` instead. */
  export type Outbound = GetWireInRequestsWireInRequestUuidRequest$Outbound;
}

export function getWireInRequestsWireInRequestUuidRequestToJSON(
  getWireInRequestsWireInRequestUuidRequest:
    GetWireInRequestsWireInRequestUuidRequest,
): string {
  return JSON.stringify(
    GetWireInRequestsWireInRequestUuidRequest$outboundSchema.parse(
      getWireInRequestsWireInRequestUuidRequest,
    ),
  );
}

export function getWireInRequestsWireInRequestUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetWireInRequestsWireInRequestUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetWireInRequestsWireInRequestUuidRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetWireInRequestsWireInRequestUuidRequest' from JSON`,
  );
}

/** @internal */
export const GetWireInRequestsWireInRequestUuidResponse$inboundSchema:
  z.ZodType<GetWireInRequestsWireInRequestUuidResponse, z.ZodTypeDef, unknown> =
    z.object({
      ContentType: z.string(),
      StatusCode: z.number().int(),
      RawResponse: z.instanceof(Response),
      "Wire-In-Request": components.WireInRequest$inboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        "ContentType": "contentType",
        "StatusCode": "statusCode",
        "RawResponse": "rawResponse",
        "Wire-In-Request": "wireInRequest",
      });
    });

/** @internal */
export type GetWireInRequestsWireInRequestUuidResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Wire-In-Request"?: components.WireInRequest$Outbound | undefined;
};

/** @internal */
export const GetWireInRequestsWireInRequestUuidResponse$outboundSchema:
  z.ZodType<
    GetWireInRequestsWireInRequestUuidResponse$Outbound,
    z.ZodTypeDef,
    GetWireInRequestsWireInRequestUuidResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    wireInRequest: components.WireInRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      wireInRequest: "Wire-In-Request",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetWireInRequestsWireInRequestUuidResponse$ {
  /** @deprecated use `GetWireInRequestsWireInRequestUuidResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetWireInRequestsWireInRequestUuidResponse$inboundSchema;
  /** @deprecated use `GetWireInRequestsWireInRequestUuidResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetWireInRequestsWireInRequestUuidResponse$outboundSchema;
  /** @deprecated use `GetWireInRequestsWireInRequestUuidResponse$Outbound` instead. */
  export type Outbound = GetWireInRequestsWireInRequestUuidResponse$Outbound;
}

export function getWireInRequestsWireInRequestUuidResponseToJSON(
  getWireInRequestsWireInRequestUuidResponse:
    GetWireInRequestsWireInRequestUuidResponse,
): string {
  return JSON.stringify(
    GetWireInRequestsWireInRequestUuidResponse$outboundSchema.parse(
      getWireInRequestsWireInRequestUuidResponse,
    ),
  );
}

export function getWireInRequestsWireInRequestUuidResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetWireInRequestsWireInRequestUuidResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetWireInRequestsWireInRequestUuidResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetWireInRequestsWireInRequestUuidResponse' from JSON`,
  );
}
