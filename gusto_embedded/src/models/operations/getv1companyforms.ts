/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompanyFormsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

export type GetV1CompanyFormsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  formList?: Array<components.Form> | undefined;
};

/** @internal */
export const GetV1CompanyFormsRequest$inboundSchema: z.ZodType<
  GetV1CompanyFormsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1CompanyFormsRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompanyFormsRequest$outboundSchema: z.ZodType<
  GetV1CompanyFormsRequest$Outbound,
  z.ZodTypeDef,
  GetV1CompanyFormsRequest
> = z.object({
  companyId: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompanyFormsRequest$ {
  /** @deprecated use `GetV1CompanyFormsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1CompanyFormsRequest$inboundSchema;
  /** @deprecated use `GetV1CompanyFormsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1CompanyFormsRequest$outboundSchema;
  /** @deprecated use `GetV1CompanyFormsRequest$Outbound` instead. */
  export type Outbound = GetV1CompanyFormsRequest$Outbound;
}

export function getV1CompanyFormsRequestToJSON(
  getV1CompanyFormsRequest: GetV1CompanyFormsRequest,
): string {
  return JSON.stringify(
    GetV1CompanyFormsRequest$outboundSchema.parse(getV1CompanyFormsRequest),
  );
}

export function getV1CompanyFormsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompanyFormsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CompanyFormsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompanyFormsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompanyFormsResponse$inboundSchema: z.ZodType<
  GetV1CompanyFormsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  "Form-List": z.array(components.Form$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Form-List": "formList",
  });
});

/** @internal */
export type GetV1CompanyFormsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Form-List"?: Array<components.Form$Outbound> | undefined;
};

/** @internal */
export const GetV1CompanyFormsResponse$outboundSchema: z.ZodType<
  GetV1CompanyFormsResponse$Outbound,
  z.ZodTypeDef,
  GetV1CompanyFormsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  formList: z.array(components.Form$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    formList: "Form-List",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompanyFormsResponse$ {
  /** @deprecated use `GetV1CompanyFormsResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1CompanyFormsResponse$inboundSchema;
  /** @deprecated use `GetV1CompanyFormsResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1CompanyFormsResponse$outboundSchema;
  /** @deprecated use `GetV1CompanyFormsResponse$Outbound` instead. */
  export type Outbound = GetV1CompanyFormsResponse$Outbound;
}

export function getV1CompanyFormsResponseToJSON(
  getV1CompanyFormsResponse: GetV1CompanyFormsResponse,
): string {
  return JSON.stringify(
    GetV1CompanyFormsResponse$outboundSchema.parse(getV1CompanyFormsResponse),
  );
}

export function getV1CompanyFormsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompanyFormsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CompanyFormsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompanyFormsResponse' from JSON`,
  );
}
