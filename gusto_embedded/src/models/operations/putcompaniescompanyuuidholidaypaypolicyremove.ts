/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HolidayPayPolicy,
  HolidayPayPolicy$inboundSchema,
  HolidayPayPolicy$Outbound,
  HolidayPayPolicy$outboundSchema,
} from "../components/holidaypaypolicy.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees = {
  uuid?: string | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  /**
   * An array of employee objects, each containing an employee_uuid.
   */
  employees?:
    | Array<PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees>
    | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Holiday Pay Policy Object Example
   */
  holidayPayPolicy?: HolidayPayPolicy | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees,
    z.ZodTypeDef,
    unknown
  > = z.object({
    uuid: z.string().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees
  > = z.object({
    uuid: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyRemoveEmployeesToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees:
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyRemoveEmployeesFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    version: z.string(),
    employees: z.array(
      z.lazy(() =>
        PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$inboundSchema
      ),
    ).optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$Outbound =
  {
    version: string;
    employees?:
      | Array<PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$Outbound>
      | undefined;
  };

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody
  > = z.object({
    version: z.string(),
    employees: z.array(
      z.lazy(() =>
        PutCompaniesCompanyUuidHolidayPayPolicyRemoveEmployees$outboundSchema
      ),
    ).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBodyToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody:
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$outboundSchema
      .parse(putCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_uuid: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_uuid": "companyUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody:
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$Outbound;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyRemoveRequestToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyRemoveRequest:
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyRemoveRequest,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyRemoveRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    "Holiday-Pay-Policy": HolidayPayPolicy$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Holiday-Pay-Policy": "holidayPayPolicy",
    });
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Holiday-Pay-Policy"?: HolidayPayPolicy$Outbound | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    holidayPayPolicy: HolidayPayPolicy$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      holidayPayPolicy: "Holiday-Pay-Policy",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyRemoveResponseToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyRemoveResponse:
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyRemoveResponse,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyRemoveResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse' from JSON`,
  );
}
