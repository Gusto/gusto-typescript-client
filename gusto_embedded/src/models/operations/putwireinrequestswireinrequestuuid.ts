/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import {
  WireInRequest,
  WireInRequest$inboundSchema,
  WireInRequest$Outbound,
  WireInRequest$outboundSchema,
} from "../components/wireinrequest.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutWireInRequestsWireInRequestUuidRequestBody = {
  /**
   * The date the wire was sent
   */
  dateSent: string;
  /**
   * Name of the bank sending the wire
   */
  bankName: string;
  /**
   * Amount of money sent
   */
  amountSent: string;
  /**
   * Additional notes
   */
  additionalNotes?: string | undefined;
};

export type PutWireInRequestsWireInRequestUuidRequest = {
  /**
   * The UUID of the Wire In Request
   */
  wireInRequestUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PutWireInRequestsWireInRequestUuidRequestBody;
};

export type PutWireInRequestsWireInRequestUuidResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  wireInRequest?: WireInRequest | undefined;
};

/** @internal */
export const PutWireInRequestsWireInRequestUuidRequestBody$inboundSchema:
  z.ZodType<
    PutWireInRequestsWireInRequestUuidRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    date_sent: z.string(),
    bank_name: z.string(),
    amount_sent: z.string(),
    additional_notes: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "date_sent": "dateSent",
      "bank_name": "bankName",
      "amount_sent": "amountSent",
      "additional_notes": "additionalNotes",
    });
  });

/** @internal */
export type PutWireInRequestsWireInRequestUuidRequestBody$Outbound = {
  date_sent: string;
  bank_name: string;
  amount_sent: string;
  additional_notes?: string | undefined;
};

/** @internal */
export const PutWireInRequestsWireInRequestUuidRequestBody$outboundSchema:
  z.ZodType<
    PutWireInRequestsWireInRequestUuidRequestBody$Outbound,
    z.ZodTypeDef,
    PutWireInRequestsWireInRequestUuidRequestBody
  > = z.object({
    dateSent: z.string(),
    bankName: z.string(),
    amountSent: z.string(),
    additionalNotes: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      dateSent: "date_sent",
      bankName: "bank_name",
      amountSent: "amount_sent",
      additionalNotes: "additional_notes",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutWireInRequestsWireInRequestUuidRequestBody$ {
  /** @deprecated use `PutWireInRequestsWireInRequestUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutWireInRequestsWireInRequestUuidRequestBody$inboundSchema;
  /** @deprecated use `PutWireInRequestsWireInRequestUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutWireInRequestsWireInRequestUuidRequestBody$outboundSchema;
  /** @deprecated use `PutWireInRequestsWireInRequestUuidRequestBody$Outbound` instead. */
  export type Outbound = PutWireInRequestsWireInRequestUuidRequestBody$Outbound;
}

export function putWireInRequestsWireInRequestUuidRequestBodyToJSON(
  putWireInRequestsWireInRequestUuidRequestBody:
    PutWireInRequestsWireInRequestUuidRequestBody,
): string {
  return JSON.stringify(
    PutWireInRequestsWireInRequestUuidRequestBody$outboundSchema.parse(
      putWireInRequestsWireInRequestUuidRequestBody,
    ),
  );
}

export function putWireInRequestsWireInRequestUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutWireInRequestsWireInRequestUuidRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutWireInRequestsWireInRequestUuidRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutWireInRequestsWireInRequestUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const PutWireInRequestsWireInRequestUuidRequest$inboundSchema: z.ZodType<
  PutWireInRequestsWireInRequestUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  wire_in_request_uuid: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
  RequestBody: z.lazy(() =>
    PutWireInRequestsWireInRequestUuidRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "wire_in_request_uuid": "wireInRequestUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutWireInRequestsWireInRequestUuidRequest$Outbound = {
  wire_in_request_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutWireInRequestsWireInRequestUuidRequestBody$Outbound;
};

/** @internal */
export const PutWireInRequestsWireInRequestUuidRequest$outboundSchema:
  z.ZodType<
    PutWireInRequestsWireInRequestUuidRequest$Outbound,
    z.ZodTypeDef,
    PutWireInRequestsWireInRequestUuidRequest
  > = z.object({
    wireInRequestUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
    requestBody: z.lazy(() =>
      PutWireInRequestsWireInRequestUuidRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      wireInRequestUuid: "wire_in_request_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutWireInRequestsWireInRequestUuidRequest$ {
  /** @deprecated use `PutWireInRequestsWireInRequestUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutWireInRequestsWireInRequestUuidRequest$inboundSchema;
  /** @deprecated use `PutWireInRequestsWireInRequestUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutWireInRequestsWireInRequestUuidRequest$outboundSchema;
  /** @deprecated use `PutWireInRequestsWireInRequestUuidRequest$Outbound` instead. */
  export type Outbound = PutWireInRequestsWireInRequestUuidRequest$Outbound;
}

export function putWireInRequestsWireInRequestUuidRequestToJSON(
  putWireInRequestsWireInRequestUuidRequest:
    PutWireInRequestsWireInRequestUuidRequest,
): string {
  return JSON.stringify(
    PutWireInRequestsWireInRequestUuidRequest$outboundSchema.parse(
      putWireInRequestsWireInRequestUuidRequest,
    ),
  );
}

export function putWireInRequestsWireInRequestUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutWireInRequestsWireInRequestUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutWireInRequestsWireInRequestUuidRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutWireInRequestsWireInRequestUuidRequest' from JSON`,
  );
}

/** @internal */
export const PutWireInRequestsWireInRequestUuidResponse$inboundSchema:
  z.ZodType<PutWireInRequestsWireInRequestUuidResponse, z.ZodTypeDef, unknown> =
    z.object({
      HttpMeta: HTTPMetadata$inboundSchema,
      "Wire-In-Request": WireInRequest$inboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        "HttpMeta": "httpMeta",
        "Wire-In-Request": "wireInRequest",
      });
    });

/** @internal */
export type PutWireInRequestsWireInRequestUuidResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Wire-In-Request"?: WireInRequest$Outbound | undefined;
};

/** @internal */
export const PutWireInRequestsWireInRequestUuidResponse$outboundSchema:
  z.ZodType<
    PutWireInRequestsWireInRequestUuidResponse$Outbound,
    z.ZodTypeDef,
    PutWireInRequestsWireInRequestUuidResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    wireInRequest: WireInRequest$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      wireInRequest: "Wire-In-Request",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutWireInRequestsWireInRequestUuidResponse$ {
  /** @deprecated use `PutWireInRequestsWireInRequestUuidResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutWireInRequestsWireInRequestUuidResponse$inboundSchema;
  /** @deprecated use `PutWireInRequestsWireInRequestUuidResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutWireInRequestsWireInRequestUuidResponse$outboundSchema;
  /** @deprecated use `PutWireInRequestsWireInRequestUuidResponse$Outbound` instead. */
  export type Outbound = PutWireInRequestsWireInRequestUuidResponse$Outbound;
}

export function putWireInRequestsWireInRequestUuidResponseToJSON(
  putWireInRequestsWireInRequestUuidResponse:
    PutWireInRequestsWireInRequestUuidResponse,
): string {
  return JSON.stringify(
    PutWireInRequestsWireInRequestUuidResponse$outboundSchema.parse(
      putWireInRequestsWireInRequestUuidResponse,
    ),
  );
}

export function putWireInRequestsWireInRequestUuidResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutWireInRequestsWireInRequestUuidResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutWireInRequestsWireInRequestUuidResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutWireInRequestsWireInRequestUuidResponse' from JSON`,
  );
}
