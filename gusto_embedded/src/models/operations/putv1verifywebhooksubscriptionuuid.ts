/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1VerifyWebhookSubscriptionUuidSecurity = {
  systemAccessAuth: string;
};

export type PutV1VerifyWebhookSubscriptionUuidRequestBody = {
  /**
   * The token POSTed to the Subscription URL.
   */
  verificationToken: string;
};

export type PutV1VerifyWebhookSubscriptionUuidRequest = {
  /**
   * The webhook subscription UUID.
   */
  webhookSubscriptionUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutV1VerifyWebhookSubscriptionUuidRequestBody;
};

/** @internal */
export const PutV1VerifyWebhookSubscriptionUuidSecurity$inboundSchema:
  z.ZodType<PutV1VerifyWebhookSubscriptionUuidSecurity, z.ZodTypeDef, unknown> =
    z.object({
      SystemAccessAuth: z.string(),
    }).transform((v) => {
      return remap$(v, {
        "SystemAccessAuth": "systemAccessAuth",
      });
    });

/** @internal */
export type PutV1VerifyWebhookSubscriptionUuidSecurity$Outbound = {
  SystemAccessAuth: string;
};

/** @internal */
export const PutV1VerifyWebhookSubscriptionUuidSecurity$outboundSchema:
  z.ZodType<
    PutV1VerifyWebhookSubscriptionUuidSecurity$Outbound,
    z.ZodTypeDef,
    PutV1VerifyWebhookSubscriptionUuidSecurity
  > = z.object({
    systemAccessAuth: z.string(),
  }).transform((v) => {
    return remap$(v, {
      systemAccessAuth: "SystemAccessAuth",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1VerifyWebhookSubscriptionUuidSecurity$ {
  /** @deprecated use `PutV1VerifyWebhookSubscriptionUuidSecurity$inboundSchema` instead. */
  export const inboundSchema =
    PutV1VerifyWebhookSubscriptionUuidSecurity$inboundSchema;
  /** @deprecated use `PutV1VerifyWebhookSubscriptionUuidSecurity$outboundSchema` instead. */
  export const outboundSchema =
    PutV1VerifyWebhookSubscriptionUuidSecurity$outboundSchema;
  /** @deprecated use `PutV1VerifyWebhookSubscriptionUuidSecurity$Outbound` instead. */
  export type Outbound = PutV1VerifyWebhookSubscriptionUuidSecurity$Outbound;
}

export function putV1VerifyWebhookSubscriptionUuidSecurityToJSON(
  putV1VerifyWebhookSubscriptionUuidSecurity:
    PutV1VerifyWebhookSubscriptionUuidSecurity,
): string {
  return JSON.stringify(
    PutV1VerifyWebhookSubscriptionUuidSecurity$outboundSchema.parse(
      putV1VerifyWebhookSubscriptionUuidSecurity,
    ),
  );
}

export function putV1VerifyWebhookSubscriptionUuidSecurityFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1VerifyWebhookSubscriptionUuidSecurity,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1VerifyWebhookSubscriptionUuidSecurity$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1VerifyWebhookSubscriptionUuidSecurity' from JSON`,
  );
}

/** @internal */
export const PutV1VerifyWebhookSubscriptionUuidRequestBody$inboundSchema:
  z.ZodType<
    PutV1VerifyWebhookSubscriptionUuidRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    verification_token: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "verification_token": "verificationToken",
    });
  });

/** @internal */
export type PutV1VerifyWebhookSubscriptionUuidRequestBody$Outbound = {
  verification_token: string;
};

/** @internal */
export const PutV1VerifyWebhookSubscriptionUuidRequestBody$outboundSchema:
  z.ZodType<
    PutV1VerifyWebhookSubscriptionUuidRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1VerifyWebhookSubscriptionUuidRequestBody
  > = z.object({
    verificationToken: z.string(),
  }).transform((v) => {
    return remap$(v, {
      verificationToken: "verification_token",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1VerifyWebhookSubscriptionUuidRequestBody$ {
  /** @deprecated use `PutV1VerifyWebhookSubscriptionUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1VerifyWebhookSubscriptionUuidRequestBody$inboundSchema;
  /** @deprecated use `PutV1VerifyWebhookSubscriptionUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1VerifyWebhookSubscriptionUuidRequestBody$outboundSchema;
  /** @deprecated use `PutV1VerifyWebhookSubscriptionUuidRequestBody$Outbound` instead. */
  export type Outbound = PutV1VerifyWebhookSubscriptionUuidRequestBody$Outbound;
}

export function putV1VerifyWebhookSubscriptionUuidRequestBodyToJSON(
  putV1VerifyWebhookSubscriptionUuidRequestBody:
    PutV1VerifyWebhookSubscriptionUuidRequestBody,
): string {
  return JSON.stringify(
    PutV1VerifyWebhookSubscriptionUuidRequestBody$outboundSchema.parse(
      putV1VerifyWebhookSubscriptionUuidRequestBody,
    ),
  );
}

export function putV1VerifyWebhookSubscriptionUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1VerifyWebhookSubscriptionUuidRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1VerifyWebhookSubscriptionUuidRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1VerifyWebhookSubscriptionUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1VerifyWebhookSubscriptionUuidRequest$inboundSchema: z.ZodType<
  PutV1VerifyWebhookSubscriptionUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  webhook_subscription_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
  RequestBody: z.lazy(() =>
    PutV1VerifyWebhookSubscriptionUuidRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "webhook_subscription_uuid": "webhookSubscriptionUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1VerifyWebhookSubscriptionUuidRequest$Outbound = {
  webhook_subscription_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutV1VerifyWebhookSubscriptionUuidRequestBody$Outbound;
};

/** @internal */
export const PutV1VerifyWebhookSubscriptionUuidRequest$outboundSchema:
  z.ZodType<
    PutV1VerifyWebhookSubscriptionUuidRequest$Outbound,
    z.ZodTypeDef,
    PutV1VerifyWebhookSubscriptionUuidRequest
  > = z.object({
    webhookSubscriptionUuid: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
    requestBody: z.lazy(() =>
      PutV1VerifyWebhookSubscriptionUuidRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      webhookSubscriptionUuid: "webhook_subscription_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1VerifyWebhookSubscriptionUuidRequest$ {
  /** @deprecated use `PutV1VerifyWebhookSubscriptionUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1VerifyWebhookSubscriptionUuidRequest$inboundSchema;
  /** @deprecated use `PutV1VerifyWebhookSubscriptionUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1VerifyWebhookSubscriptionUuidRequest$outboundSchema;
  /** @deprecated use `PutV1VerifyWebhookSubscriptionUuidRequest$Outbound` instead. */
  export type Outbound = PutV1VerifyWebhookSubscriptionUuidRequest$Outbound;
}

export function putV1VerifyWebhookSubscriptionUuidRequestToJSON(
  putV1VerifyWebhookSubscriptionUuidRequest:
    PutV1VerifyWebhookSubscriptionUuidRequest,
): string {
  return JSON.stringify(
    PutV1VerifyWebhookSubscriptionUuidRequest$outboundSchema.parse(
      putV1VerifyWebhookSubscriptionUuidRequest,
    ),
  );
}

export function putV1VerifyWebhookSubscriptionUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1VerifyWebhookSubscriptionUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1VerifyWebhookSubscriptionUuidRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1VerifyWebhookSubscriptionUuidRequest' from JSON`,
  );
}
