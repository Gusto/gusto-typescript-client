/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1EmployeesEmployeeIdWorkAddressesRequestBody = {
  /**
   * Reference to a company location
   */
  locationUuid?: string | undefined;
  /**
   * Date the employee began working at the company location
   */
  effectiveDate?: RFCDate | undefined;
};

export type PostV1EmployeesEmployeeIdWorkAddressesRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PostV1EmployeesEmployeeIdWorkAddressesRequestBody;
};

/** @internal */
export const PostV1EmployeesEmployeeIdWorkAddressesRequestBody$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdWorkAddressesRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    location_uuid: z.string().optional(),
    effective_date: z.string().transform(v => new RFCDate(v)).optional(),
  }).transform((v) => {
    return remap$(v, {
      "location_uuid": "locationUuid",
      "effective_date": "effectiveDate",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdWorkAddressesRequestBody$Outbound = {
  location_uuid?: string | undefined;
  effective_date?: string | undefined;
};

/** @internal */
export const PostV1EmployeesEmployeeIdWorkAddressesRequestBody$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdWorkAddressesRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdWorkAddressesRequestBody
  > = z.object({
    locationUuid: z.string().optional(),
    effectiveDate: z.instanceof(RFCDate).transform(v => v.toString())
      .optional(),
  }).transform((v) => {
    return remap$(v, {
      locationUuid: "location_uuid",
      effectiveDate: "effective_date",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdWorkAddressesRequestBody$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdWorkAddressesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdWorkAddressesRequestBody$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdWorkAddressesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdWorkAddressesRequestBody$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdWorkAddressesRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1EmployeesEmployeeIdWorkAddressesRequestBody$Outbound;
}

export function postV1EmployeesEmployeeIdWorkAddressesRequestBodyToJSON(
  postV1EmployeesEmployeeIdWorkAddressesRequestBody:
    PostV1EmployeesEmployeeIdWorkAddressesRequestBody,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdWorkAddressesRequestBody$outboundSchema.parse(
      postV1EmployeesEmployeeIdWorkAddressesRequestBody,
    ),
  );
}

export function postV1EmployeesEmployeeIdWorkAddressesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdWorkAddressesRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdWorkAddressesRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdWorkAddressesRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1EmployeesEmployeeIdWorkAddressesRequest$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdWorkAddressesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
    RequestBody: z.lazy(() =>
      PostV1EmployeesEmployeeIdWorkAddressesRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdWorkAddressesRequest$Outbound = {
  employee_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostV1EmployeesEmployeeIdWorkAddressesRequestBody$Outbound;
};

/** @internal */
export const PostV1EmployeesEmployeeIdWorkAddressesRequest$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdWorkAddressesRequest$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdWorkAddressesRequest
  > = z.object({
    employeeId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
    requestBody: z.lazy(() =>
      PostV1EmployeesEmployeeIdWorkAddressesRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdWorkAddressesRequest$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdWorkAddressesRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdWorkAddressesRequest$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdWorkAddressesRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdWorkAddressesRequest$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdWorkAddressesRequest$Outbound` instead. */
  export type Outbound = PostV1EmployeesEmployeeIdWorkAddressesRequest$Outbound;
}

export function postV1EmployeesEmployeeIdWorkAddressesRequestToJSON(
  postV1EmployeesEmployeeIdWorkAddressesRequest:
    PostV1EmployeesEmployeeIdWorkAddressesRequest,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdWorkAddressesRequest$outboundSchema.parse(
      postV1EmployeesEmployeeIdWorkAddressesRequest,
    ),
  );
}

export function postV1EmployeesEmployeeIdWorkAddressesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdWorkAddressesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdWorkAddressesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdWorkAddressesRequest' from JSON`,
  );
}
