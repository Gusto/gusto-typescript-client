/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1ContractorFormsRequest = {
  /**
   * The UUID of the contractor
   */
  contractorUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

export type GetV1ContractorFormsResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  form1099s?: Array<components.Form1099> | undefined;
};

/** @internal */
export const GetV1ContractorFormsRequest$inboundSchema: z.ZodType<
  GetV1ContractorFormsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  contractor_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    "contractor_uuid": "contractorUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1ContractorFormsRequest$Outbound = {
  contractor_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1ContractorFormsRequest$outboundSchema: z.ZodType<
  GetV1ContractorFormsRequest$Outbound,
  z.ZodTypeDef,
  GetV1ContractorFormsRequest
> = z.object({
  contractorUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    contractorUuid: "contractor_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ContractorFormsRequest$ {
  /** @deprecated use `GetV1ContractorFormsRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1ContractorFormsRequest$inboundSchema;
  /** @deprecated use `GetV1ContractorFormsRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1ContractorFormsRequest$outboundSchema;
  /** @deprecated use `GetV1ContractorFormsRequest$Outbound` instead. */
  export type Outbound = GetV1ContractorFormsRequest$Outbound;
}

export function getV1ContractorFormsRequestToJSON(
  getV1ContractorFormsRequest: GetV1ContractorFormsRequest,
): string {
  return JSON.stringify(
    GetV1ContractorFormsRequest$outboundSchema.parse(
      getV1ContractorFormsRequest,
    ),
  );
}

export function getV1ContractorFormsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1ContractorFormsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1ContractorFormsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1ContractorFormsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1ContractorFormsResponse$inboundSchema: z.ZodType<
  GetV1ContractorFormsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  Form_1099s: z.array(components.Form1099$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Form_1099s": "form1099s",
  });
});

/** @internal */
export type GetV1ContractorFormsResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  Form_1099s?: Array<components.Form1099$Outbound> | undefined;
};

/** @internal */
export const GetV1ContractorFormsResponse$outboundSchema: z.ZodType<
  GetV1ContractorFormsResponse$Outbound,
  z.ZodTypeDef,
  GetV1ContractorFormsResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  form1099s: z.array(components.Form1099$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    form1099s: "Form_1099s",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1ContractorFormsResponse$ {
  /** @deprecated use `GetV1ContractorFormsResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1ContractorFormsResponse$inboundSchema;
  /** @deprecated use `GetV1ContractorFormsResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1ContractorFormsResponse$outboundSchema;
  /** @deprecated use `GetV1ContractorFormsResponse$Outbound` instead. */
  export type Outbound = GetV1ContractorFormsResponse$Outbound;
}

export function getV1ContractorFormsResponseToJSON(
  getV1ContractorFormsResponse: GetV1ContractorFormsResponse,
): string {
  return JSON.stringify(
    GetV1ContractorFormsResponse$outboundSchema.parse(
      getV1ContractorFormsResponse,
    ),
  );
}

export function getV1ContractorFormsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1ContractorFormsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1ContractorFormsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1ContractorFormsResponse' from JSON`,
  );
}
