/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  PayPeriod,
  PayPeriod$inboundSchema,
  PayPeriod$Outbound,
  PayPeriod$outboundSchema,
} from "../components/payperiod.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompaniesCompanyIdPayPeriodsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  startDate?: string | undefined;
  /**
   * If left empty, defaults to today's date.
   */
  endDate?: string | undefined;
  /**
   * regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
   */
  payrollTypes?: string | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1CompaniesCompanyIdPayPeriodsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  payPeriodList?: Array<PayPeriod> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayPeriodsRequest$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdPayPeriodsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string(),
  start_date: z.string().optional(),
  end_date: z.string().optional(),
  payroll_types: z.string().optional(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "start_date": "startDate",
    "end_date": "endDate",
    "payroll_types": "payrollTypes",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdPayPeriodsRequest$Outbound = {
  company_id: string;
  start_date?: string | undefined;
  end_date?: string | undefined;
  payroll_types?: string | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayPeriodsRequest$outboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdPayPeriodsRequest$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesCompanyIdPayPeriodsRequest
> = z.object({
  companyId: z.string(),
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  payrollTypes: z.string().optional(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    startDate: "start_date",
    endDate: "end_date",
    payrollTypes: "payroll_types",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayPeriodsRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayPeriodsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayPeriodsRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayPeriodsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayPeriodsRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayPeriodsRequest$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdPayPeriodsRequest$Outbound;
}

export function getV1CompaniesCompanyIdPayPeriodsRequestToJSON(
  getV1CompaniesCompanyIdPayPeriodsRequest:
    GetV1CompaniesCompanyIdPayPeriodsRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPayPeriodsRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdPayPeriodsRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdPayPeriodsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdPayPeriodsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPayPeriodsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdPayPeriodsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdPayPeriodsResponse$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdPayPeriodsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Pay-Period-List": z.array(PayPeriod$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Pay-Period-List": "payPeriodList",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdPayPeriodsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Pay-Period-List"?: Array<PayPeriod$Outbound> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayPeriodsResponse$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPayPeriodsResponse$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdPayPeriodsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    payPeriodList: z.array(PayPeriod$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      payPeriodList: "Pay-Period-List",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayPeriodsResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayPeriodsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayPeriodsResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayPeriodsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayPeriodsResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayPeriodsResponse$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdPayPeriodsResponse$Outbound;
}

export function getV1CompaniesCompanyIdPayPeriodsResponseToJSON(
  getV1CompaniesCompanyIdPayPeriodsResponse:
    GetV1CompaniesCompanyIdPayPeriodsResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPayPeriodsResponse$outboundSchema.parse(
      getV1CompaniesCompanyIdPayPeriodsResponse,
    ),
  );
}

export function getV1CompaniesCompanyIdPayPeriodsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdPayPeriodsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPayPeriodsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdPayPeriodsResponse' from JSON`,
  );
}
