/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import {
  ContractorPaymentGroup,
  ContractorPaymentGroup$inboundSchema,
  ContractorPaymentGroup$Outbound,
  ContractorPaymentGroup$outboundSchema,
} from "../components/contractorpaymentgroup.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod =
  {
    DirectDeposit: "Direct Deposit",
    Check: "Check",
    HistoricalPayment: "Historical Payment",
  } as const;
export type PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod =
  ClosedEnum<
    typeof PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod
  >;

export type PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments =
  {
    /**
     * The contractor receiving the payment
     */
    contractorUuid?: string | undefined;
    paymentMethod?:
      | PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod
      | undefined;
    /**
     * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
     */
    wage?: number | undefined;
    /**
     * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
     */
    hours?: number | undefined;
    /**
     * If the contractor is on an hourly wage, this is the bonus the contractor earned
     */
    bonus?: number | undefined;
    /**
     * Reimbursed wages for the contractor
     */
    reimbursement?: number | undefined;
  };

export type PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody =
  {
    /**
     * The payment check date
     */
    checkDate: RFCDate;
    /**
     * Optional token used to make contractor payment group creation idempotent.  If provided, string must be unique for each group you intend to create.
     */
    creationToken?: string | undefined;
    contractorPayments: Array<
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments
    >;
  };

export type PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody:
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody;
};

export type PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Full contractor payment group object with null uuid
   */
  contractorPaymentGroup?: ContractorPaymentGroup | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod
  > = z.nativeEnum(
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod,
  );

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod
  > =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$outboundSchema;
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    contractor_uuid: z.string().optional(),
    payment_method:
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$inboundSchema
        .default("Direct Deposit"),
    wage: z.number().optional(),
    hours: z.number().optional(),
    bonus: z.number().optional(),
    reimbursement: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      "contractor_uuid": "contractorUuid",
      "payment_method": "paymentMethod",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$Outbound =
  {
    contractor_uuid?: string | undefined;
    payment_method: string;
    wage?: number | undefined;
    hours?: number | undefined;
    bonus?: number | undefined;
    reimbursement?: number | undefined;
  };

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments
  > = z.object({
    contractorUuid: z.string().optional(),
    paymentMethod:
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewPaymentMethod$outboundSchema
        .default("Direct Deposit"),
    wage: z.number().optional(),
    hours: z.number().optional(),
    bonus: z.number().optional(),
    reimbursement: z.number().optional(),
  }).transform((v) => {
    return remap$(v, {
      contractorUuid: "contractor_uuid",
      paymentMethod: "payment_method",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPaymentsToJSON(
  postV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments:
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$outboundSchema
      .parse(
        postV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments,
      ),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    check_date: z.string().transform(v => new RFCDate(v)),
    creation_token: z.string().optional(),
    contractor_payments: z.array(
      z.lazy(() =>
        PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$inboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      "check_date": "checkDate",
      "creation_token": "creationToken",
      "contractor_payments": "contractorPayments",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$Outbound =
  {
    check_date: string;
    creation_token?: string | undefined;
    contractor_payments: Array<
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$Outbound
    >;
  };

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody
  > = z.object({
    checkDate: z.instanceof(RFCDate).transform(v => v.toString()),
    creationToken: z.string().optional(),
    contractorPayments: z.array(
      z.lazy(() =>
        PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewContractorPayments$outboundSchema
      ),
    ),
  }).transform((v) => {
    return remap$(v, {
      checkDate: "check_date",
      creationToken: "creation_token",
      contractorPayments: "contractor_payments",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBodyToJSON(
  postV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody:
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$outboundSchema
      .parse(postV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$Outbound =
  {
    company_id: string;
    "X-Gusto-API-Version": string;
    RequestBody:
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$Outbound;
  };

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest
  > = z.object({
    companyId: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestToJSON(
  postV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest:
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$outboundSchema
      .parse(postV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Contractor-Payment-Group": ContractorPaymentGroup$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Contractor-Payment-Group": "contractorPaymentGroup",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$Outbound =
  {
    HttpMeta: HTTPMetadata$Outbound;
    "Contractor-Payment-Group"?: ContractorPaymentGroup$Outbound | undefined;
  };

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    contractorPaymentGroup: ContractorPaymentGroup$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      contractorPaymentGroup: "Contractor-Payment-Group",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponseToJSON(
  postV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse:
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$outboundSchema
      .parse(postV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse' from JSON`,
  );
}
