/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const PutV1RecurringReimbursementsHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFourMinus04Minus01: "2024-04-01",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type PutV1RecurringReimbursementsHeaderXGustoAPIVersion = ClosedEnum<
  typeof PutV1RecurringReimbursementsHeaderXGustoAPIVersion
>;

export type PutV1RecurringReimbursementsRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  /**
   * The description of the reimbursement
   */
  description?: string | undefined;
  /**
   * The dollar amount of the reimbursement
   */
  amount?: number | undefined;
};

export type PutV1RecurringReimbursementsRequest = {
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | PutV1RecurringReimbursementsHeaderXGustoAPIVersion
    | undefined;
  /**
   * The UUID of the reimbursement
   */
  id: string;
  requestBody: PutV1RecurringReimbursementsRequestBody;
};

/**
 * successful
 */
export type PutV1RecurringReimbursementsResponseBody = {
  uuid: string;
  employeeUuid: string;
  description: string;
  amount: string;
  version: string;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

export type PutV1RecurringReimbursementsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  object?: PutV1RecurringReimbursementsResponseBody | undefined;
};

/** @internal */
export const PutV1RecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<typeof PutV1RecurringReimbursementsHeaderXGustoAPIVersion> = z
    .nativeEnum(PutV1RecurringReimbursementsHeaderXGustoAPIVersion);

/** @internal */
export const PutV1RecurringReimbursementsHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<typeof PutV1RecurringReimbursementsHeaderXGustoAPIVersion> =
    PutV1RecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1RecurringReimbursementsHeaderXGustoAPIVersion$ {
  /** @deprecated use `PutV1RecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    PutV1RecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `PutV1RecurringReimbursementsHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    PutV1RecurringReimbursementsHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const PutV1RecurringReimbursementsRequestBody$inboundSchema: z.ZodType<
  PutV1RecurringReimbursementsRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  description: z.string().optional(),
  amount: z.number().optional(),
});

/** @internal */
export type PutV1RecurringReimbursementsRequestBody$Outbound = {
  version: string;
  description?: string | undefined;
  amount?: number | undefined;
};

/** @internal */
export const PutV1RecurringReimbursementsRequestBody$outboundSchema: z.ZodType<
  PutV1RecurringReimbursementsRequestBody$Outbound,
  z.ZodTypeDef,
  PutV1RecurringReimbursementsRequestBody
> = z.object({
  version: z.string(),
  description: z.string().optional(),
  amount: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1RecurringReimbursementsRequestBody$ {
  /** @deprecated use `PutV1RecurringReimbursementsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1RecurringReimbursementsRequestBody$inboundSchema;
  /** @deprecated use `PutV1RecurringReimbursementsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1RecurringReimbursementsRequestBody$outboundSchema;
  /** @deprecated use `PutV1RecurringReimbursementsRequestBody$Outbound` instead. */
  export type Outbound = PutV1RecurringReimbursementsRequestBody$Outbound;
}

export function putV1RecurringReimbursementsRequestBodyToJSON(
  putV1RecurringReimbursementsRequestBody:
    PutV1RecurringReimbursementsRequestBody,
): string {
  return JSON.stringify(
    PutV1RecurringReimbursementsRequestBody$outboundSchema.parse(
      putV1RecurringReimbursementsRequestBody,
    ),
  );
}

export function putV1RecurringReimbursementsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1RecurringReimbursementsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1RecurringReimbursementsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1RecurringReimbursementsRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1RecurringReimbursementsRequest$inboundSchema: z.ZodType<
  PutV1RecurringReimbursementsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Gusto-API-Version":
    PutV1RecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema.default(
      "2024-04-01",
    ),
  id: z.string(),
  RequestBody: z.lazy(() =>
    PutV1RecurringReimbursementsRequestBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1RecurringReimbursementsRequest$Outbound = {
  "X-Gusto-API-Version": string;
  id: string;
  RequestBody: PutV1RecurringReimbursementsRequestBody$Outbound;
};

/** @internal */
export const PutV1RecurringReimbursementsRequest$outboundSchema: z.ZodType<
  PutV1RecurringReimbursementsRequest$Outbound,
  z.ZodTypeDef,
  PutV1RecurringReimbursementsRequest
> = z.object({
  xGustoAPIVersion:
    PutV1RecurringReimbursementsHeaderXGustoAPIVersion$outboundSchema.default(
      "2024-04-01",
    ),
  id: z.string(),
  requestBody: z.lazy(() =>
    PutV1RecurringReimbursementsRequestBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1RecurringReimbursementsRequest$ {
  /** @deprecated use `PutV1RecurringReimbursementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1RecurringReimbursementsRequest$inboundSchema;
  /** @deprecated use `PutV1RecurringReimbursementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1RecurringReimbursementsRequest$outboundSchema;
  /** @deprecated use `PutV1RecurringReimbursementsRequest$Outbound` instead. */
  export type Outbound = PutV1RecurringReimbursementsRequest$Outbound;
}

export function putV1RecurringReimbursementsRequestToJSON(
  putV1RecurringReimbursementsRequest: PutV1RecurringReimbursementsRequest,
): string {
  return JSON.stringify(
    PutV1RecurringReimbursementsRequest$outboundSchema.parse(
      putV1RecurringReimbursementsRequest,
    ),
  );
}

export function putV1RecurringReimbursementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV1RecurringReimbursementsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1RecurringReimbursementsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1RecurringReimbursementsRequest' from JSON`,
  );
}

/** @internal */
export const PutV1RecurringReimbursementsResponseBody$inboundSchema: z.ZodType<
  PutV1RecurringReimbursementsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  employee_uuid: z.string(),
  description: z.string(),
  amount: z.string(),
  version: z.string(),
  created_at: z.string().optional(),
  updated_at: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
    "created_at": "createdAt",
    "updated_at": "updatedAt",
  });
});

/** @internal */
export type PutV1RecurringReimbursementsResponseBody$Outbound = {
  uuid: string;
  employee_uuid: string;
  description: string;
  amount: string;
  version: string;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

/** @internal */
export const PutV1RecurringReimbursementsResponseBody$outboundSchema: z.ZodType<
  PutV1RecurringReimbursementsResponseBody$Outbound,
  z.ZodTypeDef,
  PutV1RecurringReimbursementsResponseBody
> = z.object({
  uuid: z.string(),
  employeeUuid: z.string(),
  description: z.string(),
  amount: z.string(),
  version: z.string(),
  createdAt: z.string().optional(),
  updatedAt: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
    createdAt: "created_at",
    updatedAt: "updated_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1RecurringReimbursementsResponseBody$ {
  /** @deprecated use `PutV1RecurringReimbursementsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1RecurringReimbursementsResponseBody$inboundSchema;
  /** @deprecated use `PutV1RecurringReimbursementsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1RecurringReimbursementsResponseBody$outboundSchema;
  /** @deprecated use `PutV1RecurringReimbursementsResponseBody$Outbound` instead. */
  export type Outbound = PutV1RecurringReimbursementsResponseBody$Outbound;
}

export function putV1RecurringReimbursementsResponseBodyToJSON(
  putV1RecurringReimbursementsResponseBody:
    PutV1RecurringReimbursementsResponseBody,
): string {
  return JSON.stringify(
    PutV1RecurringReimbursementsResponseBody$outboundSchema.parse(
      putV1RecurringReimbursementsResponseBody,
    ),
  );
}

export function putV1RecurringReimbursementsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1RecurringReimbursementsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1RecurringReimbursementsResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutV1RecurringReimbursementsResponseBody' from JSON`,
  );
}

/** @internal */
export const PutV1RecurringReimbursementsResponse$inboundSchema: z.ZodType<
  PutV1RecurringReimbursementsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  object: z.lazy(() => PutV1RecurringReimbursementsResponseBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
  });
});

/** @internal */
export type PutV1RecurringReimbursementsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  object?: PutV1RecurringReimbursementsResponseBody$Outbound | undefined;
};

/** @internal */
export const PutV1RecurringReimbursementsResponse$outboundSchema: z.ZodType<
  PutV1RecurringReimbursementsResponse$Outbound,
  z.ZodTypeDef,
  PutV1RecurringReimbursementsResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  object: z.lazy(() => PutV1RecurringReimbursementsResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1RecurringReimbursementsResponse$ {
  /** @deprecated use `PutV1RecurringReimbursementsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutV1RecurringReimbursementsResponse$inboundSchema;
  /** @deprecated use `PutV1RecurringReimbursementsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV1RecurringReimbursementsResponse$outboundSchema;
  /** @deprecated use `PutV1RecurringReimbursementsResponse$Outbound` instead. */
  export type Outbound = PutV1RecurringReimbursementsResponse$Outbound;
}

export function putV1RecurringReimbursementsResponseToJSON(
  putV1RecurringReimbursementsResponse: PutV1RecurringReimbursementsResponse,
): string {
  return JSON.stringify(
    PutV1RecurringReimbursementsResponse$outboundSchema.parse(
      putV1RecurringReimbursementsResponse,
    ),
  );
}

export function putV1RecurringReimbursementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV1RecurringReimbursementsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1RecurringReimbursementsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1RecurringReimbursementsResponse' from JSON`,
  );
}
