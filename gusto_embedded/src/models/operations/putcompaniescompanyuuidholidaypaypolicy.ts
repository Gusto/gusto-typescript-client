/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyMlkDay = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyLaborDay = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving = {
  selected?: boolean | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay = {
  selected?: boolean | undefined;
};

/**
 * An object containing federal holiday objects, each containing a boolean selected property.
 */
export type PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays = {
  newYearsDay?: PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay | undefined;
  mlkDay?: PutCompaniesCompanyUuidHolidayPayPolicyMlkDay | undefined;
  presidentsDay?:
    | PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay
    | undefined;
  memorialDay?: PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay | undefined;
  juneteenth?: PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth | undefined;
  independenceDay?:
    | PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay
    | undefined;
  laborDay?: PutCompaniesCompanyUuidHolidayPayPolicyLaborDay | undefined;
  columbusDay?: PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay | undefined;
  veteransDay?: PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay | undefined;
  thanksgiving?:
    | PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving
    | undefined;
  christmasDay?:
    | PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay
    | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  /**
   * An object containing federal holiday objects, each containing a boolean selected property.
   */
  federalHolidays?:
    | PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays
    | undefined;
};

export type PutCompaniesCompanyUuidHolidayPayPolicyRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutCompaniesCompanyUuidHolidayPayPolicyRequestBody;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyNewYearsDayToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyNewYearsDay:
    PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyNewYearsDay,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyNewYearsDayFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyMlkDay,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyMlkDay
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$Outbound` instead. */
  export type Outbound = PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyMlkDayToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyMlkDay:
    PutCompaniesCompanyUuidHolidayPayPolicyMlkDay,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyMlkDay,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyMlkDayFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyMlkDay,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyMlkDay' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyPresidentsDayToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyPresidentsDay:
    PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyPresidentsDay,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyPresidentsDayFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyMemorialDayToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyMemorialDay:
    PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyMemorialDay,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyMemorialDayFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyJuneteenthToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyJuneteenth:
    PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyJuneteenth,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyJuneteenthFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyIndependenceDayToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyIndependenceDay:
    PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyIndependenceDay,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyIndependenceDayFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyLaborDay,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyLaborDay
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyLaborDayToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyLaborDay:
    PutCompaniesCompanyUuidHolidayPayPolicyLaborDay,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyLaborDay,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyLaborDayFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyLaborDay,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyLaborDay' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyColumbusDayToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyColumbusDay:
    PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyColumbusDay,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyColumbusDayFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyVeteransDayToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyVeteransDay:
    PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyVeteransDay,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyVeteransDayFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyThanksgivingToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyThanksgiving:
    PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyThanksgiving,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyThanksgivingFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay,
    z.ZodTypeDef,
    unknown
  > = z.object({
    selected: z.boolean().optional(),
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$Outbound = {
  selected?: boolean | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay
  > = z.object({
    selected: z.boolean().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyChristmasDayToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyChristmasDay:
    PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyChristmasDay,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyChristmasDayFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays,
    z.ZodTypeDef,
    unknown
  > = z.object({
    new_years_day: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$inboundSchema
    ).optional(),
    mlk_day: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$inboundSchema
    ).optional(),
    presidents_day: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$inboundSchema
    ).optional(),
    memorial_day: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$inboundSchema
    ).optional(),
    juneteenth: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$inboundSchema
    ).optional(),
    independence_day: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$inboundSchema
    ).optional(),
    labor_day: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$inboundSchema
    ).optional(),
    columbus_day: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$inboundSchema
    ).optional(),
    veterans_day: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$inboundSchema
    ).optional(),
    thanksgiving: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$inboundSchema
    ).optional(),
    christmas_day: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "new_years_day": "newYearsDay",
      "mlk_day": "mlkDay",
      "presidents_day": "presidentsDay",
      "memorial_day": "memorialDay",
      "independence_day": "independenceDay",
      "labor_day": "laborDay",
      "columbus_day": "columbusDay",
      "veterans_day": "veteransDay",
      "christmas_day": "christmasDay",
    });
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$Outbound = {
  new_years_day?:
    | PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$Outbound
    | undefined;
  mlk_day?: PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$Outbound | undefined;
  presidents_day?:
    | PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$Outbound
    | undefined;
  memorial_day?:
    | PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$Outbound
    | undefined;
  juneteenth?:
    | PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$Outbound
    | undefined;
  independence_day?:
    | PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$Outbound
    | undefined;
  labor_day?:
    | PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$Outbound
    | undefined;
  columbus_day?:
    | PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$Outbound
    | undefined;
  veterans_day?:
    | PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$Outbound
    | undefined;
  thanksgiving?:
    | PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$Outbound
    | undefined;
  christmas_day?:
    | PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$Outbound
    | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays
  > = z.object({
    newYearsDay: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyNewYearsDay$outboundSchema
    ).optional(),
    mlkDay: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyMlkDay$outboundSchema
    ).optional(),
    presidentsDay: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyPresidentsDay$outboundSchema
    ).optional(),
    memorialDay: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyMemorialDay$outboundSchema
    ).optional(),
    juneteenth: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyJuneteenth$outboundSchema
    ).optional(),
    independenceDay: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyIndependenceDay$outboundSchema
    ).optional(),
    laborDay: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyLaborDay$outboundSchema
    ).optional(),
    columbusDay: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyColumbusDay$outboundSchema
    ).optional(),
    veteransDay: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyVeteransDay$outboundSchema
    ).optional(),
    thanksgiving: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyThanksgiving$outboundSchema
    ).optional(),
    christmasDay: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyChristmasDay$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      newYearsDay: "new_years_day",
      mlkDay: "mlk_day",
      presidentsDay: "presidents_day",
      memorialDay: "memorial_day",
      independenceDay: "independence_day",
      laborDay: "labor_day",
      columbusDay: "columbus_day",
      veteransDay: "veterans_day",
      christmasDay: "christmas_day",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyFederalHolidaysToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyFederalHolidays:
    PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyFederalHolidays,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyFederalHolidaysFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    version: z.string(),
    federal_holidays: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "federal_holidays": "federalHolidays",
    });
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$Outbound = {
  version: string;
  federal_holidays?:
    | PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$Outbound
    | undefined;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyRequestBody
  > = z.object({
    version: z.string(),
    federalHolidays: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyFederalHolidays$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      federalHolidays: "federal_holidays",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyRequestBodyToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyRequestBody:
    PutCompaniesCompanyUuidHolidayPayPolicyRequestBody,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyRequestBody,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyRequestBody' from JSON`,
  );
}

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRequest$inboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_uuid: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
    RequestBody: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_uuid": "companyUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutCompaniesCompanyUuidHolidayPayPolicyRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$Outbound;
};

/** @internal */
export const PutCompaniesCompanyUuidHolidayPayPolicyRequest$outboundSchema:
  z.ZodType<
    PutCompaniesCompanyUuidHolidayPayPolicyRequest$Outbound,
    z.ZodTypeDef,
    PutCompaniesCompanyUuidHolidayPayPolicyRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
    requestBody: z.lazy(() =>
      PutCompaniesCompanyUuidHolidayPayPolicyRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCompaniesCompanyUuidHolidayPayPolicyRequest$ {
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRequest$inboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutCompaniesCompanyUuidHolidayPayPolicyRequest$outboundSchema;
  /** @deprecated use `PutCompaniesCompanyUuidHolidayPayPolicyRequest$Outbound` instead. */
  export type Outbound =
    PutCompaniesCompanyUuidHolidayPayPolicyRequest$Outbound;
}

export function putCompaniesCompanyUuidHolidayPayPolicyRequestToJSON(
  putCompaniesCompanyUuidHolidayPayPolicyRequest:
    PutCompaniesCompanyUuidHolidayPayPolicyRequest,
): string {
  return JSON.stringify(
    PutCompaniesCompanyUuidHolidayPayPolicyRequest$outboundSchema.parse(
      putCompaniesCompanyUuidHolidayPayPolicyRequest,
    ),
  );
}

export function putCompaniesCompanyUuidHolidayPayPolicyRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutCompaniesCompanyUuidHolidayPayPolicyRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutCompaniesCompanyUuidHolidayPayPolicyRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PutCompaniesCompanyUuidHolidayPayPolicyRequest' from JSON`,
  );
}
