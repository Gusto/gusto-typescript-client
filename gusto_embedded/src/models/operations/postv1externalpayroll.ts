/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1ExternalPayrollRequestBody = {
  /**
   * External payroll's check date.
   */
  checkDate: string;
  /**
   * External payroll's pay period start date.
   */
  paymentPeriodStartDate: string;
  /**
   * External payroll's pay period end date.
   */
  paymentPeriodEndDate: string;
};

export type PostV1ExternalPayrollRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PostV1ExternalPayrollRequestBody;
};

/** @internal */
export const PostV1ExternalPayrollRequestBody$inboundSchema: z.ZodType<
  PostV1ExternalPayrollRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  check_date: z.string(),
  payment_period_start_date: z.string(),
  payment_period_end_date: z.string(),
}).transform((v) => {
  return remap$(v, {
    "check_date": "checkDate",
    "payment_period_start_date": "paymentPeriodStartDate",
    "payment_period_end_date": "paymentPeriodEndDate",
  });
});

/** @internal */
export type PostV1ExternalPayrollRequestBody$Outbound = {
  check_date: string;
  payment_period_start_date: string;
  payment_period_end_date: string;
};

/** @internal */
export const PostV1ExternalPayrollRequestBody$outboundSchema: z.ZodType<
  PostV1ExternalPayrollRequestBody$Outbound,
  z.ZodTypeDef,
  PostV1ExternalPayrollRequestBody
> = z.object({
  checkDate: z.string(),
  paymentPeriodStartDate: z.string(),
  paymentPeriodEndDate: z.string(),
}).transform((v) => {
  return remap$(v, {
    checkDate: "check_date",
    paymentPeriodStartDate: "payment_period_start_date",
    paymentPeriodEndDate: "payment_period_end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1ExternalPayrollRequestBody$ {
  /** @deprecated use `PostV1ExternalPayrollRequestBody$inboundSchema` instead. */
  export const inboundSchema = PostV1ExternalPayrollRequestBody$inboundSchema;
  /** @deprecated use `PostV1ExternalPayrollRequestBody$outboundSchema` instead. */
  export const outboundSchema = PostV1ExternalPayrollRequestBody$outboundSchema;
  /** @deprecated use `PostV1ExternalPayrollRequestBody$Outbound` instead. */
  export type Outbound = PostV1ExternalPayrollRequestBody$Outbound;
}

export function postV1ExternalPayrollRequestBodyToJSON(
  postV1ExternalPayrollRequestBody: PostV1ExternalPayrollRequestBody,
): string {
  return JSON.stringify(
    PostV1ExternalPayrollRequestBody$outboundSchema.parse(
      postV1ExternalPayrollRequestBody,
    ),
  );
}

export function postV1ExternalPayrollRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PostV1ExternalPayrollRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1ExternalPayrollRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1ExternalPayrollRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1ExternalPayrollRequest$inboundSchema: z.ZodType<
  PostV1ExternalPayrollRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
  RequestBody: z.lazy(() => PostV1ExternalPayrollRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PostV1ExternalPayrollRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostV1ExternalPayrollRequestBody$Outbound;
};

/** @internal */
export const PostV1ExternalPayrollRequest$outboundSchema: z.ZodType<
  PostV1ExternalPayrollRequest$Outbound,
  z.ZodTypeDef,
  PostV1ExternalPayrollRequest
> = z.object({
  companyUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
  requestBody: z.lazy(() => PostV1ExternalPayrollRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1ExternalPayrollRequest$ {
  /** @deprecated use `PostV1ExternalPayrollRequest$inboundSchema` instead. */
  export const inboundSchema = PostV1ExternalPayrollRequest$inboundSchema;
  /** @deprecated use `PostV1ExternalPayrollRequest$outboundSchema` instead. */
  export const outboundSchema = PostV1ExternalPayrollRequest$outboundSchema;
  /** @deprecated use `PostV1ExternalPayrollRequest$Outbound` instead. */
  export type Outbound = PostV1ExternalPayrollRequest$Outbound;
}

export function postV1ExternalPayrollRequestToJSON(
  postV1ExternalPayrollRequest: PostV1ExternalPayrollRequest,
): string {
  return JSON.stringify(
    PostV1ExternalPayrollRequest$outboundSchema.parse(
      postV1ExternalPayrollRequest,
    ),
  );
}

export function postV1ExternalPayrollRequestFromJSON(
  jsonString: string,
): SafeParseResult<PostV1ExternalPayrollRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PostV1ExternalPayrollRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PostV1ExternalPayrollRequest' from JSON`,
  );
}
