/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude = {
  Benefits: "benefits",
  Deductions: "deductions",
  Taxes: "taxes",
  PayrollStatusMeta: "payroll_status_meta",
} as const;
export type GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude =
  ClosedEnum<typeof GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude>;

export type GetV1CompaniesCompanyIdPayrollsPayrollIdRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the payroll
   */
  payrollId: string;
  /**
   * Include the requested attribute in the response, for multiple attributes comma separate the values, i.e. `?include=benefits,deductions,taxes`
   */
  include?:
    | Array<GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude>
    | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

export type GetV1CompaniesCompanyIdPayrollsPayrollIdResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  payroll?: components.Payroll | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude
  > = z.nativeEnum(GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude);

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude
  > = GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$outboundSchema;
}

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    payroll_id: z.string(),
    include: z.array(
      GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema,
    ).optional(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "payroll_id": "payrollId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$Outbound = {
  company_id: string;
  payroll_id: string;
  include?: Array<string> | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest
  > = z.object({
    companyId: z.string(),
    payrollId: z.string(),
    include: z.array(
      GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$outboundSchema,
    ).optional(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      payrollId: "payroll_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$Outbound;
}

export function getV1CompaniesCompanyIdPayrollsPayrollIdRequestToJSON(
  getV1CompaniesCompanyIdPayrollsPayrollIdRequest:
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdPayrollsPayrollIdRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdPayrollsPayrollIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdPayrollsPayrollIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdPayrollsPayrollIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    Payroll: components.Payroll$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Payroll": "payroll",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  Payroll?: components.Payroll$Outbound | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    payroll: components.Payroll$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      payroll: "Payroll",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$Outbound;
}

export function getV1CompaniesCompanyIdPayrollsPayrollIdResponseToJSON(
  getV1CompaniesCompanyIdPayrollsPayrollIdResponse:
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$outboundSchema.parse(
      getV1CompaniesCompanyIdPayrollsPayrollIdResponse,
    ),
  );
}

export function getV1CompaniesCompanyIdPayrollsPayrollIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdPayrollsPayrollIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdPayrollsPayrollIdResponse' from JSON`,
  );
}
