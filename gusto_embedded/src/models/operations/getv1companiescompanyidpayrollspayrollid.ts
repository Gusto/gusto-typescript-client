/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  PayrollShow,
  PayrollShow$inboundSchema,
  PayrollShow$Outbound,
  PayrollShow$outboundSchema,
} from "../components/payrollshow.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFiveMinus06Minus15: "2025-06-15",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion =
  ClosedEnum<
    typeof GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion
  >;

export const GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude = {
  Benefits: "benefits",
  Deductions: "deductions",
  Taxes: "taxes",
  PayrollStatusMeta: "payroll_status_meta",
  Totals: "totals",
  RiskBlockers: "risk_blockers",
  Reversals: "reversals",
  PayrollTaxes: "payroll_taxes",
} as const;
export type GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude =
  ClosedEnum<typeof GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude>;

/**
 * Field to sort employee compensations by
 */
export const SortBy = {
  FirstName: "first_name",
  LastName: "last_name",
} as const;
/**
 * Field to sort employee compensations by
 */
export type SortBy = ClosedEnum<typeof SortBy>;

export type GetV1CompaniesCompanyIdPayrollsPayrollIdRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the payroll
   */
  payrollId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion
    | undefined;
  /**
   * Include the requested attribute in the response, for multiple attributes comma separate the values, i.e. `?include=benefits,deductions,taxes`
   */
  include?:
    | Array<GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude>
    | undefined;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * Field to sort employee compensations by
   */
  sortBy?: SortBy | undefined;
};

export type GetV1CompaniesCompanyIdPayrollsPayrollIdResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  payrollShow?: PayrollShow | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion
  > = z.nativeEnum(
    GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion,
  );

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion
  > =
    GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude
  > = z.nativeEnum(GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude);

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude
  > = GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$outboundSchema;
}

/** @internal */
export const SortBy$inboundSchema: z.ZodNativeEnum<typeof SortBy> = z
  .nativeEnum(SortBy);

/** @internal */
export const SortBy$outboundSchema: z.ZodNativeEnum<typeof SortBy> =
  SortBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SortBy$ {
  /** @deprecated use `SortBy$inboundSchema` instead. */
  export const inboundSchema = SortBy$inboundSchema;
  /** @deprecated use `SortBy$outboundSchema` instead. */
  export const outboundSchema = SortBy$outboundSchema;
}

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    payroll_id: z.string(),
    "X-Gusto-API-Version":
      GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$inboundSchema
        .default("2025-06-15"),
    include: z.array(
      GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$inboundSchema,
    ).optional(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    sort_by: SortBy$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "payroll_id": "payrollId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "sort_by": "sortBy",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$Outbound = {
  company_id: string;
  payroll_id: string;
  "X-Gusto-API-Version": string;
  include?: Array<string> | undefined;
  page?: number | undefined;
  per?: number | undefined;
  sort_by?: string | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest
  > = z.object({
    companyId: z.string(),
    payrollId: z.string(),
    xGustoAPIVersion:
      GetV1CompaniesCompanyIdPayrollsPayrollIdHeaderXGustoAPIVersion$outboundSchema
        .default("2025-06-15"),
    include: z.array(
      GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude$outboundSchema,
    ).optional(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    sortBy: SortBy$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      payrollId: "payroll_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      sortBy: "sort_by",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$Outbound;
}

export function getV1CompaniesCompanyIdPayrollsPayrollIdRequestToJSON(
  getV1CompaniesCompanyIdPayrollsPayrollIdRequest:
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdPayrollsPayrollIdRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdPayrollsPayrollIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdPayrollsPayrollIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdPayrollsPayrollIdRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$inboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Payroll-Show": PayrollShow$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Payroll-Show": "payrollShow",
    });
  });

/** @internal */
export type GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Payroll-Show"?: PayrollShow$Outbound | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$outboundSchema:
  z.ZodType<
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$Outbound,
    z.ZodTypeDef,
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    payrollShow: PayrollShow$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      payrollShow: "Payroll-Show",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$Outbound` instead. */
  export type Outbound =
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$Outbound;
}

export function getV1CompaniesCompanyIdPayrollsPayrollIdResponseToJSON(
  getV1CompaniesCompanyIdPayrollsPayrollIdResponse:
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$outboundSchema.parse(
      getV1CompaniesCompanyIdPayrollsPayrollIdResponse,
    ),
  );
}

export function getV1CompaniesCompanyIdPayrollsPayrollIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdPayrollsPayrollIdResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdPayrollsPayrollIdResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdPayrollsPayrollIdResponse' from JSON`,
  );
}
