/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RedebitRecoveryCaseRequest = {
  /**
   * The UUID of the recovery case
   */
  recoveryCaseUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type RedebitRecoveryCaseResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export const RedebitRecoveryCaseRequest$inboundSchema: z.ZodType<
  RedebitRecoveryCaseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  recovery_case_uuid: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "recovery_case_uuid": "recoveryCaseUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type RedebitRecoveryCaseRequest$Outbound = {
  recovery_case_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const RedebitRecoveryCaseRequest$outboundSchema: z.ZodType<
  RedebitRecoveryCaseRequest$Outbound,
  z.ZodTypeDef,
  RedebitRecoveryCaseRequest
> = z.object({
  recoveryCaseUuid: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    recoveryCaseUuid: "recovery_case_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedebitRecoveryCaseRequest$ {
  /** @deprecated use `RedebitRecoveryCaseRequest$inboundSchema` instead. */
  export const inboundSchema = RedebitRecoveryCaseRequest$inboundSchema;
  /** @deprecated use `RedebitRecoveryCaseRequest$outboundSchema` instead. */
  export const outboundSchema = RedebitRecoveryCaseRequest$outboundSchema;
  /** @deprecated use `RedebitRecoveryCaseRequest$Outbound` instead. */
  export type Outbound = RedebitRecoveryCaseRequest$Outbound;
}

export function redebitRecoveryCaseRequestToJSON(
  redebitRecoveryCaseRequest: RedebitRecoveryCaseRequest,
): string {
  return JSON.stringify(
    RedebitRecoveryCaseRequest$outboundSchema.parse(redebitRecoveryCaseRequest),
  );
}

export function redebitRecoveryCaseRequestFromJSON(
  jsonString: string,
): SafeParseResult<RedebitRecoveryCaseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedebitRecoveryCaseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedebitRecoveryCaseRequest' from JSON`,
  );
}

/** @internal */
export const RedebitRecoveryCaseResponse$inboundSchema: z.ZodType<
  RedebitRecoveryCaseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
  });
});

/** @internal */
export type RedebitRecoveryCaseResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
};

/** @internal */
export const RedebitRecoveryCaseResponse$outboundSchema: z.ZodType<
  RedebitRecoveryCaseResponse$Outbound,
  z.ZodTypeDef,
  RedebitRecoveryCaseResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RedebitRecoveryCaseResponse$ {
  /** @deprecated use `RedebitRecoveryCaseResponse$inboundSchema` instead. */
  export const inboundSchema = RedebitRecoveryCaseResponse$inboundSchema;
  /** @deprecated use `RedebitRecoveryCaseResponse$outboundSchema` instead. */
  export const outboundSchema = RedebitRecoveryCaseResponse$outboundSchema;
  /** @deprecated use `RedebitRecoveryCaseResponse$Outbound` instead. */
  export type Outbound = RedebitRecoveryCaseResponse$Outbound;
}

export function redebitRecoveryCaseResponseToJSON(
  redebitRecoveryCaseResponse: RedebitRecoveryCaseResponse,
): string {
  return JSON.stringify(
    RedebitRecoveryCaseResponse$outboundSchema.parse(
      redebitRecoveryCaseResponse,
    ),
  );
}

export function redebitRecoveryCaseResponseFromJSON(
  jsonString: string,
): SafeParseResult<RedebitRecoveryCaseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RedebitRecoveryCaseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RedebitRecoveryCaseResponse' from JSON`,
  );
}
