/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  Location,
  Location$inboundSchema,
  Location$Outbound,
  Location$outboundSchema,
} from "../components/location.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompaniesCompanyIdLocationsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1CompaniesCompanyIdLocationsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  locationList?: Array<Location> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdLocationsRequest$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdLocationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdLocationsRequest$Outbound = {
  company_id: string;
  page?: number | undefined;
  per?: number | undefined;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesCompanyIdLocationsRequest$outboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdLocationsRequest$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesCompanyIdLocationsRequest
> = z.object({
  companyId: z.string(),
  page: z.number().int().optional(),
  per: z.number().int().optional(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdLocationsRequest$ {
  /** @deprecated use `GetV1CompaniesCompanyIdLocationsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdLocationsRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdLocationsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdLocationsRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdLocationsRequest$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdLocationsRequest$Outbound;
}

export function getV1CompaniesCompanyIdLocationsRequestToJSON(
  getV1CompaniesCompanyIdLocationsRequest:
    GetV1CompaniesCompanyIdLocationsRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdLocationsRequest$outboundSchema.parse(
      getV1CompaniesCompanyIdLocationsRequest,
    ),
  );
}

export function getV1CompaniesCompanyIdLocationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdLocationsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdLocationsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdLocationsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesCompanyIdLocationsResponse$inboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdLocationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Location-List": z.array(Location$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Location-List": "locationList",
  });
});

/** @internal */
export type GetV1CompaniesCompanyIdLocationsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Location-List"?: Array<Location$Outbound> | undefined;
};

/** @internal */
export const GetV1CompaniesCompanyIdLocationsResponse$outboundSchema: z.ZodType<
  GetV1CompaniesCompanyIdLocationsResponse$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesCompanyIdLocationsResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  locationList: z.array(Location$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    locationList: "Location-List",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesCompanyIdLocationsResponse$ {
  /** @deprecated use `GetV1CompaniesCompanyIdLocationsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompaniesCompanyIdLocationsResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdLocationsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompaniesCompanyIdLocationsResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesCompanyIdLocationsResponse$Outbound` instead. */
  export type Outbound = GetV1CompaniesCompanyIdLocationsResponse$Outbound;
}

export function getV1CompaniesCompanyIdLocationsResponseToJSON(
  getV1CompaniesCompanyIdLocationsResponse:
    GetV1CompaniesCompanyIdLocationsResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesCompanyIdLocationsResponse$outboundSchema.parse(
      getV1CompaniesCompanyIdLocationsResponse,
    ),
  );
}

export function getV1CompaniesCompanyIdLocationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1CompaniesCompanyIdLocationsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompaniesCompanyIdLocationsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetV1CompaniesCompanyIdLocationsResponse' from JSON`,
  );
}
