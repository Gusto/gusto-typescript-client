/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV1CompensationsCompensationIdRequest = {
  /**
   * The UUID of the compensation
   */
  compensationId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

/** @internal */
export const DeleteV1CompensationsCompensationIdRequest$inboundSchema:
  z.ZodType<DeleteV1CompensationsCompensationIdRequest, z.ZodTypeDef, unknown> =
    z.object({
      compensation_id: z.string(),
      "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
    }).transform((v) => {
      return remap$(v, {
        "compensation_id": "compensationId",
        "X-Gusto-API-Version": "xGustoAPIVersion",
      });
    });

/** @internal */
export type DeleteV1CompensationsCompensationIdRequest$Outbound = {
  compensation_id: string;
  "X-Gusto-API-Version"?: string | undefined;
};

/** @internal */
export const DeleteV1CompensationsCompensationIdRequest$outboundSchema:
  z.ZodType<
    DeleteV1CompensationsCompensationIdRequest$Outbound,
    z.ZodTypeDef,
    DeleteV1CompensationsCompensationIdRequest
  > = z.object({
    compensationId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      compensationId: "compensation_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1CompensationsCompensationIdRequest$ {
  /** @deprecated use `DeleteV1CompensationsCompensationIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV1CompensationsCompensationIdRequest$inboundSchema;
  /** @deprecated use `DeleteV1CompensationsCompensationIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV1CompensationsCompensationIdRequest$outboundSchema;
  /** @deprecated use `DeleteV1CompensationsCompensationIdRequest$Outbound` instead. */
  export type Outbound = DeleteV1CompensationsCompensationIdRequest$Outbound;
}

export function deleteV1CompensationsCompensationIdRequestToJSON(
  deleteV1CompensationsCompensationIdRequest:
    DeleteV1CompensationsCompensationIdRequest,
): string {
  return JSON.stringify(
    DeleteV1CompensationsCompensationIdRequest$outboundSchema.parse(
      deleteV1CompensationsCompensationIdRequest,
    ),
  );
}

export function deleteV1CompensationsCompensationIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV1CompensationsCompensationIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV1CompensationsCompensationIdRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'DeleteV1CompensationsCompensationIdRequest' from JSON`,
  );
}
