/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  EmployeeBankAccount,
  EmployeeBankAccount$inboundSchema,
  EmployeeBankAccount$Outbound,
  EmployeeBankAccount$outboundSchema,
} from "../components/employeebankaccount.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostV1EmployeesEmployeeIdBankAccountsAccountType = {
  Checking: "Checking",
  Savings: "Savings",
} as const;
export type PostV1EmployeesEmployeeIdBankAccountsAccountType = ClosedEnum<
  typeof PostV1EmployeesEmployeeIdBankAccountsAccountType
>;

export type PostV1EmployeesEmployeeIdBankAccountsRequestBody = {
  name: string;
  routingNumber: string;
  accountNumber: string;
  accountType: PostV1EmployeesEmployeeIdBankAccountsAccountType;
};

export type PostV1EmployeesEmployeeIdBankAccountsRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PostV1EmployeesEmployeeIdBankAccountsRequestBody;
};

export type PostV1EmployeesEmployeeIdBankAccountsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  employeeBankAccount?: EmployeeBankAccount | undefined;
};

/** @internal */
export const PostV1EmployeesEmployeeIdBankAccountsAccountType$inboundSchema:
  z.ZodNativeEnum<typeof PostV1EmployeesEmployeeIdBankAccountsAccountType> = z
    .nativeEnum(PostV1EmployeesEmployeeIdBankAccountsAccountType);

/** @internal */
export const PostV1EmployeesEmployeeIdBankAccountsAccountType$outboundSchema:
  z.ZodNativeEnum<typeof PostV1EmployeesEmployeeIdBankAccountsAccountType> =
    PostV1EmployeesEmployeeIdBankAccountsAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdBankAccountsAccountType$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsAccountType$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdBankAccountsAccountType$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsAccountType$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdBankAccountsAccountType$outboundSchema;
}

/** @internal */
export const PostV1EmployeesEmployeeIdBankAccountsRequestBody$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdBankAccountsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string(),
    routing_number: z.string(),
    account_number: z.string(),
    account_type:
      PostV1EmployeesEmployeeIdBankAccountsAccountType$inboundSchema,
  }).transform((v) => {
    return remap$(v, {
      "routing_number": "routingNumber",
      "account_number": "accountNumber",
      "account_type": "accountType",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdBankAccountsRequestBody$Outbound = {
  name: string;
  routing_number: string;
  account_number: string;
  account_type: string;
};

/** @internal */
export const PostV1EmployeesEmployeeIdBankAccountsRequestBody$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdBankAccountsRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdBankAccountsRequestBody
  > = z.object({
    name: z.string(),
    routingNumber: z.string(),
    accountNumber: z.string(),
    accountType:
      PostV1EmployeesEmployeeIdBankAccountsAccountType$outboundSchema,
  }).transform((v) => {
    return remap$(v, {
      routingNumber: "routing_number",
      accountNumber: "account_number",
      accountType: "account_type",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdBankAccountsRequestBody$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdBankAccountsRequestBody$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdBankAccountsRequestBody$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1EmployeesEmployeeIdBankAccountsRequestBody$Outbound;
}

export function postV1EmployeesEmployeeIdBankAccountsRequestBodyToJSON(
  postV1EmployeesEmployeeIdBankAccountsRequestBody:
    PostV1EmployeesEmployeeIdBankAccountsRequestBody,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdBankAccountsRequestBody$outboundSchema.parse(
      postV1EmployeesEmployeeIdBankAccountsRequestBody,
    ),
  );
}

export function postV1EmployeesEmployeeIdBankAccountsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdBankAccountsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdBankAccountsRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdBankAccountsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1EmployeesEmployeeIdBankAccountsRequest$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdBankAccountsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PostV1EmployeesEmployeeIdBankAccountsRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdBankAccountsRequest$Outbound = {
  employee_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PostV1EmployeesEmployeeIdBankAccountsRequestBody$Outbound;
};

/** @internal */
export const PostV1EmployeesEmployeeIdBankAccountsRequest$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdBankAccountsRequest$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdBankAccountsRequest
  > = z.object({
    employeeId: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PostV1EmployeesEmployeeIdBankAccountsRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdBankAccountsRequest$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdBankAccountsRequest$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdBankAccountsRequest$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsRequest$Outbound` instead. */
  export type Outbound = PostV1EmployeesEmployeeIdBankAccountsRequest$Outbound;
}

export function postV1EmployeesEmployeeIdBankAccountsRequestToJSON(
  postV1EmployeesEmployeeIdBankAccountsRequest:
    PostV1EmployeesEmployeeIdBankAccountsRequest,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdBankAccountsRequest$outboundSchema.parse(
      postV1EmployeesEmployeeIdBankAccountsRequest,
    ),
  );
}

export function postV1EmployeesEmployeeIdBankAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdBankAccountsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdBankAccountsRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdBankAccountsRequest' from JSON`,
  );
}

/** @internal */
export const PostV1EmployeesEmployeeIdBankAccountsResponse$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdBankAccountsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Employee-Bank-Account": EmployeeBankAccount$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Employee-Bank-Account": "employeeBankAccount",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdBankAccountsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Employee-Bank-Account"?: EmployeeBankAccount$Outbound | undefined;
};

/** @internal */
export const PostV1EmployeesEmployeeIdBankAccountsResponse$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdBankAccountsResponse$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdBankAccountsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    employeeBankAccount: EmployeeBankAccount$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      employeeBankAccount: "Employee-Bank-Account",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdBankAccountsResponse$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdBankAccountsResponse$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdBankAccountsResponse$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdBankAccountsResponse$Outbound` instead. */
  export type Outbound = PostV1EmployeesEmployeeIdBankAccountsResponse$Outbound;
}

export function postV1EmployeesEmployeeIdBankAccountsResponseToJSON(
  postV1EmployeesEmployeeIdBankAccountsResponse:
    PostV1EmployeesEmployeeIdBankAccountsResponse,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdBankAccountsResponse$outboundSchema.parse(
      postV1EmployeesEmployeeIdBankAccountsResponse,
    ),
  );
}

export function postV1EmployeesEmployeeIdBankAccountsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdBankAccountsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdBankAccountsResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdBankAccountsResponse' from JSON`,
  );
}
