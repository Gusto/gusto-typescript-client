/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion =
  {
    TwoThousandAndTwentyFourMinus04Minus01: "2024-04-01",
  } as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion =
  ClosedEnum<
    typeof GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion
  >;

export type GetV1EmployeesEmployeeIdRecurringReimbursementsRequest = {
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion
    | undefined;
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
};

export type GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody = {
  uuid: string;
  employeeUuid: string;
  description: string;
  amount: string;
  version: string;
  createdAt?: string | undefined;
  updatedAt?: string | undefined;
};

export type GetV1EmployeesEmployeeIdRecurringReimbursementsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  responseBodies?:
    | Array<GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody>
    | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion
  > = z.nativeEnum(
    GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion,
  );

/** @internal */
export const GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion
  > =
    GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$inboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "X-Gusto-API-Version":
      GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$inboundSchema
        .default("2024-04-01"),
    employee_id: z.string(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "employee_id": "employeeId",
    });
  });

/** @internal */
export type GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$Outbound = {
  "X-Gusto-API-Version": string;
  employee_id: string;
  page?: number | undefined;
  per?: number | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$outboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$Outbound,
    z.ZodTypeDef,
    GetV1EmployeesEmployeeIdRecurringReimbursementsRequest
  > = z.object({
    xGustoAPIVersion:
      GetV1EmployeesEmployeeIdRecurringReimbursementsHeaderXGustoAPIVersion$outboundSchema
        .default("2024-04-01"),
    employeeId: z.string(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      xGustoAPIVersion: "X-Gusto-API-Version",
      employeeId: "employee_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$Outbound` instead. */
  export type Outbound =
    GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$Outbound;
}

export function getV1EmployeesEmployeeIdRecurringReimbursementsRequestToJSON(
  getV1EmployeesEmployeeIdRecurringReimbursementsRequest:
    GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$outboundSchema.parse(
      getV1EmployeesEmployeeIdRecurringReimbursementsRequest,
    ),
  );
}

export function getV1EmployeesEmployeeIdRecurringReimbursementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeesEmployeeIdRecurringReimbursementsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdRecurringReimbursementsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1EmployeesEmployeeIdRecurringReimbursementsRequest' from JSON`,
  );
}

/** @internal */
export const GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$inboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    uuid: z.string(),
    employee_uuid: z.string(),
    description: z.string(),
    amount: z.string(),
    version: z.string(),
    created_at: z.string().optional(),
    updated_at: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "employee_uuid": "employeeUuid",
      "created_at": "createdAt",
      "updated_at": "updatedAt",
    });
  });

/** @internal */
export type GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$Outbound =
  {
    uuid: string;
    employee_uuid: string;
    description: string;
    amount: string;
    version: string;
    created_at?: string | undefined;
    updated_at?: string | undefined;
  };

/** @internal */
export const GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$outboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$Outbound,
    z.ZodTypeDef,
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody
  > = z.object({
    uuid: z.string(),
    employeeUuid: z.string(),
    description: z.string(),
    amount: z.string(),
    version: z.string(),
    createdAt: z.string().optional(),
    updatedAt: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      employeeUuid: "employee_uuid",
      createdAt: "created_at",
      updatedAt: "updated_at",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$Outbound` instead. */
  export type Outbound =
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$Outbound;
}

export function getV1EmployeesEmployeeIdRecurringReimbursementsResponseBodyToJSON(
  getV1EmployeesEmployeeIdRecurringReimbursementsResponseBody:
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$outboundSchema
      .parse(getV1EmployeesEmployeeIdRecurringReimbursementsResponseBody),
  );
}

export function getV1EmployeesEmployeeIdRecurringReimbursementsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$inboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    responseBodies: z.array(
      z.lazy(() =>
        GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$inboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
    });
  });

/** @internal */
export type GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  responseBodies?:
    | Array<
      GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$Outbound
    >
    | undefined;
};

/** @internal */
export const GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$outboundSchema:
  z.ZodType<
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$Outbound,
    z.ZodTypeDef,
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    responseBodies: z.array(
      z.lazy(() =>
        GetV1EmployeesEmployeeIdRecurringReimbursementsResponseBody$outboundSchema
      ),
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$ {
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$inboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$outboundSchema;
  /** @deprecated use `GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$Outbound` instead. */
  export type Outbound =
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$Outbound;
}

export function getV1EmployeesEmployeeIdRecurringReimbursementsResponseToJSON(
  getV1EmployeesEmployeeIdRecurringReimbursementsResponse:
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponse,
): string {
  return JSON.stringify(
    GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$outboundSchema
      .parse(getV1EmployeesEmployeeIdRecurringReimbursementsResponse),
  );
}

export function getV1EmployeesEmployeeIdRecurringReimbursementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  GetV1EmployeesEmployeeIdRecurringReimbursementsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1EmployeesEmployeeIdRecurringReimbursementsResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'GetV1EmployeesEmployeeIdRecurringReimbursementsResponse' from JSON`,
  );
}
