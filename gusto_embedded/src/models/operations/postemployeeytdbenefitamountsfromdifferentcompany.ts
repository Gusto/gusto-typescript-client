/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  postEmployeeYtdBenefitAmountsFromDifferentCompany:
    components.PostEmployeeYtdBenefitAmountsFromDifferentCompany;
};

/** @internal */
export const PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$inboundSchema:
  z.ZodType<
    PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
    "post-employee-ytd-benefit-amounts-from-different-company": z.lazy(() =>
      components.PostEmployeeYtdBenefitAmountsFromDifferentCompany$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "post-employee-ytd-benefit-amounts-from-different-company":
        "postEmployeeYtdBenefitAmountsFromDifferentCompany",
    });
  });

/** @internal */
export type PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$Outbound =
  {
    employee_id: string;
    "X-Gusto-API-Version": string;
    "post-employee-ytd-benefit-amounts-from-different-company":
      components.PostEmployeeYtdBenefitAmountsFromDifferentCompany$Outbound;
  };

/** @internal */
export const PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$outboundSchema:
  z.ZodType<
    PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$Outbound,
    z.ZodTypeDef,
    PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest
  > = z.object({
    employeeId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
    postEmployeeYtdBenefitAmountsFromDifferentCompany: z.lazy(() =>
      components
        .PostEmployeeYtdBenefitAmountsFromDifferentCompany$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      postEmployeeYtdBenefitAmountsFromDifferentCompany:
        "post-employee-ytd-benefit-amounts-from-different-company",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$ {
  /** @deprecated use `PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$inboundSchema;
  /** @deprecated use `PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$outboundSchema;
  /** @deprecated use `PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$Outbound` instead. */
  export type Outbound =
    PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$Outbound;
}

export function postEmployeeYtdBenefitAmountsFromDifferentCompanyRequestToJSON(
  postEmployeeYtdBenefitAmountsFromDifferentCompanyRequest:
    PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
): string {
  return JSON.stringify(
    PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$outboundSchema
      .parse(postEmployeeYtdBenefitAmountsFromDifferentCompanyRequest),
  );
}

export function postEmployeeYtdBenefitAmountsFromDifferentCompanyRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest' from JSON`,
  );
}
