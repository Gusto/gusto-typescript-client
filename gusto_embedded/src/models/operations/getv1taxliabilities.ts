/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  TaxLiabilitiesSelections,
  TaxLiabilitiesSelections$inboundSchema,
  TaxLiabilitiesSelections$Outbound,
  TaxLiabilitiesSelections$outboundSchema,
} from "../components/taxliabilitiesselections.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1TaxLiabilitiesRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1TaxLiabilitiesResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  taxLiabilitiesList?: Array<Array<TaxLiabilitiesSelections>> | undefined;
};

/** @internal */
export const GetV1TaxLiabilitiesRequest$inboundSchema: z.ZodType<
  GetV1TaxLiabilitiesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1TaxLiabilitiesRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1TaxLiabilitiesRequest$outboundSchema: z.ZodType<
  GetV1TaxLiabilitiesRequest$Outbound,
  z.ZodTypeDef,
  GetV1TaxLiabilitiesRequest
> = z.object({
  companyUuid: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TaxLiabilitiesRequest$ {
  /** @deprecated use `GetV1TaxLiabilitiesRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1TaxLiabilitiesRequest$inboundSchema;
  /** @deprecated use `GetV1TaxLiabilitiesRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1TaxLiabilitiesRequest$outboundSchema;
  /** @deprecated use `GetV1TaxLiabilitiesRequest$Outbound` instead. */
  export type Outbound = GetV1TaxLiabilitiesRequest$Outbound;
}

export function getV1TaxLiabilitiesRequestToJSON(
  getV1TaxLiabilitiesRequest: GetV1TaxLiabilitiesRequest,
): string {
  return JSON.stringify(
    GetV1TaxLiabilitiesRequest$outboundSchema.parse(getV1TaxLiabilitiesRequest),
  );
}

export function getV1TaxLiabilitiesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TaxLiabilitiesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TaxLiabilitiesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TaxLiabilitiesRequest' from JSON`,
  );
}

/** @internal */
export const GetV1TaxLiabilitiesResponse$inboundSchema: z.ZodType<
  GetV1TaxLiabilitiesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "Tax-Liabilities-List": z.array(
    z.array(TaxLiabilitiesSelections$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Tax-Liabilities-List": "taxLiabilitiesList",
  });
});

/** @internal */
export type GetV1TaxLiabilitiesResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Tax-Liabilities-List"?:
    | Array<Array<TaxLiabilitiesSelections$Outbound>>
    | undefined;
};

/** @internal */
export const GetV1TaxLiabilitiesResponse$outboundSchema: z.ZodType<
  GetV1TaxLiabilitiesResponse$Outbound,
  z.ZodTypeDef,
  GetV1TaxLiabilitiesResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  taxLiabilitiesList: z.array(z.array(TaxLiabilitiesSelections$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    taxLiabilitiesList: "Tax-Liabilities-List",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1TaxLiabilitiesResponse$ {
  /** @deprecated use `GetV1TaxLiabilitiesResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1TaxLiabilitiesResponse$inboundSchema;
  /** @deprecated use `GetV1TaxLiabilitiesResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1TaxLiabilitiesResponse$outboundSchema;
  /** @deprecated use `GetV1TaxLiabilitiesResponse$Outbound` instead. */
  export type Outbound = GetV1TaxLiabilitiesResponse$Outbound;
}

export function getV1TaxLiabilitiesResponseToJSON(
  getV1TaxLiabilitiesResponse: GetV1TaxLiabilitiesResponse,
): string {
  return JSON.stringify(
    GetV1TaxLiabilitiesResponse$outboundSchema.parse(
      getV1TaxLiabilitiesResponse,
    ),
  );
}

export function getV1TaxLiabilitiesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1TaxLiabilitiesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1TaxLiabilitiesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1TaxLiabilitiesResponse' from JSON`,
  );
}
