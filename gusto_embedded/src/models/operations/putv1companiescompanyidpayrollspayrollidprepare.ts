/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  PayrollPrepared,
  PayrollPrepared$inboundSchema,
  PayrollPrepared$Outbound,
  PayrollPrepared$outboundSchema,
} from "../components/payrollprepared.js";
import {
  PayrollPrepareSortBy,
  PayrollPrepareSortBy$inboundSchema,
  PayrollPrepareSortBy$outboundSchema,
} from "../components/payrollpreparesortby.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody = {
  /**
   * An array of employee UUIDs. If passed, only those employees payroll items will be prepared.
   */
  employeeUuids?: Array<string> | undefined;
};

export type PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the payroll
   */
  payrollId: string;
  /**
   * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
   */
  page?: number | undefined;
  /**
   * Number of objects per page. For majority of endpoints will default to 25
   */
  per?: number | undefined;
  /**
   * Sort employee compenstations by name. Options: first_name, last_name
   */
  sortBy?: PayrollPrepareSortBy | undefined;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody?:
    | PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody
    | undefined;
};

export type PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse = {
  httpMeta: HTTPMetadata;
  /**
   * A prepared payroll
   */
  payrollPrepared?: PayrollPrepared | undefined;
};

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_uuids: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "employee_uuids": "employeeUuids",
    });
  });

/** @internal */
export type PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$Outbound =
  {
    employee_uuids?: Array<string> | undefined;
  };

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody
  > = z.object({
    employeeUuids: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      employeeUuids: "employee_uuids",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$ {
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$Outbound;
}

export function putV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBodyToJSON(
  putV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody:
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$outboundSchema
      .parse(putV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody),
  );
}

export function putV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    payroll_id: z.string(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    sort_by: PayrollPrepareSortBy$inboundSchema.optional(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
    RequestBody: z.lazy(() =>
      PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "payroll_id": "payrollId",
      "sort_by": "sortBy",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$Outbound = {
  company_id: string;
  payroll_id: string;
  page?: number | undefined;
  per?: number | undefined;
  sort_by?: string | undefined;
  "X-Gusto-API-Version": string;
  RequestBody?:
    | PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest
  > = z.object({
    companyId: z.string(),
    payrollId: z.string(),
    page: z.number().int().optional(),
    per: z.number().int().optional(),
    sortBy: PayrollPrepareSortBy$outboundSchema.optional(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
    requestBody: z.lazy(() =>
      PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      payrollId: "payroll_id",
      sortBy: "sort_by",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$ {
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$Outbound;
}

export function putV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestToJSON(
  putV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest:
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$outboundSchema.parse(
      putV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest,
    ),
  );
}

export function putV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest' from JSON`,
  );
}

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Payroll-Prepared": PayrollPrepared$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Payroll-Prepared": "payrollPrepared",
    });
  });

/** @internal */
export type PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Payroll-Prepared"?: PayrollPrepared$Outbound | undefined;
};

/** @internal */
export const PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    payrollPrepared: PayrollPrepared$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      payrollPrepared: "Payroll-Prepared",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$ {
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$Outbound;
}

export function putV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponseToJSON(
  putV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse:
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$outboundSchema
      .parse(putV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse),
  );
}

export function putV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse' from JSON`,
  );
}
