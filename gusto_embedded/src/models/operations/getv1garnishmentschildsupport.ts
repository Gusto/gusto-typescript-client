/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ChildSupportData,
  ChildSupportData$inboundSchema,
  ChildSupportData$Outbound,
  ChildSupportData$outboundSchema,
} from "../components/childsupportdata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1GarnishmentsChildSupportRequest = {
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1GarnishmentsChildSupportResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  childSupportData?: ChildSupportData | undefined;
};

/** @internal */
export const GetV1GarnishmentsChildSupportRequest$inboundSchema: z.ZodType<
  GetV1GarnishmentsChildSupportRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1GarnishmentsChildSupportRequest$Outbound = {
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1GarnishmentsChildSupportRequest$outboundSchema: z.ZodType<
  GetV1GarnishmentsChildSupportRequest$Outbound,
  z.ZodTypeDef,
  GetV1GarnishmentsChildSupportRequest
> = z.object({
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1GarnishmentsChildSupportRequest$ {
  /** @deprecated use `GetV1GarnishmentsChildSupportRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1GarnishmentsChildSupportRequest$inboundSchema;
  /** @deprecated use `GetV1GarnishmentsChildSupportRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1GarnishmentsChildSupportRequest$outboundSchema;
  /** @deprecated use `GetV1GarnishmentsChildSupportRequest$Outbound` instead. */
  export type Outbound = GetV1GarnishmentsChildSupportRequest$Outbound;
}

export function getV1GarnishmentsChildSupportRequestToJSON(
  getV1GarnishmentsChildSupportRequest: GetV1GarnishmentsChildSupportRequest,
): string {
  return JSON.stringify(
    GetV1GarnishmentsChildSupportRequest$outboundSchema.parse(
      getV1GarnishmentsChildSupportRequest,
    ),
  );
}

export function getV1GarnishmentsChildSupportRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1GarnishmentsChildSupportRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1GarnishmentsChildSupportRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1GarnishmentsChildSupportRequest' from JSON`,
  );
}

/** @internal */
export const GetV1GarnishmentsChildSupportResponse$inboundSchema: z.ZodType<
  GetV1GarnishmentsChildSupportResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  "Child-Support-Data": ChildSupportData$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Child-Support-Data": "childSupportData",
  });
});

/** @internal */
export type GetV1GarnishmentsChildSupportResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Child-Support-Data"?: ChildSupportData$Outbound | undefined;
};

/** @internal */
export const GetV1GarnishmentsChildSupportResponse$outboundSchema: z.ZodType<
  GetV1GarnishmentsChildSupportResponse$Outbound,
  z.ZodTypeDef,
  GetV1GarnishmentsChildSupportResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  childSupportData: ChildSupportData$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    childSupportData: "Child-Support-Data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1GarnishmentsChildSupportResponse$ {
  /** @deprecated use `GetV1GarnishmentsChildSupportResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetV1GarnishmentsChildSupportResponse$inboundSchema;
  /** @deprecated use `GetV1GarnishmentsChildSupportResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetV1GarnishmentsChildSupportResponse$outboundSchema;
  /** @deprecated use `GetV1GarnishmentsChildSupportResponse$Outbound` instead. */
  export type Outbound = GetV1GarnishmentsChildSupportResponse$Outbound;
}

export function getV1GarnishmentsChildSupportResponseToJSON(
  getV1GarnishmentsChildSupportResponse: GetV1GarnishmentsChildSupportResponse,
): string {
  return JSON.stringify(
    GetV1GarnishmentsChildSupportResponse$outboundSchema.parse(
      getV1GarnishmentsChildSupportResponse,
    ),
  );
}

export function getV1GarnishmentsChildSupportResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1GarnishmentsChildSupportResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1GarnishmentsChildSupportResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1GarnishmentsChildSupportResponse' from JSON`,
  );
}
