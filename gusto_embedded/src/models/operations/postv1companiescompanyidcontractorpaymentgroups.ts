/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { RFCDate } from "../../types/rfcdate.js";
import {
  ContractorPaymentGroup,
  ContractorPaymentGroup$inboundSchema,
  ContractorPaymentGroup$Outbound,
  ContractorPaymentGroup$outboundSchema,
} from "../components/contractorpaymentgroup.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
  HistoricalPayment: "Historical Payment",
} as const;
export type PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod =
  ClosedEnum<
    typeof PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod
  >;

export type ContractorPayments = {
  /**
   * The contractor receiving the payment
   */
  contractorUuid?: string | undefined;
  paymentMethod?:
    | PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod
    | undefined;
  /**
   * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
   */
  wage?: number | undefined;
  /**
   * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
   */
  hours?: number | undefined;
  /**
   * If the contractor is on an hourly wage, this is the bonus the contractor earned
   */
  bonus?: number | undefined;
  /**
   * Reimbursed wages for the contractor
   */
  reimbursement?: number | undefined;
};

export type PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody = {
  /**
   * The payment check date
   */
  checkDate: RFCDate;
  /**
   * Optional token used to make contractor payment group creation idempotent.  If provided, string must be unique for each group you intend to create.
   */
  creationToken?: string | undefined;
  contractorPayments: Array<ContractorPayments>;
};

export type PostV1CompaniesCompanyIdContractorPaymentGroupsRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody;
};

export type PostV1CompaniesCompanyIdContractorPaymentGroupsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Full contractor payment group object
   */
  contractorPaymentGroup?: ContractorPaymentGroup | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod
  > = z.nativeEnum(
    PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod,
  );

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod
  > =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$outboundSchema;
}

/** @internal */
export const ContractorPayments$inboundSchema: z.ZodType<
  ContractorPayments,
  z.ZodTypeDef,
  unknown
> = z.object({
  contractor_uuid: z.string().optional(),
  payment_method:
    PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$inboundSchema
      .default("Direct Deposit"),
  wage: z.number().optional(),
  hours: z.number().optional(),
  bonus: z.number().optional(),
  reimbursement: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    "contractor_uuid": "contractorUuid",
    "payment_method": "paymentMethod",
  });
});

/** @internal */
export type ContractorPayments$Outbound = {
  contractor_uuid?: string | undefined;
  payment_method: string;
  wage?: number | undefined;
  hours?: number | undefined;
  bonus?: number | undefined;
  reimbursement?: number | undefined;
};

/** @internal */
export const ContractorPayments$outboundSchema: z.ZodType<
  ContractorPayments$Outbound,
  z.ZodTypeDef,
  ContractorPayments
> = z.object({
  contractorUuid: z.string().optional(),
  paymentMethod:
    PostV1CompaniesCompanyIdContractorPaymentGroupsPaymentMethod$outboundSchema
      .default("Direct Deposit"),
  wage: z.number().optional(),
  hours: z.number().optional(),
  bonus: z.number().optional(),
  reimbursement: z.number().optional(),
}).transform((v) => {
  return remap$(v, {
    contractorUuid: "contractor_uuid",
    paymentMethod: "payment_method",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPayments$ {
  /** @deprecated use `ContractorPayments$inboundSchema` instead. */
  export const inboundSchema = ContractorPayments$inboundSchema;
  /** @deprecated use `ContractorPayments$outboundSchema` instead. */
  export const outboundSchema = ContractorPayments$outboundSchema;
  /** @deprecated use `ContractorPayments$Outbound` instead. */
  export type Outbound = ContractorPayments$Outbound;
}

export function contractorPaymentsToJSON(
  contractorPayments: ContractorPayments,
): string {
  return JSON.stringify(
    ContractorPayments$outboundSchema.parse(contractorPayments),
  );
}

export function contractorPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPayments, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPayments$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPayments' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    check_date: z.string().transform(v => new RFCDate(v)),
    creation_token: z.string().optional(),
    contractor_payments: z.array(
      z.lazy(() => ContractorPayments$inboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      "check_date": "checkDate",
      "creation_token": "creationToken",
      "contractor_payments": "contractorPayments",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$Outbound =
  {
    check_date: string;
    creation_token?: string | undefined;
    contractor_payments: Array<ContractorPayments$Outbound>;
  };

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody
  > = z.object({
    checkDate: z.instanceof(RFCDate).transform(v => v.toString()),
    creationToken: z.string().optional(),
    contractorPayments: z.array(
      z.lazy(() => ContractorPayments$outboundSchema),
    ),
  }).transform((v) => {
    return remap$(v, {
      checkDate: "check_date",
      creationToken: "creation_token",
      contractorPayments: "contractor_payments",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsRequestBodyToJSON(
  postV1CompaniesCompanyIdContractorPaymentGroupsRequestBody:
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$outboundSchema
      .parse(postV1CompaniesCompanyIdContractorPaymentGroupsRequestBody),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version": string;
  RequestBody:
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$Outbound;
};

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequest
  > = z.object({
    companyId: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsRequestToJSON(
  postV1CompaniesCompanyIdContractorPaymentGroupsRequest:
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequest,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$outboundSchema.parse(
      postV1CompaniesCompanyIdContractorPaymentGroupsRequest,
    ),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentGroupsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentGroupsRequest' from JSON`,
  );
}

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Contractor-Payment-Group": ContractorPaymentGroup$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Contractor-Payment-Group": "contractorPaymentGroup",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Contractor-Payment-Group"?: ContractorPaymentGroup$Outbound | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdContractorPaymentGroupsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    contractorPaymentGroup: ContractorPaymentGroup$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      contractorPaymentGroup: "Contractor-Payment-Group",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$ {
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$Outbound;
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsResponseToJSON(
  postV1CompaniesCompanyIdContractorPaymentGroupsResponse:
    PostV1CompaniesCompanyIdContractorPaymentGroupsResponse,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$outboundSchema
      .parse(postV1CompaniesCompanyIdContractorPaymentGroupsResponse),
  );
}

export function postV1CompaniesCompanyIdContractorPaymentGroupsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdContractorPaymentGroupsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdContractorPaymentGroupsResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostV1CompaniesCompanyIdContractorPaymentGroupsResponse' from JSON`,
  );
}
