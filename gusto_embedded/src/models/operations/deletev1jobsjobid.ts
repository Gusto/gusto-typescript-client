/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV1JobsJobIdRequest = {
  /**
   * The UUID of the job
   */
  jobId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type DeleteV1JobsJobIdResponse = {
  httpMeta: HTTPMetadata;
};

/** @internal */
export const DeleteV1JobsJobIdRequest$inboundSchema: z.ZodType<
  DeleteV1JobsJobIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_id: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type DeleteV1JobsJobIdRequest$Outbound = {
  job_id: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const DeleteV1JobsJobIdRequest$outboundSchema: z.ZodType<
  DeleteV1JobsJobIdRequest$Outbound,
  z.ZodTypeDef,
  DeleteV1JobsJobIdRequest
> = z.object({
  jobId: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2025-06-15"),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1JobsJobIdRequest$ {
  /** @deprecated use `DeleteV1JobsJobIdRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteV1JobsJobIdRequest$inboundSchema;
  /** @deprecated use `DeleteV1JobsJobIdRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteV1JobsJobIdRequest$outboundSchema;
  /** @deprecated use `DeleteV1JobsJobIdRequest$Outbound` instead. */
  export type Outbound = DeleteV1JobsJobIdRequest$Outbound;
}

export function deleteV1JobsJobIdRequestToJSON(
  deleteV1JobsJobIdRequest: DeleteV1JobsJobIdRequest,
): string {
  return JSON.stringify(
    DeleteV1JobsJobIdRequest$outboundSchema.parse(deleteV1JobsJobIdRequest),
  );
}

export function deleteV1JobsJobIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1JobsJobIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1JobsJobIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1JobsJobIdRequest' from JSON`,
  );
}

/** @internal */
export const DeleteV1JobsJobIdResponse$inboundSchema: z.ZodType<
  DeleteV1JobsJobIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
  });
});

/** @internal */
export type DeleteV1JobsJobIdResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
};

/** @internal */
export const DeleteV1JobsJobIdResponse$outboundSchema: z.ZodType<
  DeleteV1JobsJobIdResponse$Outbound,
  z.ZodTypeDef,
  DeleteV1JobsJobIdResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1JobsJobIdResponse$ {
  /** @deprecated use `DeleteV1JobsJobIdResponse$inboundSchema` instead. */
  export const inboundSchema = DeleteV1JobsJobIdResponse$inboundSchema;
  /** @deprecated use `DeleteV1JobsJobIdResponse$outboundSchema` instead. */
  export const outboundSchema = DeleteV1JobsJobIdResponse$outboundSchema;
  /** @deprecated use `DeleteV1JobsJobIdResponse$Outbound` instead. */
  export type Outbound = DeleteV1JobsJobIdResponse$Outbound;
}

export function deleteV1JobsJobIdResponseToJSON(
  deleteV1JobsJobIdResponse: DeleteV1JobsJobIdResponse,
): string {
  return JSON.stringify(
    DeleteV1JobsJobIdResponse$outboundSchema.parse(deleteV1JobsJobIdResponse),
  );
}

export function deleteV1JobsJobIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<DeleteV1JobsJobIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteV1JobsJobIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1JobsJobIdResponse' from JSON`,
  );
}
