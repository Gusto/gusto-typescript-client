/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetRecoveryCasesRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

export type GetRecoveryCasesResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  recoveryCaseList?: Array<components.RecoveryCase> | undefined;
};

/** @internal */
export const GetRecoveryCasesRequest$inboundSchema: z.ZodType<
  GetRecoveryCasesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetRecoveryCasesRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetRecoveryCasesRequest$outboundSchema: z.ZodType<
  GetRecoveryCasesRequest$Outbound,
  z.ZodTypeDef,
  GetRecoveryCasesRequest
> = z.object({
  companyUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
    "2024-04-01",
  ),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRecoveryCasesRequest$ {
  /** @deprecated use `GetRecoveryCasesRequest$inboundSchema` instead. */
  export const inboundSchema = GetRecoveryCasesRequest$inboundSchema;
  /** @deprecated use `GetRecoveryCasesRequest$outboundSchema` instead. */
  export const outboundSchema = GetRecoveryCasesRequest$outboundSchema;
  /** @deprecated use `GetRecoveryCasesRequest$Outbound` instead. */
  export type Outbound = GetRecoveryCasesRequest$Outbound;
}

export function getRecoveryCasesRequestToJSON(
  getRecoveryCasesRequest: GetRecoveryCasesRequest,
): string {
  return JSON.stringify(
    GetRecoveryCasesRequest$outboundSchema.parse(getRecoveryCasesRequest),
  );
}

export function getRecoveryCasesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetRecoveryCasesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRecoveryCasesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRecoveryCasesRequest' from JSON`,
  );
}

/** @internal */
export const GetRecoveryCasesResponse$inboundSchema: z.ZodType<
  GetRecoveryCasesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  "Recovery-Case-List": z.array(components.RecoveryCase$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Recovery-Case-List": "recoveryCaseList",
  });
});

/** @internal */
export type GetRecoveryCasesResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Recovery-Case-List"?: Array<components.RecoveryCase$Outbound> | undefined;
};

/** @internal */
export const GetRecoveryCasesResponse$outboundSchema: z.ZodType<
  GetRecoveryCasesResponse$Outbound,
  z.ZodTypeDef,
  GetRecoveryCasesResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  recoveryCaseList: z.array(components.RecoveryCase$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    recoveryCaseList: "Recovery-Case-List",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetRecoveryCasesResponse$ {
  /** @deprecated use `GetRecoveryCasesResponse$inboundSchema` instead. */
  export const inboundSchema = GetRecoveryCasesResponse$inboundSchema;
  /** @deprecated use `GetRecoveryCasesResponse$outboundSchema` instead. */
  export const outboundSchema = GetRecoveryCasesResponse$outboundSchema;
  /** @deprecated use `GetRecoveryCasesResponse$Outbound` instead. */
  export type Outbound = GetRecoveryCasesResponse$Outbound;
}

export function getRecoveryCasesResponseToJSON(
  getRecoveryCasesResponse: GetRecoveryCasesResponse,
): string {
  return JSON.stringify(
    GetRecoveryCasesResponse$outboundSchema.parse(getRecoveryCasesResponse),
  );
}

export function getRecoveryCasesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetRecoveryCasesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetRecoveryCasesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetRecoveryCasesResponse' from JSON`,
  );
}
