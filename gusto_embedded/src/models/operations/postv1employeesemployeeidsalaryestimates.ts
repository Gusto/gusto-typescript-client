/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  SalaryEstimate,
  SalaryEstimate$inboundSchema,
  SalaryEstimate$Outbound,
  SalaryEstimate$outboundSchema,
} from "../components/salaryestimate.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion = {
  TwoThousandAndTwentyFourMinus04Minus01: "2024-04-01",
} as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion =
  ClosedEnum<
    typeof PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion
  >;

/**
 * Experience level for this occupation
 */
export const ExperienceLevel = {
  Novice: "novice",
  Intermediate: "intermediate",
  Average: "average",
  Skilled: "skilled",
  Expert: "expert",
} as const;
/**
 * Experience level for this occupation
 */
export type ExperienceLevel = ClosedEnum<typeof ExperienceLevel>;

export type Occupations = {
  /**
   * Bureau of Labor Statistics (BLS) occupation code
   */
  code: string;
  /**
   * Experience level for this occupation
   */
  experienceLevel: ExperienceLevel;
  /**
   * Percentage of time spent in this occupation (as decimal, e.g., 1.0 = 100%)
   */
  timePercentage: string;
  /**
   * Whether this is the primary occupation
   */
  primary?: boolean | undefined;
};

export type PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody = {
  /**
   * The annual net revenue of the business (must be greater than 0)
   */
  annualNetRevenue?: number | null | undefined;
  /**
   * The ZIP code for location-based salary calculations
   */
  zipCode: string;
  /**
   * Array of occupations. Time percentages must sum to 100%.
   */
  occupations: Array<Occupations>;
};

export type PostV1EmployeesEmployeeIdSalaryEstimatesRequest = {
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion
    | undefined;
  /**
   * The UUID of the employee
   */
  employeeId: string;
  requestBody: PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody;
};

export type PostV1EmployeesEmployeeIdSalaryEstimatesResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successfully created
   */
  salaryEstimate?: SalaryEstimate | undefined;
};

/** @internal */
export const PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion
  > = z.nativeEnum(
    PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion,
  );

/** @internal */
export const PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion
  > =
    PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const ExperienceLevel$inboundSchema: z.ZodNativeEnum<
  typeof ExperienceLevel
> = z.nativeEnum(ExperienceLevel);

/** @internal */
export const ExperienceLevel$outboundSchema: z.ZodNativeEnum<
  typeof ExperienceLevel
> = ExperienceLevel$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExperienceLevel$ {
  /** @deprecated use `ExperienceLevel$inboundSchema` instead. */
  export const inboundSchema = ExperienceLevel$inboundSchema;
  /** @deprecated use `ExperienceLevel$outboundSchema` instead. */
  export const outboundSchema = ExperienceLevel$outboundSchema;
}

/** @internal */
export const Occupations$inboundSchema: z.ZodType<
  Occupations,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  experience_level: ExperienceLevel$inboundSchema,
  time_percentage: z.string(),
  primary: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "experience_level": "experienceLevel",
    "time_percentage": "timePercentage",
  });
});

/** @internal */
export type Occupations$Outbound = {
  code: string;
  experience_level: string;
  time_percentage: string;
  primary?: boolean | undefined;
};

/** @internal */
export const Occupations$outboundSchema: z.ZodType<
  Occupations$Outbound,
  z.ZodTypeDef,
  Occupations
> = z.object({
  code: z.string(),
  experienceLevel: ExperienceLevel$outboundSchema,
  timePercentage: z.string(),
  primary: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    experienceLevel: "experience_level",
    timePercentage: "time_percentage",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Occupations$ {
  /** @deprecated use `Occupations$inboundSchema` instead. */
  export const inboundSchema = Occupations$inboundSchema;
  /** @deprecated use `Occupations$outboundSchema` instead. */
  export const outboundSchema = Occupations$outboundSchema;
  /** @deprecated use `Occupations$Outbound` instead. */
  export type Outbound = Occupations$Outbound;
}

export function occupationsToJSON(occupations: Occupations): string {
  return JSON.stringify(Occupations$outboundSchema.parse(occupations));
}

export function occupationsFromJSON(
  jsonString: string,
): SafeParseResult<Occupations, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Occupations$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Occupations' from JSON`,
  );
}

/** @internal */
export const PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    annual_net_revenue: z.nullable(z.number()).optional(),
    zip_code: z.string(),
    occupations: z.array(z.lazy(() => Occupations$inboundSchema)),
  }).transform((v) => {
    return remap$(v, {
      "annual_net_revenue": "annualNetRevenue",
      "zip_code": "zipCode",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$Outbound = {
  annual_net_revenue?: number | null | undefined;
  zip_code: string;
  occupations: Array<Occupations$Outbound>;
};

/** @internal */
export const PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody
  > = z.object({
    annualNetRevenue: z.nullable(z.number()).optional(),
    zipCode: z.string(),
    occupations: z.array(z.lazy(() => Occupations$outboundSchema)),
  }).transform((v) => {
    return remap$(v, {
      annualNetRevenue: "annual_net_revenue",
      zipCode: "zip_code",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$Outbound` instead. */
  export type Outbound =
    PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$Outbound;
}

export function postV1EmployeesEmployeeIdSalaryEstimatesRequestBodyToJSON(
  postV1EmployeesEmployeeIdSalaryEstimatesRequestBody:
    PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$outboundSchema.parse(
      postV1EmployeesEmployeeIdSalaryEstimatesRequestBody,
    ),
  );
}

export function postV1EmployeesEmployeeIdSalaryEstimatesRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody' from JSON`,
  );
}

/** @internal */
export const PostV1EmployeesEmployeeIdSalaryEstimatesRequest$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdSalaryEstimatesRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    "X-Gusto-API-Version":
      PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$inboundSchema
        .default("2024-04-01"),
    employee_id: z.string(),
    RequestBody: z.lazy(() =>
      PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "employee_id": "employeeId",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdSalaryEstimatesRequest$Outbound = {
  "X-Gusto-API-Version": string;
  employee_id: string;
  RequestBody: PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$Outbound;
};

/** @internal */
export const PostV1EmployeesEmployeeIdSalaryEstimatesRequest$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdSalaryEstimatesRequest$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdSalaryEstimatesRequest
  > = z.object({
    xGustoAPIVersion:
      PostV1EmployeesEmployeeIdSalaryEstimatesHeaderXGustoAPIVersion$outboundSchema
        .default("2024-04-01"),
    employeeId: z.string(),
    requestBody: z.lazy(() =>
      PostV1EmployeesEmployeeIdSalaryEstimatesRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      xGustoAPIVersion: "X-Gusto-API-Version",
      employeeId: "employee_id",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdSalaryEstimatesRequest$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdSalaryEstimatesRequest$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdSalaryEstimatesRequest$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesRequest$Outbound` instead. */
  export type Outbound =
    PostV1EmployeesEmployeeIdSalaryEstimatesRequest$Outbound;
}

export function postV1EmployeesEmployeeIdSalaryEstimatesRequestToJSON(
  postV1EmployeesEmployeeIdSalaryEstimatesRequest:
    PostV1EmployeesEmployeeIdSalaryEstimatesRequest,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdSalaryEstimatesRequest$outboundSchema.parse(
      postV1EmployeesEmployeeIdSalaryEstimatesRequest,
    ),
  );
}

export function postV1EmployeesEmployeeIdSalaryEstimatesRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdSalaryEstimatesRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdSalaryEstimatesRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdSalaryEstimatesRequest' from JSON`,
  );
}

/** @internal */
export const PostV1EmployeesEmployeeIdSalaryEstimatesResponse$inboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdSalaryEstimatesResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Salary-Estimate": SalaryEstimate$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Salary-Estimate": "salaryEstimate",
    });
  });

/** @internal */
export type PostV1EmployeesEmployeeIdSalaryEstimatesResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "Salary-Estimate"?: SalaryEstimate$Outbound | undefined;
};

/** @internal */
export const PostV1EmployeesEmployeeIdSalaryEstimatesResponse$outboundSchema:
  z.ZodType<
    PostV1EmployeesEmployeeIdSalaryEstimatesResponse$Outbound,
    z.ZodTypeDef,
    PostV1EmployeesEmployeeIdSalaryEstimatesResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    salaryEstimate: SalaryEstimate$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      salaryEstimate: "Salary-Estimate",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1EmployeesEmployeeIdSalaryEstimatesResponse$ {
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostV1EmployeesEmployeeIdSalaryEstimatesResponse$inboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostV1EmployeesEmployeeIdSalaryEstimatesResponse$outboundSchema;
  /** @deprecated use `PostV1EmployeesEmployeeIdSalaryEstimatesResponse$Outbound` instead. */
  export type Outbound =
    PostV1EmployeesEmployeeIdSalaryEstimatesResponse$Outbound;
}

export function postV1EmployeesEmployeeIdSalaryEstimatesResponseToJSON(
  postV1EmployeesEmployeeIdSalaryEstimatesResponse:
    PostV1EmployeesEmployeeIdSalaryEstimatesResponse,
): string {
  return JSON.stringify(
    PostV1EmployeesEmployeeIdSalaryEstimatesResponse$outboundSchema.parse(
      postV1EmployeesEmployeeIdSalaryEstimatesResponse,
    ),
  );
}

export function postV1EmployeesEmployeeIdSalaryEstimatesResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1EmployeesEmployeeIdSalaryEstimatesResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1EmployeesEmployeeIdSalaryEstimatesResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1EmployeesEmployeeIdSalaryEstimatesResponse' from JSON`,
  );
}
