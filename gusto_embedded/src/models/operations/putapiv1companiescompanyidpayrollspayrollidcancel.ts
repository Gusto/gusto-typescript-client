/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the payroll
   */
  payrollId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

export type PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  payroll?: components.Payroll | undefined;
};

/** @internal */
export const PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$inboundSchema:
  z.ZodType<
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    payroll_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "payroll_id": "payrollId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$Outbound =
  {
    company_id: string;
    payroll_id: string;
    "X-Gusto-API-Version": string;
  };

/** @internal */
export const PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$outboundSchema:
  z.ZodType<
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$Outbound,
    z.ZodTypeDef,
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest
  > = z.object({
    companyId: z.string(),
    payrollId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      payrollId: "payroll_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$ {
  /** @deprecated use `PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$inboundSchema;
  /** @deprecated use `PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$outboundSchema;
  /** @deprecated use `PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$Outbound` instead. */
  export type Outbound =
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$Outbound;
}

export function putApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequestToJSON(
  putApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest:
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest,
): string {
  return JSON.stringify(
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$outboundSchema
      .parse(putApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest),
  );
}

export function putApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest' from JSON`,
  );
}

/** @internal */
export const PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$inboundSchema:
  z.ZodType<
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    Payroll: components.Payroll$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
      "Payroll": "payroll",
    });
  });

/** @internal */
export type PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    Payroll?: components.Payroll$Outbound | undefined;
  };

/** @internal */
export const PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$outboundSchema:
  z.ZodType<
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$Outbound,
    z.ZodTypeDef,
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    payroll: components.Payroll$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
      payroll: "Payroll",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$ {
  /** @deprecated use `PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$inboundSchema` instead. */
  export const inboundSchema =
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$inboundSchema;
  /** @deprecated use `PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$outboundSchema` instead. */
  export const outboundSchema =
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$outboundSchema;
  /** @deprecated use `PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$Outbound` instead. */
  export type Outbound =
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$Outbound;
}

export function putApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponseToJSON(
  putApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse:
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse,
): string {
  return JSON.stringify(
    PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$outboundSchema
      .parse(putApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse),
  );
}

export function putApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse' from JSON`,
  );
}
