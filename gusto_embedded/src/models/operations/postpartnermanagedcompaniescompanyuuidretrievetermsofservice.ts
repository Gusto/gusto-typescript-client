/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody =
  {
    /**
     * The user's email address on Gusto. You can retrieve the user's email via company's `/admins`, `/employees`, `/signatories`, and `/contractors` endpoints.
     */
    email: string;
  };

export type PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest =
  {
    /**
     * The UUID of the company
     */
    companyUuid: string;
    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    xGustoAPIVersion?: VersionHeader | undefined;
    requestBody:
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody;
  };

/**
 * Example response
 */
export type PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody =
  {
    /**
     * Whether the latest terms have been accepted by the user.
     */
    latestTermsAccepted?: boolean | undefined;
  };

export type PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse =
  {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Example response
     */
    object?:
      | PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody
      | undefined;
  };

/** @internal */
export const PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$inboundSchema:
  z.ZodType<
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    email: z.string(),
  });

/** @internal */
export type PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$Outbound =
  {
    email: string;
  };

/** @internal */
export const PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$outboundSchema:
  z.ZodType<
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$Outbound,
    z.ZodTypeDef,
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody
  > = z.object({
    email: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$ {
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$inboundSchema;
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$outboundSchema;
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$Outbound` instead. */
  export type Outbound =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$Outbound;
}

export function postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBodyToJSON(
  postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody:
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody,
): string {
  return JSON.stringify(
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$outboundSchema
      .parse(
        postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody,
      ),
  );
}

export function postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody' from JSON`,
  );
}

/** @internal */
export const PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$inboundSchema:
  z.ZodType<
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_uuid: z.string(),
    "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
    RequestBody: z.lazy(() =>
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_uuid": "companyUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$Outbound =
  {
    company_uuid: string;
    "X-Gusto-API-Version": string;
    RequestBody:
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$Outbound;
  };

/** @internal */
export const PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$outboundSchema:
  z.ZodType<
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$Outbound,
    z.ZodTypeDef,
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest
  > = z.object({
    companyUuid: z.string(),
    xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
    requestBody: z.lazy(() =>
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyUuid: "company_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$ {
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$inboundSchema;
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$outboundSchema;
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$Outbound` instead. */
  export type Outbound =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$Outbound;
}

export function postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestToJSON(
  postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest:
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest,
): string {
  return JSON.stringify(
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$outboundSchema
      .parse(
        postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest,
      ),
  );
}

export function postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest' from JSON`,
  );
}

/** @internal */
export const PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$inboundSchema:
  z.ZodType<
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    latest_terms_accepted: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "latest_terms_accepted": "latestTermsAccepted",
    });
  });

/** @internal */
export type PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$Outbound =
  {
    latest_terms_accepted?: boolean | undefined;
  };

/** @internal */
export const PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$outboundSchema:
  z.ZodType<
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$Outbound,
    z.ZodTypeDef,
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody
  > = z.object({
    latestTermsAccepted: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      latestTermsAccepted: "latest_terms_accepted",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$ {
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$inboundSchema;
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$outboundSchema;
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$Outbound` instead. */
  export type Outbound =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$Outbound;
}

export function postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBodyToJSON(
  postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody:
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody,
): string {
  return JSON.stringify(
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$outboundSchema
      .parse(
        postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody,
      ),
  );
}

export function postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody' from JSON`,
  );
}

/** @internal */
export const PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$inboundSchema:
  z.ZodType<
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    ContentType: z.string(),
    StatusCode: z.number().int(),
    RawResponse: z.instanceof(Response),
    object: z.lazy(() =>
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "ContentType": "contentType",
      "StatusCode": "statusCode",
      "RawResponse": "rawResponse",
    });
  });

/** @internal */
export type PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$Outbound =
  {
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
    object?:
      | PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$Outbound
      | undefined;
  };

/** @internal */
export const PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$outboundSchema:
  z.ZodType<
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$Outbound,
    z.ZodTypeDef,
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse
  > = z.object({
    contentType: z.string(),
    statusCode: z.number().int(),
    rawResponse: z.instanceof(Response).transform(() => {
      throw new Error("Response cannot be serialized");
    }),
    object: z.lazy(() =>
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      contentType: "ContentType",
      statusCode: "StatusCode",
      rawResponse: "RawResponse",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$ {
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$inboundSchema;
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$outboundSchema;
  /** @deprecated use `PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$Outbound` instead. */
  export type Outbound =
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$Outbound;
}

export function postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseToJSON(
  postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse:
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse,
): string {
  return JSON.stringify(
    PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$outboundSchema
      .parse(
        postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse,
      ),
  );
}

export function postPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse' from JSON`,
  );
}
