/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ExternalPayroll,
  ExternalPayroll$inboundSchema,
  ExternalPayroll$Outbound,
  ExternalPayroll$outboundSchema,
} from "../components/externalpayroll.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The earning type for the compensation.
 */
export const EarningType = {
  CompanyPayType: "CompanyPayType",
  CompanyEarningType: "CompanyEarningType",
} as const;
/**
 * The earning type for the compensation.
 */
export type EarningType = ClosedEnum<typeof EarningType>;

/**
 * An array of earnings for the employee. Depends on your company selections, earnings includes wages, hours, bonuses, tips, commission and more.
 */
export type Earnings = {
  /**
   * The hour of the compensation for the pay period.
   */
  hours?: string | undefined;
  /**
   * The amount of the earning.
   */
  amount?: string | undefined;
  /**
   * The ID of the earning.
   */
  earningId?: number | undefined;
  /**
   * The earning type for the compensation.
   */
  earningType?: EarningType | undefined;
};

/**
 * An array of benefits for the employee. Depends on your company selections, benefits include 401k, health insurance and more.
 */
export type Benefits = {
  /**
   * Company contribution amount towards the benefit
   */
  companyContributionAmount?: string | undefined;
  /**
   * Employee deduction amount towards the benefit
   */
  employeeDeductionAmount?: string | undefined;
  /**
   * The ID of the benefit.
   */
  benefitId?: number | undefined;
};

export type Taxes = {
  /**
   * The amount of the tax.
   */
  amount?: string | undefined;
  /**
   * The ID of the tax.
   */
  taxId?: number | undefined;
};

/**
 * Submit wages, benefits, taxes for each employee
 */
export type ExternalPayrollItems = {
  /**
   * The UUID of the employee.
   */
  employeeUuid?: string | undefined;
  earnings?: Array<Earnings> | undefined;
  benefits?: Array<Benefits> | undefined;
  /**
   * An array of taxes for the employee. Depends on your company selections, taxes include federal income tax, social security, medicare, and more.
   */
  taxes?: Array<Taxes> | undefined;
};

export type PutV1ExternalPayrollRequestBody = {
  /**
   * Patch update external payroll items when set to true, otherwise it will overwrite the previous changes.
   */
  replaceFields?: boolean | undefined;
  externalPayrollItems?: Array<ExternalPayrollItems> | undefined;
};

export type PutV1ExternalPayrollRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * The UUID of the external payroll
   */
  externalPayrollId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
  requestBody: PutV1ExternalPayrollRequestBody;
};

export type PutV1ExternalPayrollResponse = {
  httpMeta: HTTPMetadata;
  /**
   * Example response
   */
  externalPayroll?: ExternalPayroll | undefined;
};

/** @internal */
export const EarningType$inboundSchema: z.ZodNativeEnum<typeof EarningType> = z
  .nativeEnum(EarningType);

/** @internal */
export const EarningType$outboundSchema: z.ZodNativeEnum<typeof EarningType> =
  EarningType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EarningType$ {
  /** @deprecated use `EarningType$inboundSchema` instead. */
  export const inboundSchema = EarningType$inboundSchema;
  /** @deprecated use `EarningType$outboundSchema` instead. */
  export const outboundSchema = EarningType$outboundSchema;
}

/** @internal */
export const Earnings$inboundSchema: z.ZodType<
  Earnings,
  z.ZodTypeDef,
  unknown
> = z.object({
  hours: z.string().optional(),
  amount: z.string().optional(),
  earning_id: z.number().int().optional(),
  earning_type: EarningType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "earning_id": "earningId",
    "earning_type": "earningType",
  });
});

/** @internal */
export type Earnings$Outbound = {
  hours?: string | undefined;
  amount?: string | undefined;
  earning_id?: number | undefined;
  earning_type?: string | undefined;
};

/** @internal */
export const Earnings$outboundSchema: z.ZodType<
  Earnings$Outbound,
  z.ZodTypeDef,
  Earnings
> = z.object({
  hours: z.string().optional(),
  amount: z.string().optional(),
  earningId: z.number().int().optional(),
  earningType: EarningType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    earningId: "earning_id",
    earningType: "earning_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Earnings$ {
  /** @deprecated use `Earnings$inboundSchema` instead. */
  export const inboundSchema = Earnings$inboundSchema;
  /** @deprecated use `Earnings$outboundSchema` instead. */
  export const outboundSchema = Earnings$outboundSchema;
  /** @deprecated use `Earnings$Outbound` instead. */
  export type Outbound = Earnings$Outbound;
}

export function earningsToJSON(earnings: Earnings): string {
  return JSON.stringify(Earnings$outboundSchema.parse(earnings));
}

export function earningsFromJSON(
  jsonString: string,
): SafeParseResult<Earnings, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Earnings$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Earnings' from JSON`,
  );
}

/** @internal */
export const Benefits$inboundSchema: z.ZodType<
  Benefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_contribution_amount: z.string().optional(),
  employee_deduction_amount: z.string().optional(),
  benefit_id: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_contribution_amount": "companyContributionAmount",
    "employee_deduction_amount": "employeeDeductionAmount",
    "benefit_id": "benefitId",
  });
});

/** @internal */
export type Benefits$Outbound = {
  company_contribution_amount?: string | undefined;
  employee_deduction_amount?: string | undefined;
  benefit_id?: number | undefined;
};

/** @internal */
export const Benefits$outboundSchema: z.ZodType<
  Benefits$Outbound,
  z.ZodTypeDef,
  Benefits
> = z.object({
  companyContributionAmount: z.string().optional(),
  employeeDeductionAmount: z.string().optional(),
  benefitId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    companyContributionAmount: "company_contribution_amount",
    employeeDeductionAmount: "employee_deduction_amount",
    benefitId: "benefit_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Benefits$ {
  /** @deprecated use `Benefits$inboundSchema` instead. */
  export const inboundSchema = Benefits$inboundSchema;
  /** @deprecated use `Benefits$outboundSchema` instead. */
  export const outboundSchema = Benefits$outboundSchema;
  /** @deprecated use `Benefits$Outbound` instead. */
  export type Outbound = Benefits$Outbound;
}

export function benefitsToJSON(benefits: Benefits): string {
  return JSON.stringify(Benefits$outboundSchema.parse(benefits));
}

export function benefitsFromJSON(
  jsonString: string,
): SafeParseResult<Benefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Benefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Benefits' from JSON`,
  );
}

/** @internal */
export const Taxes$inboundSchema: z.ZodType<Taxes, z.ZodTypeDef, unknown> = z
  .object({
    amount: z.string().optional(),
    tax_id: z.number().int().optional(),
  }).transform((v) => {
    return remap$(v, {
      "tax_id": "taxId",
    });
  });

/** @internal */
export type Taxes$Outbound = {
  amount?: string | undefined;
  tax_id?: number | undefined;
};

/** @internal */
export const Taxes$outboundSchema: z.ZodType<
  Taxes$Outbound,
  z.ZodTypeDef,
  Taxes
> = z.object({
  amount: z.string().optional(),
  taxId: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    taxId: "tax_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Taxes$ {
  /** @deprecated use `Taxes$inboundSchema` instead. */
  export const inboundSchema = Taxes$inboundSchema;
  /** @deprecated use `Taxes$outboundSchema` instead. */
  export const outboundSchema = Taxes$outboundSchema;
  /** @deprecated use `Taxes$Outbound` instead. */
  export type Outbound = Taxes$Outbound;
}

export function taxesToJSON(taxes: Taxes): string {
  return JSON.stringify(Taxes$outboundSchema.parse(taxes));
}

export function taxesFromJSON(
  jsonString: string,
): SafeParseResult<Taxes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Taxes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Taxes' from JSON`,
  );
}

/** @internal */
export const ExternalPayrollItems$inboundSchema: z.ZodType<
  ExternalPayrollItems,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_uuid: z.string().optional(),
  earnings: z.array(z.lazy(() => Earnings$inboundSchema)).optional(),
  benefits: z.array(z.lazy(() => Benefits$inboundSchema)).optional(),
  taxes: z.array(z.lazy(() => Taxes$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
  });
});

/** @internal */
export type ExternalPayrollItems$Outbound = {
  employee_uuid?: string | undefined;
  earnings?: Array<Earnings$Outbound> | undefined;
  benefits?: Array<Benefits$Outbound> | undefined;
  taxes?: Array<Taxes$Outbound> | undefined;
};

/** @internal */
export const ExternalPayrollItems$outboundSchema: z.ZodType<
  ExternalPayrollItems$Outbound,
  z.ZodTypeDef,
  ExternalPayrollItems
> = z.object({
  employeeUuid: z.string().optional(),
  earnings: z.array(z.lazy(() => Earnings$outboundSchema)).optional(),
  benefits: z.array(z.lazy(() => Benefits$outboundSchema)).optional(),
  taxes: z.array(z.lazy(() => Taxes$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalPayrollItems$ {
  /** @deprecated use `ExternalPayrollItems$inboundSchema` instead. */
  export const inboundSchema = ExternalPayrollItems$inboundSchema;
  /** @deprecated use `ExternalPayrollItems$outboundSchema` instead. */
  export const outboundSchema = ExternalPayrollItems$outboundSchema;
  /** @deprecated use `ExternalPayrollItems$Outbound` instead. */
  export type Outbound = ExternalPayrollItems$Outbound;
}

export function externalPayrollItemsToJSON(
  externalPayrollItems: ExternalPayrollItems,
): string {
  return JSON.stringify(
    ExternalPayrollItems$outboundSchema.parse(externalPayrollItems),
  );
}

export function externalPayrollItemsFromJSON(
  jsonString: string,
): SafeParseResult<ExternalPayrollItems, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalPayrollItems$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalPayrollItems' from JSON`,
  );
}

/** @internal */
export const PutV1ExternalPayrollRequestBody$inboundSchema: z.ZodType<
  PutV1ExternalPayrollRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  replace_fields: z.boolean().optional(),
  external_payroll_items: z.array(
    z.lazy(() => ExternalPayrollItems$inboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "replace_fields": "replaceFields",
    "external_payroll_items": "externalPayrollItems",
  });
});

/** @internal */
export type PutV1ExternalPayrollRequestBody$Outbound = {
  replace_fields?: boolean | undefined;
  external_payroll_items?: Array<ExternalPayrollItems$Outbound> | undefined;
};

/** @internal */
export const PutV1ExternalPayrollRequestBody$outboundSchema: z.ZodType<
  PutV1ExternalPayrollRequestBody$Outbound,
  z.ZodTypeDef,
  PutV1ExternalPayrollRequestBody
> = z.object({
  replaceFields: z.boolean().optional(),
  externalPayrollItems: z.array(
    z.lazy(() => ExternalPayrollItems$outboundSchema),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    replaceFields: "replace_fields",
    externalPayrollItems: "external_payroll_items",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ExternalPayrollRequestBody$ {
  /** @deprecated use `PutV1ExternalPayrollRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutV1ExternalPayrollRequestBody$inboundSchema;
  /** @deprecated use `PutV1ExternalPayrollRequestBody$outboundSchema` instead. */
  export const outboundSchema = PutV1ExternalPayrollRequestBody$outboundSchema;
  /** @deprecated use `PutV1ExternalPayrollRequestBody$Outbound` instead. */
  export type Outbound = PutV1ExternalPayrollRequestBody$Outbound;
}

export function putV1ExternalPayrollRequestBodyToJSON(
  putV1ExternalPayrollRequestBody: PutV1ExternalPayrollRequestBody,
): string {
  return JSON.stringify(
    PutV1ExternalPayrollRequestBody$outboundSchema.parse(
      putV1ExternalPayrollRequestBody,
    ),
  );
}

export function putV1ExternalPayrollRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutV1ExternalPayrollRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1ExternalPayrollRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1ExternalPayrollRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1ExternalPayrollRequest$inboundSchema: z.ZodType<
  PutV1ExternalPayrollRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  external_payroll_id: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
  RequestBody: z.lazy(() => PutV1ExternalPayrollRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "external_payroll_id": "externalPayrollId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1ExternalPayrollRequest$Outbound = {
  company_uuid: string;
  external_payroll_id: string;
  "X-Gusto-API-Version": string;
  RequestBody: PutV1ExternalPayrollRequestBody$Outbound;
};

/** @internal */
export const PutV1ExternalPayrollRequest$outboundSchema: z.ZodType<
  PutV1ExternalPayrollRequest$Outbound,
  z.ZodTypeDef,
  PutV1ExternalPayrollRequest
> = z.object({
  companyUuid: z.string(),
  externalPayrollId: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
  requestBody: z.lazy(() => PutV1ExternalPayrollRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    externalPayrollId: "external_payroll_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ExternalPayrollRequest$ {
  /** @deprecated use `PutV1ExternalPayrollRequest$inboundSchema` instead. */
  export const inboundSchema = PutV1ExternalPayrollRequest$inboundSchema;
  /** @deprecated use `PutV1ExternalPayrollRequest$outboundSchema` instead. */
  export const outboundSchema = PutV1ExternalPayrollRequest$outboundSchema;
  /** @deprecated use `PutV1ExternalPayrollRequest$Outbound` instead. */
  export type Outbound = PutV1ExternalPayrollRequest$Outbound;
}

export function putV1ExternalPayrollRequestToJSON(
  putV1ExternalPayrollRequest: PutV1ExternalPayrollRequest,
): string {
  return JSON.stringify(
    PutV1ExternalPayrollRequest$outboundSchema.parse(
      putV1ExternalPayrollRequest,
    ),
  );
}

export function putV1ExternalPayrollRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV1ExternalPayrollRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1ExternalPayrollRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1ExternalPayrollRequest' from JSON`,
  );
}

/** @internal */
export const PutV1ExternalPayrollResponse$inboundSchema: z.ZodType<
  PutV1ExternalPayrollResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: HTTPMetadata$inboundSchema,
  "External-Payroll": ExternalPayroll$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "External-Payroll": "externalPayroll",
  });
});

/** @internal */
export type PutV1ExternalPayrollResponse$Outbound = {
  HttpMeta: HTTPMetadata$Outbound;
  "External-Payroll"?: ExternalPayroll$Outbound | undefined;
};

/** @internal */
export const PutV1ExternalPayrollResponse$outboundSchema: z.ZodType<
  PutV1ExternalPayrollResponse$Outbound,
  z.ZodTypeDef,
  PutV1ExternalPayrollResponse
> = z.object({
  httpMeta: HTTPMetadata$outboundSchema,
  externalPayroll: ExternalPayroll$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    externalPayroll: "External-Payroll",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1ExternalPayrollResponse$ {
  /** @deprecated use `PutV1ExternalPayrollResponse$inboundSchema` instead. */
  export const inboundSchema = PutV1ExternalPayrollResponse$inboundSchema;
  /** @deprecated use `PutV1ExternalPayrollResponse$outboundSchema` instead. */
  export const outboundSchema = PutV1ExternalPayrollResponse$outboundSchema;
  /** @deprecated use `PutV1ExternalPayrollResponse$Outbound` instead. */
  export type Outbound = PutV1ExternalPayrollResponse$Outbound;
}

export function putV1ExternalPayrollResponseToJSON(
  putV1ExternalPayrollResponse: PutV1ExternalPayrollResponse,
): string {
  return JSON.stringify(
    PutV1ExternalPayrollResponse$outboundSchema.parse(
      putV1ExternalPayrollResponse,
    ),
  );
}

export function putV1ExternalPayrollResponseFromJSON(
  jsonString: string,
): SafeParseResult<PutV1ExternalPayrollResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutV1ExternalPayrollResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1ExternalPayrollResponse' from JSON`,
  );
}
