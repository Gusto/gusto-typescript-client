/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the earning type
   */
  earningTypeUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

/** @internal */
export const DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$inboundSchema:
  z.ZodType<
    DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    earning_type_uuid: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "earning_type_uuid": "earningTypeUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
    });
  });

/** @internal */
export type DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$Outbound =
  {
    company_id: string;
    earning_type_uuid: string;
    "X-Gusto-API-Version": string;
  };

/** @internal */
export const DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$outboundSchema:
  z.ZodType<
    DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$Outbound,
    z.ZodTypeDef,
    DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest
  > = z.object({
    companyId: z.string(),
    earningTypeUuid: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.default(
      "2024-04-01",
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      earningTypeUuid: "earning_type_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$ {
  /** @deprecated use `DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$inboundSchema;
  /** @deprecated use `DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$outboundSchema;
  /** @deprecated use `DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$Outbound` instead. */
  export type Outbound =
    DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$Outbound;
}

export function deleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestToJSON(
  deleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest:
    DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest,
): string {
  return JSON.stringify(
    DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$outboundSchema
      .parse(deleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest),
  );
}

export function deleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest' from JSON`,
  );
}
