/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody = {
  /**
   * The name of the custom earning type.
   */
  name?: string | undefined;
};

export type PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the earning type
   */
  earningTypeUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody: PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody;
};

/** @internal */
export const PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    name: z.string().optional(),
  });

/** @internal */
export type PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$Outbound =
  {
    name?: string | undefined;
  };

/** @internal */
export const PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody
  > = z.object({
    name: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$ {
  /** @deprecated use `PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$Outbound;
}

export function putV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBodyToJSON(
  putV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody:
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$outboundSchema
      .parse(putV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody),
  );
}

export function putV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    earning_type_uuid: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
    RequestBody: z.lazy(() =>
      PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "earning_type_uuid": "earningTypeUuid",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$Outbound =
  {
    company_id: string;
    earning_type_uuid: string;
    "X-Gusto-API-Version"?: string | undefined;
    RequestBody:
      PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$Outbound;
  };

/** @internal */
export const PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest
  > = z.object({
    companyId: z.string(),
    earningTypeUuid: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
    requestBody: z.lazy(() =>
      PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      earningTypeUuid: "earning_type_uuid",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$ {
  /** @deprecated use `PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$Outbound;
}

export function putV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestToJSON(
  putV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest:
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$outboundSchema
      .parse(putV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest),
  );
}

export function putV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest' from JSON`,
  );
}
