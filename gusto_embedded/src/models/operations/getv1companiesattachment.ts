/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  CompanyAttachment,
  CompanyAttachment$inboundSchema,
  CompanyAttachment$Outbound,
  CompanyAttachment$outboundSchema,
} from "../components/companyattachment.js";
import {
  VersionHeader,
  VersionHeader$inboundSchema,
  VersionHeader$outboundSchema,
} from "../components/versionheader.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompaniesAttachmentRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the company attachment
   */
  companyAttachmentUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: VersionHeader | undefined;
};

export type GetV1CompaniesAttachmentResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
  /**
   * Example response
   */
  companyAttachment?: CompanyAttachment | undefined;
};

/** @internal */
export const GetV1CompaniesAttachmentRequest$inboundSchema: z.ZodType<
  GetV1CompaniesAttachmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_id: z.string(),
  company_attachment_uuid: z.string(),
  "X-Gusto-API-Version": VersionHeader$inboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    "company_id": "companyId",
    "company_attachment_uuid": "companyAttachmentUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1CompaniesAttachmentRequest$Outbound = {
  company_id: string;
  company_attachment_uuid: string;
  "X-Gusto-API-Version": string;
};

/** @internal */
export const GetV1CompaniesAttachmentRequest$outboundSchema: z.ZodType<
  GetV1CompaniesAttachmentRequest$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesAttachmentRequest
> = z.object({
  companyId: z.string(),
  companyAttachmentUuid: z.string(),
  xGustoAPIVersion: VersionHeader$outboundSchema.default("2024-04-01"),
}).transform((v) => {
  return remap$(v, {
    companyId: "company_id",
    companyAttachmentUuid: "company_attachment_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesAttachmentRequest$ {
  /** @deprecated use `GetV1CompaniesAttachmentRequest$inboundSchema` instead. */
  export const inboundSchema = GetV1CompaniesAttachmentRequest$inboundSchema;
  /** @deprecated use `GetV1CompaniesAttachmentRequest$outboundSchema` instead. */
  export const outboundSchema = GetV1CompaniesAttachmentRequest$outboundSchema;
  /** @deprecated use `GetV1CompaniesAttachmentRequest$Outbound` instead. */
  export type Outbound = GetV1CompaniesAttachmentRequest$Outbound;
}

export function getV1CompaniesAttachmentRequestToJSON(
  getV1CompaniesAttachmentRequest: GetV1CompaniesAttachmentRequest,
): string {
  return JSON.stringify(
    GetV1CompaniesAttachmentRequest$outboundSchema.parse(
      getV1CompaniesAttachmentRequest,
    ),
  );
}

export function getV1CompaniesAttachmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompaniesAttachmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CompaniesAttachmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesAttachmentRequest' from JSON`,
  );
}

/** @internal */
export const GetV1CompaniesAttachmentResponse$inboundSchema: z.ZodType<
  GetV1CompaniesAttachmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  StatusCode: z.number().int(),
  RawResponse: z.instanceof(Response),
  "Company-Attachment": CompanyAttachment$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "ContentType": "contentType",
    "StatusCode": "statusCode",
    "RawResponse": "rawResponse",
    "Company-Attachment": "companyAttachment",
  });
});

/** @internal */
export type GetV1CompaniesAttachmentResponse$Outbound = {
  ContentType: string;
  StatusCode: number;
  RawResponse: never;
  "Company-Attachment"?: CompanyAttachment$Outbound | undefined;
};

/** @internal */
export const GetV1CompaniesAttachmentResponse$outboundSchema: z.ZodType<
  GetV1CompaniesAttachmentResponse$Outbound,
  z.ZodTypeDef,
  GetV1CompaniesAttachmentResponse
> = z.object({
  contentType: z.string(),
  statusCode: z.number().int(),
  rawResponse: z.instanceof(Response).transform(() => {
    throw new Error("Response cannot be serialized");
  }),
  companyAttachment: CompanyAttachment$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contentType: "ContentType",
    statusCode: "StatusCode",
    rawResponse: "RawResponse",
    companyAttachment: "Company-Attachment",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompaniesAttachmentResponse$ {
  /** @deprecated use `GetV1CompaniesAttachmentResponse$inboundSchema` instead. */
  export const inboundSchema = GetV1CompaniesAttachmentResponse$inboundSchema;
  /** @deprecated use `GetV1CompaniesAttachmentResponse$outboundSchema` instead. */
  export const outboundSchema = GetV1CompaniesAttachmentResponse$outboundSchema;
  /** @deprecated use `GetV1CompaniesAttachmentResponse$Outbound` instead. */
  export type Outbound = GetV1CompaniesAttachmentResponse$Outbound;
}

export function getV1CompaniesAttachmentResponseToJSON(
  getV1CompaniesAttachmentResponse: GetV1CompaniesAttachmentResponse,
): string {
  return JSON.stringify(
    GetV1CompaniesAttachmentResponse$outboundSchema.parse(
      getV1CompaniesAttachmentResponse,
    ),
  );
}

export function getV1CompaniesAttachmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompaniesAttachmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetV1CompaniesAttachmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompaniesAttachmentResponse' from JSON`,
  );
}
