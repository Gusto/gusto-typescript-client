/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import {
  ContractorPaymentGroupPartnerDisbursements,
  ContractorPaymentGroupPartnerDisbursements$inboundSchema,
  ContractorPaymentGroupPartnerDisbursements$Outbound,
  ContractorPaymentGroupPartnerDisbursements$outboundSchema,
} from "../components/contractorpaymentgrouppartnerdisbursements.js";
import {
  HTTPMetadata,
  HTTPMetadata$inboundSchema,
  HTTPMetadata$Outbound,
  HTTPMetadata$outboundSchema,
} from "../components/httpmetadata.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion =
  {
    TwoThousandAndTwentyFiveMinus06Minus15: "2025-06-15",
  } as const;
/**
 * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
 */
export type PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion =
  ClosedEnum<
    typeof PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion
  >;

/**
 * Payment method for the contractor
 */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod =
  {
    DirectDeposit: "Direct Deposit",
    Check: "Check",
  } as const;
/**
 * Payment method for the contractor
 */
export type PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod =
  ClosedEnum<
    typeof PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod
  >;

/**
 * Status of the payment disbursement
 */
export const PaymentStatus = {
  Pending: "Pending",
  Paid: "Paid",
  NotPartnerManaged: "Not partner managed",
  ConvertedToCheck: "Converted to check",
} as const;
/**
 * Status of the payment disbursement
 */
export type PaymentStatus = ClosedEnum<typeof PaymentStatus>;

export type Disbursements = {
  /**
   * UUID of the contractor payment
   */
  contractorPaymentUuid: string;
  /**
   * Payment method for the contractor
   */
  paymentMethod?:
    | PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod
    | undefined;
  /**
   * Status of the payment disbursement
   */
  paymentStatus?: PaymentStatus | undefined;
};

export type PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody = {
  disbursements: Array<Disbursements>;
};

export type PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest = {
  /**
   * The UUID of the contractor payment group
   */
  id: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?:
    | PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion
    | undefined;
  requestBody?:
    | PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody
    | undefined;
};

export type PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse = {
  httpMeta: HTTPMetadata;
  /**
   * successful
   */
  contractorPaymentGroupPartnerDisbursements?:
    | ContractorPaymentGroupPartnerDisbursements
    | undefined;
};

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion
  > = z.nativeEnum(
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion,
  );

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion
  > =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$ {
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$inboundSchema;
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$outboundSchema;
}

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$inboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod
  > = z.nativeEnum(
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod,
  );

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$outboundSchema:
  z.ZodNativeEnum<
    typeof PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod
  > =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$ {
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$inboundSchema;
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$outboundSchema;
}

/** @internal */
export const PaymentStatus$inboundSchema: z.ZodNativeEnum<
  typeof PaymentStatus
> = z.nativeEnum(PaymentStatus);

/** @internal */
export const PaymentStatus$outboundSchema: z.ZodNativeEnum<
  typeof PaymentStatus
> = PaymentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentStatus$ {
  /** @deprecated use `PaymentStatus$inboundSchema` instead. */
  export const inboundSchema = PaymentStatus$inboundSchema;
  /** @deprecated use `PaymentStatus$outboundSchema` instead. */
  export const outboundSchema = PaymentStatus$outboundSchema;
}

/** @internal */
export const Disbursements$inboundSchema: z.ZodType<
  Disbursements,
  z.ZodTypeDef,
  unknown
> = z.object({
  contractor_payment_uuid: z.string(),
  payment_method:
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$inboundSchema
      .optional(),
  payment_status: PaymentStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "contractor_payment_uuid": "contractorPaymentUuid",
    "payment_method": "paymentMethod",
    "payment_status": "paymentStatus",
  });
});

/** @internal */
export type Disbursements$Outbound = {
  contractor_payment_uuid: string;
  payment_method?: string | undefined;
  payment_status?: string | undefined;
};

/** @internal */
export const Disbursements$outboundSchema: z.ZodType<
  Disbursements$Outbound,
  z.ZodTypeDef,
  Disbursements
> = z.object({
  contractorPaymentUuid: z.string(),
  paymentMethod:
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsPaymentMethod$outboundSchema
      .optional(),
  paymentStatus: PaymentStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    contractorPaymentUuid: "contractor_payment_uuid",
    paymentMethod: "payment_method",
    paymentStatus: "payment_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Disbursements$ {
  /** @deprecated use `Disbursements$inboundSchema` instead. */
  export const inboundSchema = Disbursements$inboundSchema;
  /** @deprecated use `Disbursements$outboundSchema` instead. */
  export const outboundSchema = Disbursements$outboundSchema;
  /** @deprecated use `Disbursements$Outbound` instead. */
  export type Outbound = Disbursements$Outbound;
}

export function disbursementsToJSON(disbursements: Disbursements): string {
  return JSON.stringify(Disbursements$outboundSchema.parse(disbursements));
}

export function disbursementsFromJSON(
  jsonString: string,
): SafeParseResult<Disbursements, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Disbursements$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Disbursements' from JSON`,
  );
}

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$inboundSchema:
  z.ZodType<
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    disbursements: z.array(z.lazy(() => Disbursements$inboundSchema)),
  });

/** @internal */
export type PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$Outbound =
  {
    disbursements: Array<Disbursements$Outbound>;
  };

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$outboundSchema:
  z.ZodType<
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$Outbound,
    z.ZodTypeDef,
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody
  > = z.object({
    disbursements: z.array(z.lazy(() => Disbursements$outboundSchema)),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$ {
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$inboundSchema;
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$outboundSchema;
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$Outbound` instead. */
  export type Outbound =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$Outbound;
}

export function patchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBodyToJSON(
  patchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody:
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody,
): string {
  return JSON.stringify(
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$outboundSchema
      .parse(patchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody),
  );
}

export function patchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody' from JSON`,
  );
}

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$inboundSchema:
  z.ZodType<
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    id: z.string(),
    "X-Gusto-API-Version":
      PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$inboundSchema
        .default("2025-06-15"),
    RequestBody: z.lazy(() =>
      PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$Outbound =
  {
    id: string;
    "X-Gusto-API-Version": string;
    RequestBody?:
      | PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$Outbound
      | undefined;
  };

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$outboundSchema:
  z.ZodType<
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$Outbound,
    z.ZodTypeDef,
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest
  > = z.object({
    id: z.string(),
    xGustoAPIVersion:
      PatchV1ContractorPaymentGroupsIdPartnerDisbursementsHeaderXGustoAPIVersion$outboundSchema
        .default("2025-06-15"),
    requestBody: z.lazy(() =>
      PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$ {
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$inboundSchema;
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$outboundSchema;
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$Outbound` instead. */
  export type Outbound =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$Outbound;
}

export function patchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestToJSON(
  patchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest:
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest,
): string {
  return JSON.stringify(
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$outboundSchema
      .parse(patchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest),
  );
}

export function patchV1ContractorPaymentGroupsIdPartnerDisbursementsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ContractorPaymentGroupsIdPartnerDisbursementsRequest' from JSON`,
  );
}

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$inboundSchema:
  z.ZodType<
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    HttpMeta: HTTPMetadata$inboundSchema,
    "Contractor-Payment-Group-Partner-Disbursements":
      ContractorPaymentGroupPartnerDisbursements$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "HttpMeta": "httpMeta",
      "Contractor-Payment-Group-Partner-Disbursements":
        "contractorPaymentGroupPartnerDisbursements",
    });
  });

/** @internal */
export type PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$Outbound =
  {
    HttpMeta: HTTPMetadata$Outbound;
    "Contractor-Payment-Group-Partner-Disbursements"?:
      | ContractorPaymentGroupPartnerDisbursements$Outbound
      | undefined;
  };

/** @internal */
export const PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$outboundSchema:
  z.ZodType<
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$Outbound,
    z.ZodTypeDef,
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse
  > = z.object({
    httpMeta: HTTPMetadata$outboundSchema,
    contractorPaymentGroupPartnerDisbursements:
      ContractorPaymentGroupPartnerDisbursements$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      httpMeta: "HttpMeta",
      contractorPaymentGroupPartnerDisbursements:
        "Contractor-Payment-Group-Partner-Disbursements",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$ {
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$inboundSchema` instead. */
  export const inboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$inboundSchema;
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$outboundSchema` instead. */
  export const outboundSchema =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$outboundSchema;
  /** @deprecated use `PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$Outbound` instead. */
  export type Outbound =
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$Outbound;
}

export function patchV1ContractorPaymentGroupsIdPartnerDisbursementsResponseToJSON(
  patchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse:
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse,
): string {
  return JSON.stringify(
    PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$outboundSchema
      .parse(patchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse),
  );
}

export function patchV1ContractorPaymentGroupsIdPartnerDisbursementsResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PatchV1ContractorPaymentGroupsIdPartnerDisbursementsResponse' from JSON`,
  );
}
