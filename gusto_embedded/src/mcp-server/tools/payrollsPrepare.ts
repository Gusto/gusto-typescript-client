/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { payrollsPrepare } from "../../funcs/payrollsPrepare.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    operations
      .PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest$inboundSchema,
};

export const tool$payrollsPrepare: ToolDefinition<typeof args> = {
  name: "payrolls_prepare",
  description: `Prepare a payroll for update

This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates & times.

Notes:
 * Will null out calculated_at & totals if a payroll has already been calculated.
 * Will return the version param used for updating the payroll

scope: \`payrolls:write\``,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await payrollsPrepare(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
