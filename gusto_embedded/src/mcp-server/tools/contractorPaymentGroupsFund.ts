/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { contractorPaymentGroupsFund } from "../../funcs/contractorPaymentGroupsFund.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    operations
      .PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequest$inboundSchema,
};

export const tool$contractorPaymentGroupsFund: ToolDefinition<typeof args> = {
  name: "contractor-payment-groups_fund",
  description: `Fund a contractor payment group [DEMO]

> ðŸš§ Demo action
>
> This action is only available in the Demo environment

Simulate funding a contractor payment group. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment group's \`status\` from \`Unfunded\` to \`Funded\`. A \`Funded\` status is required for generating a contractor payment receipt.

scope: \`payrolls:run\``,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await contractorPaymentGroupsFund(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
