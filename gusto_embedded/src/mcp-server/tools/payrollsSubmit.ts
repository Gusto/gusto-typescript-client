/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { payrollsSubmit } from "../../funcs/payrollsSubmit.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    operations
      .PutV1CompaniesCompanyIdPayrollsPayrollIdSubmitRequest$inboundSchema,
};

export const tool$payrollsSubmit: ToolDefinition<typeof args> = {
  name: "payrolls_submit",
  description: `Submit payroll

Submits an unprocessed payroll to be calculated and run. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, transitions the payroll to the \`processed\` state.

You should poll to ensure that payroll is processed successfully, as async errors only occur after async processing is complete.

If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.

scope: \`payrolls:run\``,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await payrollsSubmit(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    return formatResult(void 0, apiCall);
  },
};
