/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { payrollsSkip } from "../../funcs/payrollsSkip.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PostCompaniesPayrollSkipCompanyUuidRequest$inboundSchema,
};

export const tool$payrollsSkip: ToolDefinition<typeof args> = {
  name: "payrolls_skip",
  description: `Skip a payroll

Submits a $0 payroll for employees associated with the pay schedule to skip payroll. This submission is asynchronous and a successful request responds with a 202 HTTP status. Upon success, the payroll is transitioned to the \`processed\` state.

If the company is blocked from running payroll due to issues like incomplete setup, missing information or other compliance issues, the response will be 422 Unprocessable Entity with a categorization of the blockers as described in the error responses.

scope: \`payrolls:run\``,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await payrollsSkip(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    return formatResult(void 0, apiCall);
  },
};
