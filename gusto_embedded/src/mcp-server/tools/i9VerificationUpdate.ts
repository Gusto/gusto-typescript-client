/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { i9VerificationUpdate } from "../../funcs/i9VerificationUpdate.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    operations.PutV1EmployeesEmployeeIdI9AuthorizationRequest$inboundSchema,
};

export const tool$i9VerificationUpdate: ToolDefinition<typeof args> = {
  name: "i9-verification_update",
  description: `Create or update an employee's I-9 authorization

An employee's I-9 authorization stores information about an employee's authorization status, as well as signatures and other information required to complete the Form I-9 for employment eligibility verification.

If the version is supplied and the employee I-9 authorization exists, this endpoint acts as an update. Otherwise, it will create an employee I-9 authorization.

Validations on this endpoint are conditional:

  * \`document_type\` may be required, depending on \`authorization_status\`.
  * Valid formats for \`document_number\` vary, depending on \`document_type\`.
  * \`country\` is only allowed with \`document_type: 'foreign_passport'\`.
  * \`expiration_date\` is only allowed with \`authorization_status: 'alien'\`.

> ℹ️ Unneeded information is automatically removed during updates.
>
> If an update causes some formerly-required fields to be unneeded, the now-unneeded data will be removed automatically.
>
> **Example:** Updating \`authorization_status\` from \`alien\` to \`citizen\` will cause any data in \`document_type\`, \`document_number\`, \`country\`, and \`expiration_date\` to be removed, since these fields are unused for \`authorization_status:'citizen'\`.

Detailed instructions for completing Form I-9 can be found at https://www.uscis.gov/sites/default/files/document/forms/i-9instr.pdf

scope: \`i9_authorizations:write\`
`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await i9VerificationUpdate(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
