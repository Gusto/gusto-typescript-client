/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { payrollsCreateOffCycle } from "../../funcs/payrollsCreateOffCycle.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.PostV1CompaniesCompanyIdPayrollsRequest$inboundSchema,
};

export const tool$payrollsCreateOffCycle: ToolDefinition<typeof args> = {
  name: "payrolls_create-off-cycle",
  description: `Create an off-cycle payroll

Creates a new, unprocessed, off-cycle payroll.

## \`off_cycle_reason\`
By default:
- External benefits and deductions will be included when the \`off_cycle_reason\` is set to \`Correction\`.
- All benefits and deductions are blocked when the \`off_cycle_reason\` is set to \`Bonus\`.

These elections can be overridden with the \`skip_regular_deductions\` boolean.

scope: \`payrolls:run\``,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await payrollsCreateOffCycle(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
