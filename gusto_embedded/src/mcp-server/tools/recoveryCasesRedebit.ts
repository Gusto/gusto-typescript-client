/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { recoveryCasesRedebit } from "../../funcs/recoveryCasesRedebit.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.RedebitRecoveryCaseRequest$inboundSchema,
};

export const tool$recoveryCasesRedebit: ToolDefinition<typeof args> = {
  name: "recovery-cases_redebit",
  description: `Initiate a redebit for a recovery case

After resolving the underlying bank error, initiate a redebit for an open recovery case. This submission is asynchronous and a successful request responds with a 202 HTTP status.

It may take up to four business days for the ACH debit to process; in the meantime, the status of the recovery case will be in the \`initiated_redebit\` state. When funds are successfully redebited, the recovery case is transitioned to the \`recovered\` state.

If the company has exceeded maximum redebit attempts, or if the recovery case is not in a redebitable state, the response will be 422 Unprocessable Entity.

scope: \`recovery_cases:write\``,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await recoveryCasesRedebit(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    return formatResult(void 0, apiCall);
  },
};
