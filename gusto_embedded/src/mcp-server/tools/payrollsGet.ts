/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { payrollsGet } from "../../funcs/payrollsGet.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    operations.GetV1CompaniesCompanyIdPayrollsPayrollIdRequest$inboundSchema,
};

export const tool$payrollsGet: ToolDefinition<typeof args> = {
  name: "payrolls_get",
  description: `Get a single payroll

Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.

Notes:
* Hour and dollar amounts are returned as string representations of numeric decimals.
* Hours are represented to the thousands place; dollar amounts are represented to the cent.
* Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ).
* To return future payrolls, you must include an \`end_date\` in the future.
* When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits
  * Benefits containing PHI are only visible with the \`employee_benefits:read:phi\` scope

scope: \`payrolls:read\``,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await payrollsGet(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
