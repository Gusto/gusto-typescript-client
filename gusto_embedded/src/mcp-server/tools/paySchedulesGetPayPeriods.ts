/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { paySchedulesGetPayPeriods } from "../../funcs/paySchedulesGetPayPeriods.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: operations.GetV1CompaniesCompanyIdPayPeriodsRequest$inboundSchema,
};

export const tool$paySchedulesGetPayPeriods: ToolDefinition<typeof args> = {
  name: "pay-schedules_get-pay-periods",
  description: `Get pay periods for a company

Pay periods are the foundation of payroll. Compensation, time & attendance, taxes, and expense reports all rely on when they happened. To begin submitting information for a given payroll, we need to agree on the time period.

By default, this endpoint returns pay periods starting from 6 months ago to the date today.  Use the \`start_date\` and \`end_date\` parameters to change the scope of the response.  End dates can be up to 3 months in the future and there is no limit on start dates.

Starting in version '2023-04-01', the eligible_employees attribute was removed from the response.  The eligible employees for a payroll are determined by the employee_compensations returned from the payrolls#prepare endpoint.

scope: \`payrolls:read\``,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await paySchedulesGetPayPeriods(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
