/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { bankAccountsVerify } from "../../funcs/bankAccountsVerify.js";
import * as operations from "../../models/operations/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    operations.PutV1CompaniesCompanyIdBankAccountsVerifyRequest$inboundSchema,
};

export const tool$bankAccountsVerify: ToolDefinition<typeof args> = {
  name: "bank-accounts_verify",
  description: `Verify a company bank account

Verify a company bank account by confirming the two micro-deposits sent to the bank account. Note that the order of the two deposits specified in request parameters does not matter. There's a maximum of 5 verification attempts, after which we will automatically initiate a new set of micro-deposits and require the bank account to be verified with the new micro-deposits.

### Bank account verification in demo

We provide the endpoint \`POST '/v1/companies/{company_id}/bank_accounts/{bank_account_uuid}/send_test_deposits'\` to facilitate bank account verification in the demo environment. This endpoint simulates the micro-deposits transfer and returns them in the response. You can call this endpoint as many times as you wish to retrieve the values of the two micro deposits.

\`\`\`
  POST '/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/bank_accounts/ade55e57-4800-4059-9ecd-fa29cfeb6dd2/send_test_deposits'

  {
    "deposit_1": 0.02,
    "deposit_2": 0.42
  }
\`\`\`

scope: \`company_bank_accounts:write\``,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await bankAccountsVerify(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
