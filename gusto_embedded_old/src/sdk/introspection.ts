/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { introspectionGetTokenInfo } from "../funcs/introspectionGetTokenInfo.js";
import { introspectionRefreshToken } from "../funcs/introspectionRefreshToken.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Introspection extends ClientSDK {
  /**
   * Get info about the current access token
   *
   * @remarks
   * Returns scope and resource information associated with the current access token.
   */
  async getTokenInfo(
    request: operations.GetV1TokenInfoRequest,
    options?: RequestOptions,
  ): Promise<operations.GetV1TokenInfoResponseBody> {
    return unwrapAsync(introspectionGetTokenInfo(
      this,
      request,
      options,
    ));
  }

  /**
   * Refresh access token
   *
   * @remarks
   * Exchange a refresh token for a new access token.
   *
   * The previous `refresh_token` will be revoked on the first usage of the new `access_token`.
   *
   * The `expires_in` value is provided in seconds from when the `access_token` was generated.
   */
  async refreshToken(
    request: operations.RefreshAccessTokenRequest,
    options?: RequestOptions,
  ): Promise<components.Authentication> {
    return unwrapAsync(introspectionRefreshToken(
      this,
      request,
      options,
    ));
  }
}
