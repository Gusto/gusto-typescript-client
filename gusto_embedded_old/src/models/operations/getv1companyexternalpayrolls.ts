/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetV1CompanyExternalPayrollsRequest = {
  /**
   * The UUID of the company
   */
  companyUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

/** @internal */
export const GetV1CompanyExternalPayrollsRequest$inboundSchema: z.ZodType<
  GetV1CompanyExternalPayrollsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  company_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetV1CompanyExternalPayrollsRequest$Outbound = {
  company_uuid: string;
  "X-Gusto-API-Version"?: string | undefined;
};

/** @internal */
export const GetV1CompanyExternalPayrollsRequest$outboundSchema: z.ZodType<
  GetV1CompanyExternalPayrollsRequest$Outbound,
  z.ZodTypeDef,
  GetV1CompanyExternalPayrollsRequest
> = z.object({
  companyUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetV1CompanyExternalPayrollsRequest$ {
  /** @deprecated use `GetV1CompanyExternalPayrollsRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetV1CompanyExternalPayrollsRequest$inboundSchema;
  /** @deprecated use `GetV1CompanyExternalPayrollsRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetV1CompanyExternalPayrollsRequest$outboundSchema;
  /** @deprecated use `GetV1CompanyExternalPayrollsRequest$Outbound` instead. */
  export type Outbound = GetV1CompanyExternalPayrollsRequest$Outbound;
}

export function getV1CompanyExternalPayrollsRequestToJSON(
  getV1CompanyExternalPayrollsRequest: GetV1CompanyExternalPayrollsRequest,
): string {
  return JSON.stringify(
    GetV1CompanyExternalPayrollsRequest$outboundSchema.parse(
      getV1CompanyExternalPayrollsRequest,
    ),
  );
}

export function getV1CompanyExternalPayrollsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetV1CompanyExternalPayrollsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetV1CompanyExternalPayrollsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetV1CompanyExternalPayrollsRequest' from JSON`,
  );
}
