/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetNotificationsNotificationUuidRequest = {
  /**
   * The notification entity_uuid
   */
  notificationUuid: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
};

/** @internal */
export const GetNotificationsNotificationUuidRequest$inboundSchema: z.ZodType<
  GetNotificationsNotificationUuidRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  notification_uuid: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "notification_uuid": "notificationUuid",
    "X-Gusto-API-Version": "xGustoAPIVersion",
  });
});

/** @internal */
export type GetNotificationsNotificationUuidRequest$Outbound = {
  notification_uuid: string;
  "X-Gusto-API-Version"?: string | undefined;
};

/** @internal */
export const GetNotificationsNotificationUuidRequest$outboundSchema: z.ZodType<
  GetNotificationsNotificationUuidRequest$Outbound,
  z.ZodTypeDef,
  GetNotificationsNotificationUuidRequest
> = z.object({
  notificationUuid: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    notificationUuid: "notification_uuid",
    xGustoAPIVersion: "X-Gusto-API-Version",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetNotificationsNotificationUuidRequest$ {
  /** @deprecated use `GetNotificationsNotificationUuidRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetNotificationsNotificationUuidRequest$inboundSchema;
  /** @deprecated use `GetNotificationsNotificationUuidRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetNotificationsNotificationUuidRequest$outboundSchema;
  /** @deprecated use `GetNotificationsNotificationUuidRequest$Outbound` instead. */
  export type Outbound = GetNotificationsNotificationUuidRequest$Outbound;
}

export function getNotificationsNotificationUuidRequestToJSON(
  getNotificationsNotificationUuidRequest:
    GetNotificationsNotificationUuidRequest,
): string {
  return JSON.stringify(
    GetNotificationsNotificationUuidRequest$outboundSchema.parse(
      getNotificationsNotificationUuidRequest,
    ),
  );
}

export function getNotificationsNotificationUuidRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  GetNotificationsNotificationUuidRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetNotificationsNotificationUuidRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetNotificationsNotificationUuidRequest' from JSON`,
  );
}
