/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostV1CompaniesCompanyIdPaySchedulesAssignRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  payScheduleAssignmentBody?: components.PayScheduleAssignmentBody | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdPaySchedulesAssignRequest$inboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdPaySchedulesAssignRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
    "Pay-Schedule-Assignment-Body": components
      .PayScheduleAssignmentBody$inboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "Pay-Schedule-Assignment-Body": "payScheduleAssignmentBody",
    });
  });

/** @internal */
export type PostV1CompaniesCompanyIdPaySchedulesAssignRequest$Outbound = {
  company_id: string;
  "X-Gusto-API-Version"?: string | undefined;
  "Pay-Schedule-Assignment-Body"?:
    | components.PayScheduleAssignmentBody$Outbound
    | undefined;
};

/** @internal */
export const PostV1CompaniesCompanyIdPaySchedulesAssignRequest$outboundSchema:
  z.ZodType<
    PostV1CompaniesCompanyIdPaySchedulesAssignRequest$Outbound,
    z.ZodTypeDef,
    PostV1CompaniesCompanyIdPaySchedulesAssignRequest
  > = z.object({
    companyId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
    payScheduleAssignmentBody: components
      .PayScheduleAssignmentBody$outboundSchema.optional(),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      payScheduleAssignmentBody: "Pay-Schedule-Assignment-Body",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostV1CompaniesCompanyIdPaySchedulesAssignRequest$ {
  /** @deprecated use `PostV1CompaniesCompanyIdPaySchedulesAssignRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostV1CompaniesCompanyIdPaySchedulesAssignRequest$inboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdPaySchedulesAssignRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostV1CompaniesCompanyIdPaySchedulesAssignRequest$outboundSchema;
  /** @deprecated use `PostV1CompaniesCompanyIdPaySchedulesAssignRequest$Outbound` instead. */
  export type Outbound =
    PostV1CompaniesCompanyIdPaySchedulesAssignRequest$Outbound;
}

export function postV1CompaniesCompanyIdPaySchedulesAssignRequestToJSON(
  postV1CompaniesCompanyIdPaySchedulesAssignRequest:
    PostV1CompaniesCompanyIdPaySchedulesAssignRequest,
): string {
  return JSON.stringify(
    PostV1CompaniesCompanyIdPaySchedulesAssignRequest$outboundSchema.parse(
      postV1CompaniesCompanyIdPaySchedulesAssignRequest,
    ),
  );
}

export function postV1CompaniesCompanyIdPaySchedulesAssignRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostV1CompaniesCompanyIdPaySchedulesAssignRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostV1CompaniesCompanyIdPaySchedulesAssignRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostV1CompaniesCompanyIdPaySchedulesAssignRequest' from JSON`,
  );
}
