/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PutV1TerminationsEmployeeIdRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version: string;
  /**
   * The employee's last day of work.
   */
  effectiveDate: string;
  /**
   * If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule.
   */
  runTerminationPayroll?: boolean | undefined;
};

export type PutV1TerminationsEmployeeIdRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody?: PutV1TerminationsEmployeeIdRequestBody | undefined;
};

/** @internal */
export const PutV1TerminationsEmployeeIdRequestBody$inboundSchema: z.ZodType<
  PutV1TerminationsEmployeeIdRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string(),
  effective_date: z.string(),
  run_termination_payroll: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "effective_date": "effectiveDate",
    "run_termination_payroll": "runTerminationPayroll",
  });
});

/** @internal */
export type PutV1TerminationsEmployeeIdRequestBody$Outbound = {
  version: string;
  effective_date: string;
  run_termination_payroll?: boolean | undefined;
};

/** @internal */
export const PutV1TerminationsEmployeeIdRequestBody$outboundSchema: z.ZodType<
  PutV1TerminationsEmployeeIdRequestBody$Outbound,
  z.ZodTypeDef,
  PutV1TerminationsEmployeeIdRequestBody
> = z.object({
  version: z.string(),
  effectiveDate: z.string(),
  runTerminationPayroll: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    effectiveDate: "effective_date",
    runTerminationPayroll: "run_termination_payroll",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1TerminationsEmployeeIdRequestBody$ {
  /** @deprecated use `PutV1TerminationsEmployeeIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1TerminationsEmployeeIdRequestBody$inboundSchema;
  /** @deprecated use `PutV1TerminationsEmployeeIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1TerminationsEmployeeIdRequestBody$outboundSchema;
  /** @deprecated use `PutV1TerminationsEmployeeIdRequestBody$Outbound` instead. */
  export type Outbound = PutV1TerminationsEmployeeIdRequestBody$Outbound;
}

export function putV1TerminationsEmployeeIdRequestBodyToJSON(
  putV1TerminationsEmployeeIdRequestBody:
    PutV1TerminationsEmployeeIdRequestBody,
): string {
  return JSON.stringify(
    PutV1TerminationsEmployeeIdRequestBody$outboundSchema.parse(
      putV1TerminationsEmployeeIdRequestBody,
    ),
  );
}

export function putV1TerminationsEmployeeIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutV1TerminationsEmployeeIdRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1TerminationsEmployeeIdRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1TerminationsEmployeeIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1TerminationsEmployeeIdRequest$inboundSchema: z.ZodType<
  PutV1TerminationsEmployeeIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_id: z.string(),
  "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
  RequestBody: z.lazy(() =>
    PutV1TerminationsEmployeeIdRequestBody$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_id": "employeeId",
    "X-Gusto-API-Version": "xGustoAPIVersion",
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutV1TerminationsEmployeeIdRequest$Outbound = {
  employee_id: string;
  "X-Gusto-API-Version"?: string | undefined;
  RequestBody?: PutV1TerminationsEmployeeIdRequestBody$Outbound | undefined;
};

/** @internal */
export const PutV1TerminationsEmployeeIdRequest$outboundSchema: z.ZodType<
  PutV1TerminationsEmployeeIdRequest$Outbound,
  z.ZodTypeDef,
  PutV1TerminationsEmployeeIdRequest
> = z.object({
  employeeId: z.string(),
  xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
  requestBody: z.lazy(() =>
    PutV1TerminationsEmployeeIdRequestBody$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeId: "employee_id",
    xGustoAPIVersion: "X-Gusto-API-Version",
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1TerminationsEmployeeIdRequest$ {
  /** @deprecated use `PutV1TerminationsEmployeeIdRequest$inboundSchema` instead. */
  export const inboundSchema = PutV1TerminationsEmployeeIdRequest$inboundSchema;
  /** @deprecated use `PutV1TerminationsEmployeeIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1TerminationsEmployeeIdRequest$outboundSchema;
  /** @deprecated use `PutV1TerminationsEmployeeIdRequest$Outbound` instead. */
  export type Outbound = PutV1TerminationsEmployeeIdRequest$Outbound;
}

export function putV1TerminationsEmployeeIdRequestToJSON(
  putV1TerminationsEmployeeIdRequest: PutV1TerminationsEmployeeIdRequest,
): string {
  return JSON.stringify(
    PutV1TerminationsEmployeeIdRequest$outboundSchema.parse(
      putV1TerminationsEmployeeIdRequest,
    ),
  );
}

export function putV1TerminationsEmployeeIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutV1TerminationsEmployeeIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1TerminationsEmployeeIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutV1TerminationsEmployeeIdRequest' from JSON`,
  );
}
