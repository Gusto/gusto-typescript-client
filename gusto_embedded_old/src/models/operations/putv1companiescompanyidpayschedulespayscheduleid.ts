/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The frequency that employees on this pay schedule are paid with Gusto.
 */
export const PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency = {
  EveryWeek: "Every week",
  EveryOtherWeek: "Every other week",
  TwicePerMonth: "Twice per month",
  Monthly: "Monthly",
} as const;
/**
 * The frequency that employees on this pay schedule are paid with Gusto.
 */
export type PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency =
  ClosedEnum<typeof PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency>;

export type PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
   */
  version: string;
  /**
   * The frequency that employees on this pay schedule are paid with Gusto.
   */
  frequency?:
    | PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency
    | undefined;
  /**
   * The first date that employees on this pay schedule are paid with Gusto.
   */
  anchorPayDate?: string | undefined;
  /**
   * The last date of the first pay period. This can be the same date as the anchor pay date.
   */
  anchorEndOfPayPeriod?: string | undefined;
  /**
   * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
   */
  day1?: number | null | undefined;
  /**
   * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the "Twice per month" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
   */
  day2?: number | null | undefined;
  /**
   * A custom pay schedule name.
   */
  customName?: string | undefined;
  /**
   * With Autopilot® enabled, payroll will run automatically one day before your payroll deadlines.
   */
  autoPilot?: boolean | undefined;
};

export type PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest = {
  /**
   * The UUID of the company
   */
  companyId: string;
  /**
   * The UUID of the pay schedule
   */
  payScheduleId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody?:
    | PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody
    | undefined;
};

/** @internal */
export const PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$inboundSchema:
  z.ZodNativeEnum<
    typeof PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency
  > = z.nativeEnum(PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency);

/** @internal */
export const PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$outboundSchema:
  z.ZodNativeEnum<
    typeof PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency
  > = PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$ {
  /** @deprecated use `PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$outboundSchema;
}

/** @internal */
export const PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    version: z.string(),
    frequency:
      PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$inboundSchema
        .optional(),
    anchor_pay_date: z.string().optional(),
    anchor_end_of_pay_period: z.string().optional(),
    day_1: z.nullable(z.number().int()).optional(),
    day_2: z.nullable(z.number().int()).optional(),
    custom_name: z.string().optional(),
    auto_pilot: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      "anchor_pay_date": "anchorPayDate",
      "anchor_end_of_pay_period": "anchorEndOfPayPeriod",
      "day_1": "day1",
      "day_2": "day2",
      "custom_name": "customName",
      "auto_pilot": "autoPilot",
    });
  });

/** @internal */
export type PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$Outbound =
  {
    version: string;
    frequency?: string | undefined;
    anchor_pay_date?: string | undefined;
    anchor_end_of_pay_period?: string | undefined;
    day_1?: number | null | undefined;
    day_2?: number | null | undefined;
    custom_name?: string | undefined;
    auto_pilot?: boolean | undefined;
  };

/** @internal */
export const PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody
  > = z.object({
    version: z.string(),
    frequency:
      PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency$outboundSchema
        .optional(),
    anchorPayDate: z.string().optional(),
    anchorEndOfPayPeriod: z.string().optional(),
    day1: z.nullable(z.number().int()).optional(),
    day2: z.nullable(z.number().int()).optional(),
    customName: z.string().optional(),
    autoPilot: z.boolean().optional(),
  }).transform((v) => {
    return remap$(v, {
      anchorPayDate: "anchor_pay_date",
      anchorEndOfPayPeriod: "anchor_end_of_pay_period",
      day1: "day_1",
      day2: "day_2",
      customName: "custom_name",
      autoPilot: "auto_pilot",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$ {
  /** @deprecated use `PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$Outbound;
}

export function putV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBodyToJSON(
  putV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody:
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$outboundSchema
      .parse(putV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody),
  );
}

export function putV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$inboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    company_id: z.string(),
    pay_schedule_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
    RequestBody: z.lazy(() =>
      PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "company_id": "companyId",
      "pay_schedule_id": "payScheduleId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$Outbound = {
  company_id: string;
  pay_schedule_id: string;
  "X-Gusto-API-Version"?: string | undefined;
  RequestBody?:
    | PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$outboundSchema:
  z.ZodType<
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$Outbound,
    z.ZodTypeDef,
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest
  > = z.object({
    companyId: z.string(),
    payScheduleId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
    requestBody: z.lazy(() =>
      PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      companyId: "company_id",
      payScheduleId: "pay_schedule_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$ {
  /** @deprecated use `PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$inboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$outboundSchema;
  /** @deprecated use `PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$Outbound` instead. */
  export type Outbound =
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$Outbound;
}

export function putV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestToJSON(
  putV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest:
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest,
): string {
  return JSON.stringify(
    PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$outboundSchema
      .parse(putV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest),
  );
}

export function putV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequest' from JSON`,
  );
}
