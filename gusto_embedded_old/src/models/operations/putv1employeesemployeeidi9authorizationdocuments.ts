/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Documents = {
  /**
   * The document type
   */
  documentType: string;
  /**
   * The document title associated with the document type
   */
  documentTitle: string;
  /**
   * The document's document number
   */
  documentNumber?: string | undefined;
  /**
   * The document's expiration date
   */
  expirationDate?: string | undefined;
  /**
   * The document's issuing authority
   */
  issuingAuthority: string;
};

export type PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody = {
  /**
   * An array of I-9 verification documents
   */
  documents: Array<Documents>;
};

export type PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest = {
  /**
   * The UUID of the employee
   */
  employeeId: string;
  /**
   * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
   */
  xGustoAPIVersion?: components.VersionHeader | undefined;
  requestBody?:
    | PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody
    | undefined;
};

/** @internal */
export const Documents$inboundSchema: z.ZodType<
  Documents,
  z.ZodTypeDef,
  unknown
> = z.object({
  document_type: z.string(),
  document_title: z.string(),
  document_number: z.string().optional(),
  expiration_date: z.string().optional(),
  issuing_authority: z.string(),
}).transform((v) => {
  return remap$(v, {
    "document_type": "documentType",
    "document_title": "documentTitle",
    "document_number": "documentNumber",
    "expiration_date": "expirationDate",
    "issuing_authority": "issuingAuthority",
  });
});

/** @internal */
export type Documents$Outbound = {
  document_type: string;
  document_title: string;
  document_number?: string | undefined;
  expiration_date?: string | undefined;
  issuing_authority: string;
};

/** @internal */
export const Documents$outboundSchema: z.ZodType<
  Documents$Outbound,
  z.ZodTypeDef,
  Documents
> = z.object({
  documentType: z.string(),
  documentTitle: z.string(),
  documentNumber: z.string().optional(),
  expirationDate: z.string().optional(),
  issuingAuthority: z.string(),
}).transform((v) => {
  return remap$(v, {
    documentType: "document_type",
    documentTitle: "document_title",
    documentNumber: "document_number",
    expirationDate: "expiration_date",
    issuingAuthority: "issuing_authority",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Documents$ {
  /** @deprecated use `Documents$inboundSchema` instead. */
  export const inboundSchema = Documents$inboundSchema;
  /** @deprecated use `Documents$outboundSchema` instead. */
  export const outboundSchema = Documents$outboundSchema;
  /** @deprecated use `Documents$Outbound` instead. */
  export type Outbound = Documents$Outbound;
}

export function documentsToJSON(documents: Documents): string {
  return JSON.stringify(Documents$outboundSchema.parse(documents));
}

export function documentsFromJSON(
  jsonString: string,
): SafeParseResult<Documents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Documents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Documents' from JSON`,
  );
}

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$inboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    documents: z.array(z.lazy(() => Documents$inboundSchema)),
  });

/** @internal */
export type PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$Outbound =
  {
    documents: Array<Documents$Outbound>;
  };

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$outboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$Outbound,
    z.ZodTypeDef,
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody
  > = z.object({
    documents: z.array(z.lazy(() => Documents$outboundSchema)),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$ {
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$inboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$outboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$Outbound` instead. */
  export type Outbound =
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$Outbound;
}

export function putV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBodyToJSON(
  putV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody:
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody,
): string {
  return JSON.stringify(
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$outboundSchema
      .parse(putV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody),
  );
}

export function putV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody' from JSON`,
  );
}

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$inboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    employee_id: z.string(),
    "X-Gusto-API-Version": components.VersionHeader$inboundSchema.optional(),
    RequestBody: z.lazy(() =>
      PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$inboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      "employee_id": "employeeId",
      "X-Gusto-API-Version": "xGustoAPIVersion",
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$Outbound = {
  employee_id: string;
  "X-Gusto-API-Version"?: string | undefined;
  RequestBody?:
    | PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$Outbound
    | undefined;
};

/** @internal */
export const PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$outboundSchema:
  z.ZodType<
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$Outbound,
    z.ZodTypeDef,
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest
  > = z.object({
    employeeId: z.string(),
    xGustoAPIVersion: components.VersionHeader$outboundSchema.optional(),
    requestBody: z.lazy(() =>
      PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody$outboundSchema
    ).optional(),
  }).transform((v) => {
    return remap$(v, {
      employeeId: "employee_id",
      xGustoAPIVersion: "X-Gusto-API-Version",
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$ {
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$inboundSchema` instead. */
  export const inboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$inboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$outboundSchema` instead. */
  export const outboundSchema =
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$outboundSchema;
  /** @deprecated use `PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$Outbound` instead. */
  export type Outbound =
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$Outbound;
}

export function putV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestToJSON(
  putV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest:
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest,
): string {
  return JSON.stringify(
    PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$outboundSchema
      .parse(putV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest),
  );
}

export function putV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest' from JSON`,
  );
}
