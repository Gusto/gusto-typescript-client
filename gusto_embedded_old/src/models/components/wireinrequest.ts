/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Status of the wire in
 */
export const WireInRequestStatus = {
  AwaitingFunds: "awaiting_funds",
  PendingReview: "pending_review",
  Approved: "approved",
  Rfi: "rfi",
  Canceled: "canceled",
} as const;
/**
 * Status of the wire in
 */
export type WireInRequestStatus = ClosedEnum<typeof WireInRequestStatus>;

/**
 * Unique identifier of the payment
 */
export const PaymentUuid = {
  Payroll: "payroll",
} as const;
/**
 * Unique identifier of the payment
 */
export type PaymentUuid = ClosedEnum<typeof PaymentUuid>;

/**
 * Representation of a wire in request
 */
export type WireInRequest = {
  /**
   * Unique identifier of a wire in request
   */
  uuid?: string | undefined;
  /**
   * Status of the wire in
   */
  status?: WireInRequestStatus | undefined;
  /**
   * Name of bank receiving the wire in
   */
  originationBank?: string | undefined;
  /**
   * Address of bank receiving the wire in
   */
  originationBankAddress?: string | undefined;
  /**
   * Name of the recipient of the wire In
   */
  recipientName?: string | undefined;
  /**
   * Address of the recipient of the wire in
   */
  recipientAddress?: string | undefined;
  /**
   * Recipient bank account number
   */
  recipientAccountNumber?: string | undefined;
  /**
   * Recipient bank routing number
   */
  recipientRoutingNumber?: string | undefined;
  /**
   * Notes for the wire in request
   */
  additionalNotes?: string | undefined;
  /**
   * Name of the bank initiating the wire in
   */
  bankName?: string | undefined;
  /**
   * Date the wire in was sent
   */
  dateSent?: string | undefined;
  /**
   * Include in note with bank to track payment
   */
  uniqueTrackingCode?: string | undefined;
  /**
   * Type of payment for the wire in
   */
  paymentType?: string | undefined;
  /**
   * Unique identifier of the payment
   */
  paymentUuid?: PaymentUuid | undefined;
  /**
   * Amount sent through wire in
   */
  amountSent?: string | undefined;
  /**
   * Requested amount for the payment
   */
  requestedAmount?: string | undefined;
  /**
   * Deadline to submit the wire in
   */
  wireInDeadline?: string | undefined;
};

/** @internal */
export const WireInRequestStatus$inboundSchema: z.ZodNativeEnum<
  typeof WireInRequestStatus
> = z.nativeEnum(WireInRequestStatus);

/** @internal */
export const WireInRequestStatus$outboundSchema: z.ZodNativeEnum<
  typeof WireInRequestStatus
> = WireInRequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WireInRequestStatus$ {
  /** @deprecated use `WireInRequestStatus$inboundSchema` instead. */
  export const inboundSchema = WireInRequestStatus$inboundSchema;
  /** @deprecated use `WireInRequestStatus$outboundSchema` instead. */
  export const outboundSchema = WireInRequestStatus$outboundSchema;
}

/** @internal */
export const PaymentUuid$inboundSchema: z.ZodNativeEnum<typeof PaymentUuid> = z
  .nativeEnum(PaymentUuid);

/** @internal */
export const PaymentUuid$outboundSchema: z.ZodNativeEnum<typeof PaymentUuid> =
  PaymentUuid$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentUuid$ {
  /** @deprecated use `PaymentUuid$inboundSchema` instead. */
  export const inboundSchema = PaymentUuid$inboundSchema;
  /** @deprecated use `PaymentUuid$outboundSchema` instead. */
  export const outboundSchema = PaymentUuid$outboundSchema;
}

/** @internal */
export const WireInRequest$inboundSchema: z.ZodType<
  WireInRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  status: WireInRequestStatus$inboundSchema.optional(),
  origination_bank: z.string().optional(),
  origination_bank_address: z.string().optional(),
  recipient_name: z.string().optional(),
  recipient_address: z.string().optional(),
  recipient_account_number: z.string().optional(),
  recipient_routing_number: z.string().optional(),
  additional_notes: z.string().optional(),
  bank_name: z.string().optional(),
  date_sent: z.string().optional(),
  unique_tracking_code: z.string().optional(),
  payment_type: z.string().optional(),
  payment_uuid: PaymentUuid$inboundSchema.optional(),
  amount_sent: z.string().optional(),
  requested_amount: z.string().optional(),
  wire_in_deadline: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "origination_bank": "originationBank",
    "origination_bank_address": "originationBankAddress",
    "recipient_name": "recipientName",
    "recipient_address": "recipientAddress",
    "recipient_account_number": "recipientAccountNumber",
    "recipient_routing_number": "recipientRoutingNumber",
    "additional_notes": "additionalNotes",
    "bank_name": "bankName",
    "date_sent": "dateSent",
    "unique_tracking_code": "uniqueTrackingCode",
    "payment_type": "paymentType",
    "payment_uuid": "paymentUuid",
    "amount_sent": "amountSent",
    "requested_amount": "requestedAmount",
    "wire_in_deadline": "wireInDeadline",
  });
});

/** @internal */
export type WireInRequest$Outbound = {
  uuid?: string | undefined;
  status?: string | undefined;
  origination_bank?: string | undefined;
  origination_bank_address?: string | undefined;
  recipient_name?: string | undefined;
  recipient_address?: string | undefined;
  recipient_account_number?: string | undefined;
  recipient_routing_number?: string | undefined;
  additional_notes?: string | undefined;
  bank_name?: string | undefined;
  date_sent?: string | undefined;
  unique_tracking_code?: string | undefined;
  payment_type?: string | undefined;
  payment_uuid?: string | undefined;
  amount_sent?: string | undefined;
  requested_amount?: string | undefined;
  wire_in_deadline?: string | undefined;
};

/** @internal */
export const WireInRequest$outboundSchema: z.ZodType<
  WireInRequest$Outbound,
  z.ZodTypeDef,
  WireInRequest
> = z.object({
  uuid: z.string().optional(),
  status: WireInRequestStatus$outboundSchema.optional(),
  originationBank: z.string().optional(),
  originationBankAddress: z.string().optional(),
  recipientName: z.string().optional(),
  recipientAddress: z.string().optional(),
  recipientAccountNumber: z.string().optional(),
  recipientRoutingNumber: z.string().optional(),
  additionalNotes: z.string().optional(),
  bankName: z.string().optional(),
  dateSent: z.string().optional(),
  uniqueTrackingCode: z.string().optional(),
  paymentType: z.string().optional(),
  paymentUuid: PaymentUuid$outboundSchema.optional(),
  amountSent: z.string().optional(),
  requestedAmount: z.string().optional(),
  wireInDeadline: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    originationBank: "origination_bank",
    originationBankAddress: "origination_bank_address",
    recipientName: "recipient_name",
    recipientAddress: "recipient_address",
    recipientAccountNumber: "recipient_account_number",
    recipientRoutingNumber: "recipient_routing_number",
    additionalNotes: "additional_notes",
    bankName: "bank_name",
    dateSent: "date_sent",
    uniqueTrackingCode: "unique_tracking_code",
    paymentType: "payment_type",
    paymentUuid: "payment_uuid",
    amountSent: "amount_sent",
    requestedAmount: "requested_amount",
    wireInDeadline: "wire_in_deadline",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WireInRequest$ {
  /** @deprecated use `WireInRequest$inboundSchema` instead. */
  export const inboundSchema = WireInRequest$inboundSchema;
  /** @deprecated use `WireInRequest$outboundSchema` instead. */
  export const outboundSchema = WireInRequest$outboundSchema;
  /** @deprecated use `WireInRequest$Outbound` instead. */
  export type Outbound = WireInRequest$Outbound;
}

export function wireInRequestToJSON(wireInRequest: WireInRequest): string {
  return JSON.stringify(WireInRequest$outboundSchema.parse(wireInRequest));
}

export function wireInRequestFromJSON(
  jsonString: string,
): SafeParseResult<WireInRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WireInRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WireInRequest' from JSON`,
  );
}
