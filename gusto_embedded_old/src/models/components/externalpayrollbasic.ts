/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
 */
export const ExternalPayrollBasicStatus = {
  Unprocessed: "unprocessed",
  Processed: "processed",
} as const;
/**
 * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
 */
export type ExternalPayrollBasicStatus = ClosedEnum<
  typeof ExternalPayrollBasicStatus
>;

/**
 * The representation of an external payroll with minimal information.
 */
export type ExternalPayrollBasic = {
  /**
   * The UUID of the external payroll.
   */
  uuid: string;
  /**
   * The UUID of the company.
   */
  companyUuid?: string | undefined;
  /**
   * External payroll's check date.
   */
  checkDate?: string | undefined;
  /**
   * External payroll's pay period start date.
   */
  paymentPeriodStartDate?: string | undefined;
  /**
   * External payroll's pay period end date.
   */
  paymentPeriodEndDate?: string | undefined;
  /**
   * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
   */
  status?: ExternalPayrollBasicStatus | undefined;
};

/** @internal */
export const ExternalPayrollBasicStatus$inboundSchema: z.ZodNativeEnum<
  typeof ExternalPayrollBasicStatus
> = z.nativeEnum(ExternalPayrollBasicStatus);

/** @internal */
export const ExternalPayrollBasicStatus$outboundSchema: z.ZodNativeEnum<
  typeof ExternalPayrollBasicStatus
> = ExternalPayrollBasicStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalPayrollBasicStatus$ {
  /** @deprecated use `ExternalPayrollBasicStatus$inboundSchema` instead. */
  export const inboundSchema = ExternalPayrollBasicStatus$inboundSchema;
  /** @deprecated use `ExternalPayrollBasicStatus$outboundSchema` instead. */
  export const outboundSchema = ExternalPayrollBasicStatus$outboundSchema;
}

/** @internal */
export const ExternalPayrollBasic$inboundSchema: z.ZodType<
  ExternalPayrollBasic,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  company_uuid: z.string().optional(),
  check_date: z.string().optional(),
  payment_period_start_date: z.string().optional(),
  payment_period_end_date: z.string().optional(),
  status: ExternalPayrollBasicStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "check_date": "checkDate",
    "payment_period_start_date": "paymentPeriodStartDate",
    "payment_period_end_date": "paymentPeriodEndDate",
  });
});

/** @internal */
export type ExternalPayrollBasic$Outbound = {
  uuid: string;
  company_uuid?: string | undefined;
  check_date?: string | undefined;
  payment_period_start_date?: string | undefined;
  payment_period_end_date?: string | undefined;
  status?: string | undefined;
};

/** @internal */
export const ExternalPayrollBasic$outboundSchema: z.ZodType<
  ExternalPayrollBasic$Outbound,
  z.ZodTypeDef,
  ExternalPayrollBasic
> = z.object({
  uuid: z.string(),
  companyUuid: z.string().optional(),
  checkDate: z.string().optional(),
  paymentPeriodStartDate: z.string().optional(),
  paymentPeriodEndDate: z.string().optional(),
  status: ExternalPayrollBasicStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    checkDate: "check_date",
    paymentPeriodStartDate: "payment_period_start_date",
    paymentPeriodEndDate: "payment_period_end_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ExternalPayrollBasic$ {
  /** @deprecated use `ExternalPayrollBasic$inboundSchema` instead. */
  export const inboundSchema = ExternalPayrollBasic$inboundSchema;
  /** @deprecated use `ExternalPayrollBasic$outboundSchema` instead. */
  export const outboundSchema = ExternalPayrollBasic$outboundSchema;
  /** @deprecated use `ExternalPayrollBasic$Outbound` instead. */
  export type Outbound = ExternalPayrollBasic$Outbound;
}

export function externalPayrollBasicToJSON(
  externalPayrollBasic: ExternalPayrollBasic,
): string {
  return JSON.stringify(
    ExternalPayrollBasic$outboundSchema.parse(externalPayrollBasic),
  );
}

export function externalPayrollBasicFromJSON(
  jsonString: string,
): SafeParseResult<ExternalPayrollBasic, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ExternalPayrollBasic$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ExternalPayrollBasic' from JSON`,
  );
}
