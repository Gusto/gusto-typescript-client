/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Bank account type
 */
export const ContractorBankAccountAccountType = {
  Checking: "Checking",
  Savings: "Savings",
} as const;
/**
 * Bank account type
 */
export type ContractorBankAccountAccountType = ClosedEnum<
  typeof ContractorBankAccountAccountType
>;

/**
 * Example response
 */
export type ContractorBankAccount = {
  /**
   * UUID of the bank account
   */
  uuid: string;
  /**
   * UUID of the employee
   */
  contractorUuid?: string | undefined;
  /**
   * Bank account type
   */
  accountType?: ContractorBankAccountAccountType | undefined;
  /**
   * Name for the bank account
   */
  name?: string | undefined;
  /**
   * The bank account's routing number
   */
  routingNumber?: string | undefined;
  /**
   * Masked bank account number
   */
  hiddenAccountNumber?: string | undefined;
};

/** @internal */
export const ContractorBankAccountAccountType$inboundSchema: z.ZodNativeEnum<
  typeof ContractorBankAccountAccountType
> = z.nativeEnum(ContractorBankAccountAccountType);

/** @internal */
export const ContractorBankAccountAccountType$outboundSchema: z.ZodNativeEnum<
  typeof ContractorBankAccountAccountType
> = ContractorBankAccountAccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorBankAccountAccountType$ {
  /** @deprecated use `ContractorBankAccountAccountType$inboundSchema` instead. */
  export const inboundSchema = ContractorBankAccountAccountType$inboundSchema;
  /** @deprecated use `ContractorBankAccountAccountType$outboundSchema` instead. */
  export const outboundSchema = ContractorBankAccountAccountType$outboundSchema;
}

/** @internal */
export const ContractorBankAccount$inboundSchema: z.ZodType<
  ContractorBankAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  contractor_uuid: z.string().optional(),
  account_type: ContractorBankAccountAccountType$inboundSchema.optional(),
  name: z.string().optional(),
  routing_number: z.string().optional(),
  hidden_account_number: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "contractor_uuid": "contractorUuid",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "hidden_account_number": "hiddenAccountNumber",
  });
});

/** @internal */
export type ContractorBankAccount$Outbound = {
  uuid: string;
  contractor_uuid?: string | undefined;
  account_type?: string | undefined;
  name?: string | undefined;
  routing_number?: string | undefined;
  hidden_account_number?: string | undefined;
};

/** @internal */
export const ContractorBankAccount$outboundSchema: z.ZodType<
  ContractorBankAccount$Outbound,
  z.ZodTypeDef,
  ContractorBankAccount
> = z.object({
  uuid: z.string(),
  contractorUuid: z.string().optional(),
  accountType: ContractorBankAccountAccountType$outboundSchema.optional(),
  name: z.string().optional(),
  routingNumber: z.string().optional(),
  hiddenAccountNumber: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    contractorUuid: "contractor_uuid",
    accountType: "account_type",
    routingNumber: "routing_number",
    hiddenAccountNumber: "hidden_account_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorBankAccount$ {
  /** @deprecated use `ContractorBankAccount$inboundSchema` instead. */
  export const inboundSchema = ContractorBankAccount$inboundSchema;
  /** @deprecated use `ContractorBankAccount$outboundSchema` instead. */
  export const outboundSchema = ContractorBankAccount$outboundSchema;
  /** @deprecated use `ContractorBankAccount$Outbound` instead. */
  export type Outbound = ContractorBankAccount$Outbound;
}

export function contractorBankAccountToJSON(
  contractorBankAccount: ContractorBankAccount,
): string {
  return JSON.stringify(
    ContractorBankAccount$outboundSchema.parse(contractorBankAccount),
  );
}

export function contractorBankAccountFromJSON(
  jsonString: string,
): SafeParseResult<ContractorBankAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorBankAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorBankAccount' from JSON`,
  );
}
