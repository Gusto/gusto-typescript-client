/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PayScheduleAssignmentDepartment = {
  /**
   * The UUID of the department.
   */
  departmentUuid?: string | undefined;
  /**
   * The department's pay schedule UUID.
   */
  payScheduleUuid?: string | undefined;
};

/** @internal */
export const PayScheduleAssignmentDepartment$inboundSchema: z.ZodType<
  PayScheduleAssignmentDepartment,
  z.ZodTypeDef,
  unknown
> = z.object({
  department_uuid: z.string().optional(),
  pay_schedule_uuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "department_uuid": "departmentUuid",
    "pay_schedule_uuid": "payScheduleUuid",
  });
});

/** @internal */
export type PayScheduleAssignmentDepartment$Outbound = {
  department_uuid?: string | undefined;
  pay_schedule_uuid?: string | undefined;
};

/** @internal */
export const PayScheduleAssignmentDepartment$outboundSchema: z.ZodType<
  PayScheduleAssignmentDepartment$Outbound,
  z.ZodTypeDef,
  PayScheduleAssignmentDepartment
> = z.object({
  departmentUuid: z.string().optional(),
  payScheduleUuid: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    departmentUuid: "department_uuid",
    payScheduleUuid: "pay_schedule_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayScheduleAssignmentDepartment$ {
  /** @deprecated use `PayScheduleAssignmentDepartment$inboundSchema` instead. */
  export const inboundSchema = PayScheduleAssignmentDepartment$inboundSchema;
  /** @deprecated use `PayScheduleAssignmentDepartment$outboundSchema` instead. */
  export const outboundSchema = PayScheduleAssignmentDepartment$outboundSchema;
  /** @deprecated use `PayScheduleAssignmentDepartment$Outbound` instead. */
  export type Outbound = PayScheduleAssignmentDepartment$Outbound;
}

export function payScheduleAssignmentDepartmentToJSON(
  payScheduleAssignmentDepartment: PayScheduleAssignmentDepartment,
): string {
  return JSON.stringify(
    PayScheduleAssignmentDepartment$outboundSchema.parse(
      payScheduleAssignmentDepartment,
    ),
  );
}

export function payScheduleAssignmentDepartmentFromJSON(
  jsonString: string,
): SafeParseResult<PayScheduleAssignmentDepartment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayScheduleAssignmentDepartment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayScheduleAssignmentDepartment' from JSON`,
  );
}
