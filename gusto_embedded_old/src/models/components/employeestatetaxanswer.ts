/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EmployeeStateTaxAnswer = {
  /**
   * The answer to the corresponding question - this may be a string, number, boolean, or null.
   */
  value?: string | undefined;
  /**
   * The effective date of the answer - currently always “2010-01-01”.
   */
  validFrom?: string | undefined;
  /**
   * The effective end date of the answer - currently always null.
   */
  validUpTo?: any | null | undefined;
};

/** @internal */
export const EmployeeStateTaxAnswer$inboundSchema: z.ZodType<
  EmployeeStateTaxAnswer,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  valid_from: z.string().optional(),
  valid_up_to: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    "valid_from": "validFrom",
    "valid_up_to": "validUpTo",
  });
});

/** @internal */
export type EmployeeStateTaxAnswer$Outbound = {
  value?: string | undefined;
  valid_from?: string | undefined;
  valid_up_to?: any | null | undefined;
};

/** @internal */
export const EmployeeStateTaxAnswer$outboundSchema: z.ZodType<
  EmployeeStateTaxAnswer$Outbound,
  z.ZodTypeDef,
  EmployeeStateTaxAnswer
> = z.object({
  value: z.string().optional(),
  validFrom: z.string().optional(),
  validUpTo: z.nullable(z.any()).optional(),
}).transform((v) => {
  return remap$(v, {
    validFrom: "valid_from",
    validUpTo: "valid_up_to",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeStateTaxAnswer$ {
  /** @deprecated use `EmployeeStateTaxAnswer$inboundSchema` instead. */
  export const inboundSchema = EmployeeStateTaxAnswer$inboundSchema;
  /** @deprecated use `EmployeeStateTaxAnswer$outboundSchema` instead. */
  export const outboundSchema = EmployeeStateTaxAnswer$outboundSchema;
  /** @deprecated use `EmployeeStateTaxAnswer$Outbound` instead. */
  export type Outbound = EmployeeStateTaxAnswer$Outbound;
}

export function employeeStateTaxAnswerToJSON(
  employeeStateTaxAnswer: EmployeeStateTaxAnswer,
): string {
  return JSON.stringify(
    EmployeeStateTaxAnswer$outboundSchema.parse(employeeStateTaxAnswer),
  );
}

export function employeeStateTaxAnswerFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeStateTaxAnswer, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeStateTaxAnswer$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeStateTaxAnswer' from JSON`,
  );
}
