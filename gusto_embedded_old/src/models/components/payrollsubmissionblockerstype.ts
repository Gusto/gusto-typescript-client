/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Additional data associated with the unblock option.
 */
export type PayrollSubmissionBlockersTypeMetadata = {};

export type UnblockOptions = {
  /**
   * The type of unblock option for the submission blocker.
   */
  unblockType?: string | undefined;
  /**
   * The payment check date associated with the unblock option.
   */
  checkDate?: string | undefined;
  /**
   * Additional data associated with the unblock option.
   */
  metadata?: PayrollSubmissionBlockersTypeMetadata | undefined;
};

/**
 * The status of the submission blocker.
 */
export const PayrollSubmissionBlockersTypeStatus = {
  Unresolved: "unresolved",
  Resolved: "resolved",
} as const;
/**
 * The status of the submission blocker.
 */
export type PayrollSubmissionBlockersTypeStatus = ClosedEnum<
  typeof PayrollSubmissionBlockersTypeStatus
>;

export type PayrollSubmissionBlockersType = {
  /**
   * The type of blocker that's blocking the payment submission.
   */
  blockerType?: string | undefined;
  /**
   * The name of the submission blocker.
   */
  blockerName?: string | undefined;
  /**
   * The available options to unblock a submission blocker.
   */
  unblockOptions?: Array<UnblockOptions> | undefined;
  /**
   * The unblock option that's been selected to resolve the submission blocker.
   */
  selectedOption?: string | null | undefined;
  /**
   * The status of the submission blocker.
   */
  status?: PayrollSubmissionBlockersTypeStatus | undefined;
};

/** @internal */
export const PayrollSubmissionBlockersTypeMetadata$inboundSchema: z.ZodType<
  PayrollSubmissionBlockersTypeMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type PayrollSubmissionBlockersTypeMetadata$Outbound = {};

/** @internal */
export const PayrollSubmissionBlockersTypeMetadata$outboundSchema: z.ZodType<
  PayrollSubmissionBlockersTypeMetadata$Outbound,
  z.ZodTypeDef,
  PayrollSubmissionBlockersTypeMetadata
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollSubmissionBlockersTypeMetadata$ {
  /** @deprecated use `PayrollSubmissionBlockersTypeMetadata$inboundSchema` instead. */
  export const inboundSchema =
    PayrollSubmissionBlockersTypeMetadata$inboundSchema;
  /** @deprecated use `PayrollSubmissionBlockersTypeMetadata$outboundSchema` instead. */
  export const outboundSchema =
    PayrollSubmissionBlockersTypeMetadata$outboundSchema;
  /** @deprecated use `PayrollSubmissionBlockersTypeMetadata$Outbound` instead. */
  export type Outbound = PayrollSubmissionBlockersTypeMetadata$Outbound;
}

export function payrollSubmissionBlockersTypeMetadataToJSON(
  payrollSubmissionBlockersTypeMetadata: PayrollSubmissionBlockersTypeMetadata,
): string {
  return JSON.stringify(
    PayrollSubmissionBlockersTypeMetadata$outboundSchema.parse(
      payrollSubmissionBlockersTypeMetadata,
    ),
  );
}

export function payrollSubmissionBlockersTypeMetadataFromJSON(
  jsonString: string,
): SafeParseResult<PayrollSubmissionBlockersTypeMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PayrollSubmissionBlockersTypeMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollSubmissionBlockersTypeMetadata' from JSON`,
  );
}

/** @internal */
export const UnblockOptions$inboundSchema: z.ZodType<
  UnblockOptions,
  z.ZodTypeDef,
  unknown
> = z.object({
  unblock_type: z.string().optional(),
  check_date: z.string().optional(),
  metadata: z.lazy(() => PayrollSubmissionBlockersTypeMetadata$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "unblock_type": "unblockType",
    "check_date": "checkDate",
  });
});

/** @internal */
export type UnblockOptions$Outbound = {
  unblock_type?: string | undefined;
  check_date?: string | undefined;
  metadata?: PayrollSubmissionBlockersTypeMetadata$Outbound | undefined;
};

/** @internal */
export const UnblockOptions$outboundSchema: z.ZodType<
  UnblockOptions$Outbound,
  z.ZodTypeDef,
  UnblockOptions
> = z.object({
  unblockType: z.string().optional(),
  checkDate: z.string().optional(),
  metadata: z.lazy(() => PayrollSubmissionBlockersTypeMetadata$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    unblockType: "unblock_type",
    checkDate: "check_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnblockOptions$ {
  /** @deprecated use `UnblockOptions$inboundSchema` instead. */
  export const inboundSchema = UnblockOptions$inboundSchema;
  /** @deprecated use `UnblockOptions$outboundSchema` instead. */
  export const outboundSchema = UnblockOptions$outboundSchema;
  /** @deprecated use `UnblockOptions$Outbound` instead. */
  export type Outbound = UnblockOptions$Outbound;
}

export function unblockOptionsToJSON(unblockOptions: UnblockOptions): string {
  return JSON.stringify(UnblockOptions$outboundSchema.parse(unblockOptions));
}

export function unblockOptionsFromJSON(
  jsonString: string,
): SafeParseResult<UnblockOptions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnblockOptions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnblockOptions' from JSON`,
  );
}

/** @internal */
export const PayrollSubmissionBlockersTypeStatus$inboundSchema: z.ZodNativeEnum<
  typeof PayrollSubmissionBlockersTypeStatus
> = z.nativeEnum(PayrollSubmissionBlockersTypeStatus);

/** @internal */
export const PayrollSubmissionBlockersTypeStatus$outboundSchema:
  z.ZodNativeEnum<typeof PayrollSubmissionBlockersTypeStatus> =
    PayrollSubmissionBlockersTypeStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollSubmissionBlockersTypeStatus$ {
  /** @deprecated use `PayrollSubmissionBlockersTypeStatus$inboundSchema` instead. */
  export const inboundSchema =
    PayrollSubmissionBlockersTypeStatus$inboundSchema;
  /** @deprecated use `PayrollSubmissionBlockersTypeStatus$outboundSchema` instead. */
  export const outboundSchema =
    PayrollSubmissionBlockersTypeStatus$outboundSchema;
}

/** @internal */
export const PayrollSubmissionBlockersType$inboundSchema: z.ZodType<
  PayrollSubmissionBlockersType,
  z.ZodTypeDef,
  unknown
> = z.object({
  blocker_type: z.string().optional(),
  blocker_name: z.string().optional(),
  unblock_options: z.array(z.lazy(() => UnblockOptions$inboundSchema))
    .optional(),
  selected_option: z.nullable(z.string()).optional(),
  status: PayrollSubmissionBlockersTypeStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "blocker_type": "blockerType",
    "blocker_name": "blockerName",
    "unblock_options": "unblockOptions",
    "selected_option": "selectedOption",
  });
});

/** @internal */
export type PayrollSubmissionBlockersType$Outbound = {
  blocker_type?: string | undefined;
  blocker_name?: string | undefined;
  unblock_options?: Array<UnblockOptions$Outbound> | undefined;
  selected_option?: string | null | undefined;
  status?: string | undefined;
};

/** @internal */
export const PayrollSubmissionBlockersType$outboundSchema: z.ZodType<
  PayrollSubmissionBlockersType$Outbound,
  z.ZodTypeDef,
  PayrollSubmissionBlockersType
> = z.object({
  blockerType: z.string().optional(),
  blockerName: z.string().optional(),
  unblockOptions: z.array(z.lazy(() => UnblockOptions$outboundSchema))
    .optional(),
  selectedOption: z.nullable(z.string()).optional(),
  status: PayrollSubmissionBlockersTypeStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    blockerType: "blocker_type",
    blockerName: "blocker_name",
    unblockOptions: "unblock_options",
    selectedOption: "selected_option",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollSubmissionBlockersType$ {
  /** @deprecated use `PayrollSubmissionBlockersType$inboundSchema` instead. */
  export const inboundSchema = PayrollSubmissionBlockersType$inboundSchema;
  /** @deprecated use `PayrollSubmissionBlockersType$outboundSchema` instead. */
  export const outboundSchema = PayrollSubmissionBlockersType$outboundSchema;
  /** @deprecated use `PayrollSubmissionBlockersType$Outbound` instead. */
  export type Outbound = PayrollSubmissionBlockersType$Outbound;
}

export function payrollSubmissionBlockersTypeToJSON(
  payrollSubmissionBlockersType: PayrollSubmissionBlockersType,
): string {
  return JSON.stringify(
    PayrollSubmissionBlockersType$outboundSchema.parse(
      payrollSubmissionBlockersType,
    ),
  );
}

export function payrollSubmissionBlockersTypeFromJSON(
  jsonString: string,
): SafeParseResult<PayrollSubmissionBlockersType, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollSubmissionBlockersType$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollSubmissionBlockersType' from JSON`,
  );
}
