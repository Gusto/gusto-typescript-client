/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
 */
export const ContractorPaymentGroupMinimalStatus = {
  Unfunded: "Unfunded",
  Funded: "Funded",
} as const;
/**
 * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
 */
export type ContractorPaymentGroupMinimalStatus = ClosedEnum<
  typeof ContractorPaymentGroupMinimalStatus
>;

export type ContractorPaymentGroupMinimalTotals = {
  /**
   * The total amount for the group of contractor payments.
   */
  amount?: string | undefined;
  /**
   * The total debit amount for the group of contractor payments. Sum of wage & reimbursement amount.
   */
  debitAmount?: string | undefined;
  /**
   * The total wage amount for the group of contractor payments.
   */
  wageAmount?: string | undefined;
  /**
   * The total reimbursement amount for the group of contractor payments.
   */
  reimbursementAmount?: string | undefined;
};

/**
 * The summary of a contractor payment group.
 */
export type ContractorPaymentGroupMinimal = {
  /**
   * The unique identifier of the contractor payment group.
   */
  uuid?: string | undefined;
  /**
   * The UUID of the company.
   */
  companyUuid?: string | undefined;
  /**
   * The check date of the contractor payment group.
   */
  checkDate?: string | undefined;
  /**
   * The debit date of the contractor payment group.
   */
  debitDate?: string | undefined;
  /**
   * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
   */
  status?: ContractorPaymentGroupMinimalStatus | undefined;
  /**
   * Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
   */
  creationToken?: string | null | undefined;
  totals?: ContractorPaymentGroupMinimalTotals | undefined;
};

/** @internal */
export const ContractorPaymentGroupMinimalStatus$inboundSchema: z.ZodNativeEnum<
  typeof ContractorPaymentGroupMinimalStatus
> = z.nativeEnum(ContractorPaymentGroupMinimalStatus);

/** @internal */
export const ContractorPaymentGroupMinimalStatus$outboundSchema:
  z.ZodNativeEnum<typeof ContractorPaymentGroupMinimalStatus> =
    ContractorPaymentGroupMinimalStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupMinimalStatus$ {
  /** @deprecated use `ContractorPaymentGroupMinimalStatus$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentGroupMinimalStatus$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupMinimalStatus$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupMinimalStatus$outboundSchema;
}

/** @internal */
export const ContractorPaymentGroupMinimalTotals$inboundSchema: z.ZodType<
  ContractorPaymentGroupMinimalTotals,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string().optional(),
  debit_amount: z.string().optional(),
  wage_amount: z.string().optional(),
  reimbursement_amount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "debit_amount": "debitAmount",
    "wage_amount": "wageAmount",
    "reimbursement_amount": "reimbursementAmount",
  });
});

/** @internal */
export type ContractorPaymentGroupMinimalTotals$Outbound = {
  amount?: string | undefined;
  debit_amount?: string | undefined;
  wage_amount?: string | undefined;
  reimbursement_amount?: string | undefined;
};

/** @internal */
export const ContractorPaymentGroupMinimalTotals$outboundSchema: z.ZodType<
  ContractorPaymentGroupMinimalTotals$Outbound,
  z.ZodTypeDef,
  ContractorPaymentGroupMinimalTotals
> = z.object({
  amount: z.string().optional(),
  debitAmount: z.string().optional(),
  wageAmount: z.string().optional(),
  reimbursementAmount: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    debitAmount: "debit_amount",
    wageAmount: "wage_amount",
    reimbursementAmount: "reimbursement_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupMinimalTotals$ {
  /** @deprecated use `ContractorPaymentGroupMinimalTotals$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentGroupMinimalTotals$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupMinimalTotals$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentGroupMinimalTotals$outboundSchema;
  /** @deprecated use `ContractorPaymentGroupMinimalTotals$Outbound` instead. */
  export type Outbound = ContractorPaymentGroupMinimalTotals$Outbound;
}

export function contractorPaymentGroupMinimalTotalsToJSON(
  contractorPaymentGroupMinimalTotals: ContractorPaymentGroupMinimalTotals,
): string {
  return JSON.stringify(
    ContractorPaymentGroupMinimalTotals$outboundSchema.parse(
      contractorPaymentGroupMinimalTotals,
    ),
  );
}

export function contractorPaymentGroupMinimalTotalsFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentGroupMinimalTotals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContractorPaymentGroupMinimalTotals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentGroupMinimalTotals' from JSON`,
  );
}

/** @internal */
export const ContractorPaymentGroupMinimal$inboundSchema: z.ZodType<
  ContractorPaymentGroupMinimal,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  company_uuid: z.string().optional(),
  check_date: z.string().optional(),
  debit_date: z.string().optional(),
  status: ContractorPaymentGroupMinimalStatus$inboundSchema.optional(),
  creation_token: z.nullable(z.string()).optional(),
  totals: z.lazy(() => ContractorPaymentGroupMinimalTotals$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "check_date": "checkDate",
    "debit_date": "debitDate",
    "creation_token": "creationToken",
  });
});

/** @internal */
export type ContractorPaymentGroupMinimal$Outbound = {
  uuid?: string | undefined;
  company_uuid?: string | undefined;
  check_date?: string | undefined;
  debit_date?: string | undefined;
  status?: string | undefined;
  creation_token?: string | null | undefined;
  totals?: ContractorPaymentGroupMinimalTotals$Outbound | undefined;
};

/** @internal */
export const ContractorPaymentGroupMinimal$outboundSchema: z.ZodType<
  ContractorPaymentGroupMinimal$Outbound,
  z.ZodTypeDef,
  ContractorPaymentGroupMinimal
> = z.object({
  uuid: z.string().optional(),
  companyUuid: z.string().optional(),
  checkDate: z.string().optional(),
  debitDate: z.string().optional(),
  status: ContractorPaymentGroupMinimalStatus$outboundSchema.optional(),
  creationToken: z.nullable(z.string()).optional(),
  totals: z.lazy(() => ContractorPaymentGroupMinimalTotals$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    checkDate: "check_date",
    debitDate: "debit_date",
    creationToken: "creation_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentGroupMinimal$ {
  /** @deprecated use `ContractorPaymentGroupMinimal$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentGroupMinimal$inboundSchema;
  /** @deprecated use `ContractorPaymentGroupMinimal$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentGroupMinimal$outboundSchema;
  /** @deprecated use `ContractorPaymentGroupMinimal$Outbound` instead. */
  export type Outbound = ContractorPaymentGroupMinimal$Outbound;
}

export function contractorPaymentGroupMinimalToJSON(
  contractorPaymentGroupMinimal: ContractorPaymentGroupMinimal,
): string {
  return JSON.stringify(
    ContractorPaymentGroupMinimal$outboundSchema.parse(
      contractorPaymentGroupMinimal,
    ),
  );
}

export function contractorPaymentGroupMinimalFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentGroupMinimal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPaymentGroupMinimal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentGroupMinimal' from JSON`,
  );
}
