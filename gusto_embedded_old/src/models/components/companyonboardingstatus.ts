/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The string identifier for each onboarding step
 */
export const Id = {
  AddAddresses: "add_addresses",
  FederalTaxSetup: "federal_tax_setup",
  SelectIndustry: "select_industry",
  AddBankInfo: "add_bank_info",
  AddEmployees: "add_employees",
  StateSetup: "state_setup",
  PayrollSchedule: "payroll_schedule",
  SignAllForms: "sign_all_forms",
  VerifyBankInfo: "verify_bank_info",
  ExternalPayroll: "external_payroll",
} as const;
/**
 * The string identifier for each onboarding step
 */
export type Id = ClosedEnum<typeof Id>;

export const Requirements = {
  AddAddresses: "add_addresses",
  FederalTaxSetup: "federal_tax_setup",
  SelectIndustry: "select_industry",
  AddBankInfo: "add_bank_info",
  AddEmployees: "add_employees",
  StateSetup: "state_setup",
  PayrollSchedule: "payroll_schedule",
  SignAllForms: "sign_all_forms",
  VerifyBankInfo: "verify_bank_info",
  ExternalPayroll: "external_payroll",
} as const;
export type Requirements = ClosedEnum<typeof Requirements>;

export type OnboardingStep = {
  /**
   * The display name of the onboarding step
   */
  title?: string | undefined;
  /**
   * The string identifier for each onboarding step
   */
  id?: Id | undefined;
  /**
   * The boolean flag indicating whether the step is required or optional
   */
  required?: boolean | undefined;
  /**
   * The boolean flag indicating whether the step is completed or not.
   */
  completed?: boolean | undefined;
  /**
   * The boolean flag indicating whether the step can be skipped or not.
   */
  skippable?: boolean | undefined;
  /**
   * A list of onboarding step that are required to be completed in order to proceed with the current onboarding step.
   */
  requirements?: Array<Requirements> | undefined;
};

/**
 * The representation of a company's onboarding status
 */
export type CompanyOnboardingStatus = {
  /**
   * the UUID of the company
   */
  uuid: string;
  /**
   * a boolean flag for the company's onboarding status
   */
  onboardingCompleted?: boolean | undefined;
  /**
   * a list of company onboarding steps
   */
  onboardingSteps?: Array<OnboardingStep> | undefined;
};

/** @internal */
export const Id$inboundSchema: z.ZodNativeEnum<typeof Id> = z.nativeEnum(Id);

/** @internal */
export const Id$outboundSchema: z.ZodNativeEnum<typeof Id> = Id$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Id$ {
  /** @deprecated use `Id$inboundSchema` instead. */
  export const inboundSchema = Id$inboundSchema;
  /** @deprecated use `Id$outboundSchema` instead. */
  export const outboundSchema = Id$outboundSchema;
}

/** @internal */
export const Requirements$inboundSchema: z.ZodNativeEnum<typeof Requirements> =
  z.nativeEnum(Requirements);

/** @internal */
export const Requirements$outboundSchema: z.ZodNativeEnum<typeof Requirements> =
  Requirements$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Requirements$ {
  /** @deprecated use `Requirements$inboundSchema` instead. */
  export const inboundSchema = Requirements$inboundSchema;
  /** @deprecated use `Requirements$outboundSchema` instead. */
  export const outboundSchema = Requirements$outboundSchema;
}

/** @internal */
export const OnboardingStep$inboundSchema: z.ZodType<
  OnboardingStep,
  z.ZodTypeDef,
  unknown
> = z.object({
  title: z.string().optional(),
  id: Id$inboundSchema.optional(),
  required: z.boolean().optional(),
  completed: z.boolean().optional(),
  skippable: z.boolean().optional(),
  requirements: z.array(Requirements$inboundSchema).optional(),
});

/** @internal */
export type OnboardingStep$Outbound = {
  title?: string | undefined;
  id?: string | undefined;
  required?: boolean | undefined;
  completed?: boolean | undefined;
  skippable?: boolean | undefined;
  requirements?: Array<string> | undefined;
};

/** @internal */
export const OnboardingStep$outboundSchema: z.ZodType<
  OnboardingStep$Outbound,
  z.ZodTypeDef,
  OnboardingStep
> = z.object({
  title: z.string().optional(),
  id: Id$outboundSchema.optional(),
  required: z.boolean().optional(),
  completed: z.boolean().optional(),
  skippable: z.boolean().optional(),
  requirements: z.array(Requirements$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OnboardingStep$ {
  /** @deprecated use `OnboardingStep$inboundSchema` instead. */
  export const inboundSchema = OnboardingStep$inboundSchema;
  /** @deprecated use `OnboardingStep$outboundSchema` instead. */
  export const outboundSchema = OnboardingStep$outboundSchema;
  /** @deprecated use `OnboardingStep$Outbound` instead. */
  export type Outbound = OnboardingStep$Outbound;
}

export function onboardingStepToJSON(onboardingStep: OnboardingStep): string {
  return JSON.stringify(OnboardingStep$outboundSchema.parse(onboardingStep));
}

export function onboardingStepFromJSON(
  jsonString: string,
): SafeParseResult<OnboardingStep, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OnboardingStep$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OnboardingStep' from JSON`,
  );
}

/** @internal */
export const CompanyOnboardingStatus$inboundSchema: z.ZodType<
  CompanyOnboardingStatus,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  onboarding_completed: z.boolean().optional(),
  onboarding_steps: z.array(z.lazy(() => OnboardingStep$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "onboarding_completed": "onboardingCompleted",
    "onboarding_steps": "onboardingSteps",
  });
});

/** @internal */
export type CompanyOnboardingStatus$Outbound = {
  uuid: string;
  onboarding_completed?: boolean | undefined;
  onboarding_steps?: Array<OnboardingStep$Outbound> | undefined;
};

/** @internal */
export const CompanyOnboardingStatus$outboundSchema: z.ZodType<
  CompanyOnboardingStatus$Outbound,
  z.ZodTypeDef,
  CompanyOnboardingStatus
> = z.object({
  uuid: z.string(),
  onboardingCompleted: z.boolean().optional(),
  onboardingSteps: z.array(z.lazy(() => OnboardingStep$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    onboardingCompleted: "onboarding_completed",
    onboardingSteps: "onboarding_steps",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyOnboardingStatus$ {
  /** @deprecated use `CompanyOnboardingStatus$inboundSchema` instead. */
  export const inboundSchema = CompanyOnboardingStatus$inboundSchema;
  /** @deprecated use `CompanyOnboardingStatus$outboundSchema` instead. */
  export const outboundSchema = CompanyOnboardingStatus$outboundSchema;
  /** @deprecated use `CompanyOnboardingStatus$Outbound` instead. */
  export type Outbound = CompanyOnboardingStatus$Outbound;
}

export function companyOnboardingStatusToJSON(
  companyOnboardingStatus: CompanyOnboardingStatus,
): string {
  return JSON.stringify(
    CompanyOnboardingStatus$outboundSchema.parse(companyOnboardingStatus),
  );
}

export function companyOnboardingStatusFromJSON(
  jsonString: string,
): SafeParseResult<CompanyOnboardingStatus, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyOnboardingStatus$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyOnboardingStatus' from JSON`,
  );
}
