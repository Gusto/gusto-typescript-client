/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentMethodBankAccount,
  PaymentMethodBankAccount$inboundSchema,
  PaymentMethodBankAccount$Outbound,
  PaymentMethodBankAccount$outboundSchema,
} from "./paymentmethodbankaccount.js";

/**
 * The payment method type. If type is Check, then split_by and splits do not need to be populated. If type is Direct Deposit, split_by and splits are required.
 */
export const EmployeePaymentMethodType = {
  DirectDeposit: "Direct Deposit",
  Check: "Check",
} as const;
/**
 * The payment method type. If type is Check, then split_by and splits do not need to be populated. If type is Direct Deposit, split_by and splits are required.
 */
export type EmployeePaymentMethodType = ClosedEnum<
  typeof EmployeePaymentMethodType
>;

/**
 * Describes how the payment will be split. If split_by is Percentage, then the split amounts must add up to exactly 100. If split_by is Amount, then the last split amount must be nil to capture the remainder.
 */
export const SplitBy = {
  Amount: "Amount",
  Percentage: "Percentage",
} as const;
/**
 * Describes how the payment will be split. If split_by is Percentage, then the split amounts must add up to exactly 100. If split_by is Amount, then the last split amount must be nil to capture the remainder.
 */
export type SplitBy = ClosedEnum<typeof SplitBy>;

/**
 * Example response
 */
export type EmployeePaymentMethod = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The payment method type. If type is Check, then split_by and splits do not need to be populated. If type is Direct Deposit, split_by and splits are required.
   */
  type?: EmployeePaymentMethodType | undefined;
  /**
   * Describes how the payment will be split. If split_by is Percentage, then the split amounts must add up to exactly 100. If split_by is Amount, then the last split amount must be nil to capture the remainder.
   */
  splitBy?: SplitBy | null | undefined;
  splits?: Array<PaymentMethodBankAccount> | null | undefined;
};

/** @internal */
export const EmployeePaymentMethodType$inboundSchema: z.ZodNativeEnum<
  typeof EmployeePaymentMethodType
> = z.nativeEnum(EmployeePaymentMethodType);

/** @internal */
export const EmployeePaymentMethodType$outboundSchema: z.ZodNativeEnum<
  typeof EmployeePaymentMethodType
> = EmployeePaymentMethodType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeePaymentMethodType$ {
  /** @deprecated use `EmployeePaymentMethodType$inboundSchema` instead. */
  export const inboundSchema = EmployeePaymentMethodType$inboundSchema;
  /** @deprecated use `EmployeePaymentMethodType$outboundSchema` instead. */
  export const outboundSchema = EmployeePaymentMethodType$outboundSchema;
}

/** @internal */
export const SplitBy$inboundSchema: z.ZodNativeEnum<typeof SplitBy> = z
  .nativeEnum(SplitBy);

/** @internal */
export const SplitBy$outboundSchema: z.ZodNativeEnum<typeof SplitBy> =
  SplitBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SplitBy$ {
  /** @deprecated use `SplitBy$inboundSchema` instead. */
  export const inboundSchema = SplitBy$inboundSchema;
  /** @deprecated use `SplitBy$outboundSchema` instead. */
  export const outboundSchema = SplitBy$outboundSchema;
}

/** @internal */
export const EmployeePaymentMethod$inboundSchema: z.ZodType<
  EmployeePaymentMethod,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
  type: EmployeePaymentMethodType$inboundSchema.optional(),
  split_by: z.nullable(SplitBy$inboundSchema).optional(),
  splits: z.nullable(z.array(PaymentMethodBankAccount$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "split_by": "splitBy",
  });
});

/** @internal */
export type EmployeePaymentMethod$Outbound = {
  version?: string | undefined;
  type?: string | undefined;
  split_by?: string | null | undefined;
  splits?: Array<PaymentMethodBankAccount$Outbound> | null | undefined;
};

/** @internal */
export const EmployeePaymentMethod$outboundSchema: z.ZodType<
  EmployeePaymentMethod$Outbound,
  z.ZodTypeDef,
  EmployeePaymentMethod
> = z.object({
  version: z.string().optional(),
  type: EmployeePaymentMethodType$outboundSchema.optional(),
  splitBy: z.nullable(SplitBy$outboundSchema).optional(),
  splits: z.nullable(z.array(PaymentMethodBankAccount$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    splitBy: "split_by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeePaymentMethod$ {
  /** @deprecated use `EmployeePaymentMethod$inboundSchema` instead. */
  export const inboundSchema = EmployeePaymentMethod$inboundSchema;
  /** @deprecated use `EmployeePaymentMethod$outboundSchema` instead. */
  export const outboundSchema = EmployeePaymentMethod$outboundSchema;
  /** @deprecated use `EmployeePaymentMethod$Outbound` instead. */
  export type Outbound = EmployeePaymentMethod$Outbound;
}

export function employeePaymentMethodToJSON(
  employeePaymentMethod: EmployeePaymentMethod,
): string {
  return JSON.stringify(
    EmployeePaymentMethod$outboundSchema.parse(employeePaymentMethod),
  );
}

export function employeePaymentMethodFromJSON(
  jsonString: string,
): SafeParseResult<EmployeePaymentMethod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeePaymentMethod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeePaymentMethod' from JSON`,
  );
}
