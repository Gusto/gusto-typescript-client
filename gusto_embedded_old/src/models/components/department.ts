/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DepartmentEmployees = {
  uuid?: string | undefined;
};

export type Contractors = {
  uuid?: string | undefined;
};

export type Department = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The UUID of the department
   */
  uuid?: string | undefined;
  /**
   * The UUID of the company
   */
  companyUuid?: string | undefined;
  /**
   * Name of the department
   */
  title?: string | undefined;
  /**
   * Array of employees assigned to the department.
   */
  employees?: Array<DepartmentEmployees> | undefined;
  /**
   * Array of contractors assigned to the department.
   */
  contractors?: Array<Contractors> | undefined;
};

/** @internal */
export const DepartmentEmployees$inboundSchema: z.ZodType<
  DepartmentEmployees,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type DepartmentEmployees$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const DepartmentEmployees$outboundSchema: z.ZodType<
  DepartmentEmployees$Outbound,
  z.ZodTypeDef,
  DepartmentEmployees
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DepartmentEmployees$ {
  /** @deprecated use `DepartmentEmployees$inboundSchema` instead. */
  export const inboundSchema = DepartmentEmployees$inboundSchema;
  /** @deprecated use `DepartmentEmployees$outboundSchema` instead. */
  export const outboundSchema = DepartmentEmployees$outboundSchema;
  /** @deprecated use `DepartmentEmployees$Outbound` instead. */
  export type Outbound = DepartmentEmployees$Outbound;
}

export function departmentEmployeesToJSON(
  departmentEmployees: DepartmentEmployees,
): string {
  return JSON.stringify(
    DepartmentEmployees$outboundSchema.parse(departmentEmployees),
  );
}

export function departmentEmployeesFromJSON(
  jsonString: string,
): SafeParseResult<DepartmentEmployees, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DepartmentEmployees$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DepartmentEmployees' from JSON`,
  );
}

/** @internal */
export const Contractors$inboundSchema: z.ZodType<
  Contractors,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
});

/** @internal */
export type Contractors$Outbound = {
  uuid?: string | undefined;
};

/** @internal */
export const Contractors$outboundSchema: z.ZodType<
  Contractors$Outbound,
  z.ZodTypeDef,
  Contractors
> = z.object({
  uuid: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contractors$ {
  /** @deprecated use `Contractors$inboundSchema` instead. */
  export const inboundSchema = Contractors$inboundSchema;
  /** @deprecated use `Contractors$outboundSchema` instead. */
  export const outboundSchema = Contractors$outboundSchema;
  /** @deprecated use `Contractors$Outbound` instead. */
  export type Outbound = Contractors$Outbound;
}

export function contractorsToJSON(contractors: Contractors): string {
  return JSON.stringify(Contractors$outboundSchema.parse(contractors));
}

export function contractorsFromJSON(
  jsonString: string,
): SafeParseResult<Contractors, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contractors$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contractors' from JSON`,
  );
}

/** @internal */
export const Department$inboundSchema: z.ZodType<
  Department,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
  uuid: z.string().optional(),
  company_uuid: z.string().optional(),
  title: z.string().optional(),
  employees: z.array(z.lazy(() => DepartmentEmployees$inboundSchema))
    .optional(),
  contractors: z.array(z.lazy(() => Contractors$inboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
  });
});

/** @internal */
export type Department$Outbound = {
  version?: string | undefined;
  uuid?: string | undefined;
  company_uuid?: string | undefined;
  title?: string | undefined;
  employees?: Array<DepartmentEmployees$Outbound> | undefined;
  contractors?: Array<Contractors$Outbound> | undefined;
};

/** @internal */
export const Department$outboundSchema: z.ZodType<
  Department$Outbound,
  z.ZodTypeDef,
  Department
> = z.object({
  version: z.string().optional(),
  uuid: z.string().optional(),
  companyUuid: z.string().optional(),
  title: z.string().optional(),
  employees: z.array(z.lazy(() => DepartmentEmployees$outboundSchema))
    .optional(),
  contractors: z.array(z.lazy(() => Contractors$outboundSchema)).optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Department$ {
  /** @deprecated use `Department$inboundSchema` instead. */
  export const inboundSchema = Department$inboundSchema;
  /** @deprecated use `Department$outboundSchema` instead. */
  export const outboundSchema = Department$outboundSchema;
  /** @deprecated use `Department$Outbound` instead. */
  export type Outbound = Department$Outbound;
}

export function departmentToJSON(department: Department): string {
  return JSON.stringify(Department$outboundSchema.parse(department));
}

export function departmentFromJSON(
  jsonString: string,
): SafeParseResult<Department, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Department$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Department' from JSON`,
  );
}
