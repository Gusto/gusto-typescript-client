/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * An employee's I-9 verification document
 */
export type I9AuthorizationDocument = {
  /**
   * The UUID of the I-9 verification document
   */
  uuid: string;
  /**
   * The document's document type
   */
  documentType: string;
  /**
   * The document's document title
   */
  documentTitle: string;
  /**
   * The document's expiration date
   */
  expirationDate?: string | undefined;
  /**
   * The document's issuing authority
   */
  issuingAuthority: string;
};

/** @internal */
export const I9AuthorizationDocument$inboundSchema: z.ZodType<
  I9AuthorizationDocument,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  document_type: z.string(),
  document_title: z.string(),
  expiration_date: z.string().optional(),
  issuing_authority: z.string(),
}).transform((v) => {
  return remap$(v, {
    "document_type": "documentType",
    "document_title": "documentTitle",
    "expiration_date": "expirationDate",
    "issuing_authority": "issuingAuthority",
  });
});

/** @internal */
export type I9AuthorizationDocument$Outbound = {
  uuid: string;
  document_type: string;
  document_title: string;
  expiration_date?: string | undefined;
  issuing_authority: string;
};

/** @internal */
export const I9AuthorizationDocument$outboundSchema: z.ZodType<
  I9AuthorizationDocument$Outbound,
  z.ZodTypeDef,
  I9AuthorizationDocument
> = z.object({
  uuid: z.string(),
  documentType: z.string(),
  documentTitle: z.string(),
  expirationDate: z.string().optional(),
  issuingAuthority: z.string(),
}).transform((v) => {
  return remap$(v, {
    documentType: "document_type",
    documentTitle: "document_title",
    expirationDate: "expiration_date",
    issuingAuthority: "issuing_authority",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace I9AuthorizationDocument$ {
  /** @deprecated use `I9AuthorizationDocument$inboundSchema` instead. */
  export const inboundSchema = I9AuthorizationDocument$inboundSchema;
  /** @deprecated use `I9AuthorizationDocument$outboundSchema` instead. */
  export const outboundSchema = I9AuthorizationDocument$outboundSchema;
  /** @deprecated use `I9AuthorizationDocument$Outbound` instead. */
  export type Outbound = I9AuthorizationDocument$Outbound;
}

export function i9AuthorizationDocumentToJSON(
  i9AuthorizationDocument: I9AuthorizationDocument,
): string {
  return JSON.stringify(
    I9AuthorizationDocument$outboundSchema.parse(i9AuthorizationDocument),
  );
}

export function i9AuthorizationDocumentFromJSON(
  jsonString: string,
): SafeParseResult<I9AuthorizationDocument, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => I9AuthorizationDocument$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'I9AuthorizationDocument' from JSON`,
  );
}
