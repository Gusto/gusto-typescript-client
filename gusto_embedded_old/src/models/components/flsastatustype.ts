/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";

/**
 * The FLSA status for this compensation. Salaried ('Exempt') employees are paid a fixed salary every pay period. Salaried with overtime ('Salaried Nonexempt') employees are paid a fixed salary every pay period, and receive overtime pay when applicable. Hourly ('Nonexempt') employees are paid for the hours they work, and receive overtime pay when applicable. Commissioned employees ('Commission Only Exempt') earn wages based only on commission. Commissioned with overtime ('Commission Only Nonexempt') earn wages based on commission, and receive overtime pay when applicable. Owners ('Owner') are employees that own at least twenty percent of the company.
 */
export const FlsaStatusType = {
  Exempt: "Exempt",
  SalariedNonexempt: "Salaried Nonexempt",
  Nonexempt: "Nonexempt",
  Owner: "Owner",
  CommissionOnlyExempt: "Commission Only Exempt",
  CommissionOnlyNonexempt: "Commission Only Nonexempt",
} as const;
/**
 * The FLSA status for this compensation. Salaried ('Exempt') employees are paid a fixed salary every pay period. Salaried with overtime ('Salaried Nonexempt') employees are paid a fixed salary every pay period, and receive overtime pay when applicable. Hourly ('Nonexempt') employees are paid for the hours they work, and receive overtime pay when applicable. Commissioned employees ('Commission Only Exempt') earn wages based only on commission. Commissioned with overtime ('Commission Only Nonexempt') earn wages based on commission, and receive overtime pay when applicable. Owners ('Owner') are employees that own at least twenty percent of the company.
 */
export type FlsaStatusType = ClosedEnum<typeof FlsaStatusType>;

/** @internal */
export const FlsaStatusType$inboundSchema: z.ZodNativeEnum<
  typeof FlsaStatusType
> = z.nativeEnum(FlsaStatusType);

/** @internal */
export const FlsaStatusType$outboundSchema: z.ZodNativeEnum<
  typeof FlsaStatusType
> = FlsaStatusType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlsaStatusType$ {
  /** @deprecated use `FlsaStatusType$inboundSchema` instead. */
  export const inboundSchema = FlsaStatusType$inboundSchema;
  /** @deprecated use `FlsaStatusType$outboundSchema` instead. */
  export const outboundSchema = FlsaStatusType$outboundSchema;
}
