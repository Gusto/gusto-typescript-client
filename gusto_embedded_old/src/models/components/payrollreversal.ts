/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Example response
 */
export type PayrollReversal = {
  /**
   * The UUID for the payroll run being reversed.
   */
  reversedPayrollUuid?: string | undefined;
  /**
   * The UUID of the payroll where the reversal was applied.
   */
  reversalPayrollUuid?: string | undefined;
  /**
   * A reason provided by the admin who created the reversal.
   */
  reason?: string | undefined;
  /**
   * Timestamp of when the reversal was approved.
   */
  approvedAt?: string | null | undefined;
  /**
   * Category chosen by the admin who requested the reversal.
   */
  category?: string | undefined;
  /**
   * Array of affected employee UUIDs.
   */
  reversedEmployeeUuids?: Array<string> | undefined;
};

/** @internal */
export const PayrollReversal$inboundSchema: z.ZodType<
  PayrollReversal,
  z.ZodTypeDef,
  unknown
> = z.object({
  reversed_payroll_uuid: z.string().optional(),
  reversal_payroll_uuid: z.string().optional(),
  reason: z.string().optional(),
  approved_at: z.nullable(z.string()).optional(),
  category: z.string().optional(),
  reversed_employee_uuids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "reversed_payroll_uuid": "reversedPayrollUuid",
    "reversal_payroll_uuid": "reversalPayrollUuid",
    "approved_at": "approvedAt",
    "reversed_employee_uuids": "reversedEmployeeUuids",
  });
});

/** @internal */
export type PayrollReversal$Outbound = {
  reversed_payroll_uuid?: string | undefined;
  reversal_payroll_uuid?: string | undefined;
  reason?: string | undefined;
  approved_at?: string | null | undefined;
  category?: string | undefined;
  reversed_employee_uuids?: Array<string> | undefined;
};

/** @internal */
export const PayrollReversal$outboundSchema: z.ZodType<
  PayrollReversal$Outbound,
  z.ZodTypeDef,
  PayrollReversal
> = z.object({
  reversedPayrollUuid: z.string().optional(),
  reversalPayrollUuid: z.string().optional(),
  reason: z.string().optional(),
  approvedAt: z.nullable(z.string()).optional(),
  category: z.string().optional(),
  reversedEmployeeUuids: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    reversedPayrollUuid: "reversed_payroll_uuid",
    reversalPayrollUuid: "reversal_payroll_uuid",
    approvedAt: "approved_at",
    reversedEmployeeUuids: "reversed_employee_uuids",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollReversal$ {
  /** @deprecated use `PayrollReversal$inboundSchema` instead. */
  export const inboundSchema = PayrollReversal$inboundSchema;
  /** @deprecated use `PayrollReversal$outboundSchema` instead. */
  export const outboundSchema = PayrollReversal$outboundSchema;
  /** @deprecated use `PayrollReversal$Outbound` instead. */
  export type Outbound = PayrollReversal$Outbound;
}

export function payrollReversalToJSON(
  payrollReversal: PayrollReversal,
): string {
  return JSON.stringify(PayrollReversal$outboundSchema.parse(payrollReversal));
}

export function payrollReversalFromJSON(
  jsonString: string,
): SafeParseResult<PayrollReversal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollReversal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollReversal' from JSON`,
  );
}
