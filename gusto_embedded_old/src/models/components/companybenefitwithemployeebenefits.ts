/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A single tier of a tiered matching scheme.
 */
export type CompanyBenefitWithEmployeeBenefitsValueTiers = {
  /**
   * The percentage of employee deduction within this tier the company contribution will match.
   */
  rate?: string | undefined;
  /**
   * The percentage threshold at which this tier ends (inclusive).
   *
   * @remarks
   *
   * For example, a value of "5" means the company contribution will match employee deductions from the previous tier's threshold up to and including 5% of payroll.
   *
   * If this is the first tier, a value of "5" means the company contribution will match employee deductions from 0% up to and including 5% of payroll.
   */
  threshold?: string | undefined;
  /**
   * The step up difference between this tier's threshold and the previous tier's threshold. In the first tier, this is equivalent to threshold.
   */
  thresholdDelta?: string | undefined;
};

export type CompanyBenefitWithEmployeeBenefitsValue2 = {
  tiers?: Array<CompanyBenefitWithEmployeeBenefitsValueTiers> | undefined;
};

/**
 * For the `amount` and `percentage` contribution types, the value of the corresponding amount or percentage.
 *
 * @remarks
 *
 * For the `tiered` contribution type, an array of tiers.
 */
export type CompanyBenefitWithEmployeeBenefitsValue =
  | CompanyBenefitWithEmployeeBenefitsValue2
  | string;

/**
 * An object representing the type and value of the company contribution.
 */
export type CompanyBenefitWithEmployeeBenefitsContribution = {
  /**
   * The company contribution scheme.
   *
   * @remarks
   *
   * "amount": The company contributes a fixed amount per payroll. If elective is true, the contribution is matching, dollar-for-dollar.
   *
   * "percentage": The company contributes a percentage of the payroll amount per payroll period. If elective is true, the contribution is matching, dollar-for-dollar.
   *
   * "tiered": The company contribution varies according to the size of the employee deduction.
   */
  type?: string | undefined;
  /**
   * For the `amount` and `percentage` contribution types, the value of the corresponding amount or percentage.
   *
   * @remarks
   *
   * For the `tiered` contribution type, an array of tiers.
   */
  value?: CompanyBenefitWithEmployeeBenefitsValue2 | string | undefined;
};

export type EmployeeBenefits = {
  /**
   * The UUID of the employee to which the benefit belongs.
   */
  employeeUuid?: string | undefined;
  /**
   * The UUID of the company benefit.
   */
  companyBenefitUuid?: string | undefined;
  /**
   * Whether the employee benefit is active.
   */
  active?: boolean | undefined;
  /**
   * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
   */
  deductAsPercentage?: boolean | undefined;
  /**
   * The amount to be deducted, per pay period, from the employee's pay.
   */
  employeeDeduction?: string | undefined;
  /**
   * The value of the company contribution
   */
  companyContribution?: string | undefined;
  uuid?: string | undefined;
  /**
   * An object representing the type and value of the company contribution.
   */
  contribution?: CompanyBenefitWithEmployeeBenefitsContribution | undefined;
};

/**
 * The representation of a company benefit.
 */
export type CompanyBenefitWithEmployeeBenefits = {
  /**
   * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
   */
  version?: string | undefined;
  /**
   * The UUID of the company benefit.
   */
  uuid: string;
  /**
   * The type of the benefit to which the company benefit belongs (same as benefit_id).
   */
  benefitType?: number | undefined;
  /**
   * Whether this benefit is active for employee participation. Company benefits may only be deactivated if no employees are actively participating.
   */
  active?: boolean | undefined;
  /**
   * The description of the company benefit. For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”.
   */
  description?: string | undefined;
  /**
   * Whether this company benefit can be deleted. Deletable will be set to true if the benefit has not been used in payroll, has no employee benefits associated, and the benefit is not owned by Gusto or a Partner
   */
  deletable?: boolean | undefined;
  /**
   * Whether employee deductions and company contributions can be set as percentages of payroll for an individual employee. This is determined by the type of benefit and is not configurable by the company.
   */
  supportsPercentageAmounts?: boolean | undefined;
  /**
   * Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits.
   */
  responsibleForEmployerTaxes?: boolean | undefined;
  /**
   * Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits.
   */
  responsibleForEmployeeW2?: boolean | undefined;
  employeeBenefits?: Array<EmployeeBenefits> | undefined;
};

/** @internal */
export const CompanyBenefitWithEmployeeBenefitsValueTiers$inboundSchema:
  z.ZodType<
    CompanyBenefitWithEmployeeBenefitsValueTiers,
    z.ZodTypeDef,
    unknown
  > = z.object({
    rate: z.string().optional(),
    threshold: z.string().optional(),
    threshold_delta: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "threshold_delta": "thresholdDelta",
    });
  });

/** @internal */
export type CompanyBenefitWithEmployeeBenefitsValueTiers$Outbound = {
  rate?: string | undefined;
  threshold?: string | undefined;
  threshold_delta?: string | undefined;
};

/** @internal */
export const CompanyBenefitWithEmployeeBenefitsValueTiers$outboundSchema:
  z.ZodType<
    CompanyBenefitWithEmployeeBenefitsValueTiers$Outbound,
    z.ZodTypeDef,
    CompanyBenefitWithEmployeeBenefitsValueTiers
  > = z.object({
    rate: z.string().optional(),
    threshold: z.string().optional(),
    thresholdDelta: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      thresholdDelta: "threshold_delta",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyBenefitWithEmployeeBenefitsValueTiers$ {
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsValueTiers$inboundSchema` instead. */
  export const inboundSchema =
    CompanyBenefitWithEmployeeBenefitsValueTiers$inboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsValueTiers$outboundSchema` instead. */
  export const outboundSchema =
    CompanyBenefitWithEmployeeBenefitsValueTiers$outboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsValueTiers$Outbound` instead. */
  export type Outbound = CompanyBenefitWithEmployeeBenefitsValueTiers$Outbound;
}

export function companyBenefitWithEmployeeBenefitsValueTiersToJSON(
  companyBenefitWithEmployeeBenefitsValueTiers:
    CompanyBenefitWithEmployeeBenefitsValueTiers,
): string {
  return JSON.stringify(
    CompanyBenefitWithEmployeeBenefitsValueTiers$outboundSchema.parse(
      companyBenefitWithEmployeeBenefitsValueTiers,
    ),
  );
}

export function companyBenefitWithEmployeeBenefitsValueTiersFromJSON(
  jsonString: string,
): SafeParseResult<
  CompanyBenefitWithEmployeeBenefitsValueTiers,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompanyBenefitWithEmployeeBenefitsValueTiers$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompanyBenefitWithEmployeeBenefitsValueTiers' from JSON`,
  );
}

/** @internal */
export const CompanyBenefitWithEmployeeBenefitsValue2$inboundSchema: z.ZodType<
  CompanyBenefitWithEmployeeBenefitsValue2,
  z.ZodTypeDef,
  unknown
> = z.object({
  tiers: z.array(
    z.lazy(() => CompanyBenefitWithEmployeeBenefitsValueTiers$inboundSchema),
  ).optional(),
});

/** @internal */
export type CompanyBenefitWithEmployeeBenefitsValue2$Outbound = {
  tiers?:
    | Array<CompanyBenefitWithEmployeeBenefitsValueTiers$Outbound>
    | undefined;
};

/** @internal */
export const CompanyBenefitWithEmployeeBenefitsValue2$outboundSchema: z.ZodType<
  CompanyBenefitWithEmployeeBenefitsValue2$Outbound,
  z.ZodTypeDef,
  CompanyBenefitWithEmployeeBenefitsValue2
> = z.object({
  tiers: z.array(
    z.lazy(() => CompanyBenefitWithEmployeeBenefitsValueTiers$outboundSchema),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyBenefitWithEmployeeBenefitsValue2$ {
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsValue2$inboundSchema` instead. */
  export const inboundSchema =
    CompanyBenefitWithEmployeeBenefitsValue2$inboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsValue2$outboundSchema` instead. */
  export const outboundSchema =
    CompanyBenefitWithEmployeeBenefitsValue2$outboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsValue2$Outbound` instead. */
  export type Outbound = CompanyBenefitWithEmployeeBenefitsValue2$Outbound;
}

export function companyBenefitWithEmployeeBenefitsValue2ToJSON(
  companyBenefitWithEmployeeBenefitsValue2:
    CompanyBenefitWithEmployeeBenefitsValue2,
): string {
  return JSON.stringify(
    CompanyBenefitWithEmployeeBenefitsValue2$outboundSchema.parse(
      companyBenefitWithEmployeeBenefitsValue2,
    ),
  );
}

export function companyBenefitWithEmployeeBenefitsValue2FromJSON(
  jsonString: string,
): SafeParseResult<
  CompanyBenefitWithEmployeeBenefitsValue2,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompanyBenefitWithEmployeeBenefitsValue2$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompanyBenefitWithEmployeeBenefitsValue2' from JSON`,
  );
}

/** @internal */
export const CompanyBenefitWithEmployeeBenefitsValue$inboundSchema: z.ZodType<
  CompanyBenefitWithEmployeeBenefitsValue,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CompanyBenefitWithEmployeeBenefitsValue2$inboundSchema),
  z.string(),
]);

/** @internal */
export type CompanyBenefitWithEmployeeBenefitsValue$Outbound =
  | CompanyBenefitWithEmployeeBenefitsValue2$Outbound
  | string;

/** @internal */
export const CompanyBenefitWithEmployeeBenefitsValue$outboundSchema: z.ZodType<
  CompanyBenefitWithEmployeeBenefitsValue$Outbound,
  z.ZodTypeDef,
  CompanyBenefitWithEmployeeBenefitsValue
> = z.union([
  z.lazy(() => CompanyBenefitWithEmployeeBenefitsValue2$outboundSchema),
  z.string(),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyBenefitWithEmployeeBenefitsValue$ {
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsValue$inboundSchema` instead. */
  export const inboundSchema =
    CompanyBenefitWithEmployeeBenefitsValue$inboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsValue$outboundSchema` instead. */
  export const outboundSchema =
    CompanyBenefitWithEmployeeBenefitsValue$outboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsValue$Outbound` instead. */
  export type Outbound = CompanyBenefitWithEmployeeBenefitsValue$Outbound;
}

export function companyBenefitWithEmployeeBenefitsValueToJSON(
  companyBenefitWithEmployeeBenefitsValue:
    CompanyBenefitWithEmployeeBenefitsValue,
): string {
  return JSON.stringify(
    CompanyBenefitWithEmployeeBenefitsValue$outboundSchema.parse(
      companyBenefitWithEmployeeBenefitsValue,
    ),
  );
}

export function companyBenefitWithEmployeeBenefitsValueFromJSON(
  jsonString: string,
): SafeParseResult<
  CompanyBenefitWithEmployeeBenefitsValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompanyBenefitWithEmployeeBenefitsValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompanyBenefitWithEmployeeBenefitsValue' from JSON`,
  );
}

/** @internal */
export const CompanyBenefitWithEmployeeBenefitsContribution$inboundSchema:
  z.ZodType<
    CompanyBenefitWithEmployeeBenefitsContribution,
    z.ZodTypeDef,
    unknown
  > = z.object({
    type: z.string().optional(),
    value: z.union([
      z.lazy(() => CompanyBenefitWithEmployeeBenefitsValue2$inboundSchema),
      z.string(),
    ]).optional(),
  });

/** @internal */
export type CompanyBenefitWithEmployeeBenefitsContribution$Outbound = {
  type?: string | undefined;
  value?:
    | CompanyBenefitWithEmployeeBenefitsValue2$Outbound
    | string
    | undefined;
};

/** @internal */
export const CompanyBenefitWithEmployeeBenefitsContribution$outboundSchema:
  z.ZodType<
    CompanyBenefitWithEmployeeBenefitsContribution$Outbound,
    z.ZodTypeDef,
    CompanyBenefitWithEmployeeBenefitsContribution
  > = z.object({
    type: z.string().optional(),
    value: z.union([
      z.lazy(() => CompanyBenefitWithEmployeeBenefitsValue2$outboundSchema),
      z.string(),
    ]).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyBenefitWithEmployeeBenefitsContribution$ {
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsContribution$inboundSchema` instead. */
  export const inboundSchema =
    CompanyBenefitWithEmployeeBenefitsContribution$inboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsContribution$outboundSchema` instead. */
  export const outboundSchema =
    CompanyBenefitWithEmployeeBenefitsContribution$outboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefitsContribution$Outbound` instead. */
  export type Outbound =
    CompanyBenefitWithEmployeeBenefitsContribution$Outbound;
}

export function companyBenefitWithEmployeeBenefitsContributionToJSON(
  companyBenefitWithEmployeeBenefitsContribution:
    CompanyBenefitWithEmployeeBenefitsContribution,
): string {
  return JSON.stringify(
    CompanyBenefitWithEmployeeBenefitsContribution$outboundSchema.parse(
      companyBenefitWithEmployeeBenefitsContribution,
    ),
  );
}

export function companyBenefitWithEmployeeBenefitsContributionFromJSON(
  jsonString: string,
): SafeParseResult<
  CompanyBenefitWithEmployeeBenefitsContribution,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompanyBenefitWithEmployeeBenefitsContribution$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'CompanyBenefitWithEmployeeBenefitsContribution' from JSON`,
  );
}

/** @internal */
export const EmployeeBenefits$inboundSchema: z.ZodType<
  EmployeeBenefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_uuid: z.string().optional(),
  company_benefit_uuid: z.string().optional(),
  active: z.boolean().default(true),
  deduct_as_percentage: z.boolean().default(false),
  employee_deduction: z.string().default("0.00"),
  company_contribution: z.string().optional(),
  uuid: z.string().optional(),
  contribution: z.lazy(() =>
    CompanyBenefitWithEmployeeBenefitsContribution$inboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_uuid": "employeeUuid",
    "company_benefit_uuid": "companyBenefitUuid",
    "deduct_as_percentage": "deductAsPercentage",
    "employee_deduction": "employeeDeduction",
    "company_contribution": "companyContribution",
  });
});

/** @internal */
export type EmployeeBenefits$Outbound = {
  employee_uuid?: string | undefined;
  company_benefit_uuid?: string | undefined;
  active: boolean;
  deduct_as_percentage: boolean;
  employee_deduction: string;
  company_contribution?: string | undefined;
  uuid?: string | undefined;
  contribution?:
    | CompanyBenefitWithEmployeeBenefitsContribution$Outbound
    | undefined;
};

/** @internal */
export const EmployeeBenefits$outboundSchema: z.ZodType<
  EmployeeBenefits$Outbound,
  z.ZodTypeDef,
  EmployeeBenefits
> = z.object({
  employeeUuid: z.string().optional(),
  companyBenefitUuid: z.string().optional(),
  active: z.boolean().default(true),
  deductAsPercentage: z.boolean().default(false),
  employeeDeduction: z.string().default("0.00"),
  companyContribution: z.string().optional(),
  uuid: z.string().optional(),
  contribution: z.lazy(() =>
    CompanyBenefitWithEmployeeBenefitsContribution$outboundSchema
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeUuid: "employee_uuid",
    companyBenefitUuid: "company_benefit_uuid",
    deductAsPercentage: "deduct_as_percentage",
    employeeDeduction: "employee_deduction",
    companyContribution: "company_contribution",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeBenefits$ {
  /** @deprecated use `EmployeeBenefits$inboundSchema` instead. */
  export const inboundSchema = EmployeeBenefits$inboundSchema;
  /** @deprecated use `EmployeeBenefits$outboundSchema` instead. */
  export const outboundSchema = EmployeeBenefits$outboundSchema;
  /** @deprecated use `EmployeeBenefits$Outbound` instead. */
  export type Outbound = EmployeeBenefits$Outbound;
}

export function employeeBenefitsToJSON(
  employeeBenefits: EmployeeBenefits,
): string {
  return JSON.stringify(
    EmployeeBenefits$outboundSchema.parse(employeeBenefits),
  );
}

export function employeeBenefitsFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeBenefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeBenefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeBenefits' from JSON`,
  );
}

/** @internal */
export const CompanyBenefitWithEmployeeBenefits$inboundSchema: z.ZodType<
  CompanyBenefitWithEmployeeBenefits,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.string().optional(),
  uuid: z.string(),
  benefit_type: z.number().optional(),
  active: z.boolean().default(true),
  description: z.string().optional(),
  deletable: z.boolean().optional(),
  supports_percentage_amounts: z.boolean().optional(),
  responsible_for_employer_taxes: z.boolean().optional(),
  responsible_for_employee_w2: z.boolean().optional(),
  employee_benefits: z.array(z.lazy(() => EmployeeBenefits$inboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "benefit_type": "benefitType",
    "supports_percentage_amounts": "supportsPercentageAmounts",
    "responsible_for_employer_taxes": "responsibleForEmployerTaxes",
    "responsible_for_employee_w2": "responsibleForEmployeeW2",
    "employee_benefits": "employeeBenefits",
  });
});

/** @internal */
export type CompanyBenefitWithEmployeeBenefits$Outbound = {
  version?: string | undefined;
  uuid: string;
  benefit_type?: number | undefined;
  active: boolean;
  description?: string | undefined;
  deletable?: boolean | undefined;
  supports_percentage_amounts?: boolean | undefined;
  responsible_for_employer_taxes?: boolean | undefined;
  responsible_for_employee_w2?: boolean | undefined;
  employee_benefits?: Array<EmployeeBenefits$Outbound> | undefined;
};

/** @internal */
export const CompanyBenefitWithEmployeeBenefits$outboundSchema: z.ZodType<
  CompanyBenefitWithEmployeeBenefits$Outbound,
  z.ZodTypeDef,
  CompanyBenefitWithEmployeeBenefits
> = z.object({
  version: z.string().optional(),
  uuid: z.string(),
  benefitType: z.number().optional(),
  active: z.boolean().default(true),
  description: z.string().optional(),
  deletable: z.boolean().optional(),
  supportsPercentageAmounts: z.boolean().optional(),
  responsibleForEmployerTaxes: z.boolean().optional(),
  responsibleForEmployeeW2: z.boolean().optional(),
  employeeBenefits: z.array(z.lazy(() => EmployeeBenefits$outboundSchema))
    .optional(),
}).transform((v) => {
  return remap$(v, {
    benefitType: "benefit_type",
    supportsPercentageAmounts: "supports_percentage_amounts",
    responsibleForEmployerTaxes: "responsible_for_employer_taxes",
    responsibleForEmployeeW2: "responsible_for_employee_w2",
    employeeBenefits: "employee_benefits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyBenefitWithEmployeeBenefits$ {
  /** @deprecated use `CompanyBenefitWithEmployeeBenefits$inboundSchema` instead. */
  export const inboundSchema = CompanyBenefitWithEmployeeBenefits$inboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefits$outboundSchema` instead. */
  export const outboundSchema =
    CompanyBenefitWithEmployeeBenefits$outboundSchema;
  /** @deprecated use `CompanyBenefitWithEmployeeBenefits$Outbound` instead. */
  export type Outbound = CompanyBenefitWithEmployeeBenefits$Outbound;
}

export function companyBenefitWithEmployeeBenefitsToJSON(
  companyBenefitWithEmployeeBenefits: CompanyBenefitWithEmployeeBenefits,
): string {
  return JSON.stringify(
    CompanyBenefitWithEmployeeBenefits$outboundSchema.parse(
      companyBenefitWithEmployeeBenefits,
    ),
  );
}

export function companyBenefitWithEmployeeBenefitsFromJSON(
  jsonString: string,
): SafeParseResult<CompanyBenefitWithEmployeeBenefits, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CompanyBenefitWithEmployeeBenefits$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyBenefitWithEmployeeBenefits' from JSON`,
  );
}
