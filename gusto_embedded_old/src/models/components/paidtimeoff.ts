/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The name of the paid time off type.
 */
export const Name = {
  VacationHours: "Vacation Hours",
  SickHours: "Sick Hours",
  HolidayHours: "Holiday Hours",
} as const;
/**
 * The name of the paid time off type.
 */
export type Name = ClosedEnum<typeof Name>;

/**
 * The representation of paid time off in Gusto.
 */
export type PaidTimeOff = {
  /**
   * The name of the paid time off type.
   */
  name?: Name | undefined;
  /**
   * The name of the time off policy.
   */
  policyName?: string | undefined;
  /**
   * The UUID of the time off policy.
   */
  policyUuid?: string | undefined;
  /**
   * The unit the PTO type is accrued in.
   */
  accrualUnit?: string | undefined;
  /**
   * The number of accrual units accrued per accrual period.
   */
  accrualRate?: string | undefined;
  /**
   * The accrual method of the time off policy
   */
  accrualMethod?: string | undefined;
  /**
   * The frequency at which the PTO type is accrued.
   */
  accrualPeriod?: string | undefined;
  /**
   * The number of accrual units accrued.
   */
  accrualBalance?: string | undefined;
  /**
   * The maximum number of accrual units allowed. A null value signifies no maximum.
   */
  maximumAccrualBalance?: string | null | undefined;
  /**
   * Whether the accrual balance is paid to the employee upon termination.
   */
  paidAtTermination?: boolean | undefined;
};

/** @internal */
export const Name$inboundSchema: z.ZodNativeEnum<typeof Name> = z.nativeEnum(
  Name,
);

/** @internal */
export const Name$outboundSchema: z.ZodNativeEnum<typeof Name> =
  Name$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Name$ {
  /** @deprecated use `Name$inboundSchema` instead. */
  export const inboundSchema = Name$inboundSchema;
  /** @deprecated use `Name$outboundSchema` instead. */
  export const outboundSchema = Name$outboundSchema;
}

/** @internal */
export const PaidTimeOff$inboundSchema: z.ZodType<
  PaidTimeOff,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: Name$inboundSchema.optional(),
  policy_name: z.string().optional(),
  policy_uuid: z.string().optional(),
  accrual_unit: z.string().optional(),
  accrual_rate: z.string().optional(),
  accrual_method: z.string().optional(),
  accrual_period: z.string().optional(),
  accrual_balance: z.string().optional(),
  maximum_accrual_balance: z.nullable(z.string()).optional(),
  paid_at_termination: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    "policy_name": "policyName",
    "policy_uuid": "policyUuid",
    "accrual_unit": "accrualUnit",
    "accrual_rate": "accrualRate",
    "accrual_method": "accrualMethod",
    "accrual_period": "accrualPeriod",
    "accrual_balance": "accrualBalance",
    "maximum_accrual_balance": "maximumAccrualBalance",
    "paid_at_termination": "paidAtTermination",
  });
});

/** @internal */
export type PaidTimeOff$Outbound = {
  name?: string | undefined;
  policy_name?: string | undefined;
  policy_uuid?: string | undefined;
  accrual_unit?: string | undefined;
  accrual_rate?: string | undefined;
  accrual_method?: string | undefined;
  accrual_period?: string | undefined;
  accrual_balance?: string | undefined;
  maximum_accrual_balance?: string | null | undefined;
  paid_at_termination?: boolean | undefined;
};

/** @internal */
export const PaidTimeOff$outboundSchema: z.ZodType<
  PaidTimeOff$Outbound,
  z.ZodTypeDef,
  PaidTimeOff
> = z.object({
  name: Name$outboundSchema.optional(),
  policyName: z.string().optional(),
  policyUuid: z.string().optional(),
  accrualUnit: z.string().optional(),
  accrualRate: z.string().optional(),
  accrualMethod: z.string().optional(),
  accrualPeriod: z.string().optional(),
  accrualBalance: z.string().optional(),
  maximumAccrualBalance: z.nullable(z.string()).optional(),
  paidAtTermination: z.boolean().optional(),
}).transform((v) => {
  return remap$(v, {
    policyName: "policy_name",
    policyUuid: "policy_uuid",
    accrualUnit: "accrual_unit",
    accrualRate: "accrual_rate",
    accrualMethod: "accrual_method",
    accrualPeriod: "accrual_period",
    accrualBalance: "accrual_balance",
    maximumAccrualBalance: "maximum_accrual_balance",
    paidAtTermination: "paid_at_termination",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaidTimeOff$ {
  /** @deprecated use `PaidTimeOff$inboundSchema` instead. */
  export const inboundSchema = PaidTimeOff$inboundSchema;
  /** @deprecated use `PaidTimeOff$outboundSchema` instead. */
  export const outboundSchema = PaidTimeOff$outboundSchema;
  /** @deprecated use `PaidTimeOff$Outbound` instead. */
  export type Outbound = PaidTimeOff$Outbound;
}

export function paidTimeOffToJSON(paidTimeOff: PaidTimeOff): string {
  return JSON.stringify(PaidTimeOff$outboundSchema.parse(paidTimeOff));
}

export function paidTimeOffFromJSON(
  jsonString: string,
): SafeParseResult<PaidTimeOff, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaidTimeOff$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaidTimeOff' from JSON`,
  );
}
