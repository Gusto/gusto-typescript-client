/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Bank account type
 */
export const AccountType = {
  Checking: "Checking",
  Savings: "Savings",
} as const;
/**
 * Bank account type
 */
export type AccountType = ClosedEnum<typeof AccountType>;

/**
 * The verification status of the bank account.
 *
 * @remarks
 *
 * 'awaiting_deposits' means the bank account is just created and money is being transferred.
 * 'ready_for_verification' means the micro-deposits are completed and the verification process can begin by using the verify endpoint.
 * 'verified' means the bank account is verified.
 */
export const VerificationStatus = {
  AwaitingDeposits: "awaiting_deposits",
  ReadyForVerification: "ready_for_verification",
  Verified: "verified",
} as const;
/**
 * The verification status of the bank account.
 *
 * @remarks
 *
 * 'awaiting_deposits' means the bank account is just created and money is being transferred.
 * 'ready_for_verification' means the micro-deposits are completed and the verification process can begin by using the verify endpoint.
 * 'verified' means the bank account is verified.
 */
export type VerificationStatus = ClosedEnum<typeof VerificationStatus>;

/**
 * The verification type of the bank account.
 *
 * @remarks
 *
 * 'bank_deposits' means the bank account is connected by entering routing and accounting numbers and verifying through micro-deposits.
 * 'plaid' means the bank account is connected through Plaid.
 */
export const VerificationType = {
  BankDeposits: "bank_deposits",
  Plaid: "plaid",
  PlaidExternal: "plaid_external",
} as const;
/**
 * The verification type of the bank account.
 *
 * @remarks
 *
 * 'bank_deposits' means the bank account is connected by entering routing and accounting numbers and verifying through micro-deposits.
 * 'plaid' means the bank account is connected through Plaid.
 */
export type VerificationType = ClosedEnum<typeof VerificationType>;

/**
 * The Plaid connection status of the bank account. Only applies when verification type is Plaid.
 */
export const PlaidStatus = {
  Connected: "connected",
  Disconnected: "disconnected",
} as const;
/**
 * The Plaid connection status of the bank account. Only applies when verification type is Plaid.
 */
export type PlaidStatus = ClosedEnum<typeof PlaidStatus>;

/**
 * The company bank account
 */
export type CompanyBankAccount = {
  /**
   * UUID of the bank account
   */
  uuid: string;
  /**
   * UUID of the company
   */
  companyUuid?: string | undefined;
  /**
   * Bank account type
   */
  accountType?: AccountType | undefined;
  /**
   * The bank account's routing number
   */
  routingNumber?: string | undefined;
  /**
   * Masked bank account number
   */
  hiddenAccountNumber?: string | undefined;
  /**
   * The verification status of the bank account.
   *
   * @remarks
   *
   * 'awaiting_deposits' means the bank account is just created and money is being transferred.
   * 'ready_for_verification' means the micro-deposits are completed and the verification process can begin by using the verify endpoint.
   * 'verified' means the bank account is verified.
   */
  verificationStatus?: VerificationStatus | undefined;
  /**
   * The verification type of the bank account.
   *
   * @remarks
   *
   * 'bank_deposits' means the bank account is connected by entering routing and accounting numbers and verifying through micro-deposits.
   * 'plaid' means the bank account is connected through Plaid.
   */
  verificationType?: VerificationType | undefined;
  /**
   * The Plaid connection status of the bank account. Only applies when verification type is Plaid.
   */
  plaidStatus?: PlaidStatus | null | undefined;
  /**
   * The last fetch balance for the bank account. Please be aware that this amount does not reflect the most up-to-date balance and only applies when the verification type is Plaid.
   */
  lastCachedBalance?: string | null | undefined;
  /**
   * The balance fetch date associated with the last_cached_balance. Only applies when verification type is Plaid.
   */
  balanceFetchedDate?: string | null | undefined;
  /**
   * Name of bank account
   */
  name?: string | undefined;
};

/** @internal */
export const AccountType$inboundSchema: z.ZodNativeEnum<typeof AccountType> = z
  .nativeEnum(AccountType);

/** @internal */
export const AccountType$outboundSchema: z.ZodNativeEnum<typeof AccountType> =
  AccountType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountType$ {
  /** @deprecated use `AccountType$inboundSchema` instead. */
  export const inboundSchema = AccountType$inboundSchema;
  /** @deprecated use `AccountType$outboundSchema` instead. */
  export const outboundSchema = AccountType$outboundSchema;
}

/** @internal */
export const VerificationStatus$inboundSchema: z.ZodNativeEnum<
  typeof VerificationStatus
> = z.nativeEnum(VerificationStatus);

/** @internal */
export const VerificationStatus$outboundSchema: z.ZodNativeEnum<
  typeof VerificationStatus
> = VerificationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationStatus$ {
  /** @deprecated use `VerificationStatus$inboundSchema` instead. */
  export const inboundSchema = VerificationStatus$inboundSchema;
  /** @deprecated use `VerificationStatus$outboundSchema` instead. */
  export const outboundSchema = VerificationStatus$outboundSchema;
}

/** @internal */
export const VerificationType$inboundSchema: z.ZodNativeEnum<
  typeof VerificationType
> = z.nativeEnum(VerificationType);

/** @internal */
export const VerificationType$outboundSchema: z.ZodNativeEnum<
  typeof VerificationType
> = VerificationType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VerificationType$ {
  /** @deprecated use `VerificationType$inboundSchema` instead. */
  export const inboundSchema = VerificationType$inboundSchema;
  /** @deprecated use `VerificationType$outboundSchema` instead. */
  export const outboundSchema = VerificationType$outboundSchema;
}

/** @internal */
export const PlaidStatus$inboundSchema: z.ZodNativeEnum<typeof PlaidStatus> = z
  .nativeEnum(PlaidStatus);

/** @internal */
export const PlaidStatus$outboundSchema: z.ZodNativeEnum<typeof PlaidStatus> =
  PlaidStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlaidStatus$ {
  /** @deprecated use `PlaidStatus$inboundSchema` instead. */
  export const inboundSchema = PlaidStatus$inboundSchema;
  /** @deprecated use `PlaidStatus$outboundSchema` instead. */
  export const outboundSchema = PlaidStatus$outboundSchema;
}

/** @internal */
export const CompanyBankAccount$inboundSchema: z.ZodType<
  CompanyBankAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  company_uuid: z.string().optional(),
  account_type: AccountType$inboundSchema.optional(),
  routing_number: z.string().optional(),
  hidden_account_number: z.string().optional(),
  verification_status: VerificationStatus$inboundSchema.optional(),
  verification_type: VerificationType$inboundSchema.optional(),
  plaid_status: z.nullable(PlaidStatus$inboundSchema).optional(),
  last_cached_balance: z.nullable(z.string()).optional(),
  balance_fetched_date: z.nullable(z.string()).optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "company_uuid": "companyUuid",
    "account_type": "accountType",
    "routing_number": "routingNumber",
    "hidden_account_number": "hiddenAccountNumber",
    "verification_status": "verificationStatus",
    "verification_type": "verificationType",
    "plaid_status": "plaidStatus",
    "last_cached_balance": "lastCachedBalance",
    "balance_fetched_date": "balanceFetchedDate",
  });
});

/** @internal */
export type CompanyBankAccount$Outbound = {
  uuid: string;
  company_uuid?: string | undefined;
  account_type?: string | undefined;
  routing_number?: string | undefined;
  hidden_account_number?: string | undefined;
  verification_status?: string | undefined;
  verification_type?: string | undefined;
  plaid_status?: string | null | undefined;
  last_cached_balance?: string | null | undefined;
  balance_fetched_date?: string | null | undefined;
  name?: string | undefined;
};

/** @internal */
export const CompanyBankAccount$outboundSchema: z.ZodType<
  CompanyBankAccount$Outbound,
  z.ZodTypeDef,
  CompanyBankAccount
> = z.object({
  uuid: z.string(),
  companyUuid: z.string().optional(),
  accountType: AccountType$outboundSchema.optional(),
  routingNumber: z.string().optional(),
  hiddenAccountNumber: z.string().optional(),
  verificationStatus: VerificationStatus$outboundSchema.optional(),
  verificationType: VerificationType$outboundSchema.optional(),
  plaidStatus: z.nullable(PlaidStatus$outboundSchema).optional(),
  lastCachedBalance: z.nullable(z.string()).optional(),
  balanceFetchedDate: z.nullable(z.string()).optional(),
  name: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    companyUuid: "company_uuid",
    accountType: "account_type",
    routingNumber: "routing_number",
    hiddenAccountNumber: "hidden_account_number",
    verificationStatus: "verification_status",
    verificationType: "verification_type",
    plaidStatus: "plaid_status",
    lastCachedBalance: "last_cached_balance",
    balanceFetchedDate: "balance_fetched_date",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyBankAccount$ {
  /** @deprecated use `CompanyBankAccount$inboundSchema` instead. */
  export const inboundSchema = CompanyBankAccount$inboundSchema;
  /** @deprecated use `CompanyBankAccount$outboundSchema` instead. */
  export const outboundSchema = CompanyBankAccount$outboundSchema;
  /** @deprecated use `CompanyBankAccount$Outbound` instead. */
  export type Outbound = CompanyBankAccount$Outbound;
}

export function companyBankAccountToJSON(
  companyBankAccount: CompanyBankAccount,
): string {
  return JSON.stringify(
    CompanyBankAccount$outboundSchema.parse(companyBankAccount),
  );
}

export function companyBankAccountFromJSON(
  jsonString: string,
): SafeParseResult<CompanyBankAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyBankAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyBankAccount' from JSON`,
  );
}
