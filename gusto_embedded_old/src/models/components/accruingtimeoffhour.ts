/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The representation of an unprocessed termination pay period.
 */
export type AccruingTimeOffHour = {
  /**
   * A unique identifier of the time off policy.
   */
  timeOffPolicyUuid?: string | undefined;
  /**
   * Hours accrued during this pay period.
   */
  hours?: string | undefined;
};

/** @internal */
export const AccruingTimeOffHour$inboundSchema: z.ZodType<
  AccruingTimeOffHour,
  z.ZodTypeDef,
  unknown
> = z.object({
  time_off_policy_uuid: z.string().optional(),
  hours: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "time_off_policy_uuid": "timeOffPolicyUuid",
  });
});

/** @internal */
export type AccruingTimeOffHour$Outbound = {
  time_off_policy_uuid?: string | undefined;
  hours?: string | undefined;
};

/** @internal */
export const AccruingTimeOffHour$outboundSchema: z.ZodType<
  AccruingTimeOffHour$Outbound,
  z.ZodTypeDef,
  AccruingTimeOffHour
> = z.object({
  timeOffPolicyUuid: z.string().optional(),
  hours: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    timeOffPolicyUuid: "time_off_policy_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccruingTimeOffHour$ {
  /** @deprecated use `AccruingTimeOffHour$inboundSchema` instead. */
  export const inboundSchema = AccruingTimeOffHour$inboundSchema;
  /** @deprecated use `AccruingTimeOffHour$outboundSchema` instead. */
  export const outboundSchema = AccruingTimeOffHour$outboundSchema;
  /** @deprecated use `AccruingTimeOffHour$Outbound` instead. */
  export type Outbound = AccruingTimeOffHour$Outbound;
}

export function accruingTimeOffHourToJSON(
  accruingTimeOffHour: AccruingTimeOffHour,
): string {
  return JSON.stringify(
    AccruingTimeOffHour$outboundSchema.parse(accruingTimeOffHour),
  );
}

export function accruingTimeOffHourFromJSON(
  jsonString: string,
): SafeParseResult<AccruingTimeOffHour, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccruingTimeOffHour$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccruingTimeOffHour' from JSON`,
  );
}
