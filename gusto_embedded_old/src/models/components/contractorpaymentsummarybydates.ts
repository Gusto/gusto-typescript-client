/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ContractorPayment,
  ContractorPayment$inboundSchema,
  ContractorPayment$Outbound,
  ContractorPayment$outboundSchema,
} from "./contractorpayment.js";

/**
 * The wage and reimbursement totals for all contractor payments within a given time period.
 */
export type ContractorPaymentSummaryByDatesTotal = {
  /**
   * The total reimbursements for contractor payments within a given time period.
   */
  reimbursements?: string | undefined;
  /**
   * The total wages for contractor payments within a given time period.
   */
  wages?: string | undefined;
};

export type ContractorPaymentSummaryByDatesContractorPayments = {
  /**
   * The UUID of the contractor.
   */
  contractorUuid?: string | undefined;
  /**
   * The payment check date.
   */
  checkDate?: string | undefined;
  /**
   * The total reimbursements for the contractor within a given time period.
   */
  reimbursementTotal?: string | undefined;
  /**
   * The total wages for the contractor within a given time period.
   */
  wageTotal?: string | undefined;
  /**
   * The contractorâ€™s payments within a given time period.
   *
   * @remarks
   */
  payments?: Array<ContractorPayment> | undefined;
};

/**
 * The representation of the summary of contractor payments for a given company in a given time period.
 */
export type ContractorPaymentSummaryByDates = {
  /**
   * The wage and reimbursement totals for all contractor payments within a given time period.
   */
  total?: ContractorPaymentSummaryByDatesTotal | undefined;
  /**
   * The individual contractor payments, within a given time period, grouped by check date.
   */
  contractorPayments?:
    | Array<ContractorPaymentSummaryByDatesContractorPayments>
    | undefined;
};

/** @internal */
export const ContractorPaymentSummaryByDatesTotal$inboundSchema: z.ZodType<
  ContractorPaymentSummaryByDatesTotal,
  z.ZodTypeDef,
  unknown
> = z.object({
  reimbursements: z.string().optional(),
  wages: z.string().optional(),
});

/** @internal */
export type ContractorPaymentSummaryByDatesTotal$Outbound = {
  reimbursements?: string | undefined;
  wages?: string | undefined;
};

/** @internal */
export const ContractorPaymentSummaryByDatesTotal$outboundSchema: z.ZodType<
  ContractorPaymentSummaryByDatesTotal$Outbound,
  z.ZodTypeDef,
  ContractorPaymentSummaryByDatesTotal
> = z.object({
  reimbursements: z.string().optional(),
  wages: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentSummaryByDatesTotal$ {
  /** @deprecated use `ContractorPaymentSummaryByDatesTotal$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentSummaryByDatesTotal$inboundSchema;
  /** @deprecated use `ContractorPaymentSummaryByDatesTotal$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentSummaryByDatesTotal$outboundSchema;
  /** @deprecated use `ContractorPaymentSummaryByDatesTotal$Outbound` instead. */
  export type Outbound = ContractorPaymentSummaryByDatesTotal$Outbound;
}

export function contractorPaymentSummaryByDatesTotalToJSON(
  contractorPaymentSummaryByDatesTotal: ContractorPaymentSummaryByDatesTotal,
): string {
  return JSON.stringify(
    ContractorPaymentSummaryByDatesTotal$outboundSchema.parse(
      contractorPaymentSummaryByDatesTotal,
    ),
  );
}

export function contractorPaymentSummaryByDatesTotalFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentSummaryByDatesTotal, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      ContractorPaymentSummaryByDatesTotal$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentSummaryByDatesTotal' from JSON`,
  );
}

/** @internal */
export const ContractorPaymentSummaryByDatesContractorPayments$inboundSchema:
  z.ZodType<
    ContractorPaymentSummaryByDatesContractorPayments,
    z.ZodTypeDef,
    unknown
  > = z.object({
    contractor_uuid: z.string().optional(),
    check_date: z.string().optional(),
    reimbursement_total: z.string().optional(),
    wage_total: z.string().optional(),
    payments: z.array(ContractorPayment$inboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      "contractor_uuid": "contractorUuid",
      "check_date": "checkDate",
      "reimbursement_total": "reimbursementTotal",
      "wage_total": "wageTotal",
    });
  });

/** @internal */
export type ContractorPaymentSummaryByDatesContractorPayments$Outbound = {
  contractor_uuid?: string | undefined;
  check_date?: string | undefined;
  reimbursement_total?: string | undefined;
  wage_total?: string | undefined;
  payments?: Array<ContractorPayment$Outbound> | undefined;
};

/** @internal */
export const ContractorPaymentSummaryByDatesContractorPayments$outboundSchema:
  z.ZodType<
    ContractorPaymentSummaryByDatesContractorPayments$Outbound,
    z.ZodTypeDef,
    ContractorPaymentSummaryByDatesContractorPayments
  > = z.object({
    contractorUuid: z.string().optional(),
    checkDate: z.string().optional(),
    reimbursementTotal: z.string().optional(),
    wageTotal: z.string().optional(),
    payments: z.array(ContractorPayment$outboundSchema).optional(),
  }).transform((v) => {
    return remap$(v, {
      contractorUuid: "contractor_uuid",
      checkDate: "check_date",
      reimbursementTotal: "reimbursement_total",
      wageTotal: "wage_total",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentSummaryByDatesContractorPayments$ {
  /** @deprecated use `ContractorPaymentSummaryByDatesContractorPayments$inboundSchema` instead. */
  export const inboundSchema =
    ContractorPaymentSummaryByDatesContractorPayments$inboundSchema;
  /** @deprecated use `ContractorPaymentSummaryByDatesContractorPayments$outboundSchema` instead. */
  export const outboundSchema =
    ContractorPaymentSummaryByDatesContractorPayments$outboundSchema;
  /** @deprecated use `ContractorPaymentSummaryByDatesContractorPayments$Outbound` instead. */
  export type Outbound =
    ContractorPaymentSummaryByDatesContractorPayments$Outbound;
}

export function contractorPaymentSummaryByDatesContractorPaymentsToJSON(
  contractorPaymentSummaryByDatesContractorPayments:
    ContractorPaymentSummaryByDatesContractorPayments,
): string {
  return JSON.stringify(
    ContractorPaymentSummaryByDatesContractorPayments$outboundSchema.parse(
      contractorPaymentSummaryByDatesContractorPayments,
    ),
  );
}

export function contractorPaymentSummaryByDatesContractorPaymentsFromJSON(
  jsonString: string,
): SafeParseResult<
  ContractorPaymentSummaryByDatesContractorPayments,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      ContractorPaymentSummaryByDatesContractorPayments$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'ContractorPaymentSummaryByDatesContractorPayments' from JSON`,
  );
}

/** @internal */
export const ContractorPaymentSummaryByDates$inboundSchema: z.ZodType<
  ContractorPaymentSummaryByDates,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.lazy(() => ContractorPaymentSummaryByDatesTotal$inboundSchema)
    .optional(),
  contractor_payments: z.array(
    z.lazy(() =>
      ContractorPaymentSummaryByDatesContractorPayments$inboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "contractor_payments": "contractorPayments",
  });
});

/** @internal */
export type ContractorPaymentSummaryByDates$Outbound = {
  total?: ContractorPaymentSummaryByDatesTotal$Outbound | undefined;
  contractor_payments?:
    | Array<ContractorPaymentSummaryByDatesContractorPayments$Outbound>
    | undefined;
};

/** @internal */
export const ContractorPaymentSummaryByDates$outboundSchema: z.ZodType<
  ContractorPaymentSummaryByDates$Outbound,
  z.ZodTypeDef,
  ContractorPaymentSummaryByDates
> = z.object({
  total: z.lazy(() => ContractorPaymentSummaryByDatesTotal$outboundSchema)
    .optional(),
  contractorPayments: z.array(
    z.lazy(() =>
      ContractorPaymentSummaryByDatesContractorPayments$outboundSchema
    ),
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    contractorPayments: "contractor_payments",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractorPaymentSummaryByDates$ {
  /** @deprecated use `ContractorPaymentSummaryByDates$inboundSchema` instead. */
  export const inboundSchema = ContractorPaymentSummaryByDates$inboundSchema;
  /** @deprecated use `ContractorPaymentSummaryByDates$outboundSchema` instead. */
  export const outboundSchema = ContractorPaymentSummaryByDates$outboundSchema;
  /** @deprecated use `ContractorPaymentSummaryByDates$Outbound` instead. */
  export type Outbound = ContractorPaymentSummaryByDates$Outbound;
}

export function contractorPaymentSummaryByDatesToJSON(
  contractorPaymentSummaryByDates: ContractorPaymentSummaryByDates,
): string {
  return JSON.stringify(
    ContractorPaymentSummaryByDates$outboundSchema.parse(
      contractorPaymentSummaryByDates,
    ),
  );
}

export function contractorPaymentSummaryByDatesFromJSON(
  jsonString: string,
): SafeParseResult<ContractorPaymentSummaryByDates, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ContractorPaymentSummaryByDates$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ContractorPaymentSummaryByDates' from JSON`,
  );
}
