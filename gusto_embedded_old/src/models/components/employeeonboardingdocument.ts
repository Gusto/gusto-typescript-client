/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Configuration for an employee onboarding documents during onboarding
 */
export type EmployeeOnboardingDocument = {
  /**
   * Whether to include Form I-9 for an employee during onboarding
   */
  i9Document?: string | undefined;
};

/** @internal */
export const EmployeeOnboardingDocument$inboundSchema: z.ZodType<
  EmployeeOnboardingDocument,
  z.ZodTypeDef,
  unknown
> = z.object({
  i9_document: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "i9_document": "i9Document",
  });
});

/** @internal */
export type EmployeeOnboardingDocument$Outbound = {
  i9_document?: string | undefined;
};

/** @internal */
export const EmployeeOnboardingDocument$outboundSchema: z.ZodType<
  EmployeeOnboardingDocument$Outbound,
  z.ZodTypeDef,
  EmployeeOnboardingDocument
> = z.object({
  i9Document: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    i9Document: "i9_document",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeOnboardingDocument$ {
  /** @deprecated use `EmployeeOnboardingDocument$inboundSchema` instead. */
  export const inboundSchema = EmployeeOnboardingDocument$inboundSchema;
  /** @deprecated use `EmployeeOnboardingDocument$outboundSchema` instead. */
  export const outboundSchema = EmployeeOnboardingDocument$outboundSchema;
  /** @deprecated use `EmployeeOnboardingDocument$Outbound` instead. */
  export type Outbound = EmployeeOnboardingDocument$Outbound;
}

export function employeeOnboardingDocumentToJSON(
  employeeOnboardingDocument: EmployeeOnboardingDocument,
): string {
  return JSON.stringify(
    EmployeeOnboardingDocument$outboundSchema.parse(employeeOnboardingDocument),
  );
}

export function employeeOnboardingDocumentFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeOnboardingDocument, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeOnboardingDocument$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeOnboardingDocument' from JSON`,
  );
}
