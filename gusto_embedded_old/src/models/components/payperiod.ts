/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Whether it is regular pay period or transition pay period.
 */
export const PayrollType = {
  Regular: "regular",
  Transition: "transition",
} as const;
/**
 * Whether it is regular pay period or transition pay period.
 */
export type PayrollType = ClosedEnum<typeof PayrollType>;

/**
 * Information about the payroll for the pay period.
 */
export type PayPeriodPayroll = {
  /**
   * The UUID of the payroll for this pay period.
   */
  payrollUuid?: string | undefined;
  /**
   * The date on which employees will be paid for the payroll if the payroll is submitted on time.
   */
  checkDate?: string | undefined;
  /**
   * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
   */
  processed?: boolean | undefined;
  /**
   * The date by which payroll should be run for employees to be paid on time. Payroll data, such as time and attendance data, should be submitted on or before this date.
   */
  payrollDeadline?: Date | undefined;
  /**
   * Whether it is regular pay period or transition pay period.
   */
  payrollType?: PayrollType | undefined;
};

/**
 * The representation of a pay period.
 */
export type PayPeriod = {
  /**
   * The start date, inclusive, of the pay period.
   */
  startDate?: string | undefined;
  /**
   * The end date, inclusive, of the pay period.
   */
  endDate?: string | undefined;
  /**
   * A unique identifier of the pay schedule to which the pay period belongs.
   */
  payScheduleUuid?: string | undefined;
  /**
   * Information about the payroll for the pay period.
   */
  payroll?: PayPeriodPayroll | undefined;
};

/** @internal */
export const PayrollType$inboundSchema: z.ZodNativeEnum<typeof PayrollType> = z
  .nativeEnum(PayrollType);

/** @internal */
export const PayrollType$outboundSchema: z.ZodNativeEnum<typeof PayrollType> =
  PayrollType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollType$ {
  /** @deprecated use `PayrollType$inboundSchema` instead. */
  export const inboundSchema = PayrollType$inboundSchema;
  /** @deprecated use `PayrollType$outboundSchema` instead. */
  export const outboundSchema = PayrollType$outboundSchema;
}

/** @internal */
export const PayPeriodPayroll$inboundSchema: z.ZodType<
  PayPeriodPayroll,
  z.ZodTypeDef,
  unknown
> = z.object({
  payroll_uuid: z.string().optional(),
  check_date: z.string().optional(),
  processed: z.boolean().optional(),
  payroll_deadline: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  payroll_type: PayrollType$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "payroll_uuid": "payrollUuid",
    "check_date": "checkDate",
    "payroll_deadline": "payrollDeadline",
    "payroll_type": "payrollType",
  });
});

/** @internal */
export type PayPeriodPayroll$Outbound = {
  payroll_uuid?: string | undefined;
  check_date?: string | undefined;
  processed?: boolean | undefined;
  payroll_deadline?: string | undefined;
  payroll_type?: string | undefined;
};

/** @internal */
export const PayPeriodPayroll$outboundSchema: z.ZodType<
  PayPeriodPayroll$Outbound,
  z.ZodTypeDef,
  PayPeriodPayroll
> = z.object({
  payrollUuid: z.string().optional(),
  checkDate: z.string().optional(),
  processed: z.boolean().optional(),
  payrollDeadline: z.date().transform(v => v.toISOString()).optional(),
  payrollType: PayrollType$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    payrollUuid: "payroll_uuid",
    checkDate: "check_date",
    payrollDeadline: "payroll_deadline",
    payrollType: "payroll_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayPeriodPayroll$ {
  /** @deprecated use `PayPeriodPayroll$inboundSchema` instead. */
  export const inboundSchema = PayPeriodPayroll$inboundSchema;
  /** @deprecated use `PayPeriodPayroll$outboundSchema` instead. */
  export const outboundSchema = PayPeriodPayroll$outboundSchema;
  /** @deprecated use `PayPeriodPayroll$Outbound` instead. */
  export type Outbound = PayPeriodPayroll$Outbound;
}

export function payPeriodPayrollToJSON(
  payPeriodPayroll: PayPeriodPayroll,
): string {
  return JSON.stringify(
    PayPeriodPayroll$outboundSchema.parse(payPeriodPayroll),
  );
}

export function payPeriodPayrollFromJSON(
  jsonString: string,
): SafeParseResult<PayPeriodPayroll, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayPeriodPayroll$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayPeriodPayroll' from JSON`,
  );
}

/** @internal */
export const PayPeriod$inboundSchema: z.ZodType<
  PayPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  start_date: z.string().optional(),
  end_date: z.string().optional(),
  pay_schedule_uuid: z.string().optional(),
  payroll: z.lazy(() => PayPeriodPayroll$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "start_date": "startDate",
    "end_date": "endDate",
    "pay_schedule_uuid": "payScheduleUuid",
  });
});

/** @internal */
export type PayPeriod$Outbound = {
  start_date?: string | undefined;
  end_date?: string | undefined;
  pay_schedule_uuid?: string | undefined;
  payroll?: PayPeriodPayroll$Outbound | undefined;
};

/** @internal */
export const PayPeriod$outboundSchema: z.ZodType<
  PayPeriod$Outbound,
  z.ZodTypeDef,
  PayPeriod
> = z.object({
  startDate: z.string().optional(),
  endDate: z.string().optional(),
  payScheduleUuid: z.string().optional(),
  payroll: z.lazy(() => PayPeriodPayroll$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    startDate: "start_date",
    endDate: "end_date",
    payScheduleUuid: "pay_schedule_uuid",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayPeriod$ {
  /** @deprecated use `PayPeriod$inboundSchema` instead. */
  export const inboundSchema = PayPeriod$inboundSchema;
  /** @deprecated use `PayPeriod$outboundSchema` instead. */
  export const outboundSchema = PayPeriod$outboundSchema;
  /** @deprecated use `PayPeriod$Outbound` instead. */
  export type Outbound = PayPeriod$Outbound;
}

export function payPeriodToJSON(payPeriod: PayPeriod): string {
  return JSON.stringify(PayPeriod$outboundSchema.parse(payPeriod));
}

export function payPeriodFromJSON(
  jsonString: string,
): SafeParseResult<PayPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayPeriod' from JSON`,
  );
}
