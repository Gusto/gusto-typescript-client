/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Example response
 */
export type FormPdf = {
  /**
   * the UUID of the form
   */
  uuid: string;
  /**
   * the URL of the form
   */
  documentUrl?: string | undefined;
};

/** @internal */
export const FormPdf$inboundSchema: z.ZodType<FormPdf, z.ZodTypeDef, unknown> =
  z.object({
    uuid: z.string(),
    document_url: z.string().optional(),
  }).transform((v) => {
    return remap$(v, {
      "document_url": "documentUrl",
    });
  });

/** @internal */
export type FormPdf$Outbound = {
  uuid: string;
  document_url?: string | undefined;
};

/** @internal */
export const FormPdf$outboundSchema: z.ZodType<
  FormPdf$Outbound,
  z.ZodTypeDef,
  FormPdf
> = z.object({
  uuid: z.string(),
  documentUrl: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    documentUrl: "document_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FormPdf$ {
  /** @deprecated use `FormPdf$inboundSchema` instead. */
  export const inboundSchema = FormPdf$inboundSchema;
  /** @deprecated use `FormPdf$outboundSchema` instead. */
  export const outboundSchema = FormPdf$outboundSchema;
  /** @deprecated use `FormPdf$Outbound` instead. */
  export type Outbound = FormPdf$Outbound;
}

export function formPdfToJSON(formPdf: FormPdf): string {
  return JSON.stringify(FormPdf$outboundSchema.parse(formPdf));
}

export function formPdfFromJSON(
  jsonString: string,
): SafeParseResult<FormPdf, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FormPdf$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FormPdf' from JSON`,
  );
}
