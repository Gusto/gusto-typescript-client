/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  EntityErrorObject,
  EntityErrorObject$inboundSchema,
  EntityErrorObject$Outbound,
  EntityErrorObject$outboundSchema,
} from "./entityerrorobject.js";

/**
 * The status of the payroll processing request
 */
export const PayrollProcessingRequestStatus = {
  Calculating: "calculating",
  CalculateSuccess: "calculate_success",
  Submitting: "submitting",
  SubmitSuccess: "submit_success",
  ProcessingFailed: "processing_failed",
} as const;
/**
 * The status of the payroll processing request
 */
export type PayrollProcessingRequestStatus = ClosedEnum<
  typeof PayrollProcessingRequestStatus
>;

export type PayrollProcessingRequest = {
  /**
   * The status of the payroll processing request
   */
  status?: PayrollProcessingRequestStatus | undefined;
  /**
   * Errors that occurred during async payroll processing
   */
  errors?: Array<EntityErrorObject> | undefined;
};

/** @internal */
export const PayrollProcessingRequestStatus$inboundSchema: z.ZodNativeEnum<
  typeof PayrollProcessingRequestStatus
> = z.nativeEnum(PayrollProcessingRequestStatus);

/** @internal */
export const PayrollProcessingRequestStatus$outboundSchema: z.ZodNativeEnum<
  typeof PayrollProcessingRequestStatus
> = PayrollProcessingRequestStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollProcessingRequestStatus$ {
  /** @deprecated use `PayrollProcessingRequestStatus$inboundSchema` instead. */
  export const inboundSchema = PayrollProcessingRequestStatus$inboundSchema;
  /** @deprecated use `PayrollProcessingRequestStatus$outboundSchema` instead. */
  export const outboundSchema = PayrollProcessingRequestStatus$outboundSchema;
}

/** @internal */
export const PayrollProcessingRequest$inboundSchema: z.ZodType<
  PayrollProcessingRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PayrollProcessingRequestStatus$inboundSchema.optional(),
  errors: z.array(EntityErrorObject$inboundSchema).optional(),
});

/** @internal */
export type PayrollProcessingRequest$Outbound = {
  status?: string | undefined;
  errors?: Array<EntityErrorObject$Outbound> | undefined;
};

/** @internal */
export const PayrollProcessingRequest$outboundSchema: z.ZodType<
  PayrollProcessingRequest$Outbound,
  z.ZodTypeDef,
  PayrollProcessingRequest
> = z.object({
  status: PayrollProcessingRequestStatus$outboundSchema.optional(),
  errors: z.array(EntityErrorObject$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PayrollProcessingRequest$ {
  /** @deprecated use `PayrollProcessingRequest$inboundSchema` instead. */
  export const inboundSchema = PayrollProcessingRequest$inboundSchema;
  /** @deprecated use `PayrollProcessingRequest$outboundSchema` instead. */
  export const outboundSchema = PayrollProcessingRequest$outboundSchema;
  /** @deprecated use `PayrollProcessingRequest$Outbound` instead. */
  export type Outbound = PayrollProcessingRequest$Outbound;
}

export function payrollProcessingRequestToJSON(
  payrollProcessingRequest: PayrollProcessingRequest,
): string {
  return JSON.stringify(
    PayrollProcessingRequest$outboundSchema.parse(payrollProcessingRequest),
  );
}

export function payrollProcessingRequestFromJSON(
  jsonString: string,
): SafeParseResult<PayrollProcessingRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PayrollProcessingRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PayrollProcessingRequest' from JSON`,
  );
}
