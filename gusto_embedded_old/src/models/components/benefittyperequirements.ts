/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DefaultValue = {
  value?: string | undefined;
  type?: string | undefined;
};

/**
 * The amount to be deducted, per pay period, from the employee's pay.
 */
export type EmployeeDeduction = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  defaultValue?: DefaultValue | undefined;
  choices?: Array<string> | undefined;
};

export type BenefitTypeRequirementsDefaultValue = {
  value?: string | undefined;
  type?: string | undefined;
};

/**
 * An object representing the type and value of the company contribution.
 */
export type BenefitTypeRequirementsContribution = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  defaultValue?: BenefitTypeRequirementsDefaultValue | undefined;
  choices?: Array<string> | undefined;
};

export type BenefitTypeRequirementsDeductAsPercentageDefaultValue = {
  value?: string | undefined;
  type?: string | undefined;
};

/**
 * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
 */
export type DeductAsPercentage = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  defaultValue?:
    | BenefitTypeRequirementsDeductAsPercentageDefaultValue
    | undefined;
  choices?: Array<string> | undefined;
};

export type BenefitTypeRequirementsCatchUpDefaultValue = {
  value?: string | undefined;
  type?: string | undefined;
};

/**
 * Whether the employee should use a benefit’s 'catch up' rate. Only Roth 401k and 401k benefits use this value for employees over 50.
 */
export type CatchUp = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  defaultValue?: BenefitTypeRequirementsCatchUpDefaultValue | undefined;
  choices?: Array<string> | undefined;
};

export type BenefitTypeRequirementsLimitOptionDefaultValue = {
  value?: string | undefined;
  type?: string | undefined;
};

/**
 * Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either 'Family' or 'Individual'. For a Dependent Care FSA benefit, the limit option should be either 'Joint Filing or Single' or 'Married and Filing Separately'.
 */
export type LimitOption = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  defaultValue?: BenefitTypeRequirementsLimitOptionDefaultValue | undefined;
  choices?: Array<string> | undefined;
};

export type BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue =
  {
    value?: string | undefined;
    type?: string | undefined;
  };

/**
 * The maximum company contribution amount per year. A null value signifies no limit.
 */
export type CompanyContributionAnnualMaximum = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  defaultValue?:
    | BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue
    | undefined;
  choices?: Array<string> | undefined;
};

export type BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue = {
  value?: string | undefined;
  type?: string | undefined;
};

/**
 * The coverage amount as a multiple of the employee's salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
 */
export type CoverageSalaryMultiplier = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  defaultValue?:
    | BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue
    | undefined;
  choices?: Array<string> | undefined;
};

export type BenefitTypeRequirementsCoverageAmountDefaultValue = {
  value?: string | undefined;
  type?: string | undefined;
};

/**
 * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
 */
export type CoverageAmount = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  defaultValue?: BenefitTypeRequirementsCoverageAmountDefaultValue | undefined;
  choices?: Array<string> | undefined;
};

/**
 * Benefit type requirements response
 */
export type BenefitTypeRequirements = {
  /**
   * The amount to be deducted, per pay period, from the employee's pay.
   */
  employeeDeduction?: EmployeeDeduction | undefined;
  /**
   * An object representing the type and value of the company contribution.
   */
  contribution?: BenefitTypeRequirementsContribution | undefined;
  /**
   * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
   */
  deductAsPercentage?: DeductAsPercentage | undefined;
  /**
   * Whether the employee should use a benefit’s 'catch up' rate. Only Roth 401k and 401k benefits use this value for employees over 50.
   */
  catchUp?: CatchUp | undefined;
  /**
   * Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either 'Family' or 'Individual'. For a Dependent Care FSA benefit, the limit option should be either 'Joint Filing or Single' or 'Married and Filing Separately'.
   */
  limitOption?: LimitOption | undefined;
  /**
   * The maximum company contribution amount per year. A null value signifies no limit.
   */
  companyContributionAnnualMaximum?:
    | CompanyContributionAnnualMaximum
    | undefined;
  /**
   * The coverage amount as a multiple of the employee's salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
   */
  coverageSalaryMultiplier?: CoverageSalaryMultiplier | undefined;
  /**
   * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
   */
  coverageAmount?: CoverageAmount | undefined;
};

/** @internal */
export const DefaultValue$inboundSchema: z.ZodType<
  DefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type DefaultValue$Outbound = {
  value?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const DefaultValue$outboundSchema: z.ZodType<
  DefaultValue$Outbound,
  z.ZodTypeDef,
  DefaultValue
> = z.object({
  value: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DefaultValue$ {
  /** @deprecated use `DefaultValue$inboundSchema` instead. */
  export const inboundSchema = DefaultValue$inboundSchema;
  /** @deprecated use `DefaultValue$outboundSchema` instead. */
  export const outboundSchema = DefaultValue$outboundSchema;
  /** @deprecated use `DefaultValue$Outbound` instead. */
  export type Outbound = DefaultValue$Outbound;
}

export function defaultValueToJSON(defaultValue: DefaultValue): string {
  return JSON.stringify(DefaultValue$outboundSchema.parse(defaultValue));
}

export function defaultValueFromJSON(
  jsonString: string,
): SafeParseResult<DefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DefaultValue' from JSON`,
  );
}

/** @internal */
export const EmployeeDeduction$inboundSchema: z.ZodType<
  EmployeeDeduction,
  z.ZodTypeDef,
  unknown
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  default_value: z.lazy(() => DefaultValue$inboundSchema).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "default_value": "defaultValue",
  });
});

/** @internal */
export type EmployeeDeduction$Outbound = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  default_value?: DefaultValue$Outbound | undefined;
  choices?: Array<string> | undefined;
};

/** @internal */
export const EmployeeDeduction$outboundSchema: z.ZodType<
  EmployeeDeduction$Outbound,
  z.ZodTypeDef,
  EmployeeDeduction
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  defaultValue: z.lazy(() => DefaultValue$outboundSchema).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EmployeeDeduction$ {
  /** @deprecated use `EmployeeDeduction$inboundSchema` instead. */
  export const inboundSchema = EmployeeDeduction$inboundSchema;
  /** @deprecated use `EmployeeDeduction$outboundSchema` instead. */
  export const outboundSchema = EmployeeDeduction$outboundSchema;
  /** @deprecated use `EmployeeDeduction$Outbound` instead. */
  export type Outbound = EmployeeDeduction$Outbound;
}

export function employeeDeductionToJSON(
  employeeDeduction: EmployeeDeduction,
): string {
  return JSON.stringify(
    EmployeeDeduction$outboundSchema.parse(employeeDeduction),
  );
}

export function employeeDeductionFromJSON(
  jsonString: string,
): SafeParseResult<EmployeeDeduction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EmployeeDeduction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EmployeeDeduction' from JSON`,
  );
}

/** @internal */
export const BenefitTypeRequirementsDefaultValue$inboundSchema: z.ZodType<
  BenefitTypeRequirementsDefaultValue,
  z.ZodTypeDef,
  unknown
> = z.object({
  value: z.string().optional(),
  type: z.string().optional(),
});

/** @internal */
export type BenefitTypeRequirementsDefaultValue$Outbound = {
  value?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const BenefitTypeRequirementsDefaultValue$outboundSchema: z.ZodType<
  BenefitTypeRequirementsDefaultValue$Outbound,
  z.ZodTypeDef,
  BenefitTypeRequirementsDefaultValue
> = z.object({
  value: z.string().optional(),
  type: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeRequirementsDefaultValue$ {
  /** @deprecated use `BenefitTypeRequirementsDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    BenefitTypeRequirementsDefaultValue$inboundSchema;
  /** @deprecated use `BenefitTypeRequirementsDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    BenefitTypeRequirementsDefaultValue$outboundSchema;
  /** @deprecated use `BenefitTypeRequirementsDefaultValue$Outbound` instead. */
  export type Outbound = BenefitTypeRequirementsDefaultValue$Outbound;
}

export function benefitTypeRequirementsDefaultValueToJSON(
  benefitTypeRequirementsDefaultValue: BenefitTypeRequirementsDefaultValue,
): string {
  return JSON.stringify(
    BenefitTypeRequirementsDefaultValue$outboundSchema.parse(
      benefitTypeRequirementsDefaultValue,
    ),
  );
}

export function benefitTypeRequirementsDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<BenefitTypeRequirementsDefaultValue, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitTypeRequirementsDefaultValue$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitTypeRequirementsDefaultValue' from JSON`,
  );
}

/** @internal */
export const BenefitTypeRequirementsContribution$inboundSchema: z.ZodType<
  BenefitTypeRequirementsContribution,
  z.ZodTypeDef,
  unknown
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  default_value: z.lazy(() => BenefitTypeRequirementsDefaultValue$inboundSchema)
    .optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "default_value": "defaultValue",
  });
});

/** @internal */
export type BenefitTypeRequirementsContribution$Outbound = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  default_value?: BenefitTypeRequirementsDefaultValue$Outbound | undefined;
  choices?: Array<string> | undefined;
};

/** @internal */
export const BenefitTypeRequirementsContribution$outboundSchema: z.ZodType<
  BenefitTypeRequirementsContribution$Outbound,
  z.ZodTypeDef,
  BenefitTypeRequirementsContribution
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  defaultValue: z.lazy(() => BenefitTypeRequirementsDefaultValue$outboundSchema)
    .optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeRequirementsContribution$ {
  /** @deprecated use `BenefitTypeRequirementsContribution$inboundSchema` instead. */
  export const inboundSchema =
    BenefitTypeRequirementsContribution$inboundSchema;
  /** @deprecated use `BenefitTypeRequirementsContribution$outboundSchema` instead. */
  export const outboundSchema =
    BenefitTypeRequirementsContribution$outboundSchema;
  /** @deprecated use `BenefitTypeRequirementsContribution$Outbound` instead. */
  export type Outbound = BenefitTypeRequirementsContribution$Outbound;
}

export function benefitTypeRequirementsContributionToJSON(
  benefitTypeRequirementsContribution: BenefitTypeRequirementsContribution,
): string {
  return JSON.stringify(
    BenefitTypeRequirementsContribution$outboundSchema.parse(
      benefitTypeRequirementsContribution,
    ),
  );
}

export function benefitTypeRequirementsContributionFromJSON(
  jsonString: string,
): SafeParseResult<BenefitTypeRequirementsContribution, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitTypeRequirementsContribution$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitTypeRequirementsContribution' from JSON`,
  );
}

/** @internal */
export const BenefitTypeRequirementsDeductAsPercentageDefaultValue$inboundSchema:
  z.ZodType<
    BenefitTypeRequirementsDeductAsPercentageDefaultValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type BenefitTypeRequirementsDeductAsPercentageDefaultValue$Outbound = {
  value?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const BenefitTypeRequirementsDeductAsPercentageDefaultValue$outboundSchema:
  z.ZodType<
    BenefitTypeRequirementsDeductAsPercentageDefaultValue$Outbound,
    z.ZodTypeDef,
    BenefitTypeRequirementsDeductAsPercentageDefaultValue
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeRequirementsDeductAsPercentageDefaultValue$ {
  /** @deprecated use `BenefitTypeRequirementsDeductAsPercentageDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    BenefitTypeRequirementsDeductAsPercentageDefaultValue$inboundSchema;
  /** @deprecated use `BenefitTypeRequirementsDeductAsPercentageDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    BenefitTypeRequirementsDeductAsPercentageDefaultValue$outboundSchema;
  /** @deprecated use `BenefitTypeRequirementsDeductAsPercentageDefaultValue$Outbound` instead. */
  export type Outbound =
    BenefitTypeRequirementsDeductAsPercentageDefaultValue$Outbound;
}

export function benefitTypeRequirementsDeductAsPercentageDefaultValueToJSON(
  benefitTypeRequirementsDeductAsPercentageDefaultValue:
    BenefitTypeRequirementsDeductAsPercentageDefaultValue,
): string {
  return JSON.stringify(
    BenefitTypeRequirementsDeductAsPercentageDefaultValue$outboundSchema.parse(
      benefitTypeRequirementsDeductAsPercentageDefaultValue,
    ),
  );
}

export function benefitTypeRequirementsDeductAsPercentageDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<
  BenefitTypeRequirementsDeductAsPercentageDefaultValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitTypeRequirementsDeductAsPercentageDefaultValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BenefitTypeRequirementsDeductAsPercentageDefaultValue' from JSON`,
  );
}

/** @internal */
export const DeductAsPercentage$inboundSchema: z.ZodType<
  DeductAsPercentage,
  z.ZodTypeDef,
  unknown
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  default_value: z.lazy(() =>
    BenefitTypeRequirementsDeductAsPercentageDefaultValue$inboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "default_value": "defaultValue",
  });
});

/** @internal */
export type DeductAsPercentage$Outbound = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  default_value?:
    | BenefitTypeRequirementsDeductAsPercentageDefaultValue$Outbound
    | undefined;
  choices?: Array<string> | undefined;
};

/** @internal */
export const DeductAsPercentage$outboundSchema: z.ZodType<
  DeductAsPercentage$Outbound,
  z.ZodTypeDef,
  DeductAsPercentage
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  defaultValue: z.lazy(() =>
    BenefitTypeRequirementsDeductAsPercentageDefaultValue$outboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeductAsPercentage$ {
  /** @deprecated use `DeductAsPercentage$inboundSchema` instead. */
  export const inboundSchema = DeductAsPercentage$inboundSchema;
  /** @deprecated use `DeductAsPercentage$outboundSchema` instead. */
  export const outboundSchema = DeductAsPercentage$outboundSchema;
  /** @deprecated use `DeductAsPercentage$Outbound` instead. */
  export type Outbound = DeductAsPercentage$Outbound;
}

export function deductAsPercentageToJSON(
  deductAsPercentage: DeductAsPercentage,
): string {
  return JSON.stringify(
    DeductAsPercentage$outboundSchema.parse(deductAsPercentage),
  );
}

export function deductAsPercentageFromJSON(
  jsonString: string,
): SafeParseResult<DeductAsPercentage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeductAsPercentage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeductAsPercentage' from JSON`,
  );
}

/** @internal */
export const BenefitTypeRequirementsCatchUpDefaultValue$inboundSchema:
  z.ZodType<BenefitTypeRequirementsCatchUpDefaultValue, z.ZodTypeDef, unknown> =
    z.object({
      value: z.string().optional(),
      type: z.string().optional(),
    });

/** @internal */
export type BenefitTypeRequirementsCatchUpDefaultValue$Outbound = {
  value?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const BenefitTypeRequirementsCatchUpDefaultValue$outboundSchema:
  z.ZodType<
    BenefitTypeRequirementsCatchUpDefaultValue$Outbound,
    z.ZodTypeDef,
    BenefitTypeRequirementsCatchUpDefaultValue
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeRequirementsCatchUpDefaultValue$ {
  /** @deprecated use `BenefitTypeRequirementsCatchUpDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    BenefitTypeRequirementsCatchUpDefaultValue$inboundSchema;
  /** @deprecated use `BenefitTypeRequirementsCatchUpDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    BenefitTypeRequirementsCatchUpDefaultValue$outboundSchema;
  /** @deprecated use `BenefitTypeRequirementsCatchUpDefaultValue$Outbound` instead. */
  export type Outbound = BenefitTypeRequirementsCatchUpDefaultValue$Outbound;
}

export function benefitTypeRequirementsCatchUpDefaultValueToJSON(
  benefitTypeRequirementsCatchUpDefaultValue:
    BenefitTypeRequirementsCatchUpDefaultValue,
): string {
  return JSON.stringify(
    BenefitTypeRequirementsCatchUpDefaultValue$outboundSchema.parse(
      benefitTypeRequirementsCatchUpDefaultValue,
    ),
  );
}

export function benefitTypeRequirementsCatchUpDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<
  BenefitTypeRequirementsCatchUpDefaultValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitTypeRequirementsCatchUpDefaultValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BenefitTypeRequirementsCatchUpDefaultValue' from JSON`,
  );
}

/** @internal */
export const CatchUp$inboundSchema: z.ZodType<CatchUp, z.ZodTypeDef, unknown> =
  z.object({
    required: z.boolean().optional(),
    editable: z.boolean().optional(),
    default_value: z.lazy(() =>
      BenefitTypeRequirementsCatchUpDefaultValue$inboundSchema
    ).optional(),
    choices: z.array(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "default_value": "defaultValue",
    });
  });

/** @internal */
export type CatchUp$Outbound = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  default_value?:
    | BenefitTypeRequirementsCatchUpDefaultValue$Outbound
    | undefined;
  choices?: Array<string> | undefined;
};

/** @internal */
export const CatchUp$outboundSchema: z.ZodType<
  CatchUp$Outbound,
  z.ZodTypeDef,
  CatchUp
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  defaultValue: z.lazy(() =>
    BenefitTypeRequirementsCatchUpDefaultValue$outboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CatchUp$ {
  /** @deprecated use `CatchUp$inboundSchema` instead. */
  export const inboundSchema = CatchUp$inboundSchema;
  /** @deprecated use `CatchUp$outboundSchema` instead. */
  export const outboundSchema = CatchUp$outboundSchema;
  /** @deprecated use `CatchUp$Outbound` instead. */
  export type Outbound = CatchUp$Outbound;
}

export function catchUpToJSON(catchUp: CatchUp): string {
  return JSON.stringify(CatchUp$outboundSchema.parse(catchUp));
}

export function catchUpFromJSON(
  jsonString: string,
): SafeParseResult<CatchUp, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CatchUp$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CatchUp' from JSON`,
  );
}

/** @internal */
export const BenefitTypeRequirementsLimitOptionDefaultValue$inboundSchema:
  z.ZodType<
    BenefitTypeRequirementsLimitOptionDefaultValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type BenefitTypeRequirementsLimitOptionDefaultValue$Outbound = {
  value?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const BenefitTypeRequirementsLimitOptionDefaultValue$outboundSchema:
  z.ZodType<
    BenefitTypeRequirementsLimitOptionDefaultValue$Outbound,
    z.ZodTypeDef,
    BenefitTypeRequirementsLimitOptionDefaultValue
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeRequirementsLimitOptionDefaultValue$ {
  /** @deprecated use `BenefitTypeRequirementsLimitOptionDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    BenefitTypeRequirementsLimitOptionDefaultValue$inboundSchema;
  /** @deprecated use `BenefitTypeRequirementsLimitOptionDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    BenefitTypeRequirementsLimitOptionDefaultValue$outboundSchema;
  /** @deprecated use `BenefitTypeRequirementsLimitOptionDefaultValue$Outbound` instead. */
  export type Outbound =
    BenefitTypeRequirementsLimitOptionDefaultValue$Outbound;
}

export function benefitTypeRequirementsLimitOptionDefaultValueToJSON(
  benefitTypeRequirementsLimitOptionDefaultValue:
    BenefitTypeRequirementsLimitOptionDefaultValue,
): string {
  return JSON.stringify(
    BenefitTypeRequirementsLimitOptionDefaultValue$outboundSchema.parse(
      benefitTypeRequirementsLimitOptionDefaultValue,
    ),
  );
}

export function benefitTypeRequirementsLimitOptionDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<
  BenefitTypeRequirementsLimitOptionDefaultValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitTypeRequirementsLimitOptionDefaultValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BenefitTypeRequirementsLimitOptionDefaultValue' from JSON`,
  );
}

/** @internal */
export const LimitOption$inboundSchema: z.ZodType<
  LimitOption,
  z.ZodTypeDef,
  unknown
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  default_value: z.lazy(() =>
    BenefitTypeRequirementsLimitOptionDefaultValue$inboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "default_value": "defaultValue",
  });
});

/** @internal */
export type LimitOption$Outbound = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  default_value?:
    | BenefitTypeRequirementsLimitOptionDefaultValue$Outbound
    | undefined;
  choices?: Array<string> | undefined;
};

/** @internal */
export const LimitOption$outboundSchema: z.ZodType<
  LimitOption$Outbound,
  z.ZodTypeDef,
  LimitOption
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  defaultValue: z.lazy(() =>
    BenefitTypeRequirementsLimitOptionDefaultValue$outboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LimitOption$ {
  /** @deprecated use `LimitOption$inboundSchema` instead. */
  export const inboundSchema = LimitOption$inboundSchema;
  /** @deprecated use `LimitOption$outboundSchema` instead. */
  export const outboundSchema = LimitOption$outboundSchema;
  /** @deprecated use `LimitOption$Outbound` instead. */
  export type Outbound = LimitOption$Outbound;
}

export function limitOptionToJSON(limitOption: LimitOption): string {
  return JSON.stringify(LimitOption$outboundSchema.parse(limitOption));
}

export function limitOptionFromJSON(
  jsonString: string,
): SafeParseResult<LimitOption, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LimitOption$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LimitOption' from JSON`,
  );
}

/** @internal */
export const BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$inboundSchema:
  z.ZodType<
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$Outbound =
  {
    value?: string | undefined;
    type?: string | undefined;
  };

/** @internal */
export const BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$outboundSchema:
  z.ZodType<
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$Outbound,
    z.ZodTypeDef,
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$ {
  /** @deprecated use `BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$inboundSchema;
  /** @deprecated use `BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$outboundSchema;
  /** @deprecated use `BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$Outbound` instead. */
  export type Outbound =
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$Outbound;
}

export function benefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValueToJSON(
  benefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue:
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue,
): string {
  return JSON.stringify(
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$outboundSchema
      .parse(
        benefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue,
      ),
  );
}

export function benefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<
  BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue' from JSON`,
  );
}

/** @internal */
export const CompanyContributionAnnualMaximum$inboundSchema: z.ZodType<
  CompanyContributionAnnualMaximum,
  z.ZodTypeDef,
  unknown
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  default_value: z.lazy(() =>
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$inboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "default_value": "defaultValue",
  });
});

/** @internal */
export type CompanyContributionAnnualMaximum$Outbound = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  default_value?:
    | BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$Outbound
    | undefined;
  choices?: Array<string> | undefined;
};

/** @internal */
export const CompanyContributionAnnualMaximum$outboundSchema: z.ZodType<
  CompanyContributionAnnualMaximum$Outbound,
  z.ZodTypeDef,
  CompanyContributionAnnualMaximum
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  defaultValue: z.lazy(() =>
    BenefitTypeRequirementsCompanyContributionAnnualMaximumDefaultValue$outboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompanyContributionAnnualMaximum$ {
  /** @deprecated use `CompanyContributionAnnualMaximum$inboundSchema` instead. */
  export const inboundSchema = CompanyContributionAnnualMaximum$inboundSchema;
  /** @deprecated use `CompanyContributionAnnualMaximum$outboundSchema` instead. */
  export const outboundSchema = CompanyContributionAnnualMaximum$outboundSchema;
  /** @deprecated use `CompanyContributionAnnualMaximum$Outbound` instead. */
  export type Outbound = CompanyContributionAnnualMaximum$Outbound;
}

export function companyContributionAnnualMaximumToJSON(
  companyContributionAnnualMaximum: CompanyContributionAnnualMaximum,
): string {
  return JSON.stringify(
    CompanyContributionAnnualMaximum$outboundSchema.parse(
      companyContributionAnnualMaximum,
    ),
  );
}

export function companyContributionAnnualMaximumFromJSON(
  jsonString: string,
): SafeParseResult<CompanyContributionAnnualMaximum, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CompanyContributionAnnualMaximum$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CompanyContributionAnnualMaximum' from JSON`,
  );
}

/** @internal */
export const BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$inboundSchema:
  z.ZodType<
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$Outbound =
  {
    value?: string | undefined;
    type?: string | undefined;
  };

/** @internal */
export const BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$outboundSchema:
  z.ZodType<
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$Outbound,
    z.ZodTypeDef,
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$ {
  /** @deprecated use `BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$inboundSchema;
  /** @deprecated use `BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$outboundSchema;
  /** @deprecated use `BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$Outbound` instead. */
  export type Outbound =
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$Outbound;
}

export function benefitTypeRequirementsCoverageSalaryMultiplierDefaultValueToJSON(
  benefitTypeRequirementsCoverageSalaryMultiplierDefaultValue:
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue,
): string {
  return JSON.stringify(
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$outboundSchema
      .parse(benefitTypeRequirementsCoverageSalaryMultiplierDefaultValue),
  );
}

export function benefitTypeRequirementsCoverageSalaryMultiplierDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<
  BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue' from JSON`,
  );
}

/** @internal */
export const CoverageSalaryMultiplier$inboundSchema: z.ZodType<
  CoverageSalaryMultiplier,
  z.ZodTypeDef,
  unknown
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  default_value: z.lazy(() =>
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$inboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "default_value": "defaultValue",
  });
});

/** @internal */
export type CoverageSalaryMultiplier$Outbound = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  default_value?:
    | BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$Outbound
    | undefined;
  choices?: Array<string> | undefined;
};

/** @internal */
export const CoverageSalaryMultiplier$outboundSchema: z.ZodType<
  CoverageSalaryMultiplier$Outbound,
  z.ZodTypeDef,
  CoverageSalaryMultiplier
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  defaultValue: z.lazy(() =>
    BenefitTypeRequirementsCoverageSalaryMultiplierDefaultValue$outboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CoverageSalaryMultiplier$ {
  /** @deprecated use `CoverageSalaryMultiplier$inboundSchema` instead. */
  export const inboundSchema = CoverageSalaryMultiplier$inboundSchema;
  /** @deprecated use `CoverageSalaryMultiplier$outboundSchema` instead. */
  export const outboundSchema = CoverageSalaryMultiplier$outboundSchema;
  /** @deprecated use `CoverageSalaryMultiplier$Outbound` instead. */
  export type Outbound = CoverageSalaryMultiplier$Outbound;
}

export function coverageSalaryMultiplierToJSON(
  coverageSalaryMultiplier: CoverageSalaryMultiplier,
): string {
  return JSON.stringify(
    CoverageSalaryMultiplier$outboundSchema.parse(coverageSalaryMultiplier),
  );
}

export function coverageSalaryMultiplierFromJSON(
  jsonString: string,
): SafeParseResult<CoverageSalaryMultiplier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CoverageSalaryMultiplier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CoverageSalaryMultiplier' from JSON`,
  );
}

/** @internal */
export const BenefitTypeRequirementsCoverageAmountDefaultValue$inboundSchema:
  z.ZodType<
    BenefitTypeRequirementsCoverageAmountDefaultValue,
    z.ZodTypeDef,
    unknown
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/** @internal */
export type BenefitTypeRequirementsCoverageAmountDefaultValue$Outbound = {
  value?: string | undefined;
  type?: string | undefined;
};

/** @internal */
export const BenefitTypeRequirementsCoverageAmountDefaultValue$outboundSchema:
  z.ZodType<
    BenefitTypeRequirementsCoverageAmountDefaultValue$Outbound,
    z.ZodTypeDef,
    BenefitTypeRequirementsCoverageAmountDefaultValue
  > = z.object({
    value: z.string().optional(),
    type: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeRequirementsCoverageAmountDefaultValue$ {
  /** @deprecated use `BenefitTypeRequirementsCoverageAmountDefaultValue$inboundSchema` instead. */
  export const inboundSchema =
    BenefitTypeRequirementsCoverageAmountDefaultValue$inboundSchema;
  /** @deprecated use `BenefitTypeRequirementsCoverageAmountDefaultValue$outboundSchema` instead. */
  export const outboundSchema =
    BenefitTypeRequirementsCoverageAmountDefaultValue$outboundSchema;
  /** @deprecated use `BenefitTypeRequirementsCoverageAmountDefaultValue$Outbound` instead. */
  export type Outbound =
    BenefitTypeRequirementsCoverageAmountDefaultValue$Outbound;
}

export function benefitTypeRequirementsCoverageAmountDefaultValueToJSON(
  benefitTypeRequirementsCoverageAmountDefaultValue:
    BenefitTypeRequirementsCoverageAmountDefaultValue,
): string {
  return JSON.stringify(
    BenefitTypeRequirementsCoverageAmountDefaultValue$outboundSchema.parse(
      benefitTypeRequirementsCoverageAmountDefaultValue,
    ),
  );
}

export function benefitTypeRequirementsCoverageAmountDefaultValueFromJSON(
  jsonString: string,
): SafeParseResult<
  BenefitTypeRequirementsCoverageAmountDefaultValue,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      BenefitTypeRequirementsCoverageAmountDefaultValue$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'BenefitTypeRequirementsCoverageAmountDefaultValue' from JSON`,
  );
}

/** @internal */
export const CoverageAmount$inboundSchema: z.ZodType<
  CoverageAmount,
  z.ZodTypeDef,
  unknown
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  default_value: z.lazy(() =>
    BenefitTypeRequirementsCoverageAmountDefaultValue$inboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "default_value": "defaultValue",
  });
});

/** @internal */
export type CoverageAmount$Outbound = {
  required?: boolean | undefined;
  editable?: boolean | undefined;
  default_value?:
    | BenefitTypeRequirementsCoverageAmountDefaultValue$Outbound
    | undefined;
  choices?: Array<string> | undefined;
};

/** @internal */
export const CoverageAmount$outboundSchema: z.ZodType<
  CoverageAmount$Outbound,
  z.ZodTypeDef,
  CoverageAmount
> = z.object({
  required: z.boolean().optional(),
  editable: z.boolean().optional(),
  defaultValue: z.lazy(() =>
    BenefitTypeRequirementsCoverageAmountDefaultValue$outboundSchema
  ).optional(),
  choices: z.array(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    defaultValue: "default_value",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CoverageAmount$ {
  /** @deprecated use `CoverageAmount$inboundSchema` instead. */
  export const inboundSchema = CoverageAmount$inboundSchema;
  /** @deprecated use `CoverageAmount$outboundSchema` instead. */
  export const outboundSchema = CoverageAmount$outboundSchema;
  /** @deprecated use `CoverageAmount$Outbound` instead. */
  export type Outbound = CoverageAmount$Outbound;
}

export function coverageAmountToJSON(coverageAmount: CoverageAmount): string {
  return JSON.stringify(CoverageAmount$outboundSchema.parse(coverageAmount));
}

export function coverageAmountFromJSON(
  jsonString: string,
): SafeParseResult<CoverageAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CoverageAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CoverageAmount' from JSON`,
  );
}

/** @internal */
export const BenefitTypeRequirements$inboundSchema: z.ZodType<
  BenefitTypeRequirements,
  z.ZodTypeDef,
  unknown
> = z.object({
  employee_deduction: z.lazy(() => EmployeeDeduction$inboundSchema).optional(),
  contribution: z.lazy(() => BenefitTypeRequirementsContribution$inboundSchema)
    .optional(),
  deduct_as_percentage: z.lazy(() => DeductAsPercentage$inboundSchema)
    .optional(),
  catch_up: z.lazy(() => CatchUp$inboundSchema).optional(),
  limit_option: z.lazy(() => LimitOption$inboundSchema).optional(),
  company_contribution_annual_maximum: z.lazy(() =>
    CompanyContributionAnnualMaximum$inboundSchema
  ).optional(),
  coverage_salary_multiplier: z.lazy(() =>
    CoverageSalaryMultiplier$inboundSchema
  ).optional(),
  coverage_amount: z.lazy(() => CoverageAmount$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "employee_deduction": "employeeDeduction",
    "deduct_as_percentage": "deductAsPercentage",
    "catch_up": "catchUp",
    "limit_option": "limitOption",
    "company_contribution_annual_maximum": "companyContributionAnnualMaximum",
    "coverage_salary_multiplier": "coverageSalaryMultiplier",
    "coverage_amount": "coverageAmount",
  });
});

/** @internal */
export type BenefitTypeRequirements$Outbound = {
  employee_deduction?: EmployeeDeduction$Outbound | undefined;
  contribution?: BenefitTypeRequirementsContribution$Outbound | undefined;
  deduct_as_percentage?: DeductAsPercentage$Outbound | undefined;
  catch_up?: CatchUp$Outbound | undefined;
  limit_option?: LimitOption$Outbound | undefined;
  company_contribution_annual_maximum?:
    | CompanyContributionAnnualMaximum$Outbound
    | undefined;
  coverage_salary_multiplier?: CoverageSalaryMultiplier$Outbound | undefined;
  coverage_amount?: CoverageAmount$Outbound | undefined;
};

/** @internal */
export const BenefitTypeRequirements$outboundSchema: z.ZodType<
  BenefitTypeRequirements$Outbound,
  z.ZodTypeDef,
  BenefitTypeRequirements
> = z.object({
  employeeDeduction: z.lazy(() => EmployeeDeduction$outboundSchema).optional(),
  contribution: z.lazy(() => BenefitTypeRequirementsContribution$outboundSchema)
    .optional(),
  deductAsPercentage: z.lazy(() => DeductAsPercentage$outboundSchema)
    .optional(),
  catchUp: z.lazy(() => CatchUp$outboundSchema).optional(),
  limitOption: z.lazy(() => LimitOption$outboundSchema).optional(),
  companyContributionAnnualMaximum: z.lazy(() =>
    CompanyContributionAnnualMaximum$outboundSchema
  ).optional(),
  coverageSalaryMultiplier: z.lazy(() =>
    CoverageSalaryMultiplier$outboundSchema
  ).optional(),
  coverageAmount: z.lazy(() => CoverageAmount$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    employeeDeduction: "employee_deduction",
    deductAsPercentage: "deduct_as_percentage",
    catchUp: "catch_up",
    limitOption: "limit_option",
    companyContributionAnnualMaximum: "company_contribution_annual_maximum",
    coverageSalaryMultiplier: "coverage_salary_multiplier",
    coverageAmount: "coverage_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BenefitTypeRequirements$ {
  /** @deprecated use `BenefitTypeRequirements$inboundSchema` instead. */
  export const inboundSchema = BenefitTypeRequirements$inboundSchema;
  /** @deprecated use `BenefitTypeRequirements$outboundSchema` instead. */
  export const outboundSchema = BenefitTypeRequirements$outboundSchema;
  /** @deprecated use `BenefitTypeRequirements$Outbound` instead. */
  export type Outbound = BenefitTypeRequirements$Outbound;
}

export function benefitTypeRequirementsToJSON(
  benefitTypeRequirements: BenefitTypeRequirements,
): string {
  return JSON.stringify(
    BenefitTypeRequirements$outboundSchema.parse(benefitTypeRequirements),
  );
}

export function benefitTypeRequirementsFromJSON(
  jsonString: string,
): SafeParseResult<BenefitTypeRequirements, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BenefitTypeRequirements$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BenefitTypeRequirements' from JSON`,
  );
}
