/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Representation of a bank account item
 */
export type PaymentMethodBankAccount = {
  /**
   * The bank account ID
   */
  uuid: string;
  /**
   * The bank account name
   */
  name?: string | undefined;
  /**
   * Masked bank account number
   */
  hiddenAccountNumber?: string | undefined;
  /**
   * The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
   */
  priority?: number | undefined;
  /**
   * The cents amount allocated for each payment split
   */
  splitAmount?: number | null | undefined;
};

/** @internal */
export const PaymentMethodBankAccount$inboundSchema: z.ZodType<
  PaymentMethodBankAccount,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string(),
  name: z.string().optional(),
  hidden_account_number: z.string().optional(),
  priority: z.number().int().optional(),
  split_amount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "hidden_account_number": "hiddenAccountNumber",
    "split_amount": "splitAmount",
  });
});

/** @internal */
export type PaymentMethodBankAccount$Outbound = {
  uuid: string;
  name?: string | undefined;
  hidden_account_number?: string | undefined;
  priority?: number | undefined;
  split_amount?: number | null | undefined;
};

/** @internal */
export const PaymentMethodBankAccount$outboundSchema: z.ZodType<
  PaymentMethodBankAccount$Outbound,
  z.ZodTypeDef,
  PaymentMethodBankAccount
> = z.object({
  uuid: z.string(),
  name: z.string().optional(),
  hiddenAccountNumber: z.string().optional(),
  priority: z.number().int().optional(),
  splitAmount: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    hiddenAccountNumber: "hidden_account_number",
    splitAmount: "split_amount",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaymentMethodBankAccount$ {
  /** @deprecated use `PaymentMethodBankAccount$inboundSchema` instead. */
  export const inboundSchema = PaymentMethodBankAccount$inboundSchema;
  /** @deprecated use `PaymentMethodBankAccount$outboundSchema` instead. */
  export const outboundSchema = PaymentMethodBankAccount$outboundSchema;
  /** @deprecated use `PaymentMethodBankAccount$Outbound` instead. */
  export type Outbound = PaymentMethodBankAccount$Outbound;
}

export function paymentMethodBankAccountToJSON(
  paymentMethodBankAccount: PaymentMethodBankAccount,
): string {
  return JSON.stringify(
    PaymentMethodBankAccount$outboundSchema.parse(paymentMethodBankAccount),
  );
}

export function paymentMethodBankAccountFromJSON(
  jsonString: string,
): SafeParseResult<PaymentMethodBankAccount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaymentMethodBankAccount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaymentMethodBankAccount' from JSON`,
  );
}
