/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PaymentSpeedParam,
  PaymentSpeedParam$inboundSchema,
  PaymentSpeedParam$outboundSchema,
} from "./paymentspeedparam.js";

export type FastPaymentLimitRequiredBody = {
  /**
   * Fast payment limit. This limit is an aggregate of all fast payrolls amount. This limit is only relevant when payment speed is 1-day or 2-day.
   */
  fastPaymentLimit: string;
  /**
   * Gusto Embedded supports three payment speeds (1-day, 2-day, and 4-day). For next-day payments, funds are deposited in your team's bank account by the end of the next business day. Most people will see the funds arrive the next afternoon, but payments may arrive as late as the end of the business day.
   */
  paymentSpeed?: PaymentSpeedParam | undefined;
};

/** @internal */
export const FastPaymentLimitRequiredBody$inboundSchema: z.ZodType<
  FastPaymentLimitRequiredBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  fast_payment_limit: z.string(),
  payment_speed: PaymentSpeedParam$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "fast_payment_limit": "fastPaymentLimit",
    "payment_speed": "paymentSpeed",
  });
});

/** @internal */
export type FastPaymentLimitRequiredBody$Outbound = {
  fast_payment_limit: string;
  payment_speed?: string | undefined;
};

/** @internal */
export const FastPaymentLimitRequiredBody$outboundSchema: z.ZodType<
  FastPaymentLimitRequiredBody$Outbound,
  z.ZodTypeDef,
  FastPaymentLimitRequiredBody
> = z.object({
  fastPaymentLimit: z.string(),
  paymentSpeed: PaymentSpeedParam$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    fastPaymentLimit: "fast_payment_limit",
    paymentSpeed: "payment_speed",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FastPaymentLimitRequiredBody$ {
  /** @deprecated use `FastPaymentLimitRequiredBody$inboundSchema` instead. */
  export const inboundSchema = FastPaymentLimitRequiredBody$inboundSchema;
  /** @deprecated use `FastPaymentLimitRequiredBody$outboundSchema` instead. */
  export const outboundSchema = FastPaymentLimitRequiredBody$outboundSchema;
  /** @deprecated use `FastPaymentLimitRequiredBody$Outbound` instead. */
  export type Outbound = FastPaymentLimitRequiredBody$Outbound;
}

export function fastPaymentLimitRequiredBodyToJSON(
  fastPaymentLimitRequiredBody: FastPaymentLimitRequiredBody,
): string {
  return JSON.stringify(
    FastPaymentLimitRequiredBody$outboundSchema.parse(
      fastPaymentLimitRequiredBody,
    ),
  );
}

export function fastPaymentLimitRequiredBodyFromJSON(
  jsonString: string,
): SafeParseResult<FastPaymentLimitRequiredBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FastPaymentLimitRequiredBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FastPaymentLimitRequiredBody' from JSON`,
  );
}
