/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The type of recipient associated with the document (will be `Contractor` for Contractor Documents)
 */
export const DocumentSignedRecipientType = {
  Company: "Company",
  Employee: "Employee",
  Contractor: "Contractor",
} as const;
/**
 * The type of recipient associated with the document (will be `Contractor` for Contractor Documents)
 */
export type DocumentSignedRecipientType = ClosedEnum<
  typeof DocumentSignedRecipientType
>;

export type DocumentSigned = {
  /**
   * The UUID of the document
   */
  uuid?: string | undefined;
  /**
   * The title of the document
   */
  title?: string | undefined;
  /**
   * The type identifier of the document
   */
  name?: string | undefined;
  /**
   * The type of recipient associated with the document (will be `Contractor` for Contractor Documents)
   */
  recipientType?: DocumentSignedRecipientType | undefined;
  /**
   * Unique identifier for the recipient associated with the document
   */
  recipientUuid?: string | undefined;
  /**
   * When the document was signed (will be `null` if unsigned)
   */
  signedAt?: string | null | undefined;
  /**
   * The description of the document
   */
  description?: string | undefined;
  /**
   * A boolean flag that indicates whether the document needs signing or not. Note that this value will change after the document is signed.
   */
  requiresSigning?: boolean | undefined;
  /**
   * If the document is in a draft state
   */
  draft?: boolean | undefined;
  /**
   * The year of this document. This value is nullable and will not be present on all documents.
   */
  year?: number | null | undefined;
  /**
   * The quarter of this document. This value is nullable and will not be present on all documents.
   */
  quarter?: number | null | undefined;
};

/** @internal */
export const DocumentSignedRecipientType$inboundSchema: z.ZodNativeEnum<
  typeof DocumentSignedRecipientType
> = z.nativeEnum(DocumentSignedRecipientType);

/** @internal */
export const DocumentSignedRecipientType$outboundSchema: z.ZodNativeEnum<
  typeof DocumentSignedRecipientType
> = DocumentSignedRecipientType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSignedRecipientType$ {
  /** @deprecated use `DocumentSignedRecipientType$inboundSchema` instead. */
  export const inboundSchema = DocumentSignedRecipientType$inboundSchema;
  /** @deprecated use `DocumentSignedRecipientType$outboundSchema` instead. */
  export const outboundSchema = DocumentSignedRecipientType$outboundSchema;
}

/** @internal */
export const DocumentSigned$inboundSchema: z.ZodType<
  DocumentSigned,
  z.ZodTypeDef,
  unknown
> = z.object({
  uuid: z.string().optional(),
  title: z.string().optional(),
  name: z.string().optional(),
  recipient_type: DocumentSignedRecipientType$inboundSchema.optional(),
  recipient_uuid: z.string().optional(),
  signed_at: z.nullable(z.string()).optional(),
  description: z.string().optional(),
  requires_signing: z.boolean().optional(),
  draft: z.boolean().optional(),
  year: z.nullable(z.number().int()).optional(),
  quarter: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    "recipient_type": "recipientType",
    "recipient_uuid": "recipientUuid",
    "signed_at": "signedAt",
    "requires_signing": "requiresSigning",
  });
});

/** @internal */
export type DocumentSigned$Outbound = {
  uuid?: string | undefined;
  title?: string | undefined;
  name?: string | undefined;
  recipient_type?: string | undefined;
  recipient_uuid?: string | undefined;
  signed_at?: string | null | undefined;
  description?: string | undefined;
  requires_signing?: boolean | undefined;
  draft?: boolean | undefined;
  year?: number | null | undefined;
  quarter?: number | null | undefined;
};

/** @internal */
export const DocumentSigned$outboundSchema: z.ZodType<
  DocumentSigned$Outbound,
  z.ZodTypeDef,
  DocumentSigned
> = z.object({
  uuid: z.string().optional(),
  title: z.string().optional(),
  name: z.string().optional(),
  recipientType: DocumentSignedRecipientType$outboundSchema.optional(),
  recipientUuid: z.string().optional(),
  signedAt: z.nullable(z.string()).optional(),
  description: z.string().optional(),
  requiresSigning: z.boolean().optional(),
  draft: z.boolean().optional(),
  year: z.nullable(z.number().int()).optional(),
  quarter: z.nullable(z.number().int()).optional(),
}).transform((v) => {
  return remap$(v, {
    recipientType: "recipient_type",
    recipientUuid: "recipient_uuid",
    signedAt: "signed_at",
    requiresSigning: "requires_signing",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DocumentSigned$ {
  /** @deprecated use `DocumentSigned$inboundSchema` instead. */
  export const inboundSchema = DocumentSigned$inboundSchema;
  /** @deprecated use `DocumentSigned$outboundSchema` instead. */
  export const outboundSchema = DocumentSigned$outboundSchema;
  /** @deprecated use `DocumentSigned$Outbound` instead. */
  export type Outbound = DocumentSigned$Outbound;
}

export function documentSignedToJSON(documentSigned: DocumentSigned): string {
  return JSON.stringify(DocumentSigned$outboundSchema.parse(documentSigned));
}

export function documentSignedFromJSON(
  jsonString: string,
): SafeParseResult<DocumentSigned, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DocumentSigned$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DocumentSigned' from JSON`,
  );
}
