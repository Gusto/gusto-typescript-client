/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The representation of a flow in Gusto white-label UI.
 */
export type Flow = {
  url?: string | undefined;
};

/** @internal */
export const Flow$inboundSchema: z.ZodType<Flow, z.ZodTypeDef, unknown> = z
  .object({
    url: z.string().optional(),
  });

/** @internal */
export type Flow$Outbound = {
  url?: string | undefined;
};

/** @internal */
export const Flow$outboundSchema: z.ZodType<Flow$Outbound, z.ZodTypeDef, Flow> =
  z.object({
    url: z.string().optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Flow$ {
  /** @deprecated use `Flow$inboundSchema` instead. */
  export const inboundSchema = Flow$inboundSchema;
  /** @deprecated use `Flow$outboundSchema` instead. */
  export const outboundSchema = Flow$outboundSchema;
  /** @deprecated use `Flow$Outbound` instead. */
  export type Outbound = Flow$Outbound;
}

export function flowToJSON(flow: Flow): string {
  return JSON.stringify(Flow$outboundSchema.parse(flow));
}

export function flowFromJSON(
  jsonString: string,
): SafeParseResult<Flow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Flow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Flow' from JSON`,
  );
}
